{
  "name": "lightlink",
  "chain": "ethereum",
  "blockNumber": 20862724,
  "configHash": "0x52832c6440ffe4234cc38e86e439b74c24de4d2cfafcca3e386e694c3c53de1b",
  "version": 14,
  "contracts": [
    {
      "name": "Challenge",
      "address": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "sinceTimestamp": 1717522343,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0x4Fc6a6A2e3864709ae6AdCf29280dA01c95Aa10B",
        "$upgradeCount": 2,
        "chain": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
        "chainOracle": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04",
        "challengeFee": "1500000000000000000",
        "challengePeriod": 172800,
        "challengeReward": "200000000000000000",
        "challengeWindow": 259200,
        "daNamespace": {
          "version": "0x00",
          "id": "0x00000000000000000000000000000000000000000000000000000000"
        },
        "daOracle": "0x0000000000000000000000000000000000000000",
        "defender": "0x514F8211B64f0620349659DeaDB5911a9896E7EC",
        "finalizationSeconds": 432000,
        "isDAChallengeEnabled": false,
        "isHeaderChallengeEnabled": true,
        "isL2HeaderChallengeEnabled": false,
        "maxBundleSize": 42000,
        "owner": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "proxiableUUID": "EXPECT_REVERT",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "Challenge"
    },
    {
      "name": "ChainOracle",
      "address": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "sinceTimestamp": 1717522307,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0x79B3E839333a74137e78b0DaF84FC12512a8c704",
        "$upgradeCount": 1,
        "canonicalStateChain": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
        "daOracle": "0x0000000000000000000000000000000000000000",
        "owner": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "proxiableUUID": "EXPECT_REVERT",
        "rlpReader": "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "ChainOracle"
    },
    {
      "name": "LightLinkMultisig",
      "address": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3ca373F5ecB92ac762f9876f6e773082A4589995"
        },
        {
          "permission": "upgrade",
          "target": "0x624631881655a310adcF0d1336658Cc977609b72"
        },
        {
          "permission": "upgrade",
          "target": "0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9"
        }
      ],
      "sinceTimestamp": 1692154319,
      "values": {
        "$immutable": true,
        "getMemberByIndex": [
          "0xdE2552948aacb82dCa7a04AffbcB1B8e3C97D590",
          "0x67Ad58C203cEB0f39026270D920cc0f29eB4eE91"
        ],
        "getMembers": [
          "0xdE2552948aacb82dCa7a04AffbcB1B8e3C97D590",
          "0x67Ad58C203cEB0f39026270D920cc0f29eB4eE91"
        ],
        "getTransactionCount": 20,
        "multisig": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8"
      },
      "derivedName": "Multisig"
    },
    {
      "name": "LightLinkBridge",
      "address": "0x3ca373F5ecB92ac762f9876f6e773082A4589995",
      "proxyType": "LightLink proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
          "via": []
        }
      ],
      "sinceTimestamp": 1692155207,
      "values": {
        "$admin": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "$implementation": "0x468b89D930ca7974196D7195033600B658011756",
        "bridgeRegistry": "0x624631881655a310adcF0d1336658Cc977609b72",
        "isPaused": false,
        "l2Predicate": "0x7F17A74942c5b22b340688f099c99A79426447e1",
        "l2TokenBytecodeHash": "0xb9ae7ba14d826de669be54f7c79008181b430f21bd3ff90dac8cce1e60ae88a9",
        "proxiableUUID": "EXPECT_REVERT"
      },
      "derivedName": "L1NativeTokenPredicate"
    },
    {
      "name": "L1BridgeRegistry",
      "address": "0x624631881655a310adcF0d1336658Cc977609b72",
      "proxyType": "LightLink proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
          "via": []
        }
      ],
      "sinceTimestamp": 1692154667,
      "values": {
        "$admin": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "$implementation": "0xC48F0e7C3c4E385ae84B4f678A0482E00208cf3E",
        "consensusPowerThreshold": 80,
        "getMultisig": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "getSystemVerifier": "0x0000000000000000000000000000000000000000",
        "getValidators": [
          { "addr": "0x12eCE4AA73ee8ea958bE327daE41Dd785c997118", "power": 40 },
          { "addr": "0x6f933814903561F79137099587737DFB24c6E86D", "power": 20 },
          { "addr": "0xB44C32Dd1ec374224eED43FD827EBE64db16b0df", "power": 20 },
          { "addr": "0xaB0DDC4B1Fc1F24D4F7F67ab87B5dD8e5e0c5AC9", "power": 40 },
          { "addr": "0xc8225cA10F570d4d7aD6cdb6F0bfEb683dc7C938", "power": 40 }
        ],
        "multisig": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "proxiableUUID": "EXPECT_REVERT",
        "systemVerifier": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "L1BridgeRegistry"
    },
    {
      "name": "LightLinkERC20Bridge",
      "address": "0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9",
      "proxyType": "LightLink proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
          "via": []
        }
      ],
      "sinceTimestamp": 1692155531,
      "values": {
        "$admin": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "$implementation": "0xa8372d6FF00d48A25BaA1AF16d6a86C936708f4E",
        "bridgeRegistry": "0x624631881655a310adcF0d1336658Cc977609b72",
        "isPaused": false,
        "l2Predicate": "0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9",
        "l2TokenBytecodeHash": "0xb9ae7ba14d826de669be54f7c79008181b430f21bd3ff90dac8cce1e60ae88a9",
        "proxiableUUID": "EXPECT_REVERT"
      },
      "derivedName": "L1ERC20Predicate"
    },
    {
      "name": "CanonicalStateChain",
      "address": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["chainHead"],
      "sinceTimestamp": 1717522271,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0xeFE38Bd58ADDf23eFab1FFa16312030384929289",
        "$upgradeCount": 2,
        "chainHead": 509,
        "challenge": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd",
        "maxPointers": 21,
        "owner": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "proxiableUUID": "EXPECT_REVERT",
        "publisher": "0x514F8211B64f0620349659DeaDB5911a9896E7EC",
        "startingTimestamp": 1717522271,
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "CanonicalStateChain"
    },
    {
      "name": "SystemConfig",
      "address": "0x670E1C42A7A5962348138110E3ede3F422c10e2f",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "sinceTimestamp": 1725540911,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0x9EC8231132d6722D463077a7cCe1432c3766d9A2",
        "$upgradeCount": 1,
        "optimismPortal": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
        "owner": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "startBlock": 20684513,
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "errors": { "proxiableUUID": "Execution reverted" }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "sinceTimestamp": 1725540863,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0x38104856c02f83f4048c0FBA3D7613042FEAc988",
        "$upgradeCount": 1,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292619778",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
        "PORTAL": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "version": "2.4.0"
      },
      "errors": { "xDomainMessageSender": "Execution reverted" }
    },
    {
      "name": "LightLinkPortal",
      "address": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "sinceTimestamp": 1725540839,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0x3B1ADfe78B9B4107c47267AE97e2a91b1D8811fD",
        "$upgradeCount": 1,
        "balance": 1900000000000000,
        "isOutputFinalized": [true, true, true, true, true],
        "l2Oracle": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
        "l2Sender": "0x000000000000000000000000000000000000dEaD",
        "owner": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "params": {
          "prevBaseFee": 1000000000,
          "prevBoughtGas": 490798,
          "prevBlockNum": 20765664
        },
        "paused": false,
        "resourceConfig": {
          "maxResourceLimit": 20000000,
          "elasticityMultiplier": 10,
          "baseFeeMaxChangeDenominator": 8,
          "minimumBaseFee": 1000000000,
          "systemTxMaxGas": 1000000,
          "maximumBaseFee": "340282366920938463463374607431768211455"
        },
        "version": "2.8.1-beta.1"
      },
      "errors": {
        "isOutputFinalized": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "0xc7a7199bb5F0aA7B54eca90fC793Ec83E5683b0c",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "sinceTimestamp": 1725540887,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0xCE7Ab4b8471A3119aabB63101b7C7B999464Fc48",
        "$upgradeCount": 1,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38",
        "MESSENGER": "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "version": "2.2.0"
      }
    },
    {
      "name": "RLPReader",
      "address": "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2",
      "sinceTimestamp": 1717522283,
      "values": { "$immutable": true }
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    { "address": "0x000000000000000000000000000000000000dEaD" },
    { "address": "0x12eCE4AA73ee8ea958bE327daE41Dd785c997118" },
    { "address": "0x4200000000000000000000000000000000000007" },
    { "address": "0x4200000000000000000000000000000000000010" },
    { "address": "0x514F8211B64f0620349659DeaDB5911a9896E7EC" },
    { "address": "0x67Ad58C203cEB0f39026270D920cc0f29eB4eE91" },
    { "address": "0x6f933814903561F79137099587737DFB24c6E86D" },
    { "address": "0x7F17A74942c5b22b340688f099c99A79426447e1" },
    { "address": "0xaB0DDC4B1Fc1F24D4F7F67ab87B5dD8e5e0c5AC9" },
    { "address": "0xB44C32Dd1ec374224eED43FD827EBE64db16b0df" },
    { "address": "0xc8225cA10F570d4d7aD6cdb6F0bfEb683dc7C938" },
    {
      "address": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd"
        },
        {
          "permission": "upgrade",
          "target": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04"
        },
        {
          "permission": "upgrade",
          "target": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE"
        },
        {
          "permission": "upgrade",
          "target": "0x670E1C42A7A5962348138110E3ede3F422c10e2f"
        },
        {
          "permission": "upgrade",
          "target": "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38"
        },
        {
          "permission": "upgrade",
          "target": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE"
        },
        {
          "permission": "upgrade",
          "target": "0xc7a7199bb5F0aA7B54eca90fC793Ec83E5683b0c"
        }
      ]
    },
    { "address": "0xdE2552948aacb82dCa7a04AffbcB1B8e3C97D590" }
  ],
  "abis": {
    "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8": [
      "constructor()",
      "event ConfirmTransaction(uint256 indexed txIndex, address indexed owner)",
      "event ExecuteTransaction(uint256 indexed txIndex, address indexed owner)",
      "event RevokeConfirmation(uint256 indexed txIndex, address indexed owner)",
      "event SubmitTransaction(uint256 indexed txIndex, address indexed account, uint256 value, bytes data)",
      "function addMember(address _account)",
      "function confirmTransaction(uint256 _txIndex)",
      "function executeTransaction(uint256 _txIndex)",
      "function getMemberByIndex(uint256 _index) view returns (address)",
      "function getMembers() view returns (address[])",
      "function getSelector(string _func) pure returns (bytes4)",
      "function getTransaction(uint256 _idx) view returns (tuple(bool executed, address target, bytes data, uint256 value, uint256 numConfirmations), bytes4 funcSelector)",
      "function getTransactionCount() view returns (uint256)",
      "function isConfirmed(uint256, address) view returns (bool)",
      "function isOwner(address _account) view returns (bool)",
      "function modifyMultisig(address _multisig)",
      "function multisig() view returns (address)",
      "function removeMember(address _account)",
      "function revokeConfirmation(uint256 _txIndex)",
      "function submitTransaction(address _target, uint256 _value, bytes _data)",
      "function transactions(uint256) view returns (bool executed, address target, bytes data, uint256 value, uint256 numConfirmations)"
    ],
    "0x38104856c02f83f4048c0FBA3D7613042FEAc988": [
      "constructor()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint64 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _portal)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x3B1ADfe78B9B4107c47267AE97e2a91b1D8811fD": [
      "constructor()",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error BadTarget()",
      "error ContentLengthMismatch()",
      "error EmptyItem()",
      "error FailedInnerCall()",
      "error GasEstimation()",
      "error InvalidDataRemainder()",
      "error InvalidHeader()",
      "error InvalidInitialization()",
      "error LargeCalldata()",
      "error NoValue()",
      "error NonReentrant()",
      "error NotInitializing()",
      "error OnlyCustomGasToken()",
      "error OutOfGas()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error SafeERC20FailedOperation(address token)",
      "error SmallGasLimit()",
      "error TransferFailed()",
      "error UnexpectedList()",
      "error UnexpectedString()",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Pause()",
      "event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)",
      "event Unpause()",
      "event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)",
      "event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)",
      "function balance() view returns (uint256)",
      "function depositERC20Transaction(address _to, uint256 _mint, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data)",
      "function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable",
      "function donateETH() payable",
      "function finalizeWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx)",
      "function finalizedWithdrawals(bytes32) view returns (bool)",
      "function initialize(address _l2Oracle, address _challenge, address _newOwner)",
      "function isOutputFinalized(uint256 _l2OutputIndex) view returns (bool)",
      "function l2Oracle() view returns (address)",
      "function l2Sender() view returns (address)",
      "function minimumGasLimit(uint64 _byteCount) pure returns (uint64)",
      "function owner() view returns (address)",
      "function params() view returns (uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proveWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function provenWithdrawals(bytes32) view returns (bytes32 outputRoot, uint128 timestamp, uint128 l2OutputIndex)",
      "function renounceOwnership()",
      "function resourceConfig() view returns (uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee)",
      "function setGasPayingToken(address _token, uint8 _decimals, bytes32 _name, bytes32 _symbol)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function version() pure returns (string)"
    ],
    "0x3ca373F5ecB92ac762f9876f6e773082A4589995": [
      "constructor(address _logic, bytes _data)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x468b89D930ca7974196D7195033600B658011756": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event DepositToken(bytes message)",
      "event Initialized(uint8 version)",
      "event TokenMapped(bytes message)",
      "event Upgraded(address indexed implementation)",
      "event WithdrawToken(bytes32 messageHash)",
      "function bridgeRegistry() view returns (address)",
      "function counter(address) view returns (uint256)",
      "function deposit(address _l1Token) payable",
      "function depositTo(address _l1Token, address _to) payable",
      "function initialize(address _registry, address _l2Predicate)",
      "function isConfirmed(address, uint256, address) view returns (bool)",
      "function isPaused() view returns (bool)",
      "function l1ToL2Gateway(address) view returns (address)",
      "function l2Predicate() view returns (address)",
      "function l2TokenBytecodeHash() view returns (bytes32)",
      "function mapToken(address _l1Token)",
      "function modifyL2Predicate(address _l2Predicate)",
      "function modifyL2TokenBytecodeHash(bytes32 _l2TokenBytecodeHash)",
      "function orderExecuted(address, uint256) view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function recovery(address _to)",
      "function syncWithdraw(address[] _currentValidators, bytes[] _signatures, bytes _data)",
      "function toggleIsPaused(bool _status)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x4Fc6a6A2e3864709ae6AdCf29280dA01c95Aa10B": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ReentrancyGuardReentrantCall()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event ChallengeDAUpdate(bytes32 indexed _blockHash, uint256 indexed _pointerIndex, uint32 _shareIndex, uint256 _blockIndex, uint256 _expiry, uint8 indexed _status)",
      "event Initialized(uint64 version)",
      "event InvalidHeader(uint256 indexed _blockIndex, bytes32 indexed _hash, uint8 indexed _reason)",
      "event L2HeaderChallengeUpdate(bytes32 indexed challengeHash, uint256 indexed l2Number, bytes32 rblock, uint256 expiry, uint8 indexed status)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function chain() view returns (address)",
      "function chainOracle() view returns (address)",
      "function challengeDataRootInclusion(uint256 _blockIndex, uint8 _pointerIndex, uint32 _shareIndex) payable returns (uint256)",
      "function challengeFee() view returns (uint256)",
      "function challengeL2Header(uint256 _rblockNum, uint256 _l2Num) payable returns (bytes32)",
      "function challengePeriod() view returns (uint256)",
      "function challengeReward() view returns (uint256)",
      "function challengeWindow() view returns (uint256)",
      "function claimDAChallengeReward(bytes32 _challengeKey)",
      "function claimL2HeaderChallengeReward(bytes32 _challengeKey)",
      "function daChallenges(bytes32) view returns (bytes32 blockHash, uint256 blockIndex, uint8 pointerIndex, uint32 shareIndex, address challenger, uint256 expiry, uint8 status, bool claimed)",
      "function daNamespace() view returns (bytes1 version, bytes28 id)",
      "function daOracle() view returns (address)",
      "function dataRootInclusionChallengeKey(bytes32 _blockHash, uint8 _pointerIndex, uint32 _shareIndex) pure returns (bytes32)",
      "function defendDataRootInclusion(bytes32 _challengeKey, tuple(bytes[] data, tuple(uint256 beginKey, uint256 endKey, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] sideNodes)[] shareProofs, tuple(bytes1 version, bytes28 id) namespace, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] rowRoots, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves)[] rowProofs, tuple(uint256 tupleRootNonce, tuple(uint256 height, bytes32 dataRoot) tuple, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves) proof) attestationProof) _proof)",
      "function defendL2Header(bytes32 _challengeHash, bytes32 _headerHash, bytes32 _headerPrevHash)",
      "function defender() view returns (address)",
      "function finalizationSeconds() view returns (uint256)",
      "function initialize(address _chain, address _daOracle, address _chainOracle)",
      "function invalidateHeader(uint256 _blockIndex)",
      "function isDAChallengeEnabled() view returns (bool)",
      "function isHeaderChallengeEnabled() view returns (bool)",
      "function isL2HeaderChallengeEnabled() view returns (bool)",
      "function l2HeaderChallengeHash(bytes32 _rblockHash, uint256 _l2Num) pure returns (bytes32)",
      "function l2HeaderChallenges(bytes32) view returns (uint256 blockNum, tuple(bytes32 rblock, uint256 number) header, tuple(bytes32 rblock, uint256 number) prevHeader, uint256 challengeEnd, address challenger, uint8 status, bool claimed)",
      "function maxBundleSize() view returns (uint256)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function setChallengeFee(uint256 _challengeFee)",
      "function setChallengePeriod(uint256 _challengePeriod)",
      "function setChallengeReward(uint256 _challengeReward)",
      "function setChallengeWindow(uint256 _challengeWindow)",
      "function setDANamespace(tuple(bytes1 version, bytes28 id) _namespace)",
      "function setDAOracle(address _daOracle)",
      "function setDefender(address _defender)",
      "function setMaxBundleSize(uint256 _maxBundleSize)",
      "function settleDataRootInclusion(bytes32 _challengeKey)",
      "function settleL2HeaderChallenge(bytes32 _challengeHash)",
      "function toggleDAChallenge(bool _status)",
      "function toggleHeaderChallenge(bool _status)",
      "function toggleL2HeaderChallenge(bool _status)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x624631881655a310adcF0d1336658Cc977609b72": [
      "constructor(address _logic, bytes _data)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9": [
      "constructor(address _logic, bytes _data)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x670E1C42A7A5962348138110E3ede3F422c10e2f": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x79B3E839333a74137e78b0DaF84FC12512a8c704": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function ShareKey(bytes32 _rblock, bytes[] _shareData) pure returns (bytes32)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function canonicalStateChain() view returns (address)",
      "function daOracle() view returns (address)",
      "function decodeDepositTx(bytes _data) view returns (tuple(uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function decodeLegacyTx(bytes _data) view returns (tuple(uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function decodeRLPHeader(bytes _data) view returns (tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce))",
      "function extractData(bytes[] raw, tuple(uint256 start, uint256 end)[] ranges) pure returns (bytes)",
      "function getHeader(bytes32 _headerHash) view returns (tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce))",
      "function getTransaction(bytes32 _txHash) view returns (tuple(uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function hashHeader(tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce) _header) pure returns (bytes32)",
      "function headerToRblock(bytes32) view returns (bytes32)",
      "function headers(bytes32) view returns (bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce)",
      "function initialize(address _canonicalStateChain, address _daOracle, address _rlpReader)",
      "function owner() view returns (address)",
      "function provideHeader(bytes32 _shareKey, tuple(uint256 start, uint256 end)[] _range) returns (bytes32)",
      "function provideLegacyTx(bytes32 _shareKey, tuple(uint256 start, uint256 end)[] _range) returns (bytes32)",
      "function provideShares(bytes32 _rblock, uint8 _pointer, tuple(bytes[] data, tuple(uint256 beginKey, uint256 endKey, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] sideNodes)[] shareProofs, tuple(bytes1 version, bytes28 id) namespace, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] rowRoots, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves)[] rowProofs, tuple(uint256 tupleRootNonce, tuple(uint256 height, bytes32 dataRoot) tuple, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves) proof) attestationProof) _proof) returns (bytes32)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function rlpReader() view returns (address)",
      "function setDAOracle(address _daOracle)",
      "function setRLPReader(address _rlpReader)",
      "function shares(bytes32, uint256) view returns (bytes)",
      "function transactions(bytes32) view returns (uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x9EC8231132d6722D463077a7cCe1432c3766d9A2": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function initialize(uint256 __startBlock, address __optimismPortal)",
      "function optimismPortal() view returns (address)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function setOptimismPortal(address __optimismPortal)",
      "function setStartBlock(uint256 __startBlock)",
      "function startBlock() view returns (uint256 startBlock_)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xa8372d6FF00d48A25BaA1AF16d6a86C936708f4E": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event DepositToken(bytes message)",
      "event Initialized(uint8 version)",
      "event TokenMapped(bytes message)",
      "event Upgraded(address indexed implementation)",
      "event WithdrawToken(bytes32 messageHash)",
      "function bridgeRegistry() view returns (address)",
      "function counter(address) view returns (uint256)",
      "function deposit(address _l1Token, uint256 _amount)",
      "function depositTo(address _l1Token, address _to, uint256 _amount)",
      "function initialize(address _registry, address _l2Predicate)",
      "function isConfirmed(address, uint256, address) view returns (bool)",
      "function isPaused() view returns (bool)",
      "function l1ToL2Gateway(address) view returns (address)",
      "function l2Predicate() view returns (address)",
      "function l2TokenBytecodeHash() view returns (bytes32)",
      "function mapToken(address _l1Token)",
      "function modifyL2Predicate(address _l2Predicate)",
      "function modifyL2TokenBytecodeHash(bytes32 _l2TokenBytecodeHash)",
      "function orderExecuted(address, uint256) view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function recovery(address[] _tokens, address _to)",
      "function syncWithdraw(address[] _currentValidators, bytes[] _signatures, bytes _data)",
      "function toggleIsPaused(bool _status)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xC48F0e7C3c4E385ae84B4f678A0482E00208cf3E": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ConsensusPowerThresholdModified(uint256 _amount)",
      "event Initialized(uint8 version)",
      "event MutisigModified(address _multisig)",
      "event SystemVerifierModified(address _systemVerifier)",
      "event Upgraded(address indexed implementation)",
      "event ValidatorsModifed(address[] _accounts, uint256[] _powers)",
      "event ValidatorsRemoved(address[] _accounts)",
      "function consensusPowerThreshold() view returns (uint256)",
      "function getMultisig() view returns (address)",
      "function getPower(address _validator) view returns (uint256)",
      "function getSystemVerifier() view returns (address)",
      "function getValidators() view returns (tuple(address addr, uint256 power)[])",
      "function initialize(address _multisig)",
      "function modifyConsensusPowerThreshold(uint256 _amount)",
      "function modifyMultisig(address _multisig)",
      "function modifySystemVerifier(address _systemVerifier)",
      "function modifyValidators(address[] _validators, uint256[] _powers)",
      "function multisig() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function removeValidators(address[] _accounts)",
      "function systemVerifier() view returns (address)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function validValidator(address _validator) view returns (bool)"
    ],
    "0xc7a7199bb5F0aA7B54eca90fC793Ec83E5683b0c": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xCE7Ab4b8471A3119aabB63101b7C7B999464Fc48": [
      "constructor()",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error SafeERC20FailedOperation(address token)",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint64 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function version() view returns (string)"
    ],
    "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2": [
      "function toBlockHeader(bytes rlpHeader) pure returns (bytes32 parentHash, bytes32 sha3Uncles, address coinbase, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, uint256 nonce)",
      "function toDepositTx(bytes rlpTx) pure returns (uint256 chainId, uint256 nonce, uint256 gasPrice, uint256 gasLimit, address to, uint256 value, bytes data, uint256 v, uint256 r, uint256 s)",
      "function toLegacyTx(bytes rlpTx) pure returns (uint256 nonce, uint256 gasPrice, uint256 gasLimit, address to, uint256 value, bytes data, uint256 v, uint256 r, uint256 s)"
    ],
    "0xeFE38Bd58ADDf23eFab1FFa16312030384929289": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event BlockAdded(uint256 indexed blockNumber)",
      "event ChallengeChanged(address indexed challenge)",
      "event Initialized(uint64 version)",
      "event OutputProposed(bytes32 indexed outputRoot, uint256 indexed l2OutputIndex, uint256 indexed l2BlockNumber, uint256 l1Timestamp)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PublisherChanged(address indexed publisher)",
      "event RolledBack(uint256 indexed blockNumber)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function calculateHeaderHash(tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header) pure returns (bytes32)",
      "function chain(uint256) view returns (bytes32)",
      "function chainHead() view returns (uint256)",
      "function challenge() view returns (address)",
      "function getHead() view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getHeaderByHash(bytes32 _hash) view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getHeaderByNum(uint256 _index) view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getL2Output(uint256 _index) view returns (tuple(bytes32 outputRoot, uint64 timestamp))",
      "function headerMetadata(bytes32) view returns (uint64 timestamp, address publisher)",
      "function initialize(address _publisher, tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header)",
      "function maxPointers() view returns (uint8)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function publisher() view returns (address)",
      "function pushBlock(tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header)",
      "function renounceOwnership()",
      "function rollback(uint256 _blockNumber, bytes32 _blockHash)",
      "function setChallengeContract(address _challenge)",
      "function setMaxPointers(uint8 _maxPointers)",
      "function setPublisher(address _publisher)",
      "function startingTimestamp() view returns (uint64)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ]
  },
  "usedTemplates": {},
  "shapeFilesHash": "0x1b71e6de9b37e27fa623d351c775f0b1129ddf53c2082f7042461e94e2b52e34"
}
