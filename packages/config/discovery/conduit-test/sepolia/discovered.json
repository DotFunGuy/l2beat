{
  "name": "conduit-test",
  "chain": "sepolia",
  "blockNumber": 7727892,
  "configHash": "0x6ee42f552a74574927b8eb0e9326d628f847d96fbb4819272003e1a946b467a5",
  "contracts": [
    {
      "name": "SystemConfig",
      "address": "0xF7b9702532a6a853Fcb789FA3f80DEECEfEdbDce",
      "template": "opstack/SystemConfig",
      "sourceHashes": [
        "0x958268b83f73163b36af36fa55f5c0905421c07369bff2791652da02fa692a42"
      ],
      "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
      "issuedPermissions": [
        {
          "permission": "interact",
          "to": "0x000000000000000000000000000000000000dEaD",
          "description": "it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["scalar", "overhead"],
      "sinceTimestamp": 1739630616,
      "values": {
        "$immutable": true,
        "BATCH_INBOX_SLOT": "0x71ac12829d66ee73d8d95bff50b3589745ce57edae70a3fb111a2342464dc597",
        "batcherHash": "0x0000000000000000000000000000000000000000",
        "batchInbox": "0x0000000000000000000000000000000000000000",
        "DISPUTE_GAME_FACTORY_SLOT": "0x52322a25d9f59ea17656545543306b7aef62bc0cc53a0e65ccfa0c75b97aa906",
        "disputeGameFactory": "0x0000000000000000000000000000000000000000",
        "gasLimit": 1,
        "gasPayingToken": {
          "addr_": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
          "decimals_": 18
        },
        "gasPayingTokenName": "Ether",
        "gasPayingTokenSymbol": "ETH",
        "isCustomGasToken": false,
        "L1_CROSS_DOMAIN_MESSENGER_SLOT": "0x383f291819e6d54073bc9a648251d97421076bdd101933c0c022219ce9580636",
        "L1_ERC_721_BRIDGE_SLOT": "0x46adcbebc6be8ce551740c29c47c8798210f23f7f4086c41752944352568d5a7",
        "L1_STANDARD_BRIDGE_SLOT": "0x9904ba90dde5696cda05c9e0dab5cbaa0fea005ace4d11218a02ac668dad6376",
        "l1CrossDomainMessenger": "0x0000000000000000000000000000000000000000",
        "l1ERC721Bridge": "0x0000000000000000000000000000000000000000",
        "l1StandardBridge": "0x0000000000000000000000000000000000000000",
        "maximumGasLimit": 200000000,
        "minimumGasLimit": 1,
        "opStackDA": {
          "isSomeTxsLengthEqualToCelestiaDAExample": false,
          "isSequencerSendingBlobTx": false,
          "isUsingEigenDA": false
        },
        "OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT": "0xa04c5bb938ca6fc46d95553abf0a76345ce3e722a30bf4f74928b8e7d852320c",
        "OPTIMISM_PORTAL_SLOT": "0x4b6c74f9e688cb39801f2112c14a8c57232a3fc5202e1444126d4bce86eb19ac",
        "optimismMintableERC20Factory": "0x0000000000000000000000000000000000000000",
        "optimismPortal": "0x0000000000000000000000000000000000000000",
        "overhead": 0,
        "owner": "0x000000000000000000000000000000000000dEaD",
        "resourceConfig": {
          "maxResourceLimit": 1,
          "elasticityMultiplier": 1,
          "baseFeeMaxChangeDenominator": 2,
          "minimumBaseFee": 0,
          "systemTxMaxGas": 0,
          "maximumBaseFee": 0
        },
        "scalar": 0,
        "sequencerInbox": "0x0000000000000000000000000000000000000000",
        "START_BLOCK_SLOT": "0xa11ee3ab75b40e88a0105e935d17cd36c8faee0138320d776c411291bdbbb19f",
        "startBlock": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "UNSAFE_BLOCK_SIGNER_SLOT": "0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08",
        "unsafeBlockSigner": "0x0000000000000000000000000000000000000000",
        "version": "2.2.0",
        "VERSION": 0
      },
      "fieldMeta": {
        "gasLimit": {
          "severity": "LOW",
          "description": "Gas limit for blocks on L2."
        }
      }
    }
  ],
  "eoas": [
    {
      "address": "0x0000000000000000000000000000000000000000",
      "directlyReceivedPermissions": [
        {
          "permission": "sequence",
          "from": "0xF7b9702532a6a853Fcb789FA3f80DEECEfEdbDce"
        }
      ]
    },
    {
      "address": "0x000000000000000000000000000000000000dEaD",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0xF7b9702532a6a853Fcb789FA3f80DEECEfEdbDce",
          "description": "it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system."
        }
      ]
    }
  ],
  "abis": {
    "0xF7b9702532a6a853Fcb789FA3f80DEECEfEdbDce": [
      "constructor()",
      "event ConfigUpdate(uint256 indexed version, uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function BATCH_INBOX_SLOT() view returns (bytes32)",
      "function DISPUTE_GAME_FACTORY_SLOT() view returns (bytes32)",
      "function L1_CROSS_DOMAIN_MESSENGER_SLOT() view returns (bytes32)",
      "function L1_ERC_721_BRIDGE_SLOT() view returns (bytes32)",
      "function L1_STANDARD_BRIDGE_SLOT() view returns (bytes32)",
      "function OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT() view returns (bytes32)",
      "function OPTIMISM_PORTAL_SLOT() view returns (bytes32)",
      "function START_BLOCK_SLOT() view returns (bytes32)",
      "function UNSAFE_BLOCK_SIGNER_SLOT() view returns (bytes32)",
      "function VERSION() view returns (uint256)",
      "function batchInbox() view returns (address addr_)",
      "function batcherHash() view returns (bytes32)",
      "function disputeGameFactory() view returns (address addr_)",
      "function gasLimit() view returns (uint64)",
      "function gasPayingToken() view returns (address addr_, uint8 decimals_)",
      "function gasPayingTokenName() view returns (string name_)",
      "function gasPayingTokenSymbol() view returns (string symbol_)",
      "function initialize(address _owner, uint256 _overhead, uint256 _scalar, bytes32 _batcherHash, uint64 _gasLimit, address _unsafeBlockSigner, tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee) _config, address _batchInbox, tuple(address l1CrossDomainMessenger, address l1ERC721Bridge, address l1StandardBridge, address disputeGameFactory, address optimismPortal, address optimismMintableERC20Factory, address gasPayingToken) _addresses)",
      "function isCustomGasToken() view returns (bool)",
      "function l1CrossDomainMessenger() view returns (address addr_)",
      "function l1ERC721Bridge() view returns (address addr_)",
      "function l1StandardBridge() view returns (address addr_)",
      "function maximumGasLimit() pure returns (uint64)",
      "function minimumGasLimit() view returns (uint64)",
      "function optimismMintableERC20Factory() view returns (address addr_)",
      "function optimismPortal() view returns (address addr_)",
      "function overhead() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function resourceConfig() view returns (tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee))",
      "function scalar() view returns (uint256)",
      "function setBatcherHash(bytes32 _batcherHash)",
      "function setGasConfig(uint256 _overhead, uint256 _scalar)",
      "function setGasLimit(uint64 _gasLimit)",
      "function setUnsafeBlockSigner(address _unsafeBlockSigner)",
      "function startBlock() view returns (uint256 startBlock_)",
      "function transferOwnership(address newOwner)",
      "function unsafeBlockSigner() view returns (address addr_)",
      "function version() view returns (string)"
    ]
  },
  "usedTemplates": {
    "opstack/SystemConfig": "0x2176fe60367a2700d2407e9cc71665f8e605da2f60d16e82802c207280e72c15"
  }
}
