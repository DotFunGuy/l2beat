{
  "name": "lightlink",
  "chain": "ethereum",
  "blockNumber": 22179980,
  "configHash": "0xb79f71a6758be44b642e2a23f7f1c124832c17bb10b153184f1ad3a16945550b",
  "entries": [
    {
      "address": "0x000000000000000000000000000000000000dEaD",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Challenge",
      "address": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd",
      "type": "Contract",
      "template": "lightlink/Challenge",
      "sourceHashes": [
        "0x7e52f67f6162bc66d00626c817dcd5b11c2189fcf7bf5efcd32fd0821c22c0ad",
        "0x90fc7abf9460afe3940188c51d98ab5da40ece530f7fc0e6e10c459a1b7f35f5"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Allows to challenge block headers. Each challenge requires the payment of a challenger fee. DA challenges are enabled: false. Header challenges are enabled: true. L2 Header challenges are enabled: false.",
      "issuedPermissions": [
        {
          "permission": "interact",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "description": "it can disable L2 header challenges and DA challenges, it can update the challenge period (3h and 3 weeks), update the challenger fee (between 0.01 and 10 ether), update the challenge reward (between 0.01 and 10 ether), update the defender address, update the DA namespace, update the DA oracle, disable header challenges and set the maximum bundle size.",
          "via": []
        },
        {
          "permission": "upgrade",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "via": []
        }
      ],
      "ignoreInWatchMode": [],
      "sinceTimestamp": 1717522343,
      "sinceBlock": 20019970,
      "values": {
        "$admin": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "$implementation": "0x4Fc6a6A2e3864709ae6AdCf29280dA01c95Aa10B",
        "$pastUpgrades": [
          [
            "2024-06-04T17:32:23.000Z",
            "0x84c616f81289c7637be644c43b7a1bf740daa615896f9bb9d141c3d383c4b6f1",
            ["0x2785D4Af59bf299C1f2DBC5132E72B2eE015B3aC"]
          ],
          [
            "2024-09-05T13:35:35.000Z",
            "0x4395a7f970de1003c82254f83fbf42c5f11a97842d23ff171be9d0d6c683010b",
            ["0x4Fc6a6A2e3864709ae6AdCf29280dA01c95Aa10B"]
          ]
        ],
        "$upgradeCount": 2,
        "chain": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
        "chainOracle": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04",
        "challengeFee": "1500000000000000000",
        "challengePeriod": 172800,
        "challengeReward": "200000000000000000",
        "challengeWindow": 432000,
        "daNamespace": {
          "version": "0x00",
          "id": "0x00000000000000000000000000000000000000000000000000000000"
        },
        "daOracle": "0x0000000000000000000000000000000000000000",
        "defender": "0x514F8211B64f0620349659DeaDB5911a9896E7EC",
        "finalizationSeconds": 604800,
        "isDAChallengeEnabled": false,
        "isHeaderChallengeEnabled": true,
        "isL2HeaderChallengeEnabled": false,
        "maxBundleSize": 42000,
        "owner": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "Challenge"
    },
    {
      "name": "ChainOracle",
      "address": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04",
      "type": "Contract",
      "template": "lightlink/ChainOracle",
      "sourceHashes": [
        "0x7e52f67f6162bc66d00626c817dcd5b11c2189fcf7bf5efcd32fd0821c22c0ad",
        "0x219c5860c98ee65c799aa9b6549168915088c6de2369583a157ee3a60cf65b47"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Used to challenge L2 block headers. If L2 block header challenges are inactive, this contract is not used.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "via": []
        }
      ],
      "ignoreInWatchMode": [],
      "sinceTimestamp": 1717522307,
      "sinceBlock": 20019967,
      "values": {
        "$admin": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "$implementation": "0x79B3E839333a74137e78b0DaF84FC12512a8c704",
        "$pastUpgrades": [
          [
            "2024-06-04T17:31:47.000Z",
            "0x777ffc74cdda4dadf5067e5736ed319792fa6e37c5eab24573e3fd01f33e2334",
            ["0x79B3E839333a74137e78b0DaF84FC12512a8c704"]
          ]
        ],
        "$upgradeCount": 1,
        "canonicalStateChain": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
        "daOracle": "0x0000000000000000000000000000000000000000",
        "owner": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "rlpReader": "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "ChainOracle"
    },
    {
      "address": "0x514F8211B64f0620349659DeaDB5911a9896E7EC",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
          "description": "it can publish new block headers, which both includes pointers to Celestia DA and the state root for withdrawals, meaning that sequencing and state updates are not decoupled."
        }
      ]
    },
    {
      "name": "CanonicalStateChain",
      "address": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
      "type": "Contract",
      "template": "lightlink/CanonicalStateChain",
      "sourceHashes": [
        "0x7e52f67f6162bc66d00626c817dcd5b11c2189fcf7bf5efcd32fd0821c22c0ad",
        "0x7c0a4f7fb2f2948ffde2e5550debf14c02fa682bec9a57aac718daf43c80c2c7"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contains the logic to update the state of the chain, and apply rollbacks based on an external challenger contract. If a block header is challenged and rolled back, then all subsequent blocks are also rolled back.",
      "issuedPermissions": [
        {
          "permission": "interact",
          "to": "0x514F8211B64f0620349659DeaDB5911a9896E7EC",
          "description": "it can publish new block headers, which both includes pointers to Celestia DA and the state root for withdrawals, meaning that sequencing and state updates are not decoupled.",
          "via": []
        },
        {
          "permission": "interact",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "description": "it can update the maximum number of Celestia pointers a block can have, change the challenge contract used for rollbacks and update the publisher address.",
          "via": []
        },
        {
          "permission": "upgrade",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "via": []
        }
      ],
      "ignoreInWatchMode": [],
      "sinceTimestamp": 1717522271,
      "sinceBlock": 20019964,
      "values": {
        "$admin": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "$implementation": "0xeFE38Bd58ADDf23eFab1FFa16312030384929289",
        "$pastUpgrades": [
          [
            "2024-06-04T17:31:11.000Z",
            "0x39c4618d14675071a6b0f6183c7cf605373987d3ed2677426598aa67e5d15e56",
            ["0xd8C81A0CB0044fC45B51531A8dcc48Ed385937B5"]
          ],
          [
            "2024-09-05T13:31:35.000Z",
            "0xcc066ac45b2d6527afdb41a5254a2093bcbc6d8e7d8571f6139b08db97f6e50b",
            ["0xeFE38Bd58ADDf23eFab1FFa16312030384929289"]
          ]
        ],
        "$upgradeCount": 2,
        "chainHead": 1275,
        "challenge": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd",
        "getHead": {
          "epoch": 22179037,
          "l2Height": 136550839,
          "prevHash": "0x7e433c56a62ecabe405aee339b31308a52bba71b5cba9cac4bddc61f7609a831",
          "outputRoot": "0x7552b22ed9929b208e0723935960ad607086e98f100b38aa0bce3995e9006216",
          "celestiaPointers": [
            { "height": 4722462, "shareStart": 6656, "shareLen": 3595 },
            { "height": 4722471, "shareStart": 6528, "shareLen": 3379 },
            { "height": 4722481, "shareStart": 64, "shareLen": 3176 },
            { "height": 4722491, "shareStart": 2624, "shareLen": 3643 },
            { "height": 4722505, "shareStart": 6080, "shareLen": 3529 },
            { "height": 4722519, "shareStart": 4736, "shareLen": 3615 },
            { "height": 4722535, "shareStart": 8896, "shareLen": 3664 },
            { "height": 4722549, "shareStart": 6592, "shareLen": 3251 },
            { "height": 4722565, "shareStart": 2496, "shareLen": 3581 },
            { "height": 4722581, "shareStart": 6464, "shareLen": 3571 },
            { "height": 4722595, "shareStart": 2432, "shareLen": 3307 },
            { "height": 4722608, "shareStart": 2112, "shareLen": 3420 },
            { "height": 4722620, "shareStart": 6848, "shareLen": 3185 },
            { "height": 4722633, "shareStart": 2304, "shareLen": 3204 },
            { "height": 4722649, "shareStart": 4800, "shareLen": 3088 },
            { "height": 4722658, "shareStart": 4352, "shareLen": 3386 },
            { "height": 4722666, "shareStart": 128, "shareLen": 3409 },
            { "height": 4722672, "shareStart": 128, "shareLen": 3357 },
            { "height": 4722679, "shareStart": 64, "shareLen": 3125 },
            { "height": 4722686, "shareStart": 128, "shareLen": 3037 },
            { "height": 4722693, "shareStart": 64, "shareLen": 3353 }
          ]
        },
        "maxPointers": 21,
        "owner": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "publisher": "0x514F8211B64f0620349659DeaDB5911a9896E7EC",
        "startingTimestamp": 1717522271,
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "CanonicalStateChain"
    },
    {
      "name": "SystemConfig",
      "address": "0x670E1C42A7A5962348138110E3ede3F422c10e2f",
      "type": "Contract",
      "template": "lightlink/SystemConfig",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0x91fa96b49f07577afbb47b56e1b36b249127d43e691df431c23bf35d50f03626"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Fork of the OP stack's SystemConfig. It link to the main portal contract and stores a 'start block' number. Both values are currently unused. Most importantly, it does NOT contain the resource configuration info.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "via": []
        }
      ],
      "sinceTimestamp": 1725540911,
      "sinceBlock": 20684519,
      "values": {
        "$admin": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "$implementation": "0x9EC8231132d6722D463077a7cCe1432c3766d9A2",
        "$pastUpgrades": [
          [
            "2024-09-05T12:55:23.000Z",
            "0xba247cf6a6837abe69513ffa16c42dd58ef1bf1f418baa8b94cf5b37132ef3a5",
            ["0x9EC8231132d6722D463077a7cCe1432c3766d9A2"]
          ]
        ],
        "$upgradeCount": 1,
        "optimismPortal": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
        "owner": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "startBlock": 20684513,
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "SystemConfig"
    },
    {
      "address": "0x67Ad58C203cEB0f39026270D920cc0f29eB4eE91",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x6F17201F241231f183CE52212e4C47B009036421",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Safe",
      "address": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd",
          "description": "it can disable L2 header challenges and DA challenges, it can update the challenge period (3h and 3 weeks), update the challenger fee (between 0.01 and 10 ether), update the challenge reward (between 0.01 and 10 ether), update the defender address, update the DA namespace, update the DA oracle, disable header challenges and set the maximum bundle size."
        },
        {
          "permission": "interact",
          "from": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
          "description": "it can update the maximum number of Celestia pointers a block can have, change the challenge contract used for rollbacks and update the publisher address."
        },
        {
          "permission": "interact",
          "from": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
          "description": "it can pause the chain and update the gas token."
        },
        {
          "permission": "upgrade",
          "from": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd"
        },
        {
          "permission": "upgrade",
          "from": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04"
        },
        {
          "permission": "upgrade",
          "from": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE"
        },
        {
          "permission": "upgrade",
          "from": "0x670E1C42A7A5962348138110E3ede3F422c10e2f"
        },
        {
          "permission": "upgrade",
          "from": "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38"
        },
        {
          "permission": "upgrade",
          "from": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE"
        },
        {
          "permission": "upgrade",
          "from": "0xc7a7199bb5F0aA7B54eca90fC793Ec83E5683b0c",
          "description": "upgrading the bridge implementation can give access to all funds escrowed therein."
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1740666983,
      "sinceBlock": 21938311,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0x67Ad58C203cEB0f39026270D920cc0f29eB4eE91",
          "0xdE2552948aacb82dCa7a04AffbcB1B8e3C97D590",
          "0x6F17201F241231f183CE52212e4C47B009036421"
        ],
        "$threshold": 3,
        "domainSeparator": "0xfc26165dd2190870ea8f65dffadcf120d5820ce42cb7de2f7a3a1b595f28ef64",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 3 (100%)",
        "nonce": 0,
        "VERSION": "1.4.1"
      },
      "derivedName": "Safe"
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0xa22fc4a393301224447cd798adfb870c71a158c78028b18ef2d501128ac6bbcb"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1725540863,
      "sinceBlock": 20684515,
      "values": {
        "$admin": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "$implementation": "0x38104856c02f83f4048c0FBA3D7613042FEAc988",
        "$pastUpgrades": [
          [
            "2024-09-05T12:54:35.000Z",
            "0xd9c97881c92c991d39a0835c10cf0510bae89ffe30887cbeca37cb0ef3df3542",
            ["0x38104856c02f83f4048c0FBA3D7613042FEAc988"]
          ]
        ],
        "$upgradeCount": 1,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292619822",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
        "PORTAL": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "version": "2.4.0"
      },
      "derivedName": "L1CrossDomainMessenger",
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "LightLinkPortal",
      "address": "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE",
      "type": "Contract",
      "template": "lightlink/LightLinkPortal",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0xc0e63a4f63935a0e855262aed5e9a5b1ae7e6b33e52a78c8ca729cbe4672a8a5"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Main contract to deposit ETH and handle L1 to L2 messages. It also allows to prove and finalize withdrawals. It also stores the resource configuration for the chain.",
      "issuedPermissions": [
        {
          "permission": "interact",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "description": "it can pause the chain and update the gas token.",
          "via": []
        },
        {
          "permission": "upgrade",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["params"],
      "sinceTimestamp": 1725540839,
      "sinceBlock": 20684513,
      "values": {
        "$admin": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "$implementation": "0x3B1ADfe78B9B4107c47267AE97e2a91b1D8811fD",
        "$pastUpgrades": [
          [
            "2024-09-05T12:54:11.000Z",
            "0x9481126f85589426739b38363db3992504500651385a858b4aea108aad3d074b",
            ["0x3B1ADfe78B9B4107c47267AE97e2a91b1D8811fD"]
          ]
        ],
        "$upgradeCount": 1,
        "l2Oracle": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
        "l2Sender": "0x000000000000000000000000000000000000dEaD",
        "owner": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "params": {
          "prevBaseFee": 1000000000,
          "prevBoughtGas": 490798,
          "prevBlockNum": 22176848
        },
        "paused": false,
        "resourceConfig": {
          "maxResourceLimit": 20000000,
          "elasticityMultiplier": 10,
          "baseFeeMaxChangeDenominator": 8,
          "minimumBaseFee": 1000000000,
          "systemTxMaxGas": 1000000,
          "maximumBaseFee": "340282366920938463463374607431768211455"
        },
        "version": "2.8.1-beta.1"
      },
      "fieldMeta": { "paused": { "severity": "HIGH" } },
      "derivedName": "LightLinkPortal"
    },
    {
      "name": "L1StandardBridge",
      "address": "0xc7a7199bb5F0aA7B54eca90fC793Ec83E5683b0c",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0x1862b438ea6e79c6dda9db9eadf4cfc0582195a923d0ea24cbf669e0c4d2e27e"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
          "description": "upgrading the bridge implementation can give access to all funds escrowed therein.",
          "via": []
        }
      ],
      "sinceTimestamp": 1725540887,
      "sinceBlock": 20684517,
      "values": {
        "$admin": "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7",
        "$implementation": "0xCE7Ab4b8471A3119aabB63101b7C7B999464Fc48",
        "$pastUpgrades": [
          [
            "2024-09-05T12:54:59.000Z",
            "0x8139a100e3a2621ada034969254c23a9d541c7b375602cb3121b499cf78e4c08",
            ["0xCE7Ab4b8471A3119aabB63101b7C7B999464Fc48"]
          ]
        ],
        "$upgradeCount": 1,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38",
        "MESSENGER": "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "version": "2.2.0"
      },
      "derivedName": "L1StandardBridge",
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "0xdE2552948aacb82dCa7a04AffbcB1B8e3C97D590",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "RLPReader",
      "address": "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2",
      "type": "Contract",
      "sourceHashes": [
        "0xa54be4566b369d95be75b2911bdb9216ec62e1bc5dc86dff8ec6bcff42c7ec28"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1717522283,
      "sinceBlock": 20019965,
      "values": { "$immutable": true },
      "derivedName": "RLPReader"
    }
  ],
  "abis": {
    "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x38104856c02f83f4048c0FBA3D7613042FEAc988": [
      "constructor()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint64 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _portal)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x3B1ADfe78B9B4107c47267AE97e2a91b1D8811fD": [
      "constructor()",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error BadTarget()",
      "error ContentLengthMismatch()",
      "error EmptyItem()",
      "error FailedInnerCall()",
      "error GasEstimation()",
      "error InvalidDataRemainder()",
      "error InvalidHeader()",
      "error InvalidInitialization()",
      "error LargeCalldata()",
      "error NoValue()",
      "error NonReentrant()",
      "error NotInitializing()",
      "error OnlyCustomGasToken()",
      "error OutOfGas()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error SafeERC20FailedOperation(address token)",
      "error SmallGasLimit()",
      "error TransferFailed()",
      "error UnexpectedList()",
      "error UnexpectedString()",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Pause()",
      "event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)",
      "event Unpause()",
      "event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)",
      "event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)",
      "function balance() view returns (uint256)",
      "function depositERC20Transaction(address _to, uint256 _mint, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data)",
      "function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable",
      "function donateETH() payable",
      "function finalizeWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx)",
      "function finalizedWithdrawals(bytes32) view returns (bool)",
      "function initialize(address _l2Oracle, address _challenge, address _newOwner)",
      "function isOutputFinalized(uint256 _l2OutputIndex) view returns (bool)",
      "function l2Oracle() view returns (address)",
      "function l2Sender() view returns (address)",
      "function minimumGasLimit(uint64 _byteCount) pure returns (uint64)",
      "function owner() view returns (address)",
      "function params() view returns (uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proveWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function provenWithdrawals(bytes32) view returns (bytes32 outputRoot, uint128 timestamp, uint128 l2OutputIndex)",
      "function renounceOwnership()",
      "function resourceConfig() view returns (uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee)",
      "function setGasPayingToken(address _token, uint8 _decimals, bytes32 _name, bytes32 _symbol)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function version() pure returns (string)"
    ],
    "0x41675C099F32341bf84BFc5382aF534df5C7461a": [
      "constructor()",
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x4Fc6a6A2e3864709ae6AdCf29280dA01c95Aa10B": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ReentrancyGuardReentrantCall()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event ChallengeDAUpdate(bytes32 indexed _blockHash, uint256 indexed _pointerIndex, uint32 _shareIndex, uint256 _blockIndex, uint256 _expiry, uint8 indexed _status)",
      "event Initialized(uint64 version)",
      "event InvalidHeader(uint256 indexed _blockIndex, bytes32 indexed _hash, uint8 indexed _reason)",
      "event L2HeaderChallengeUpdate(bytes32 indexed challengeHash, uint256 indexed l2Number, bytes32 rblock, uint256 expiry, uint8 indexed status)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function chain() view returns (address)",
      "function chainOracle() view returns (address)",
      "function challengeDataRootInclusion(uint256 _blockIndex, uint8 _pointerIndex, uint32 _shareIndex) payable returns (uint256)",
      "function challengeFee() view returns (uint256)",
      "function challengeL2Header(uint256 _rblockNum, uint256 _l2Num) payable returns (bytes32)",
      "function challengePeriod() view returns (uint256)",
      "function challengeReward() view returns (uint256)",
      "function challengeWindow() view returns (uint256)",
      "function claimDAChallengeReward(bytes32 _challengeKey)",
      "function claimL2HeaderChallengeReward(bytes32 _challengeKey)",
      "function daChallenges(bytes32) view returns (bytes32 blockHash, uint256 blockIndex, uint8 pointerIndex, uint32 shareIndex, address challenger, uint256 expiry, uint8 status, bool claimed)",
      "function daNamespace() view returns (bytes1 version, bytes28 id)",
      "function daOracle() view returns (address)",
      "function dataRootInclusionChallengeKey(bytes32 _blockHash, uint8 _pointerIndex, uint32 _shareIndex) pure returns (bytes32)",
      "function defendDataRootInclusion(bytes32 _challengeKey, tuple(bytes[] data, tuple(uint256 beginKey, uint256 endKey, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] sideNodes)[] shareProofs, tuple(bytes1 version, bytes28 id) namespace, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] rowRoots, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves)[] rowProofs, tuple(uint256 tupleRootNonce, tuple(uint256 height, bytes32 dataRoot) tuple, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves) proof) attestationProof) _proof)",
      "function defendL2Header(bytes32 _challengeHash, bytes32 _headerHash, bytes32 _headerPrevHash)",
      "function defender() view returns (address)",
      "function finalizationSeconds() view returns (uint256)",
      "function initialize(address _chain, address _daOracle, address _chainOracle)",
      "function invalidateHeader(uint256 _blockIndex)",
      "function isDAChallengeEnabled() view returns (bool)",
      "function isHeaderChallengeEnabled() view returns (bool)",
      "function isL2HeaderChallengeEnabled() view returns (bool)",
      "function l2HeaderChallengeHash(bytes32 _rblockHash, uint256 _l2Num) pure returns (bytes32)",
      "function l2HeaderChallenges(bytes32) view returns (uint256 blockNum, tuple(bytes32 rblock, uint256 number) header, tuple(bytes32 rblock, uint256 number) prevHeader, uint256 challengeEnd, address challenger, uint8 status, bool claimed)",
      "function maxBundleSize() view returns (uint256)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function setChallengeFee(uint256 _challengeFee)",
      "function setChallengePeriod(uint256 _challengePeriod)",
      "function setChallengeReward(uint256 _challengeReward)",
      "function setChallengeWindow(uint256 _challengeWindow)",
      "function setDANamespace(tuple(bytes1 version, bytes28 id) _namespace)",
      "function setDAOracle(address _daOracle)",
      "function setDefender(address _defender)",
      "function setMaxBundleSize(uint256 _maxBundleSize)",
      "function settleDataRootInclusion(bytes32 _challengeKey)",
      "function settleL2HeaderChallenge(bytes32 _challengeHash)",
      "function toggleDAChallenge(bool _status)",
      "function toggleHeaderChallenge(bool _status)",
      "function toggleL2HeaderChallenge(bool _status)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x670E1C42A7A5962348138110E3ede3F422c10e2f": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x79B3E839333a74137e78b0DaF84FC12512a8c704": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function ShareKey(bytes32 _rblock, bytes[] _shareData) pure returns (bytes32)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function canonicalStateChain() view returns (address)",
      "function daOracle() view returns (address)",
      "function decodeDepositTx(bytes _data) view returns (tuple(uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function decodeLegacyTx(bytes _data) view returns (tuple(uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function decodeRLPHeader(bytes _data) view returns (tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce))",
      "function extractData(bytes[] raw, tuple(uint256 start, uint256 end)[] ranges) pure returns (bytes)",
      "function getHeader(bytes32 _headerHash) view returns (tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce))",
      "function getTransaction(bytes32 _txHash) view returns (tuple(uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function hashHeader(tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce) _header) pure returns (bytes32)",
      "function headerToRblock(bytes32) view returns (bytes32)",
      "function headers(bytes32) view returns (bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce)",
      "function initialize(address _canonicalStateChain, address _daOracle, address _rlpReader)",
      "function owner() view returns (address)",
      "function provideHeader(bytes32 _shareKey, tuple(uint256 start, uint256 end)[] _range) returns (bytes32)",
      "function provideLegacyTx(bytes32 _shareKey, tuple(uint256 start, uint256 end)[] _range) returns (bytes32)",
      "function provideShares(bytes32 _rblock, uint8 _pointer, tuple(bytes[] data, tuple(uint256 beginKey, uint256 endKey, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] sideNodes)[] shareProofs, tuple(bytes1 version, bytes28 id) namespace, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] rowRoots, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves)[] rowProofs, tuple(uint256 tupleRootNonce, tuple(uint256 height, bytes32 dataRoot) tuple, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves) proof) attestationProof) _proof) returns (bytes32)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function rlpReader() view returns (address)",
      "function setDAOracle(address _daOracle)",
      "function setRLPReader(address _rlpReader)",
      "function shares(bytes32, uint256) view returns (bytes)",
      "function transactions(bytes32) view returns (uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x8D43A0d17F9883ED0b2Ddf89761d3cc74a5fC6C7": [
      "constructor(address _singleton)"
    ],
    "0x9EC8231132d6722D463077a7cCe1432c3766d9A2": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function initialize(uint256 __startBlock, address __optimismPortal)",
      "function optimismPortal() view returns (address)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function setOptimismPortal(address __optimismPortal)",
      "function setStartBlock(uint256 __startBlock)",
      "function startBlock() view returns (uint256 startBlock_)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xA30eAe91b9184Bb5e14b86Dd10d463F67c699C38": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xB1Fb5A59A738c2df565d79572b0D6f348aE7cADE": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xc7a7199bb5F0aA7B54eca90fC793Ec83E5683b0c": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xCE7Ab4b8471A3119aabB63101b7C7B999464Fc48": [
      "constructor()",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error SafeERC20FailedOperation(address token)",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint64 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function version() view returns (string)"
    ],
    "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2": [
      "function toBlockHeader(bytes rlpHeader) pure returns (bytes32 parentHash, bytes32 sha3Uncles, address coinbase, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, uint256 nonce)",
      "function toDepositTx(bytes rlpTx) pure returns (uint256 chainId, uint256 nonce, uint256 gasPrice, uint256 gasLimit, address to, uint256 value, bytes data, uint256 v, uint256 r, uint256 s)",
      "function toLegacyTx(bytes rlpTx) pure returns (uint256 nonce, uint256 gasPrice, uint256 gasLimit, address to, uint256 value, bytes data, uint256 v, uint256 r, uint256 s)"
    ],
    "0xeFE38Bd58ADDf23eFab1FFa16312030384929289": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event BlockAdded(uint256 indexed blockNumber)",
      "event ChallengeChanged(address indexed challenge)",
      "event Initialized(uint64 version)",
      "event OutputProposed(bytes32 indexed outputRoot, uint256 indexed l2OutputIndex, uint256 indexed l2BlockNumber, uint256 l1Timestamp)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PublisherChanged(address indexed publisher)",
      "event RolledBack(uint256 indexed blockNumber)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function calculateHeaderHash(tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header) pure returns (bytes32)",
      "function chain(uint256) view returns (bytes32)",
      "function chainHead() view returns (uint256)",
      "function challenge() view returns (address)",
      "function getHead() view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getHeaderByHash(bytes32 _hash) view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getHeaderByNum(uint256 _index) view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getL2Output(uint256 _index) view returns (tuple(bytes32 outputRoot, uint64 timestamp))",
      "function headerMetadata(bytes32) view returns (uint64 timestamp, address publisher)",
      "function initialize(address _publisher, tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header)",
      "function maxPointers() view returns (uint8)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function publisher() view returns (address)",
      "function pushBlock(tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header)",
      "function renounceOwnership()",
      "function rollback(uint256 _blockNumber, bytes32 _blockHash)",
      "function setChallengeContract(address _challenge)",
      "function setMaxPointers(uint8 _maxPointers)",
      "function setPublisher(address _publisher)",
      "function startingTimestamp() view returns (uint64)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x9d7f7b8b6adea28c4538f12e31b0c59eac5339b4e5c80def637cccc0cfe82106",
    "lightlink/CanonicalStateChain": "0x2a1dee98a80fe70c5ab33c3a8609fdd914616093b8a54b13886ec89d95790113",
    "lightlink/ChainOracle": "0xb64f3873a84aacd7abfa1a8de00a1fcf40e58e20f71b881c8c791940ec233e61",
    "lightlink/Challenge": "0xdcb2d992b0ec031b3ea66e2a72f2f5c901f68231f201cc17993f2b13e6ebc244",
    "lightlink/LightLinkPortal": "0x5b643ee65a5d04e1b6d394d4b68be2dc8fb15e5fcf044b859e53294ba3589a27",
    "lightlink/SystemConfig": "0x13288d411fa1ab4d8e80eb3af80d254696dc3910ad4697dd495f12ecff3dac61",
    "opstack/L1CrossDomainMessenger": "0xde2a916ff69f6b7310088054466bd1ff30bd91e359db75b6f8b0da9c1b23b1b0",
    "opstack/L1StandardBridge": "0xf27b89c7dc7d718e47969109bf6470d680395ee0ce530dac25d74ec0fb77957a"
  }
}
