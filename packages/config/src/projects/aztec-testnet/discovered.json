{
  "name": "aztec-testnet",
  "timestamp": 1761637405,
  "configHash": "0xe4243e6cc5f019f429b93ed5c0006142dc24b00dbd7d2696823e05572f1c28f2",
  "entries": [
    {
      "address": "sep:0x0000000000000000000000000000000000000000",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "sep:0x17651b08d54B770f50C0c4e46752dF73ee013e74",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "sep:0x277289430297c0c1a83719062dA1A5b4Fb46f5F8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Rollup",
      "address": "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
      "type": "Contract",
      "sourceHashes": [
        "0x243eb0991bd5b7b558fe917ff342dd347155822b3d2da3a4bc76ec2b854b745f"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758122916,
      "sinceBlock": 9222769,
      "values": {
        "$immutable": true,
        "archive": "0x017831420c9f5e8ea757de4335debe035a2367105313792f6654cbb342b1c125",
        "archiveAt": [
          "0x1fa3de2e35ec7d3dce2bbd63848d90ea140a98b5db8cfd531e7a50776976d1ec",
          "0x2849d1495e58bae6d65b199ef55aa862a48f86aace2b6d09be899db26cb77fb5",
          "0x01beda91f39376bc43c7468d7f4ae9a6c5623e5a7edcbb6e6b9df29dca970788",
          "0x140c1161093006c82e26bf19742964b0a27bcf611db2644e5ae01e0b2af7e741",
          "0x1d18b7f9bbe1dfc34da60992f11358260fe9a9843c4b71f7b686ef070f842d8f"
        ],
        "canPruneAtTime": [],
        "checkBlob": true,
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Aztec Rollup",
          "version": "1",
          "chainId": 11155111,
          "verifyingContract": "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "getActivationThreshold": "100000000000000000000",
        "getActiveAttesterCount": 23761,
        "getAttesterAtIndex": [
          "sep:0xab218dac919E678AAA037f11a10Bda96b9e317Dc",
          "sep:0xAb3DC47924b69F35DA64E5Dda42568620bC46E9D",
          "sep:0x277289430297c0c1a83719062dA1A5b4Fb46f5F8",
          "sep:0xaEA577d3c40C583c90604aD0407a74AE0C3Cb626",
          "sep:0x17651b08d54B770f50C0c4e46752dF73ee013e74"
        ],
        "getBlobCommitmentsHash": [],
        "getBlock": [
          [
            "0x1fa3de2e35ec7d3dce2bbd63848d90ea140a98b5db8cfd531e7a50776976d1ec",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            [0, 0, 0, 0, 0]
          ],
          [
            "0x2849d1495e58bae6d65b199ef55aa862a48f86aace2b6d09be899db26cb77fb5",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            [0, 0, 0, 0, 0]
          ],
          [
            "0x01beda91f39376bc43c7468d7f4ae9a6c5623e5a7edcbb6e6b9df29dca970788",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            [0, 0, 0, 0, 0]
          ],
          [
            "0x140c1161093006c82e26bf19742964b0a27bcf611db2644e5ae01e0b2af7e741",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            [0, 0, 0, 0, 0]
          ],
          [
            "0x1d18b7f9bbe1dfc34da60992f11358260fe9a9843c4b71f7b686ef070f842d8f",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            [0, 0, 0, 0, 0]
          ]
        ],
        "getBlockReward": "500000000000000000000",
        "getBurnAddress": "sep:0x4355415548584943414c4c490000000000000000",
        "getCollectiveProverRewardsForEpoch": [0, 0, 0, 0, 0],
        "getCurrentBlobCommitmentsHash": "0x003249e5ce97f9b0c46ed04e5ae858d6e4ec08ad39be1917c0d67eb81eed4890",
        "getCurrentEpoch": 3050,
        "getCurrentSampleSeed": "1199045158885698265919764969098399823101449428729273117595417458687343220087",
        "getCurrentSlot": 97624,
        "getEjectionThreshold": "50000000000000000000",
        "getEntryQueueFlushSize": 32,
        "getEntryQueueLength": 0,
        "getEpochAt": [],
        "getEpochAtSlot": [0, 0, 0, 0, 0],
        "getEpochDuration": 32,
        "getEpochForBlock": [],
        "getExitDelay": 172800,
        "getFeeAsset": "sep:0xAAB785EEa290AEAE003732e603987979E63955E2",
        "getFeeAssetPerEth": 10000000000,
        "getFeeAssetPortal": "sep:0x96109891056303267969f58e1B5a61b87Da47129",
        "getFeeHeader": [],
        "getGenesisTime": 1758122916,
        "getGSE": "sep:0x67788e5083646cCEDeeb07E7Bc35Ab0d511fc8B9",
        "getInbox": "sep:0x8F4D9A05374C1d99825FDb291340021B9A7dC6d2",
        "getL1FeesAt": [],
        "getManaLimit": 20000000000,
        "getManaTarget": 10000000000,
        "getNextFlushableEpoch": 3051,
        "getOutbox": "sep:0x3aEbEd9BF5F4303401547aE68DA04A124c100bC1",
        "getPendingBlockNumber": 41566,
        "getProofSubmissionEpochs": 1,
        "getProvenBlockNumber": 41565,
        "getProvingCostPerManaInEth": 100,
        "getProvingCostPerManaInFeeAsset": 1000,
        "getRewardConfig": {
          "rewardDistributor": "sep:0x2B171f0E4856e32a43fED78691CEC79deC2823b3",
          "sequencerBps": 8000,
          "booster": "sep:0xC467823247b75504a66Fc008adde3F741ab0Ac11",
          "blockReward": "500000000000000000000"
        },
        "getRewardDistributor": "sep:0x2B171f0E4856e32a43fED78691CEC79deC2823b3",
        "getSampleSeedAt": [],
        "getSlasher": "sep:0xe0927107Db2f45d1f9C4F6E591636Da528Cf9F4d",
        "getSlotAt": [],
        "getSlotDuration": 36,
        "getStakingAsset": "sep:0x6732CEDafCBF85Afa9B5C83f0385967840BBCe47",
        "getTargetCommitteeSize": 48,
        "getTimestampForSlot": [
          1758122916, 1758122952, 1758122988, 1758123024, 1758123060
        ],
        "getTips": { "pendingBlockNumber": 41566, "provenBlockNumber": 41565 },
        "getVersion": 1714840162,
        "isRewardsClaimable": false,
        "L1_BLOCK_AT_GENESIS": 9222769,
        "owner": "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
        "status": [
          [
            41565,
            "0x0480c6fde63ba100942df5ffec3bf87fe7419f830709f9bd391d47a44f54715e",
            41566,
            "0x017831420c9f5e8ea757de4335debe035a2367105313792f6654cbb342b1c125",
            "0x1fa3de2e35ec7d3dce2bbd63848d90ea140a98b5db8cfd531e7a50776976d1ec",
            2525
          ],
          [
            41565,
            "0x0480c6fde63ba100942df5ffec3bf87fe7419f830709f9bd391d47a44f54715e",
            41566,
            "0x017831420c9f5e8ea757de4335debe035a2367105313792f6654cbb342b1c125",
            "0x2849d1495e58bae6d65b199ef55aa862a48f86aace2b6d09be899db26cb77fb5",
            2525
          ],
          [
            41565,
            "0x0480c6fde63ba100942df5ffec3bf87fe7419f830709f9bd391d47a44f54715e",
            41566,
            "0x017831420c9f5e8ea757de4335debe035a2367105313792f6654cbb342b1c125",
            "0x01beda91f39376bc43c7468d7f4ae9a6c5623e5a7edcbb6e6b9df29dca970788",
            2525
          ],
          [
            41565,
            "0x0480c6fde63ba100942df5ffec3bf87fe7419f830709f9bd391d47a44f54715e",
            41566,
            "0x017831420c9f5e8ea757de4335debe035a2367105313792f6654cbb342b1c125",
            "0x140c1161093006c82e26bf19742964b0a27bcf611db2644e5ae01e0b2af7e741",
            2525
          ],
          [
            41565,
            "0x0480c6fde63ba100942df5ffec3bf87fe7419f830709f9bd391d47a44f54715e",
            41566,
            "0x017831420c9f5e8ea757de4335debe035a2367105313792f6654cbb342b1c125",
            "0x1d18b7f9bbe1dfc34da60992f11358260fe9a9843c4b71f7b686ef070f842d8f",
            2525
          ]
        ]
      },
      "errors": {
        "archiveAt": "Processing error occurred.",
        "getAttesterAtIndex": "Processing error occurred.",
        "getBlock": "Processing error occurred.",
        "getCollectiveProverRewardsForEpoch": "Processing error occurred.",
        "getEpochAtSlot": "Processing error occurred.",
        "getTimestampForSlot": "Processing error occurred.",
        "status": "Processing error occurred."
      },
      "implementationNames": {
        "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f": "Rollup"
      }
    },
    {
      "name": "",
      "address": "sep:0x2B171f0E4856e32a43fED78691CEC79deC2823b3",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1758119736,
      "sinceBlock": 9222515,
      "values": { "$immutable": true },
      "implementationNames": {
        "sep:0x2B171f0E4856e32a43fED78691CEC79deC2823b3": ""
      }
    },
    {
      "name": "Outbox",
      "address": "sep:0x3aEbEd9BF5F4303401547aE68DA04A124c100bC1",
      "type": "Contract",
      "sourceHashes": [
        "0xcd1fc8358c39ca1910ecf928f8f3e73996855f6942e65835b447ec2f60419733"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758122916,
      "sinceBlock": 9222769,
      "values": {
        "$immutable": true,
        "getRootData": [
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x004b04279e726a0e8e423b43e4d48d144a8506c0bc4e22f527366ea0a33ee373",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "ROLLUP": "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
        "VERSION": 1714840162
      },
      "errors": { "getRootData": "Processing error occurred." },
      "implementationNames": {
        "sep:0x3aEbEd9BF5F4303401547aE68DA04A124c100bC1": "Outbox"
      }
    },
    {
      "address": "sep:0x4355415548584943414c4c490000000000000000",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "TestERC20",
      "address": "sep:0x6732CEDafCBF85Afa9B5C83f0385967840BBCe47",
      "type": "Contract",
      "sourceHashes": [
        "0xfa3be345de0987c2c71e0ff7fcc9b00e992244e56ac2e2a8ea467b9e1ebe50a7"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758119736,
      "sinceBlock": 9222515,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "name": "Staking",
        "owner": "sep:0xdfe19Da6a717b7088621d8bBB66be59F2d78e924",
        "pendingOwner": "sep:0x0000000000000000000000000000000000000000",
        "symbol": "STK",
        "totalSupply": "612863400000000000000000000"
      },
      "implementationNames": {
        "sep:0x6732CEDafCBF85Afa9B5C83f0385967840BBCe47": "TestERC20"
      }
    },
    {
      "name": "GSE",
      "address": "sep:0x67788e5083646cCEDeeb07E7Bc35Ab0d511fc8B9",
      "type": "Contract",
      "sourceHashes": [
        "0x0fa47bd9ece6607dccd533aa2fa0fa66611d24f2f011af8c78a99530e66624e8"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758119736,
      "sinceBlock": 9222515,
      "values": {
        "$immutable": true,
        "ACTIVATION_THRESHOLD": "100000000000000000000",
        "ASSET": "sep:0x6732CEDafCBF85Afa9B5C83f0385967840BBCe47",
        "BONUS_INSTANCE_ADDRESS": "sep:0x9064Fb41156D300196d5Eb95E0B3c1f08eBc39a8",
        "EJECTION_THRESHOLD": "50000000000000000000",
        "getBonusInstanceAddress": "sep:0x9064Fb41156D300196d5Eb95E0B3c1f08eBc39a8",
        "getGovernance": "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
        "getLatestRollup": "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
        "getLatestRollupAt": [
          "sep:0x0000000000000000000000000000000000000000",
          "sep:0x0000000000000000000000000000000000000000",
          "sep:0x0000000000000000000000000000000000000000",
          "sep:0x0000000000000000000000000000000000000000",
          "sep:0x0000000000000000000000000000000000000000"
        ],
        "owner": "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
        "totalSupply": "2287620000000000000000000"
      },
      "errors": { "getLatestRollupAt": "Processing error occurred." },
      "implementationNames": {
        "sep:0x67788e5083646cCEDeeb07E7Bc35Ab0d511fc8B9": "GSE"
      }
    },
    {
      "name": "CoinIssuer",
      "address": "sep:0x6AA988BD21A8b3BE6A57cE89B7fe4dE2B0Bf2D2C",
      "type": "Contract",
      "sourceHashes": [
        "0xa9289cf6524f97eabf8c081c89eb6941a87fb489b282620730b78379c7174812"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758122868,
      "sinceBlock": 9222765,
      "values": {
        "$immutable": true,
        "ASSET": "sep:0xAAB785EEa290AEAE003732e603987979E63955E2",
        "mintAvailable": "3514512000000000000000000000000",
        "owner": "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
        "RATE": "1000000000000000000000000",
        "timeOfLastMint": 1758122868
      },
      "implementationNames": {
        "sep:0x6AA988BD21A8b3BE6A57cE89B7fe4dE2B0Bf2D2C": "CoinIssuer"
      }
    },
    {
      "name": "Governance",
      "address": "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
      "type": "Contract",
      "sourceHashes": [
        "0x7064d575a56f8c392f867b0a1277c12fb6e75cfe08b3d74b67c06dbbaf04cb9d"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758122868,
      "sinceBlock": 9222765,
      "values": {
        "$immutable": true,
        "ASSET": "sep:0x6732CEDafCBF85Afa9B5C83f0385967840BBCe47",
        "getConfiguration": {
          "proposeConfig": {
            "lockDelay": 2592000,
            "lockAmount": "250000000000000000000000000"
          },
          "votingDelay": 43200,
          "votingDuration": 86400,
          "executionDelay": 43200,
          "gracePeriod": 86400,
          "quorum": "200000000000000000",
          "requiredYeaMargin": "100000000000000000",
          "minimumVotes": "250000000000000000000000000"
        },
        "getProposal": [
          [
            [
              43200,
              86400,
              43200,
              86400,
              "200000000000000000",
              "100000000000000000",
              "250000000000000000000000000"
            ],
            0,
            "sep:0x9D8869D17Af6B899AFf1d93F23f863FF41ddc4fa",
            "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
            1760785812,
            [0, 0]
          ],
          [
            [
              43200,
              86400,
              43200,
              86400,
              "200000000000000000",
              "100000000000000000",
              "250000000000000000000000000"
            ],
            0,
            "sep:0x9D8869D17Af6B899AFf1d93F23f863FF41ddc4fa",
            "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
            1760948280,
            [0, 0]
          ],
          [
            [0, 0, 0, 0, 0, 0, 0],
            0,
            "sep:0x0000000000000000000000000000000000000000",
            "sep:0x0000000000000000000000000000000000000000",
            0,
            [0, 0]
          ],
          [
            [0, 0, 0, 0, 0, 0, 0],
            0,
            "sep:0x0000000000000000000000000000000000000000",
            "sep:0x0000000000000000000000000000000000000000",
            0,
            [0, 0]
          ],
          [
            [0, 0, 0, 0, 0, 0, 0],
            0,
            "sep:0x0000000000000000000000000000000000000000",
            "sep:0x0000000000000000000000000000000000000000",
            0,
            [0, 0]
          ]
        ],
        "getProposalState": [4, 4],
        "getWithdrawal": [
          [
            "20000000000000000000",
            1758450156,
            "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
            false
          ],
          [
            "20000000000000000000",
            1758450156,
            "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
            false
          ],
          [
            "20000000000000000000",
            1758450156,
            "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
            false
          ],
          [
            "20000000000000000000",
            1758450156,
            "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
            false
          ],
          [
            "20000000000000000000",
            1758450156,
            "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
            false
          ]
        ],
        "governanceProposer": "sep:0xB973B3D5884e0B8DA179d808308f7702d317b280",
        "isAllBeneficiariesAllowed": false,
        "proposalCount": 2,
        "totalPowerAt": [0, 0, 0, 0, 0],
        "totalPowerNow": "2287620000000000000000000",
        "withdrawalCount": 10417
      },
      "errors": {
        "getProposal": "Processing error occurred.",
        "getWithdrawal": "Processing error occurred.",
        "totalPowerAt": "Processing error occurred."
      },
      "implementationNames": {
        "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5": "Governance"
      }
    },
    {
      "name": "Inbox",
      "address": "sep:0x8F4D9A05374C1d99825FDb291340021B9A7dC6d2",
      "type": "Contract",
      "sourceHashes": [
        "0x695a7266c92b7c4a3db403c4a9e93adec62c560daf3cf2c6bc6abd4d6c798d09"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758122916,
      "sinceBlock": 9222769,
      "values": {
        "$immutable": true,
        "FEE_ASSET_PORTAL": "sep:0x96109891056303267969f58e1B5a61b87Da47129",
        "getFeeAssetPortal": "sep:0x96109891056303267969f58e1B5a61b87Da47129",
        "getInProgress": 41570,
        "getRoot": [
          "0x00089a9d421a82c4a25f7acbebe69e638d5b064fa8a60e018793dcb0be53752c",
          "0x00089a9d421a82c4a25f7acbebe69e638d5b064fa8a60e018793dcb0be53752c",
          "0x00089a9d421a82c4a25f7acbebe69e638d5b064fa8a60e018793dcb0be53752c",
          "0x00089a9d421a82c4a25f7acbebe69e638d5b064fa8a60e018793dcb0be53752c",
          "0x00089a9d421a82c4a25f7acbebe69e638d5b064fa8a60e018793dcb0be53752c"
        ],
        "getState": {
          "rollingHash": "0xa49196d58edc552be5233a9e6594e233",
          "totalMessagesInserted": 156,
          "inProgress": 41570
        },
        "getTotalMessagesInserted": 156,
        "ROLLUP": "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
        "trees": [0, 0, 0, 0, 0],
        "VERSION": 1714840162
      },
      "errors": {
        "getRoot": "Processing error occurred.",
        "trees": "Processing error occurred."
      },
      "implementationNames": {
        "sep:0x8F4D9A05374C1d99825FDb291340021B9A7dC6d2": "Inbox"
      }
    },
    {
      "address": "sep:0x9064Fb41156D300196d5Eb95E0B3c1f08eBc39a8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "",
      "address": "sep:0x96109891056303267969f58e1B5a61b87Da47129",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1758122916,
      "sinceBlock": 9222769,
      "values": { "$immutable": true },
      "implementationNames": {
        "sep:0x96109891056303267969f58e1B5a61b87Da47129": ""
      }
    },
    {
      "name": "TallySlashingProposer",
      "address": "sep:0x9A5fC69F737d152a187DfdcE5743077e4d357081",
      "type": "Contract",
      "sourceHashes": [
        "0xda60bf61f6442d61772400c8acf7a9298bb5bf8359c7dcdfb22c02157db10a18"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758122916,
      "sinceBlock": 9222769,
      "values": {
        "$immutable": true,
        "COMMITTEE_SIZE": 48,
        "eip712Domain": {
          "fields": "0x0f",
          "name": "TallySlashingProposer",
          "version": "1",
          "chainId": 11155111,
          "verifyingContract": "sep:0x9A5fC69F737d152a187DfdcE5743077e4d357081",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "EXECUTION_DELAY_IN_ROUNDS": 1,
        "getCurrentRound": 762,
        "getRound": [],
        "INSTANCE": "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
        "LIFETIME_IN_ROUNDS": 5,
        "MAX_ROUND_SIZE": 1024,
        "QUORUM": 65,
        "ROUND_SIZE": 128,
        "ROUND_SIZE_IN_EPOCHS": 4,
        "ROUNDABOUT_SIZE": 128,
        "SLASH_AMOUNT_LARGE": "50000000000000000000",
        "SLASH_AMOUNT_MEDIUM": "20000000000000000000",
        "SLASH_AMOUNT_SMALL": "10000000000000000000",
        "SLASH_OFFSET_IN_ROUNDS": 2,
        "SLASH_PAYLOAD_IMPLEMENTATION": "sep:0xA69AD061672f8818163C86A351c298D5D5a90dd4",
        "SLASHER": "sep:0xe0927107Db2f45d1f9C4F6E591636Da528Cf9F4d",
        "SLASHING_PROPOSER_TYPE": 1,
        "VOTE_TYPEHASH": "0x18b6b90f234e6d028d4c9800043cedef34624eedddd14e60eba01934728014fe"
      },
      "implementationNames": {
        "sep:0x9A5fC69F737d152a187DfdcE5743077e4d357081": "TallySlashingProposer"
      }
    },
    {
      "name": "",
      "address": "sep:0x9D8869D17Af6B899AFf1d93F23f863FF41ddc4fa",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1759844832,
      "sinceBlock": 9362194,
      "values": { "$immutable": true },
      "implementationNames": {
        "sep:0x9D8869D17Af6B899AFf1d93F23f863FF41ddc4fa": ""
      }
    },
    {
      "name": "",
      "address": "sep:0xA69AD061672f8818163C86A351c298D5D5a90dd4",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1758122916,
      "sinceBlock": 9222769,
      "values": { "$immutable": true },
      "implementationNames": {
        "sep:0xA69AD061672f8818163C86A351c298D5D5a90dd4": ""
      }
    },
    {
      "name": "TestERC20",
      "address": "sep:0xAAB785EEa290AEAE003732e603987979E63955E2",
      "type": "Contract",
      "sourceHashes": [
        "0xfa3be345de0987c2c71e0ff7fcc9b00e992244e56ac2e2a8ea467b9e1ebe50a7"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758119736,
      "sinceBlock": 9222515,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "name": "FeeJuice",
        "owner": "sep:0x6AA988BD21A8b3BE6A57cE89B7fe4dE2B0Bf2D2C",
        "pendingOwner": "sep:0x0000000000000000000000000000000000000000",
        "symbol": "FEE",
        "totalSupply": "10210220000000000000000000000"
      },
      "implementationNames": {
        "sep:0xAAB785EEa290AEAE003732e603987979E63955E2": "TestERC20"
      }
    },
    {
      "address": "sep:0xab218dac919E678AAA037f11a10Bda96b9e317Dc",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "sep:0xAb3DC47924b69F35DA64E5Dda42568620bC46E9D",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "sep:0xaEA577d3c40C583c90604aD0407a74AE0C3Cb626",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GovernanceProposer",
      "address": "sep:0xB973B3D5884e0B8DA179d808308f7702d317b280",
      "type": "Contract",
      "sourceHashes": [
        "0xca08bbf520c5d9c0b40ec7c1113091ce5385598c860b0f1f9e2b338f3b20de68"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758119736,
      "sinceBlock": 9222515,
      "values": {
        "$immutable": true,
        "computeRound": [0, 0, 0, 0, 0],
        "eip712Domain": {
          "fields": "0x0f",
          "name": "EmpireBase",
          "version": "1",
          "chainId": 11155111,
          "verifyingContract": "sep:0xB973B3D5884e0B8DA179d808308f7702d317b280",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "EXECUTION_DELAY_IN_ROUNDS": 0,
        "getCurrentRound": 325,
        "getGovernance": "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
        "getInstance": "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
        "getProposalProposer": [
          "sep:0x0000000000000000000000000000000000000000",
          "sep:0x0000000000000000000000000000000000000000",
          "sep:0x0000000000000000000000000000000000000000",
          "sep:0x0000000000000000000000000000000000000000",
          "sep:0x0000000000000000000000000000000000000000"
        ],
        "GSE": "sep:0x67788e5083646cCEDeeb07E7Bc35Ab0d511fc8B9",
        "LIFETIME_IN_ROUNDS": 5,
        "QUORUM_SIZE": 151,
        "REGISTRY": "sep:0xc2F24280F5c7F4897370dFDEb30f79Ded14f1c81",
        "ROUND_SIZE": 300,
        "SIGNAL_TYPEHASH": "0xdec0bfc6a67146d790874e4994d7a4662b60c6400491f3d945793c73ea05ebb7"
      },
      "errors": {
        "computeRound": "Processing error occurred.",
        "getProposalProposer": "Processing error occurred."
      },
      "implementationNames": {
        "sep:0xB973B3D5884e0B8DA179d808308f7702d317b280": "GovernanceProposer"
      }
    },
    {
      "name": "Registry",
      "address": "sep:0xc2F24280F5c7F4897370dFDEb30f79Ded14f1c81",
      "type": "Contract",
      "sourceHashes": [
        "0x84f3a3a343bac1195f7695951f6a78699a7f8205aca27efad25c70adde1da64b"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758119736,
      "sinceBlock": 9222515,
      "values": {
        "$immutable": true,
        "getCanonicalRollup": "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f",
        "getGovernance": "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5",
        "getRewardDistributor": "sep:0x2B171f0E4856e32a43fED78691CEC79deC2823b3",
        "getRollup": [],
        "getVersion": [1714840162],
        "numberOfVersions": 1,
        "owner": "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5"
      },
      "implementationNames": {
        "sep:0xc2F24280F5c7F4897370dFDEb30f79Ded14f1c81": "Registry"
      }
    },
    {
      "name": "",
      "address": "sep:0xC467823247b75504a66Fc008adde3F741ab0Ac11",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1758122916,
      "sinceBlock": 9222769,
      "values": { "$immutable": true },
      "implementationNames": {
        "sep:0xC467823247b75504a66Fc008adde3F741ab0Ac11": ""
      }
    },
    {
      "address": "sep:0xdfe19Da6a717b7088621d8bBB66be59F2d78e924",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Slasher",
      "address": "sep:0xe0927107Db2f45d1f9C4F6E591636Da528Cf9F4d",
      "type": "Contract",
      "sourceHashes": [
        "0xb09d2855dd05c267d3bb55e7fa69bb233a45a2396bc8018367b0bec85ff8ea3a"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758122916,
      "sinceBlock": 9222769,
      "values": {
        "$immutable": true,
        "GOVERNANCE": "sep:0xdfe19Da6a717b7088621d8bBB66be59F2d78e924",
        "PROPOSER": "sep:0x9A5fC69F737d152a187DfdcE5743077e4d357081",
        "VETOER": "sep:0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "sep:0xe0927107Db2f45d1f9C4F6E591636Da528Cf9F4d": "Slasher"
      }
    }
  ],
  "abis": {
    "sep:0x29Fa27E173f058d0f5F618F5AbAd2757747f673f": [
      "constructor(address _feeAsset, address _stakingAsset, address _gse, address _epochProofVerifier, address _governance, tuple(bytes32 vkTreeRoot, bytes32 protocolContractTreeRoot, bytes32 genesisArchiveRoot) _genesisState, tuple(uint256 aztecSlotDuration, uint256 aztecEpochDuration, uint256 targetCommitteeSize, uint256 aztecProofSubmissionEpochs, uint256 slashingQuorum, uint256 slashingRoundSize, uint256 slashingLifetimeInRounds, uint256 slashingExecutionDelayInRounds, uint256[3] slashAmounts, uint256 slashingOffsetInRounds, uint8 slasherFlavor, address slashingVetoer, uint256 manaTarget, uint256 exitDelaySeconds, uint32 version, uint256 provingCostPerMana, tuple(address rewardDistributor, uint32 sequencerBps, address booster, uint96 blockReward) rewardConfig, tuple(uint32 increment, uint32 maxScore, uint32 a, uint32 minimum, uint32 k) rewardBoostConfig, tuple(uint256 bootstrapValidatorSetSize, uint256 bootstrapFlushSize, uint256 normalFlushSizeMin, uint256 normalFlushSizeQuotient, uint256 maxQueueFlushSize) stakingQueueConfig) _config)",
      "error InvalidShortString()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error Rollup__AlreadyClaimed(address prover, uint256 epoch)",
      "error Rollup__InvalidBlockNumber(uint256 expected, uint256 actual)",
      "error Rollup__InvalidManaTarget(uint256 minimum, uint256 provided)",
      "error Rollup__NotPastDeadline(uint256 deadline, uint256 currentEpoch)",
      "error Rollup__RewardsNotClaimable()",
      "error Rollup__StaleTempBlockLog(uint256 blockNumber, uint256 pendingBlockNumber, uint256 size)",
      "error SafeCastOverflowedIntToUint(int256 value)",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error Staking__InvalidStakingQueueConfig()",
      "error StringTooLong(string str)",
      "event BlockInvalidated(uint256 indexed blockNumber)",
      "event Deposit(address indexed attester, address indexed withdrawer, tuple(uint256 x, uint256 y) publicKeyInG1, tuple(uint256 x0, uint256 x1, uint256 y0, uint256 y1) publicKeyInG2, tuple(uint256 x, uint256 y) proofOfPossession, uint256 amount)",
      "event EIP712DomainChanged()",
      "event FailedDeposit(address indexed attester, address indexed withdrawer, tuple(uint256 x, uint256 y) publicKeyInG1, tuple(uint256 x0, uint256 x1, uint256 y0, uint256 y1) publicKeyInG2, tuple(uint256 x, uint256 y) proofOfPossession)",
      "event L2BlockProposed(uint256 indexed blockNumber, bytes32 indexed archive, bytes32[] versionedBlobHashes)",
      "event L2ProofVerified(uint256 indexed blockNumber, address indexed proverId)",
      "event ManaTargetUpdated(uint256 indexed manaTarget)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PrunedPending(uint256 provenBlockNumber, uint256 pendingBlockNumber)",
      "event RewardConfigUpdated(tuple(address rewardDistributor, uint32 sequencerBps, address booster, uint96 blockReward) rewardConfig)",
      "event RewardsClaimableUpdated(bool isRewardsClaimable)",
      "event Slashed(address indexed attester, uint256 amount)",
      "event SlasherUpdated(address indexed oldSlasher, address indexed newSlasher)",
      "event StakingQueueConfigUpdated(tuple(uint256 bootstrapValidatorSetSize, uint256 bootstrapFlushSize, uint256 normalFlushSizeMin, uint256 normalFlushSizeQuotient, uint256 maxQueueFlushSize) config)",
      "event ValidatorQueued(address indexed attester, address indexed withdrawer)",
      "event WithdrawFinalized(address indexed attester, address indexed recipient, uint256 amount)",
      "event WithdrawInitiated(address indexed attester, address indexed recipient, uint256 amount)",
      "function L1_BLOCK_AT_GENESIS() view returns (uint256)",
      "function archive() view returns (bytes32)",
      "function archiveAt(uint256 _blockNumber) view returns (bytes32)",
      "function canProposeAtTime(uint256 _ts, bytes32 _archive, address _who) returns (uint256, uint256)",
      "function canPruneAtTime(uint256 _ts) view returns (bool)",
      "function checkBlob() view returns (bool)",
      "function checkpointRandao()",
      "function claimProverRewards(address _coinbase, uint256[] _epochs) returns (uint256)",
      "function claimSequencerRewards(address _coinbase) returns (uint256)",
      "function deposit(address _attester, address _withdrawer, tuple(uint256 x, uint256 y) _publicKeyInG1, tuple(uint256 x0, uint256 x1, uint256 y0, uint256 y1) _publicKeyInG2, tuple(uint256 x, uint256 y) _proofOfPossession, bool _moveWithLatestRollup)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function finalizeWithdraw(address _attester)",
      "function flushEntryQueue()",
      "function getActivationThreshold() view returns (uint256)",
      "function getActiveAttesterCount() view returns (uint256)",
      "function getAttesterAtIndex(uint256 _index) view returns (address)",
      "function getAttesterView(address _attester) view returns (tuple(uint8 status, uint256 effectiveBalance, tuple(uint256 withdrawalId, uint256 amount, uint256 exitableAt, address recipientOrWithdrawer, bool isRecipient, bool exists) exit, tuple(tuple(uint256 x, uint256 y) publicKey, address withdrawer) config))",
      "function getBlobCommitmentsHash(uint256 _blockNumber) view returns (bytes32)",
      "function getBlock(uint256 _blockNumber) view returns (tuple(bytes32 archive, bytes32 headerHash, bytes32 blobCommitmentsHash, bytes32 attestationsHash, bytes32 payloadDigest, uint256 slotNumber, tuple(uint256 excessMana, uint256 manaUsed, uint256 feeAssetPriceNumerator, uint256 congestionCost, uint256 proverCost) feeHeader))",
      "function getBlockReward() view returns (uint256)",
      "function getBurnAddress() pure returns (address)",
      "function getCollectiveProverRewardsForEpoch(uint256 _epoch) view returns (uint256)",
      "function getCommitteeAt(uint256 _ts) returns (address[])",
      "function getCommitteeCommitmentAt(uint256 _ts) returns (bytes32, uint256)",
      "function getConfig(address _attester) view returns (tuple(tuple(uint256 x, uint256 y) publicKey, address withdrawer))",
      "function getCurrentBlobCommitmentsHash() view returns (bytes32)",
      "function getCurrentEpoch() view returns (uint256)",
      "function getCurrentEpochCommittee() returns (address[])",
      "function getCurrentProposer() returns (address)",
      "function getCurrentSampleSeed() view returns (uint256)",
      "function getCurrentSlot() view returns (uint256)",
      "function getEjectionThreshold() view returns (uint256)",
      "function getEntryQueueFlushSize() view returns (uint256)",
      "function getEntryQueueLength() view returns (uint256)",
      "function getEpochAt(uint256 _ts) view returns (uint256)",
      "function getEpochAtSlot(uint256 _slotNumber) view returns (uint256)",
      "function getEpochCommittee(uint256 _epoch) returns (address[])",
      "function getEpochCommitteeCommitment(uint256 _epoch) returns (bytes32, uint256)",
      "function getEpochDuration() view returns (uint256)",
      "function getEpochForBlock(uint256 _blockNumber) view returns (uint256)",
      "function getEpochProofPublicInputs(uint256 _start, uint256 _end, tuple(bytes32 previousArchive, bytes32 endArchive, address proverId) _args, bytes32[] _fees, bytes _blobPublicInputs) view returns (bytes32[])",
      "function getExit(address _attester) view returns (tuple(uint256 withdrawalId, uint256 amount, uint256 exitableAt, address recipientOrWithdrawer, bool isRecipient, bool exists))",
      "function getExitDelay() view returns (uint256)",
      "function getFeeAsset() view returns (address)",
      "function getFeeAssetPerEth() view returns (uint256)",
      "function getFeeAssetPortal() view returns (address)",
      "function getFeeHeader(uint256 _blockNumber) view returns (tuple(uint256 excessMana, uint256 manaUsed, uint256 feeAssetPriceNumerator, uint256 congestionCost, uint256 proverCost))",
      "function getGSE() view returns (address)",
      "function getGenesisTime() view returns (uint256)",
      "function getHasClaimed(address _prover, uint256 _epoch) view returns (bool)",
      "function getHasSubmitted(uint256 _epoch, uint256 _length, address _prover) view returns (bool)",
      "function getInbox() view returns (address)",
      "function getL1FeesAt(uint256 _timestamp) view returns (tuple(uint256 baseFee, uint256 blobFee))",
      "function getManaBaseFeeAt(uint256 _timestamp, bool _inFeeAsset) view returns (uint256)",
      "function getManaBaseFeeComponentsAt(uint256 _timestamp, bool _inFeeAsset) view returns (tuple(uint256 congestionCost, uint256 congestionMultiplier, uint256 sequencerCost, uint256 proverCost))",
      "function getManaLimit() view returns (uint256)",
      "function getManaTarget() view returns (uint256)",
      "function getNextFlushableEpoch() view returns (uint256)",
      "function getOutbox() view returns (address)",
      "function getPendingBlockNumber() view returns (uint256)",
      "function getProofSubmissionEpochs() view returns (uint256)",
      "function getProposerAt(uint256 _ts) returns (address)",
      "function getProvenBlockNumber() view returns (uint256)",
      "function getProvingCostPerManaInEth() view returns (uint256)",
      "function getProvingCostPerManaInFeeAsset() view returns (uint256)",
      "function getRewardConfig() view returns (tuple(address rewardDistributor, uint32 sequencerBps, address booster, uint96 blockReward))",
      "function getRewardDistributor() view returns (address)",
      "function getSampleSeedAt(uint256 _ts) view returns (uint256)",
      "function getSequencerRewards(address _sequencer) view returns (uint256)",
      "function getSharesFor(address _prover) view returns (uint256)",
      "function getSlasher() view returns (address)",
      "function getSlotAt(uint256 _ts) view returns (uint256)",
      "function getSlotDuration() view returns (uint256)",
      "function getSpecificProverRewardsForEpoch(uint256 _epoch, address _prover) view returns (uint256)",
      "function getStakingAsset() view returns (address)",
      "function getStatus(address _attester) view returns (uint8)",
      "function getTargetCommitteeSize() view returns (uint256)",
      "function getTimestampForSlot(uint256 _slotNumber) view returns (uint256)",
      "function getTips() view returns (tuple(uint256 pendingBlockNumber, uint256 provenBlockNumber))",
      "function getVersion() view returns (uint256)",
      "function initiateWithdraw(address _attester, address _recipient) returns (bool)",
      "function invalidateBadAttestation(uint256 _blockNumber, tuple(bytes signatureIndices, bytes signaturesOrAddresses) _attestations, address[] _committee, uint256 _invalidIndex)",
      "function invalidateInsufficientAttestations(uint256 _blockNumber, tuple(bytes signatureIndices, bytes signaturesOrAddresses) _attestations, address[] _committee)",
      "function isRewardsClaimable() view returns (bool)",
      "function owner() view returns (address)",
      "function propose(tuple(bytes32 archive, tuple(tuple(bytes32 root, uint32 nextAvailableLeafIndex) l1ToL2MessageTree, tuple(tuple(bytes32 root, uint32 nextAvailableLeafIndex) noteHashTree, tuple(bytes32 root, uint32 nextAvailableLeafIndex) nullifierTree, tuple(bytes32 root, uint32 nextAvailableLeafIndex) publicDataTree) partialStateReference) stateReference, tuple(int256 feeAssetPriceModifier) oracleInput, tuple(bytes32 lastArchiveRoot, tuple(bytes32 blobsHash, bytes32 inHash, bytes32 outHash) contentCommitment, uint256 slotNumber, uint256 timestamp, address coinbase, bytes32 feeRecipient, tuple(uint128 feePerDaGas, uint128 feePerL2Gas) gasFees, uint256 totalManaUsed) header) _args, tuple(bytes signatureIndices, bytes signaturesOrAddresses) _attestations, address[] _signers, bytes _blobInput)",
      "function prune()",
      "function renounceOwnership()",
      "function setProvingCostPerMana(uint256 _provingCostPerMana)",
      "function setRewardConfig(tuple(address rewardDistributor, uint32 sequencerBps, address booster, uint96 blockReward) _config)",
      "function setRewardsClaimable(bool _isRewardsClaimable)",
      "function setSlasher(address _slasher)",
      "function setupEpoch()",
      "function slash(address _attester, uint256 _amount) returns (bool)",
      "function status(uint256 _myHeaderBlockNumber) view returns (uint256 provenBlockNumber, bytes32 provenArchive, uint256 pendingBlockNumber, bytes32 pendingArchive, bytes32 archiveOfMyBlock, uint256 provenEpochNumber)",
      "function submitEpochRootProof(tuple(uint256 start, uint256 end, tuple(bytes32 previousArchive, bytes32 endArchive, address proverId) args, bytes32[] fees, tuple(bytes signatureIndices, bytes signaturesOrAddresses) attestations, bytes blobInputs, bytes proof) _args)",
      "function transferOwnership(address newOwner)",
      "function updateL1GasFeeOracle()",
      "function updateManaTarget(uint256 _manaTarget)",
      "function updateStakingQueueConfig(tuple(uint256 bootstrapValidatorSetSize, uint256 bootstrapFlushSize, uint256 normalFlushSizeMin, uint256 normalFlushSizeQuotient, uint256 maxQueueFlushSize) _config)",
      "function validateBlobs(bytes _blobsInput) view returns (bytes32[], bytes32, bytes[])",
      "function validateHeaderWithAttestations(tuple(bytes32 lastArchiveRoot, tuple(bytes32 blobsHash, bytes32 inHash, bytes32 outHash) contentCommitment, uint256 slotNumber, uint256 timestamp, address coinbase, bytes32 feeRecipient, tuple(uint128 feePerDaGas, uint128 feePerL2Gas) gasFees, uint256 totalManaUsed) _header, tuple(bytes signatureIndices, bytes signaturesOrAddresses) _attestations, address[] _signers, bytes32 _digest, bytes32 _blobsHash, tuple(bool ignoreDA) _flags)",
      "function vote(uint256 _proposalId)"
    ],
    "sep:0x3aEbEd9BF5F4303401547aE68DA04A124c100bC1": [
      "constructor(address _rollup, uint256 _version)",
      "error MerkleLib__InvalidIndexForPathLength()",
      "error MerkleLib__InvalidRoot(bytes32 expected, bytes32 actual, bytes32 leaf, uint256 leafIndex)",
      "error Outbox__AlreadyNullified(uint256 l2BlockNumber, uint256 leafIndex)",
      "error Outbox__BlockNotProven(uint256 l2BlockNumber)",
      "error Outbox__InvalidChainId()",
      "error Outbox__InvalidRecipient(address expected, address actual)",
      "error Outbox__NothingToConsumeAtBlock(uint256 l2BlockNumber)",
      "error Outbox__Unauthorized()",
      "error Outbox__VersionMismatch(uint256 expected, uint256 actual)",
      "event MessageConsumed(uint256 indexed l2BlockNumber, bytes32 indexed root, bytes32 indexed messageHash, uint256 leafId)",
      "event RootAdded(uint256 indexed l2BlockNumber, bytes32 indexed root)",
      "function ROLLUP() view returns (address)",
      "function VERSION() view returns (uint256)",
      "function consume(tuple(tuple(bytes32 actor, uint256 version) sender, tuple(address actor, uint256 chainId) recipient, bytes32 content) _message, uint256 _l2BlockNumber, uint256 _leafIndex, bytes32[] _path)",
      "function getRootData(uint256 _l2BlockNumber) view returns (bytes32)",
      "function hasMessageBeenConsumedAtBlock(uint256 _l2BlockNumber, uint256 _leafId) view returns (bool)",
      "function insert(uint256 _l2BlockNumber, bytes32 _root)"
    ],
    "sep:0x6732CEDafCBF85Afa9B5C83f0385967840BBCe47": [
      "constructor(string _name, string _symbol, address _owner)",
      "error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)",
      "error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)",
      "error ERC20InvalidApprover(address approver)",
      "error ERC20InvalidReceiver(address receiver)",
      "error ERC20InvalidSender(address sender)",
      "error ERC20InvalidSpender(address spender)",
      "error NotMinter(address caller)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event MinterAdded(address indexed minter)",
      "event MinterRemoved(address indexed minter)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function acceptOwnership()",
      "function addMinter(address _minter)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function mint(address _to, uint256 _amount)",
      "function minters(address minter) view returns (bool isMinter)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function removeMinter(address _minter)",
      "function renounceOwnership()",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "sep:0x67788e5083646cCEDeeb07E7Bc35Ab0d511fc8B9": [
      "constructor(address __owner, address _asset, uint256 _activationThreshold, uint256 _ejectionThreshold)",
      "error AddPointFail()",
      "error AddressSnapshotLib__CannotAddAddressZero()",
      "error AddressSnapshotLib__IndexOutOfBounds(uint256 index, uint256 size)",
      "error CheckpointUnorderedInsertion()",
      "error Delegation__InsufficientPower(address, uint256, uint256)",
      "error GSE__AlreadyRegistered(address, address)",
      "error GSE__CannotChangePublicKeys(uint256 existingPk1x, uint256 existingPk1y)",
      "error GSE__FailedToRemove(address)",
      "error GSE__FatalError(string)",
      "error GSE__GovernanceAlreadySet()",
      "error GSE__InstanceDoesNotExist(address)",
      "error GSE__InsufficientBalance(uint256, uint256)",
      "error GSE__InvalidProofOfPossession()",
      "error GSE__InvalidRollupAddress(address)",
      "error GSE__NotLatestRollup(address)",
      "error GSE__NotRollup(address)",
      "error GSE__NotWithdrawer(address, address)",
      "error GSE__NothingToExit(address)",
      "error GSE__OutOfBounds(uint256, uint256)",
      "error GSE__ProofOfPossessionAlreadySeen(bytes32 hashedPK1)",
      "error GSE__RollupAlreadyRegistered(address)",
      "error GammaZero()",
      "error Governance__CheckpointedUintLib__InsufficientValue(address owner, uint256 have, uint256 required)",
      "error Governance__CheckpointedUintLib__NotInPast()",
      "error MulPointFail()",
      "error NoPointFound()",
      "error NotOnCurve(uint256 x, uint256 y)",
      "error NotOnCurveG2(uint256 x0, uint256 x1, uint256 y0, uint256 y1)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error PairingFail()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SqrtFail()",
      "event DelegateChanged(address indexed attester, address oldDelegatee, address newDelegatee)",
      "event DelegateVotesChanged(address indexed delegatee, uint256 oldValue, uint256 newValue)",
      "event Deposit(address indexed instance, address indexed attester, address withdrawer)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function ACTIVATION_THRESHOLD() view returns (uint256)",
      "function ASSET() view returns (address)",
      "function BONUS_INSTANCE_ADDRESS() view returns (address)",
      "function EJECTION_THRESHOLD() view returns (uint256)",
      "function addRollup(address _rollup)",
      "function balanceOf(address _instance, address _attester) view returns (uint256)",
      "function delegate(address _instance, address _attester, address _delegatee)",
      "function deposit(address _attester, address _withdrawer, tuple(uint256 x, uint256 y) _publicKeyInG1, tuple(uint256 x0, uint256 x1, uint256 y0, uint256 y1) _publicKeyInG2, tuple(uint256 x, uint256 y) _proofOfPossession, bool _moveWithLatestRollup)",
      "function effectiveBalanceOf(address _instance, address _attester) view returns (uint256)",
      "function finalizeWithdraw(uint256 _withdrawalId)",
      "function getAttesterCountAtTime(address _instance, uint256 _timestamp) view returns (uint256)",
      "function getAttesterFromIndexAtTime(address _instance, uint256 _index, uint256 _timestamp) view returns (address)",
      "function getAttestersFromIndicesAtTime(address _instance, uint256 _timestamp, uint256[] _indices) view returns (address[])",
      "function getBonusInstanceAddress() pure returns (address)",
      "function getConfig(address _attester) view returns (tuple(tuple(uint256 x, uint256 y) publicKey, address withdrawer))",
      "function getDelegatee(address _instance, address _attester) view returns (address)",
      "function getG1PublicKeysFromAddresses(address[] _attesters) view returns (tuple(uint256 x, uint256 y)[])",
      "function getGovernance() view returns (address)",
      "function getLatestRollup() view returns (address)",
      "function getLatestRollupAt(uint256 _timestamp) view returns (address)",
      "function getPowerUsed(address _delegatee, uint256 _proposalId) view returns (uint256)",
      "function getRegistrationDigest(tuple(uint256 x, uint256 y) _publicKey) view returns (tuple(uint256 x, uint256 y))",
      "function getVotingPower(address _delegatee) view returns (uint256)",
      "function getVotingPowerAt(address _delegatee, uint256 _timestamp) view returns (uint256)",
      "function getWithdrawer(address _attester) view returns (address withdrawer)",
      "function isRegistered(address _instance, address _attester) view returns (bool)",
      "function isRollupRegistered(address _instance) view returns (bool)",
      "function owner() view returns (address)",
      "function proposeWithLock(address _payload, address _to) returns (uint256)",
      "function renounceOwnership()",
      "function setGovernance(address _governance)",
      "function supplyOf(address _instance) view returns (uint256)",
      "function totalSupply() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function vote(uint256 _proposalId, uint256 _amount, bool _support)",
      "function voteWithBonus(uint256 _proposalId, uint256 _amount, bool _support)",
      "function withdraw(address _attester, uint256 _amount) returns (uint256, bool, uint256)"
    ],
    "sep:0x6AA988BD21A8b3BE6A57cE89B7fe4dE2B0Bf2D2C": [
      "constructor(address _asset, uint256 _rate, address _owner)",
      "error CoinIssuer__InsufficientMintAvailable(uint256 available, uint256 needed)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function ASSET() view returns (address)",
      "function RATE() view returns (uint256)",
      "function acceptTokenOwnership()",
      "function mint(address _to, uint256 _amount)",
      "function mintAvailable() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function timeOfLastMint() view returns (uint256)",
      "function transferOwnership(address newOwner)"
    ],
    "sep:0x6f4f1f5e6D96B08530043830725f3ebCB95908D5": [
      "constructor(address _asset, address _governanceProposer, address _beneficiary, tuple(tuple(uint256 lockDelay, uint256 lockAmount) proposeConfig, uint256 votingDelay, uint256 votingDuration, uint256 executionDelay, uint256 gracePeriod, uint256 quorum, uint256 requiredYeaMargin, uint256 minimumVotes) _configuration)",
      "error CheckpointUnorderedInsertion()",
      "error Governance__CallFailed(address target)",
      "error Governance__CallerNotGovernanceProposer(address caller, address governanceProposer)",
      "error Governance__CallerNotSelf(address caller, address self)",
      "error Governance__CannotCallAsset()",
      "error Governance__CannotWithdrawToAddressZero()",
      "error Governance__CheckpointedUintLib__InsufficientValue(address owner, uint256 have, uint256 required)",
      "error Governance__CheckpointedUintLib__NotInPast()",
      "error Governance__ConfigurationLib__InvalidMinimumVotes()",
      "error Governance__ConfigurationLib__LockAmountTooBig()",
      "error Governance__ConfigurationLib__LockAmountTooSmall()",
      "error Governance__ConfigurationLib__QuorumTooBig()",
      "error Governance__ConfigurationLib__QuorumTooSmall()",
      "error Governance__ConfigurationLib__RequiredYeaMarginTooBig()",
      "error Governance__ConfigurationLib__TimeTooBig(string name)",
      "error Governance__ConfigurationLib__TimeTooSmall(string name)",
      "error Governance__DepositNotAllowed()",
      "error Governance__GovernanceProposerCannotBeSelf()",
      "error Governance__InsufficientPower(address voter, uint256 have, uint256 required)",
      "error Governance__ProposalAlreadyDropped()",
      "error Governance__ProposalCannotBeDropped()",
      "error Governance__ProposalDoesNotExists(uint256 proposalId)",
      "error Governance__ProposalNotActive()",
      "error Governance__ProposalNotExecutable()",
      "error Governance__WithdrawalAlreadyClaimed()",
      "error Governance__WithdrawalNotInitiated()",
      "error Governance__WithdrawalNotUnlockedYet(uint256 currentTime, uint256 unlocksAt)",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SafeERC20FailedOperation(address token)",
      "event BeneficiaryAdded(address beneficiary)",
      "event ConfigurationUpdated(uint256 indexed time)",
      "event Deposit(address indexed depositor, address indexed onBehalfOf, uint256 amount)",
      "event FloodGatesOpened()",
      "event GovernanceProposerUpdated(address indexed governanceProposer)",
      "event ProposalDropped(uint256 indexed proposalId)",
      "event ProposalExecuted(uint256 indexed proposalId)",
      "event Proposed(uint256 indexed proposalId, address indexed proposal)",
      "event VoteCast(uint256 indexed proposalId, address indexed voter, bool support, uint256 amount)",
      "event WithdrawFinalized(uint256 indexed withdrawalId)",
      "event WithdrawInitiated(uint256 indexed withdrawalId, address indexed recipient, uint256 amount)",
      "function ASSET() view returns (address)",
      "function addBeneficiary(address _beneficiary)",
      "function deposit(address _beneficiary, uint256 _amount)",
      "function dropProposal(uint256 _proposalId) returns (bool)",
      "function execute(uint256 _proposalId) returns (bool)",
      "function finalizeWithdraw(uint256 _withdrawalId)",
      "function getBallot(uint256 _proposalId, address _user) view returns (tuple(uint256 yea, uint256 nay))",
      "function getConfiguration() view returns (tuple(tuple(uint256 lockDelay, uint256 lockAmount) proposeConfig, uint256 votingDelay, uint256 votingDuration, uint256 executionDelay, uint256 gracePeriod, uint256 quorum, uint256 requiredYeaMargin, uint256 minimumVotes))",
      "function getProposal(uint256 _proposalId) view returns (tuple(tuple(uint256 votingDelay, uint256 votingDuration, uint256 executionDelay, uint256 gracePeriod, uint256 quorum, uint256 requiredYeaMargin, uint256 minimumVotes) config, uint8 cachedState, address payload, address proposer, uint256 creation, tuple(uint256 yea, uint256 nay) summedBallot))",
      "function getProposalState(uint256 _proposalId) view returns (uint8)",
      "function getWithdrawal(uint256 _withdrawalId) view returns (tuple(uint256 amount, uint256 unlocksAt, address recipient, bool claimed))",
      "function governanceProposer() view returns (address)",
      "function initiateWithdraw(address _to, uint256 _amount) returns (uint256)",
      "function isAllBeneficiariesAllowed() view returns (bool)",
      "function isPermittedInGovernance(address _beneficiary) view returns (bool)",
      "function openFloodgates()",
      "function powerAt(address _owner, uint256 _ts) view returns (uint256)",
      "function powerNow(address _owner) view returns (uint256)",
      "function proposalCount() view returns (uint256)",
      "function propose(address _proposal) returns (uint256)",
      "function proposeWithLock(address _proposal, address _to) returns (uint256)",
      "function totalPowerAt(uint256 _ts) view returns (uint256)",
      "function totalPowerNow() view returns (uint256)",
      "function updateConfiguration(tuple(tuple(uint256 lockDelay, uint256 lockAmount) proposeConfig, uint256 votingDelay, uint256 votingDuration, uint256 executionDelay, uint256 gracePeriod, uint256 quorum, uint256 requiredYeaMargin, uint256 minimumVotes) _configuration)",
      "function updateGovernanceProposer(address _governanceProposer)",
      "function vote(uint256 _proposalId, uint256 _amount, bool _support) returns (bool)",
      "function withdrawalCount() view returns (uint256)"
    ],
    "sep:0x8F4D9A05374C1d99825FDb291340021B9A7dC6d2": [
      "constructor(address _rollup, address _feeAsset, uint256 _version, uint256 _height)",
      "error Inbox__ActorTooLarge(bytes32 actor)",
      "error Inbox__ContentTooLarge(bytes32 content)",
      "error Inbox__Ignition()",
      "error Inbox__MustBuildBeforeConsume()",
      "error Inbox__SecretHashTooLarge(bytes32 secretHash)",
      "error Inbox__Unauthorized()",
      "error Inbox__VersionMismatch(uint256 expected, uint256 actual)",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "event InboxSynchronized(uint256 indexed inProgress)",
      "event MessageSent(uint256 indexed l2BlockNumber, uint256 index, bytes32 indexed hash, bytes16 rollingHash)",
      "function FEE_ASSET_PORTAL() view returns (address)",
      "function ROLLUP() view returns (address)",
      "function VERSION() view returns (uint256)",
      "function catchUp(uint256 _pendingBlockNumber)",
      "function consume(uint256 _toConsume) returns (bytes32)",
      "function getFeeAssetPortal() view returns (address)",
      "function getInProgress() view returns (uint64)",
      "function getRoot(uint256 _blockNumber) view returns (bytes32)",
      "function getState() view returns (tuple(bytes16 rollingHash, uint64 totalMessagesInserted, uint64 inProgress))",
      "function getTotalMessagesInserted() view returns (uint64)",
      "function sendL2Message(tuple(bytes32 actor, uint256 version) _recipient, bytes32 _content, bytes32 _secretHash) returns (bytes32, uint256)",
      "function trees(uint256 blockNumber) view returns (uint256 nextIndex)"
    ],
    "sep:0x9A5fC69F737d152a187DfdcE5743077e4d357081": [
      "constructor(address _instance, address _slasher, uint256 _quorum, uint256 _roundSize, uint256 _lifetimeInRounds, uint256 _executionDelayInRounds, uint256[3] _slashAmounts, uint256 _committeeSize, uint256 _epochDuration, uint256 _slashOffsetInRounds)",
      "error CloneArgumentsTooLong()",
      "error Create2EmptyBytecode()",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error FailedDeployment()",
      "error InsufficientBalance(uint256 balance, uint256 needed)",
      "error InvalidShortString()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SignatureLib__InvalidSignature(address, address)",
      "error SlashPayload_ArraySizeMismatch(uint256 expected, uint256 actual)",
      "error StringTooLong(string str)",
      "error TallySlashingProposer__CommitteeSizeMustBeGreaterThanZero(uint256 committeeSize)",
      "error TallySlashingProposer__InvalidCommitteeCommitment()",
      "error TallySlashingProposer__InvalidEpochIndex(uint256 epochIndex, uint256 roundSizeInEpochs)",
      "error TallySlashingProposer__InvalidNumberOfCommittees(uint256 expected, uint256 actual)",
      "error TallySlashingProposer__InvalidQuorumAndRoundSize(uint256 quorum, uint256 roundSize)",
      "error TallySlashingProposer__InvalidSignature()",
      "error TallySlashingProposer__InvalidSlashAmounts(uint256[3] slashAmounts)",
      "error TallySlashingProposer__InvalidVoteLength(uint256 expected, uint256 actual)",
      "error TallySlashingProposer__LifetimeMustBeGreaterThanExecutionDelay(uint256 lifetime, uint256 executionDelay)",
      "error TallySlashingProposer__LifetimeMustBeLessThanRoundabout(uint256 lifetime, uint256 roundabout)",
      "error TallySlashingProposer__QuorumMustBeGreaterThanZero()",
      "error TallySlashingProposer__RoundAlreadyExecuted(uint256 round)",
      "error TallySlashingProposer__RoundNotComplete(uint256 round)",
      "error TallySlashingProposer__RoundOutOfRange(uint256 round, uint256 currentRound)",
      "error TallySlashingProposer__RoundSizeInEpochsMustBeGreaterThanZero(uint256 roundSizeInEpochs)",
      "error TallySlashingProposer__RoundSizeMustBeMultipleOfEpochDuration(uint256 roundSize, uint256 epochDuration)",
      "error TallySlashingProposer__RoundSizeTooLarge(uint256 roundSize, uint256 maxRoundSize)",
      "error TallySlashingProposer__SlashAmountTooLarge()",
      "error TallySlashingProposer__SlashOffsetMustBeGreaterThanZero(uint256 slashOffset)",
      "error TallySlashingProposer__VoteAlreadyCastInCurrentSlot(uint256 slot)",
      "error TallySlashingProposer__VoteSizeTooBig(uint256 voteSize, uint256 maxSize)",
      "error TallySlashingProposer__VotesMustBeMultipleOf4(uint256 votes)",
      "error TallySlashingProposer__VotingNotOpen(uint256 currentRound)",
      "event EIP712DomainChanged()",
      "event RoundExecuted(uint256 indexed round, uint256 slashCount)",
      "event VoteCast(uint256 indexed round, uint256 indexed slot, address indexed proposer)",
      "function COMMITTEE_SIZE() view returns (uint256)",
      "function EXECUTION_DELAY_IN_ROUNDS() view returns (uint256)",
      "function INSTANCE() view returns (address)",
      "function LIFETIME_IN_ROUNDS() view returns (uint256)",
      "function MAX_ROUND_SIZE() view returns (uint256)",
      "function QUORUM() view returns (uint256)",
      "function ROUNDABOUT_SIZE() view returns (uint256)",
      "function ROUND_SIZE() view returns (uint256)",
      "function ROUND_SIZE_IN_EPOCHS() view returns (uint256)",
      "function SLASHER() view returns (address)",
      "function SLASHING_PROPOSER_TYPE() view returns (uint8)",
      "function SLASH_AMOUNT_LARGE() view returns (uint256)",
      "function SLASH_AMOUNT_MEDIUM() view returns (uint256)",
      "function SLASH_AMOUNT_SMALL() view returns (uint256)",
      "function SLASH_OFFSET_IN_ROUNDS() view returns (uint256)",
      "function SLASH_PAYLOAD_IMPLEMENTATION() view returns (address)",
      "function VOTE_TYPEHASH() view returns (bytes32)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function executeRound(uint256 _round, address[][] _committees)",
      "function getCurrentRound() view returns (uint256)",
      "function getPayloadAddress(uint256 _round, tuple(address validator, uint256 slashAmount)[] _actions) view returns (address)",
      "function getRound(uint256 _round) view returns (bool isExecuted, bool readyToExecute, uint256 voteCount)",
      "function getSlashTargetCommittees(uint256 _round) returns (address[][] committees)",
      "function getSlashTargetEpoch(uint256 _round, uint256 _epochIndex) view returns (uint256 epochNumber)",
      "function getTally(uint256 _round, address[][] _committees) view returns (tuple(address validator, uint256 slashAmount)[])",
      "function getVoteSignatureDigest(bytes _votes, uint256 _slot) view returns (bytes32)",
      "function getVotes(uint256 _round, uint256 _index) view returns (bytes)",
      "function vote(bytes _votes, tuple(uint8 v, bytes32 r, bytes32 s) _sig)"
    ],
    "sep:0xAAB785EEa290AEAE003732e603987979E63955E2": [
      "constructor(string _name, string _symbol, address _owner)",
      "error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)",
      "error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)",
      "error ERC20InvalidApprover(address approver)",
      "error ERC20InvalidReceiver(address receiver)",
      "error ERC20InvalidSender(address sender)",
      "error ERC20InvalidSpender(address spender)",
      "error NotMinter(address caller)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event MinterAdded(address indexed minter)",
      "event MinterRemoved(address indexed minter)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function acceptOwnership()",
      "function addMinter(address _minter)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function mint(address _to, uint256 _amount)",
      "function minters(address minter) view returns (bool isMinter)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function removeMinter(address _minter)",
      "function renounceOwnership()",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "sep:0xB973B3D5884e0B8DA179d808308f7702d317b280": [
      "constructor(address _registry, address _gse, uint256 _quorumSize, uint256 _roundSize)",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error GovernanceProposer__FailedToSubmitRoundWinner(address payload)",
      "error GovernanceProposer__InstanceHaveNoCode(address instance)",
      "error GovernanceProposer__InsufficientSignals(uint256 signalsCast, uint256 signalsNeeded)",
      "error GovernanceProposer__InvalidLifetimeAndExecutionDelay(uint256 lifetimeInRounds, uint256 executionDelayInRounds)",
      "error GovernanceProposer__InvalidQuorumAndRoundSize(uint256 quorumSize, uint256 roundSize)",
      "error GovernanceProposer__OnlyProposerCanSignal(address caller, address proposer)",
      "error GovernanceProposer__PayloadAlreadySubmitted(uint256 roundNumber)",
      "error GovernanceProposer__PayloadCannotBeAddressZero()",
      "error GovernanceProposer__QuorumCannotBeLargerThanRoundSize(uint256 quorumSize, uint256 roundSize)",
      "error GovernanceProposer__RoundTooNew(uint256 roundNumber, uint256 currentRoundNumber)",
      "error GovernanceProposer__RoundTooOld(uint256 roundNumber, uint256 currentRoundNumber)",
      "error GovernanceProposer__SignalAlreadyCastForSlot(uint256 slot)",
      "error InvalidShortString()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SignatureLib__InvalidSignature(address, address)",
      "error StringTooLong(string str)",
      "event EIP712DomainChanged()",
      "event PayloadSubmittable(address indexed payload, uint256 indexed round)",
      "event PayloadSubmitted(address indexed payload, uint256 indexed round)",
      "event SignalCast(address indexed payload, uint256 indexed round, address indexed signaler)",
      "function EXECUTION_DELAY_IN_ROUNDS() view returns (uint256)",
      "function GSE() view returns (address)",
      "function LIFETIME_IN_ROUNDS() view returns (uint256)",
      "function QUORUM_SIZE() view returns (uint256)",
      "function REGISTRY() view returns (address)",
      "function ROUND_SIZE() view returns (uint256)",
      "function SIGNAL_TYPEHASH() view returns (bytes32)",
      "function computeRound(uint256 _slot) view returns (uint256)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function getCurrentRound() view returns (uint256)",
      "function getGovernance() view returns (address)",
      "function getInstance() view returns (address)",
      "function getProposalProposer(uint256 _proposalId) view returns (address)",
      "function getRoundData(address _instance, uint256 _round) view returns (tuple(uint256 lastSignalSlot, address payloadWithMostSignals, bool executed))",
      "function getSignalSignatureDigest(address _payload, uint256 _slot) view returns (bytes32)",
      "function signal(address _payload) returns (bool)",
      "function signalCount(address _instance, uint256 _round, address _payload) view returns (uint256)",
      "function signalWithSig(address _payload, tuple(uint8 v, bytes32 r, bytes32 s) _sig) returns (bool)",
      "function submitRoundWinner(uint256 _roundNumber) returns (bool)"
    ],
    "sep:0xc2F24280F5c7F4897370dFDEb30f79Ded14f1c81": [
      "constructor(address _owner, address _rewardAsset)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error Registry__NoRollupsRegistered()",
      "error Registry__RollupAlreadyRegistered(address rollup)",
      "error Registry__RollupNotRegistered(uint256 version)",
      "event CanonicalRollupUpdated(address indexed instance, uint256 indexed version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RewardDistributorUpdated(address indexed rewardDistributor)",
      "function addRollup(address _rollup)",
      "function getCanonicalRollup() view returns (address)",
      "function getGovernance() view returns (address)",
      "function getRewardDistributor() view returns (address)",
      "function getRollup(uint256 _version) view returns (address)",
      "function getVersion(uint256 _index) view returns (uint256)",
      "function numberOfVersions() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function updateRewardDistributor(address _rewardDistributor)"
    ],
    "sep:0xe0927107Db2f45d1f9C4F6E591636Da528Cf9F4d": [
      "constructor(address _vetoer, address _governance)",
      "error Slasher__AlreadyInitialized()",
      "error Slasher__CallerNotAuthorizedToSlash(address caller)",
      "error Slasher__CallerNotVetoer(address caller, address vetoer)",
      "error Slasher__PayloadVetoed(address payload)",
      "error Slasher__ProposerZeroAddress()",
      "error Slasher__SlashFailed(address target, bytes data, bytes returnData)",
      "event VetoedPayload(address indexed payload)",
      "function GOVERNANCE() view returns (address)",
      "function PROPOSER() view returns (address)",
      "function VETOER() view returns (address)",
      "function initializeProposer(address _proposer)",
      "function slash(address _payload) returns (bool)",
      "function vetoPayload(address _payload) returns (bool)",
      "function vetoedPayloads(address payload) view returns (bool vetoed)"
    ]
  },
  "usedTemplates": {},
  "usedBlockNumbers": { "sepolia": 9507145 },
  "permissionsConfigHash": "0x5950204a1cf2b7d0e402096c403e210028f29d33ce8e538928867a89adb31e49"
}
