{
  "json": [
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "abstract",
      "createdAt": "1724863689",
      "display": {
        "name": "Abstract",
        "slug": "abstract",
        "description": "Abstract is a Layer 2 (L2) network built on top of Ethereum, designed to securely power consumer-facing blockchain applications at scale with low fees and fast transaction speeds.",
        "purposes": ["Universal"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://abs.xyz/"],
          "apps": ["https://portal.testnet.abs.xyz/bridge/"],
          "documentation": ["https://docs.abs.xyz/"],
          "explorers": ["https://explorer.testnet.abs.xyz/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/abstractchain",
            "https://discord.com/invite/abstractchain",
            "https://x.com/Abstract_Eco",
            "https://t.me/abstract_chain"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "aevo",
      "createdAt": "1694090052",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x0af92E6944900abA4B9BAC1417bA13ED6F45c27f#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x253887577420Cb7e7418cD4d50147743c8041b28"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x098927F692C86fA1722115652b9d2d7BE8cBa6D3#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x0af92E6944900abA4B9BAC1417bA13ED6F45c27f#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x0af92E6944900abA4B9BAC1417bA13ED6F45c27f#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x098927F692C86fA1722115652b9d2d7BE8cBa6D3#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 1h to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x098927F692C86fA1722115652b9d2d7BE8cBa6D3#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x098927F692C86fA1722115652b9d2d7BE8cBa6D3#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x0af92E6944900abA4B9BAC1417bA13ED6F45c27f#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x75ACb7ae6C76B3f5cA049431FE2c0797dD002b90",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x889e21d7BA3d6dD62e75d4980A4Ad1349c61599d",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n* Can upgrade implementation of OptimismPortal, L2OutputOracle, SystemConfig (acting via ProxyAdmin).\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x75ACb7ae6C76B3f5cA049431FE2c0797dD002b90",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x889e21d7BA3d6dD62e75d4980A4Ad1349c61599d",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x11dd2d9B5ec142dbAFBEFEA82a75985Eae4e12b0",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x8CfF5bDb1B428B979E3D87087dA8549A28065DDB"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "ProxyAdmin",
            "address": "0x27ff92b30Cae00dABCF8045cc68fc9dcB67C5019",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n* Can be used to upgrade implementation of OptimismPortal, L2OutputOracle, SystemConfig.\n"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x4082C9647c098a6493fb499EaE63b5ce3259c574",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27ff92b30Cae00dABCF8045cc68fc9dcB67C5019"],
              "implementations": ["0x20F1380A78492227A9B2366242335D684aF22507"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x787A0ACaB02437c60Aafb1a29167A3609801e320",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27ff92b30Cae00dABCF8045cc68fc9dcB67C5019"],
              "implementations": ["0x098927F692C86fA1722115652b9d2d7BE8cBa6D3"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x7a616b25E7c96fc4d652966d7DDAbB51dE28eCc1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "L2OutputOracle",
            "address": "0x909E51211e959339EFb14b36f5A50955a8ae3770",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27ff92b30Cae00dABCF8045cc68fc9dcB67C5019"],
              "implementations": ["0x0af92E6944900abA4B9BAC1417bA13ED6F45c27f"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0xF761Cc49bB127AB666899b41CDC4E62fA50cD9ca",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27ff92b30Cae00dABCF8045cc68fc9dcB67C5019"],
              "implementations": ["0xA872bca05c9F8A97CC36D879e43B33dB8ed7b69E"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Aevo Open Mainnet Launch",
          "link": "https://aevo.mirror.xyz/hV7VYkpk7caoYl2DbOFcSaZRRrK-8NeWqKczrgUff6k",
          "date": "2023-06-14T00:00:00.00Z",
          "description": "Aevo removes the whitelist and opens the mainnet to the public.",
          "type": "general"
        },
        {
          "name": "Aevo switches to Celestia",
          "link": "https://twitter.com/aevoxyz/status/1750013642278633510",
          "date": "2024-01-16T00:00:00.00Z",
          "description": "Aevo starts using Celestia for data availability.",
          "type": "general"
        },
        {
          "name": "AEVO Token Airdrop",
          "link": "https://aevo.mirror.xyz/5LfLIxt_lfdoVBUTtdofAVU6YXioBzGkbhtUWnaRT-U",
          "date": "2024-03-13T00:00:00.00Z",
          "description": "AEVO token launches.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Blobstream and Celestia Architecture",
          "url": "https://www.youtube.com/watch?v=cn_fN6pkakQ",
          "thumbnail": "modular-rollup.jpg"
        },
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "Conduit", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "Exchange"],
        "architectureImage": "aevo",
        "name": "Aevo",
        "slug": "aevo",
        "description": "Aevo is a high-performance decentralized options exchange, powered by the OP Stack and Celestia DA.",
        "links": {
          "websites": ["https://aevo.xyz/"],
          "apps": ["https://app.aevo.xyz/"],
          "documentation": ["https://docs.aevo.xyz/"],
          "explorers": ["https://explorer.aevo.xyz/"],
          "repositories": ["https://github.com/aevoxyz"],
          "socialMedia": [
            "https://twitter.com/aevoxyz",
            "https://discord.com/invite/aevo",
            "https://t.me/aevoupdates"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": {
        "name": "aevo",
        "chainId": 2999,
        "explorerUrl": "https://explorer.aevo.xyz",
        "explorerApi": {
          "url": "https://explorer.aevo.xyz/api",
          "type": "blockscout"
        },
        "multicallContracts": [
          {
            "sinceBlock": 2790111,
            "batchSize": 150,
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "version": "3"
          }
        ],
        "minTimestampForTvl": "1693882800"
      },
      "config": {
        "associatedTokens": ["AEVO"],
        "escrows": [
          {
            "address": "0x787A0ACaB02437c60Aafb1a29167A3609801e320",
            "newVersion": true,
            "sinceTimestamp": "1679193119",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x787A0ACaB02437c60Aafb1a29167A3609801e320",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x27ff92b30Cae00dABCF8045cc68fc9dcB67C5019"],
                "implementations": [
                  "0x098927F692C86fA1722115652b9d2d7BE8cBa6D3"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x4082C9647c098a6493fb499EaE63b5ce3259c574",
            "newVersion": true,
            "sinceTimestamp": "1679193071",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x4082C9647c098a6493fb499EaE63b5ce3259c574",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x27ff92b30Cae00dABCF8045cc68fc9dcB67C5019"],
                "implementations": [
                  "0x20F1380A78492227A9B2366242335D684aF22507"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://l2-aevo-mainnet-prod-0.t.conduit.xyz/",
          "startBlock": 1,
          "defaultCallsPerMinute": 800
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "1h challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -3600,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "aiechain",
      "createdAt": "1720191862",
      "display": {
        "name": "AIE Chain",
        "slug": "aie-chain",
        "description": "AIE Chain is an upcoming Layer 2 on Ethereum dedicated to organizing, categorizing, and distributing AI creations. Built using the Orbit stack and leveraging EigenDA for data availability, ensuring security and scalability.",
        "purposes": ["AI"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://genesis.aielabs.io/"],
          "apps": [],
          "documentation": ["https://docs.aielabs.io"],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://x.com/AIE_Labs",
            "https://t.me/aielabsnews",
            "https://discord.gg/ZrQYEE2m9s"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "alephzero",
      "createdAt": "1720191862",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x1CA12290D954CFe022323b6A6Df92113ed6b1C98",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x830D41c5624EE982cddEd92Ba01DAB3a4856116f"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x41Ec9456AB918f2aBA81F38c03Eb0B93b78E84d9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xF75206c49c1694594E3e69252E519434f1579876",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b"],
              "implementations": ["0x383f16fB2809a56fC639c1eE2c93Ad2aa7Ee130A"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x56D8EC76a421063e1907503aDd3794c395256AEb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b"],
              "implementations": ["0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x73bb50c32a3BD6A1032aa5cFeA048fBDA3D6aF6e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b"],
              "implementations": ["0x19431dc37098877486532250FB3158140717C00C"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x830D41c5624EE982cddEd92Ba01DAB3a4856116f",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0xb9e6987d1E0936b93f512bC89632E15DcA706d87",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b"],
              "implementations": ["0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x57EA090Ac0554d174AE0e2855B460e84A1A7C221",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x17e7F68ce50A77e55C7834ddF31AEf86403B8010",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x72B166070781a552D7b95a907eF59ca05d3D5a62",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 2.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 4d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x383f16fB2809a56fC639c1eE2c93Ad2aa7Ee130A#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xbc35c3fBd56318Bf360086f50576233Dc93AFF20",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x2b2566944f8ff8a256b39C6A36900991EC1fF3c6",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "AdminEOA",
          "accounts": [
            {
              "address": "0x257812604076712675ae9788F5Bd738173CA3CE0",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade any project implementation via UpgradeExecutor, potentially gaining access to all funds."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Mainnet launch",
          "link": "https://alephzero.org/blog/aleph-zero-evm-mainnet/",
          "date": "2024-08-12T00:00:00Z",
          "description": "Aleph Zero EVM L2 is open for all users.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": null,
      "badges": ["DAC", "Gelato", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Privacy"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "redWarning": "Critical contracts can be upgraded by an EOA which could result in the loss of all funds.",
        "name": "Aleph Zero EVM",
        "slug": "aleph-zero",
        "description": "Aleph Zero is an Optimium on Ethereum, built on the Orbit stack. It aims to offer seamless interoperability with the Aleph Zero Layer 1 and a suite of developer tools for building privacy-enhancing dapps.",
        "links": {
          "websites": ["https://alephzero.org/"],
          "apps": ["https://bridge.gelato.network/bridge/aleph-zero-evm"],
          "documentation": ["https://docs.alephzero.org/"],
          "explorers": ["https://evm-explorer.alephzero.org/"],
          "repositories": ["https://github.com/Cardinal-Cryptography"],
          "socialMedia": ["https://x.com/Aleph__Zero"]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -345600
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 4d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 345600
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["AZERO"],
        "escrows": [
          {
            "address": "0x41Ec9456AB918f2aBA81F38c03Eb0B93b78E84d9",
            "newVersion": true,
            "sinceTimestamp": "1722259103",
            "tokens": ["AZERO"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x41Ec9456AB918f2aBA81F38c03Eb0B93b78E84d9",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b"],
                "implementations": [
                  "0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows AZERO sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.alephzero.raas.gelato.cloud",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "allo",
      "createdAt": "1728665516",
      "display": {
        "name": "Allo",
        "slug": "allo",
        "description": "Allo is an OP Stack L2 which will be a part of Superchain. It is used to tokenize Real World Assets seamlessly - unlocking reduced transaction times and lower costs.",
        "purposes": ["RWA"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://allo.xyz"],
          "apps": [],
          "explorers": [],
          "repositories": [],
          "documentation": [],
          "socialMedia": ["https://x.com/allo_xyz"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "ancient",
      "createdAt": "1695904849",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x1F61619E8c228fb67204cD157A3e50Aa6690FbF6#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xd5df46c580fD2FBdaEE751dc535E14295C0336F3"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x9FC6A608B45c6F129650c26a34bbe5d26959E75e#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x1F61619E8c228fb67204cD157A3e50Aa6690FbF6#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x1F61619E8c228fb67204cD157A3e50Aa6690FbF6#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x9FC6A608B45c6F129650c26a34bbe5d26959E75e#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x9FC6A608B45c6F129650c26a34bbe5d26959E75e#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x9FC6A608B45c6F129650c26a34bbe5d26959E75e#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x1F61619E8c228fb67204cD157A3e50Aa6690FbF6#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "ProxyAdmin",
          "accounts": [
            {
              "address": "0x75a223Fb459461B9Fa61dd25109EA05522b4b492",
              "type": "Contract"
            }
          ],
          "description": "Owner of AddressManager. Admin of OptimismPortal, SystemConfig, L2OutputOracle, L1ERC721Bridge, L1StandardBridge.",
          "chain": "ethereum"
        },
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x6079e9c37b87fE06D0bDe2431a0fa309826c9b67",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to commit L2 transactions to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Proposer",
          "accounts": [
            {
              "address": "0xAF24199C29D5cc3fd298356137913A42847eA690",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to post new L2 state roots to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Challenger",
          "accounts": [
            {
              "address": "0x1B1ecDdbd5F9601b34262Aa3Ca346209E61aA68f",
              "type": "MultiSig"
            }
          ],
          "description": "Central actor allowed to delete L2 state roots proposed by a Proposer.",
          "chain": "ethereum"
        },
        {
          "name": "Guardian",
          "accounts": [
            {
              "address": "0x1B1ecDdbd5F9601b34262Aa3Ca346209E61aA68f",
              "type": "MultiSig"
            }
          ],
          "description": "Central actor allowed to pause deposits and withdrawals.",
          "chain": "ethereum"
        },
        {
          "name": "ConduitMultisig",
          "description": "This is a Gnosis Safe with 4 / 7 threshold.  This address is the owner of the following contracts: ProxyAdmin, SystemConfig. It is also designated as a Guardian of the OptimismPortal, meaning it can halt withdrawals. It can upgrade the bridge implementation potentially gaining access to all funds, and change the sequencer, state root proposer or any other system component (unlimited upgrade power).",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ChallengerMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  This address is the permissioned challenger of the system. It can delete non finalized roots without going through the fault proof process.",
          "accounts": [
            {
              "address": "0x1B1ecDdbd5F9601b34262Aa3Ca346209E61aA68f",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0x05F0c4e31e2ab24f5CF20b1B9d2FCe2c3d48BB9C",
              "type": "EOA"
            },
            {
              "address": "0xcdD7FE91F5e2dCf8a0B30C4127c8D54e3F2a469c",
              "type": "EOA"
            },
            {
              "address": "0xE3a87D0eE19c66d0d22F2AEf50c78d4C4FEeA5FB",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0xB09DC08428C8b4EFB4ff9C0827386CDF34277996",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x75a223Fb459461B9Fa61dd25109EA05522b4b492"],
              "implementations": ["0x1F61619E8c228fb67204cD157A3e50Aa6690FbF6"]
            },
            "chain": "ethereum",
            "description": "The L2OutputOracle contract contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x639F2AECE398Aa76b07e59eF6abe2cFe32bacb68",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x75a223Fb459461B9Fa61dd25109EA05522b4b492"],
              "implementations": ["0x9FC6A608B45c6F129650c26a34bbe5d26959E75e"]
            },
            "chain": "ethereum",
            "description": "The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x0b4cfc49aCc656CE6D03CB0794860Da92bE3E8ec",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x75a223Fb459461B9Fa61dd25109EA05522b4b492"],
              "implementations": ["0x188370729584052260214A6e0847B9810e3a120d"]
            },
            "chain": "ethereum",
            "description": "It contains configuration parameters such as the Sequencer address, the L2 gas limit and the unsafe block signer address.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x012c341506ee1939e56084F43Ae5dbCe224Ce2af",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x09A25EB69b0d2858800A769Da90934371C7174A9"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "The L1CrossDomainMessenger (L1xDM) contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x12d4E64E1B46d27A00fe392653A894C1dd36fb80",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x75a223Fb459461B9Fa61dd25109EA05522b4b492"],
              "implementations": ["0x2362ff553A9E66bf378E971b2AAa631A4570b53d"]
            },
            "chain": "ethereum",
            "description": "The L1StandardBridge contract is the main entry point to deposit ERC20 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0xd5e3eDf5b68135D559D572E26bF863FBC1950033",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x75a223Fb459461B9Fa61dd25109EA05522b4b492"],
              "implementations": ["0x132b3456300332d488f946B818eB9512931eBCAa"]
            },
            "chain": "ethereum",
            "description": "The L1ERC721Bridge contract is used to bridge ERC-721 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Ancient8 Network Launch",
          "link": "https://twitter.com/Ancient8_gg/status/1760666331764961479",
          "date": "2024-02-22T00:00:00Z",
          "description": "Ancient8 Chain is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Blobstream and Celestia Architecture",
          "url": "https://www.youtube.com/watch?v=cn_fN6pkakQ",
          "thumbnail": "modular-rollup.jpg"
        },
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "Conduit", "OPStack", "EVM"],
      "discoveryDrivenData": null,
      "display": {
        "purposes": ["Universal", "Gaming"],
        "architectureImage": "opstack",
        "name": "Ancient8",
        "slug": "ancient8",
        "description": "Ancient8 Chain is a gaming-focused community-driven Ethereum Layer 2 built using OP Stack.",
        "links": {
          "websites": ["https://ancient8.gg/"],
          "apps": ["https://bridge.ancient8.gg/", "https://space3.gg/A8Layer2"],
          "documentation": ["https://docs.ancient8.gg/"],
          "explorers": ["https://scan.ancient8.gg/"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/Ancient8_gg",
            "https://discord.gg/ancient8",
            "https://blog.ancient8.gg/",
            "https://t.me/ancient8_gg",
            "https://youtube.com/@Ancient8_gg",
            "https://linkedin.com/company/ancient8"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": ["A8"],
        "escrows": [
          {
            "address": "0x639F2AECE398Aa76b07e59eF6abe2cFe32bacb68",
            "newVersion": true,
            "sinceTimestamp": "1706027447",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x639F2AECE398Aa76b07e59eF6abe2cFe32bacb68",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x75a223Fb459461B9Fa61dd25109EA05522b4b492"],
                "implementations": [
                  "0x9FC6A608B45c6F129650c26a34bbe5d26959E75e"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x12d4E64E1B46d27A00fe392653A894C1dd36fb80",
            "newVersion": true,
            "sinceTimestamp": "1706027447",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x12d4E64E1B46d27A00fe392653A894C1dd36fb80",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x75a223Fb459461B9Fa61dd25109EA05522b4b492"],
                "implementations": [
                  "0x2362ff553A9E66bf378E971b2AAa631A4570b53d"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.ancient8.gg/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "apex",
      "createdAt": "1663927910",
      "badges": ["AppChain", "DAC", "StarkEx", "SHARP"],
      "display": {
        "name": "ApeX",
        "slug": "apex",
        "description": "ApeX Pro is a non-custodial trading platform that delivers\n      limitless cross-margined perpetual contracts trading.",
        "detailedDescription": "ApeX Pro is running\n      two independent StarkEx instances, one for USDC and one for USDT, but that\n      technical distinction is not visible to the user.",
        "purposes": ["Exchange"],
        "provider": "StarkEx",
        "category": "Validium",
        "links": {
          "websites": ["https://apex.exchange/"],
          "apps": ["https://pro.apex.exchange/"],
          "documentation": ["https://apex-pro.gitbook.io/apex-pro?lang=en-US"],
          "explorers": [],
          "repositories": ["https://github.com/ApeX-Protocol/core"],
          "socialMedia": [
            "https://twitter.com/OfficialApeXdex",
            "https://apexdex.medium.com/",
            "https://t.me/ApeXdex",
            "https://discord.com/invite/apexprotocol",
            "https://youtube.com/@apexprotocol"
          ]
        },
        "activityDataSource": "Closed API"
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": ["APEX"],
        "escrows": [
          {
            "address": "0xA1D5443F2FB80A5A55ac804C948B45ce4C52DCbb",
            "newVersion": true,
            "sinceTimestamp": "1660252039",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xA1D5443F2FB80A5A55ac804C948B45ce4C52DCbb",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": [
                  "0xef75e1199B0599BA823b7770AcE8eb34864a1D55",
                  "0xC532d2976209A56DdF4a99B844130f7c0daCa7B6"
                ],
                "implementations": [
                  "0xdD813397b79f8df581eEb0c4B8aB72304c528396",
                  "0x533a7f4bE5453513049EB94A2b115F2CcE161dce",
                  "0x564EA75a26Dc0Bb5c5033B4752f88953A25AD058",
                  "0xdD5f42B087C1D2F73a2b443249b7D3DbE148a859",
                  "0x34E7cfedF99995A47B3e3D0AB88ba67072B55035"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xe53A6eD882Eb3f90cCe0390DDB04c876C5482E6b",
            "newVersion": true,
            "sinceTimestamp": "1697631539",
            "tokens": ["USDT"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xe53A6eD882Eb3f90cCe0390DDB04c876C5482E6b",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": ["0x53c6Ec9640761c669B800088F097E01A8207Ac8b"],
                "implementations": [
                  "0x3167617e913BF59afb90e5ec1A7B32D4Ea03eae4",
                  "0x5a50e280883B1FB39Aa04Eb263BCA47630D17D8E",
                  "0x3F3A131caB7eb5b4EAE9497Bebb9E06bE80F2809",
                  "0x5BfbE850d18b73ed98FB830e0A5E9F4970Bb93dA",
                  "0x229BbdF97eBc4993efe1433c0ae4A0bE79A4fe21"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "starkex",
          "product": ["apex_usdc", "apex_usdt"],
          "sinceTimestamp": "1660252039",
          "resyncLastDays": 7
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "3/5 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 3/5 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 3/5 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.6,
          "sources": [
            {
              "contract": "StarkExchangeUSDC",
              "references": [
                "https://etherscan.io/address/0xdD5f42B087C1D2F73a2b443249b7D3DbE148a859#code#F36#L174"
              ]
            },
            {
              "contract": "StarkExchangeUSDT",
              "references": [
                "https://etherscan.io/address/0x5BfbE850d18b73ed98FB830e0A5E9F4970Bb93dA#code#F36#L174"
              ]
            },
            {
              "contract": "CommitteeUSDC",
              "references": [
                "https://etherscan.io/address/0x23cab3cf1aa7b929df5e9f3712aca3a6fb9494e4#code#F1#L84"
              ]
            },
            {
              "contract": "CommitteeUSDT",
              "references": [
                "https://etherscan.io/address/0x7249082BfAFE9BCA502d38a686Ef3df37A0cf800#code#F1#L84"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a trade or a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for 7d, users can use the exit hatch to withdraw their funds. Users are required to find a counterparty for the trade by out of system means.",
          "sentiment": "good",
          "definingMetric": 604800
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds. Positions will be closed using the average price from the last batch state update.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "USDC transferred is considered canonical as it is the basis of the perpetual protocol on the chain.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within 7d. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds. Perpetual positions can also be force closed before withdrawing, however this requires the user to find the counterparty for the trade themselves.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            },
            {
              "category": "Funds can be lost if",
              "text": "the user is unable to find the counterparty for the force trade."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/overview-architecture.html#8_censorship_prevention"
            },
            {
              "text": "Forced Trade - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/forced-actions-escape-hatch-perpetual.html#forcedtrade"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/withdrawal-perpetual.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"
              },
              {
                "text": "Forced Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"
              },
              {
                "text": "Forced Trade - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"
              },
              {
                "text": "Forced Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"
              },
              {
                "text": "Forced Trade - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchangeUSDC",
            "address": "0xA1D5443F2FB80A5A55ac804C948B45ce4C52DCbb",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": [
                "0xef75e1199B0599BA823b7770AcE8eb34864a1D55",
                "0xC532d2976209A56DdF4a99B844130f7c0daCa7B6"
              ],
              "implementations": [
                "0xdD813397b79f8df581eEb0c4B8aB72304c528396",
                "0x533a7f4bE5453513049EB94A2b115F2CcE161dce",
                "0x564EA75a26Dc0Bb5c5033B4752f88953A25AD058",
                "0xdD5f42B087C1D2F73a2b443249b7D3DbE148a859",
                "0x34E7cfedF99995A47B3e3D0AB88ba67072B55035"
              ],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Main contract of ApeX exchange for USDC collateral. Updates state and verifies its integrity using STARK Verifier. Allows users to deposit and withdraw tokens via normal and emergency modes."
          },
          {
            "name": "StarkExchangeUSDT",
            "address": "0xe53A6eD882Eb3f90cCe0390DDB04c876C5482E6b",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": ["0x53c6Ec9640761c669B800088F097E01A8207Ac8b"],
              "implementations": [
                "0x3167617e913BF59afb90e5ec1A7B32D4Ea03eae4",
                "0x5a50e280883B1FB39Aa04Eb263BCA47630D17D8E",
                "0x3F3A131caB7eb5b4EAE9497Bebb9E06bE80F2809",
                "0x5BfbE850d18b73ed98FB830e0A5E9F4970Bb93dA",
                "0x229BbdF97eBc4993efe1433c0ae4A0bE79A4fe21"
              ],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Main contract of ApeX exchange for USDT collateral. Updates state and verifies its integrity using STARK Verifier. Allows users to deposit and withdraw tokens via normal and emergency modes."
          },
          {
            "name": "CommitteeUSDC",
            "address": "0x23Cab3CF1aa7B929Df5e9f3712aCA3A6Fb9494E4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract for USDC StarkEx instance, verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "CommitteeUSDT",
            "address": "0x7249082BfAFE9BCA502d38a686Ef3df37A0cf800",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract for USDT StarkEx instance, verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "MultiSigPoolUSDC",
            "address": "0xe95b3Dc78c0881dEa17A69BaFC6cFeB8d891e9DE",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Allows deposits in different tokens and swaps them to USDC. Allows fast withdrawals after the agreement of at least 2 designated signers."
          },
          {
            "name": "MultiSigPoolUSDT",
            "address": "0x379c15156B527D6E693bED60d1FBb44CE46046b8",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Allows deposits in different tokens and swaps them to USDT. Allows fast withdrawals after the agreement of at least 2 designated signers."
          },
          {
            "name": "PerpetualEscapeVerifier",
            "address": "0xaadFdB9CAc145c65f2284fBe24600d07fb37F7BD",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract responsible for validating force withdrawal requests. Used by both USDC and USDT StarkEx instances."
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governors for USDC StarkEx",
          "accounts": [
            {
              "address": "0xef75e1199B0599BA823b7770AcE8eb34864a1D55",
              "type": "EOA"
            },
            {
              "address": "0xC532d2976209A56DdF4a99B844130f7c0daCa7B6",
              "type": "MultiSig"
            }
          ],
          "description": "Allowed to upgrade the implementation of the StarkExchange (USDC) contract, potentially maliciously gaining control over the system or stealing funds.Currently there is 14d delay before the upgrade."
        },
        {
          "name": "Governors for USDT StarkEx",
          "accounts": [
            {
              "address": "0x53c6Ec9640761c669B800088F097E01A8207Ac8b",
              "type": "EOA"
            }
          ],
          "description": "Allowed to upgrade the implementation of the StarkExchange (USDT) contract, potentially maliciously gaining control over the system or stealing funds.Currently there is 14d delay before the upgrade."
        },
        {
          "name": "Operators for USDC StarkEx",
          "accounts": [
            {
              "address": "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
              "type": "EOA"
            },
            {
              "address": "0x78e802d42Bbc1834f962A11B54e0F8e07f52d4Fb",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update state of the system and verify DA proofs for USDC StarkEx instance. When Operator is down the state cannot be updated."
        },
        {
          "name": "Operators for USDT StarkEx",
          "accounts": [
            {
              "address": "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
              "type": "EOA"
            },
            {
              "address": "0x552aA2EBA4B0c5b9B8b4b22507189a7af4198169",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update state of the system and verify DA proofs for USDT StarkEx instance. When Operator is down the state cannot be updated."
        },
        {
          "name": "Data Availability Committee for USDC StarkEx",
          "accounts": [
            {
              "address": "0x696cC7615A50CF12d1d1B38bF18A5606e9708296",
              "type": "EOA"
            },
            {
              "address": "0x81165b6504520416487E5b4935865b4D3eeaa6e5",
              "type": "EOA"
            },
            {
              "address": "0xA6d068DE0da2Dc1BeCaB509B118CB88723f72b6A",
              "type": "EOA"
            },
            {
              "address": "0x0cbb676d12745948f75aF3A172cb7E4A4f8546e8",
              "type": "EOA"
            },
            {
              "address": "0xB0d71Ff040A941bB9CA8453044634EebCE5A053D",
              "type": "EOA"
            },
            {
              "address": "0x8f3310cc6951AC11F2B125fC8AC2dfA133A9498c",
              "type": "EOA"
            }
          ],
          "minSigners": 3,
          "minAssumedHonestMembers": 4,
          "description": "Validity proof must be signed by at least 3 of these addresses to approve state update."
        },
        {
          "name": "Data Availability Committee for USDT StarkEx",
          "accounts": [
            {
              "address": "0x17094A7Cc09686787E0dF95604fd1F9da94B9501",
              "type": "EOA"
            },
            {
              "address": "0x8f3310cc6951AC11F2B125fC8AC2dfA133A9498c",
              "type": "EOA"
            },
            {
              "address": "0xb557219DC53Af7Da9777540426DEe9c196842420",
              "type": "EOA"
            },
            {
              "address": "0x4F753A937318A64b2867b16a55f5aea83A4C44dB",
              "type": "EOA"
            },
            {
              "address": "0x81165b6504520416487E5b4935865b4D3eeaa6e5",
              "type": "EOA"
            }
          ],
          "minSigners": 3,
          "minAssumedHonestMembers": 3,
          "description": "Validity proof must be signed by at least 3 of these addresses to approve state update."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        }
      ],
      "milestones": [
        {
          "name": "ApeX Pro public beta launched",
          "date": "2022-11-21T00:00:00Z",
          "link": "https://twitter.com/officialapexdex/status/1564917523401052162?s=21&t=c-SqpS1PL2KOns-2K7myJA",
          "description": "ApeX Pro beta is launched, with incentives program for users.",
          "type": "general"
        },
        {
          "name": "ApeX Pro live on Mainnet",
          "date": "2022-08-31T00:00:00Z",
          "link": "https://twitter.com/officialapexdex/status/1594722304537288706?s=21&t=c-SqpS1PL2KOns-2K7myJA",
          "description": "ApeX Pro, a non-custodial decentralized exchange is now live on Mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "arbitrum",
      "createdAt": "1623153328",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"],
              "implementations": [
                "0x72f193d0F305F532C87a4B9D0A2F407a3F4f585f",
                "0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "Bridge",
            "address": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],
              "implementations": ["0x1066CEcC8880948FE55e427E94F1FF221d626591"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "SequencerInbox",
            "address": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],
              "implementations": ["0x31DA64D19Cd31A19CD09F4070366Fe2144792cf7"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches to a Rollup. Sequencers can be changed here through the UpgradeExecutor or the BatchPosterManager.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "Inbox",
            "address": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],
              "implementations": ["0x5aED5f8A1e3607476F1f81c3d8fe126deB0aFE94"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 --> L2 messages. Deposited ETH is escrowed in a Bridge contract.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "address": "0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840",
            "name": "Outbox",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],
              "implementations": ["0x0eA7372338a589e7f0b00E463a53AA464ef04e17"]
            },
            "chain": "ethereum",
            "description": "Arbitrum's Outbox system allows for arbitrary L2 to L1 contract calls; i.e., messages initiated from L2 which eventually resolve in execution on L1.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],
              "implementations": ["0x86f0cf42Ad673B3D666d103E009EC142D1298a17"]
            },
            "chain": "ethereum",
            "description": "This contract can upgrade the system's contracts. The upgrades can be done either by the Security Council or by the L1Timelock.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "L1Timelock",
            "address": "0xE6841D92B0C345144506576eC13ECf5103aC7f49",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],
              "implementations": ["0x61dC65001A8De4138DAD5167e43FF0FB0AB8D3B3"]
            },
            "chain": "ethereum",
            "description": "Timelock contract for Arbitrum Governance transactions. Scheduled transactions from Arbitrum One L2 (by the DAO or the Security Council) are delayed here and can be canceled by the Security Council or executed to upgrade and change system contracts on Ethereum, Arbitrum One and -Nova.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "L1GatewayRouter",
            "address": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa"],
              "implementations": ["0x52595021fA01B3E14EC6C88953AFc8E35dFf423c"]
            },
            "chain": "ethereum",
            "description": "Router managing token <--> gateway mapping.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "ChallengeManager",
            "address": "0xe5896783a2F463446E1f624e64Aa6836BE4C6f58",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],
              "implementations": ["0x914B7b3053B35B84A24df08D7c9ceBCaEA4E2948"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy by Validators or the UpgradeExecutor.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xa328BAF257A937b7934429a5d8458d98693C6FC7",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x5C9F8663583Ad0A1c0009c871f8253DBF4767A18",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x2c785E954c376be0CEfF4a7Db92E053B0830F7c9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x8D78382913467Cd25374C75BA918b0A723Bc2544",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xD0465e3356213869f1Fae38b3E67CBF4E873c5B6",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": {
          "arbitrum": [
            {
              "name": "CoreGovernor",
              "address": "0xf07DeD9dC292157749B6Fd268E37DF6EA38395B9",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb216562328215E010F819B5aBe947bad4ca961e"],
                "implementations": [
                  "0x065620d99E1785Ccf56Fa95462d3012Eb844FDC9"
                ]
              },
              "chain": "arbitrum",
              "description": "Governance contract accepting and managing constitutional Arbitrum Improvement Proposals (AIPs, core proposals) and, among other formal parameters, enforcing the 5% quorum for proposals.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2Timelock",
              "address": "0x34d45e99f7D8c45ed05B5cA72D54bbD1fb3F98f0",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb216562328215E010F819B5aBe947bad4ca961e"],
                "implementations": [
                  "0x41740588b86B4e0629b83A4e28786FF94361c3A3"
                ]
              },
              "chain": "arbitrum",
              "description": "Delays constitutional AIPs from the CoreGovernor by 3d.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "TreasuryGovernor",
              "address": "0x789fC99093B09aD01C34DC7251D0C89ce743e5a4",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb216562328215E010F819B5aBe947bad4ca961e"],
                "implementations": [
                  "0x065620d99E1785Ccf56Fa95462d3012Eb844FDC9"
                ]
              },
              "chain": "arbitrum",
              "description": "Governance contract used for creating non-constitutional AIPs, or \"treasury proposals\", e.g., transferring founds out of the DAO Treasury. Also enforces the 3% quorum for proposals.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "TreasuryTimelock",
              "address": "0xbFc1FECa8B09A5c5D3EFfE7429eBE24b9c09EF58",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb216562328215E010F819B5aBe947bad4ca961e"],
                "implementations": [
                  "0x41740588b86B4e0629b83A4e28786FF94361c3A3"
                ]
              },
              "chain": "arbitrum",
              "description": "Delays treasury proposals from the TreasuryGovernor by 3d. Is used as the main recipient for the ETH from L2SurplusFee and L2BaseFee contracts.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2UpgradeExecutor",
              "address": "0xCF57572261c7c2BCF21ffD220ea7d1a27D40A827",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb216562328215E010F819B5aBe947bad4ca961e"],
                "implementations": [
                  "0x7A013834D54e9B22d1978aAe3aaDDC909Aa79115"
                ]
              },
              "chain": "arbitrum",
              "description": "This contract can upgrade the L2 system's contracts through the L2ProxyAdmin. The upgrades can be done either by the Security Council or by the L1Timelock (via its alias on L2).",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "SecurityCouncilManager",
              "address": "0xD509E5f5aEe2A205F554f36E8a7d56094494eDFC",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb216562328215E010F819B5aBe947bad4ca961e"],
                "implementations": [
                  "0x468dA0eE5570Bdb1Dd81bFd925BAf028A93Dce64"
                ]
              },
              "chain": "arbitrum",
              "description": "This contract enforces the rules for changing members and cohorts of the SecurityCouncil and creates crosschain messages to Ethereum and Arbitrum Nova to keep the configuration in sync.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "ConstitutionHash",
              "address": "0x1D62fFeB72e4c360CcBbacf7c965153b00260417",
              "upgradeability": null,
              "chain": "arbitrum",
              "description": "Keeps the current hash of the ArbitrumDAO Constitution. Settable by the L2UpgradeExecutor."
            },
            {
              "name": "L2ProxyAdmin",
              "address": "0xdb216562328215E010F819B5aBe947bad4ca961e",
              "upgradeability": null,
              "chain": "arbitrum",
              "description": "The owner (UpgradeExecutor) can upgrade proxies' implementations of all L2 system contracts through this contract."
            },
            {
              "name": "L2GatewaysProxyAdmin",
              "address": "0xd570aCE65C43af47101fC6250FD6fC63D1c22a86",
              "upgradeability": null,
              "chain": "arbitrum",
              "description": "The owner (UpgradeExecutor) can upgrade proxies' implementations of all L2 bridging gateway contracts through this contract."
            },
            {
              "name": "L2BaseFee",
              "address": "0xbF5041Fc07E1c866D15c749156657B8eEd0fb649",
              "upgradeability": null,
              "chain": "arbitrum",
              "description": "This contract receives all BaseFees: The transaction fee component that covers the minimum cost of Arbitrum transaction execution. They are withdrawable to a configurable set of recipients."
            },
            {
              "name": "L2SurplusFee",
              "address": "0x32e7AF5A8151934F3787d0cD59EB6EDd0a736b1d",
              "upgradeability": null,
              "chain": "arbitrum",
              "description": "This contract receives all SurplusFees: Transaction fee component that covers the cost beyond that covered by the L2 Base Fee during chain congestion. They are withdrawable to a configurable set of recipients."
            },
            {
              "name": "L2ArbitrumToken",
              "address": "0x912CE59144191C1204E64559FE8253a0e49E6548",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb216562328215E010F819B5aBe947bad4ca961e"],
                "implementations": [
                  "0xC4ed0A9Ea70d5bCC69f748547650d32cC219D882"
                ]
              },
              "chain": "arbitrum",
              "description": "The ARB token contract. Supply can be increased by the owner once per year by a maximum of 2%.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2GatewayRouter",
              "address": "0x5288c571Fd7aD117beA99bF60FE0846C4E84F933",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xd570aCE65C43af47101fC6250FD6fC63D1c22a86"],
                "implementations": [
                  "0xe80eb0238029333e368e0bDDB7acDf1b9cb28278"
                ]
              },
              "chain": "arbitrum",
              "description": "Router managing token <--> gateway mapping on L2.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2ERC20Gateway",
              "address": "0x09e9222E96E7B4AE2a407B98d48e330053351EEe",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xd570aCE65C43af47101fC6250FD6fC63D1c22a86"],
                "implementations": [
                  "0x1DCf7D03574fbC7C205F41f2e116eE094a652e93"
                ]
              },
              "chain": "arbitrum",
              "description": "Counterpart to the L1ERC20Gateway. Can mint (deposit to L2) and burn (withdraw to L1) ERC20 tokens on L2.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2WethGateway",
              "address": "0x6c411aD3E74De3E7Bd422b94A27770f5B86C623B",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xd570aCE65C43af47101fC6250FD6fC63D1c22a86"],
                "implementations": [
                  "0x806421D09cDb253aa9d128a658e60c0B95eFFA01"
                ]
              },
              "chain": "arbitrum",
              "description": "Counterpart to the Bridge on L1. Mints and burns WETH on L2.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2ARBGateway",
              "address": "0xCaD7828a19b363A2B44717AFB1786B5196974D8E",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb216562328215E010F819B5aBe947bad4ca961e"],
                "implementations": [
                  "0x5D96786d3Eb13CAd05c9Fd7d0f7bb9560b4E5056"
                ]
              },
              "chain": "arbitrum",
              "description": "ARB sent from L2 to L1 is escrowed in this contract and minted on L1.",
              "upgradableBy": [
                "SecurityCouncilEmergency",
                "SecurityCouncilPropose",
                "L1Timelock"
              ],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2DAIGateway",
              "address": "0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65",
              "upgradeability": null,
              "chain": "arbitrum",
              "description": "Counterpart to the L1DaiGateway. Can mint (deposit to L2) and burn (withdraw to L1) DAI tokens on L2"
            },
            {
              "name": "L2LPTGateway",
              "address": "0x6D2457a4ad276000A615295f7A80F79E48CcD318",
              "upgradeability": null,
              "chain": "arbitrum",
              "description": "Counterpart to the L1LPTGateway. Can mint (deposit to L2) and burn (withdraw to L1) LPT on L2"
            }
          ]
        },
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 12d 8h delay on code upgrades unless upgrade is initiated by the     Security Council in which case there is no delay."
          }
        ]
      },
      "chainConfig": {
        "name": "arbitrum",
        "chainId": 42161,
        "blockscoutV2ApiUrl": "https://arbitrum.blockscout.com/api/v2",
        "explorerUrl": "https://arbiscan.io",
        "explorerApi": {
          "url": "https://api.arbiscan.io/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1622240100",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 7654707,
            "version": "3"
          },
          {
            "sinceBlock": 821923,
            "batchSize": 150,
            "address": "0x842eC2c7D803033Edf55E478F461FC547Bc54EB2",
            "version": "2"
          }
        ],
        "coingeckoPlatform": "arbitrum-one"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing followed by deterministic execution - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/#sequencing-followed-by-deterministic-execution"
            },
            {
              "text": "SequencerInbox.sol - Etherscan source code, addSequencerL2BatchFromOrigin function",
              "href": "https://etherscan.io/address/0x31DA64D19Cd31A19CD09F4070366Fe2144792cf7#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x31DA64D19Cd31A19CD09F4070366Fe2144792cf7#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible and Stylus smart contracts are supported",
            "description": "Arbitrum One supports smart contracts written in Solidity and other programming languages (Rust, C++) that compile to WASM. Such smart contracts are executed by nodes using either a geth fork or [a fork of wasmer](https://github.com/OffchainLabs/wasmer) inside the Nitro node, and can be proven with the onchain WASM VM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              },
              {
                "text": "A gentle introduction: Stylus",
                "href": "https://docs.arbitrum.io/stylus/stylus-gentle-introduction"
              }
            ]
          },
          {
            "name": "Arbitrum DAO is in charge of upgrades",
            "description": "Arbitrum DAO allows $ARB token holders to propose and vote on changes to the organization and the technologies it governs. The governance smart contracts are implemented on Arbitrum One rollup chain. The DAO can upgrade the Arbitrum One contracts on L2 with 3d delay and - using L2 --> L1 Governance Relay, update contracts on L1 with additional 3d delay + 6d 8h delay for all L2 --> L1 messages (in total a delay of 12d 8h). The Security Council can upgrade the contracts without any delay. It can also cancel any upgrades initiated by the DAO.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "a contract receives a malicious code upgrade. There is a 12d 8h delay on code upgrades."
              }
            ],
            "references": [
              {
                "text": "Arbitrum DAO",
                "href": "https://docs.arbitrum.foundation/concepts/arbitrum-dao"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D",
              "type": "EOA"
            },
            {
              "address": "0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x56D83349c2B8DCF74d7E92D5b6B33d0BADD52D78",
              "type": "Contract"
            },
            {
              "address": "0x758C6bB08B3ea5889B5cddbdeF9A45b3a983c398",
              "type": "Contract"
            },
            {
              "address": "0x7CF3d537733F6Ba4183A833c9B021265716cE9d0",
              "type": "Contract"
            },
            {
              "address": "0x83215480dB2C6A7E56f9E99EF93AB9B36F8A3DD5",
              "type": "Contract"
            },
            {
              "address": "0xB0CB1384e3f4a9a9b2447e39b05e10631E1D34B0",
              "type": "Contract"
            },
            {
              "address": "0xf59caf75e8A4bFBA4e6e07aD86C7E498E4d2519b",
              "type": "Contract"
            },
            {
              "address": "0x0fF813f6BD577c3D1cDbE435baC0621BE6aE34B4",
              "type": "EOA"
            },
            {
              "address": "0x54c0D3d6C101580dB3be8763A2aE2c6bb9dc840c",
              "type": "EOA"
            },
            {
              "address": "0x610Aa279989F440820e14248BD3879B148717974",
              "type": "EOA"
            },
            {
              "address": "0x6Fb914de4653eC5592B7c15F4d9466Cbd03F2104",
              "type": "EOA"
            },
            {
              "address": "0xAB1A39332e934300eBCc57B5f95cA90631a347FF",
              "type": "EOA"
            },
            {
              "address": "0xB51EDdfc9A945e2B909905e4F242C4796Ac0C61d",
              "type": "EOA"
            },
            {
              "address": "0xdDf2F71Ab206C0138A8eceEb54386567D5abF01E",
              "type": "EOA"
            },
            {
              "address": "0xF8D3E1cF58386c92B27710C6a0D8A54c76BC6ab5",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 9 / 12 threshold. It uses the following modules: UpgradeExecutor. The admin of all contracts in the system, capable of issuing upgrades without notice and delay. This allows it to censor transactions and to upgrade the bridge implementation, potentially gaining access to all funds stored in the bridge and change the sequencer or any other system component (unlimited upgrade power). It is also the admin of the special purpose smart contracts used by validators.",
          "accounts": [
            {
              "address": "0xF06E95eF589D9c38af242a8AAee8375f14023F85",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": [
            {
              "text": "Security Council members - Arbitrum Foundation Docs",
              "href": "https://docs.arbitrum.foundation/security-council-members"
            }
          ],
          "participants": [
            {
              "address": "0x70C006fC86A392c16D7E085cefc0Ad1FF7de6C75",
              "type": "EOA"
            },
            {
              "address": "0xA821c8c245d1F3A257e3B0DEC99268cA05144422",
              "type": "EOA"
            },
            {
              "address": "0x5a09A94eE8198D3c474d723337aa58023810022C",
              "type": "EOA"
            },
            {
              "address": "0x5DD2205C3aac13E592F0a3D85188c948D1781df1",
              "type": "EOA"
            },
            {
              "address": "0x8F10e3413586c4a8DCfcE19D009872b19e9cd8E3",
              "type": "EOA"
            },
            {
              "address": "0xb71ca4FFbB7b58d75Ba29891ab45e9Dc12B444Ed",
              "type": "EOA"
            },
            {
              "address": "0x3E286452b1C66abB08Eb5494c3894F40aB5a59AF",
              "type": "EOA"
            },
            {
              "address": "0xb07dc9103328A51128bC6Cc1049d1137035f5E28",
              "type": "EOA"
            },
            {
              "address": "0x3Bd8e2AC65ad6f0F094BA6766cBd9484AB49eF23",
              "type": "EOA"
            },
            {
              "address": "0xf8e1492255d9428c2Fc20A98A1DeB1215C8ffEfd",
              "type": "EOA"
            },
            {
              "address": "0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae",
              "type": "EOA"
            },
            {
              "address": "0x475816ca2a31D601B4e336f5c2418A67978aBf09",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "L1Timelock",
          "accounts": [
            {
              "address": "0xE6841D92B0C345144506576eC13ECf5103aC7f49",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Timelock contract for Arbitrum Governance transactions. Scheduled transactions from Arbitrum One L2 (by the DAO or the Security Council) are delayed here and can be canceled by the Security Council or executed to upgrade and change system contracts on Ethereum, Arbitrum One and -Nova."
        },
        {
          "name": "BatchPosterManagerMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  It can update whether an address is authorized to be a batch poster at the sequencer inbox. The UpgradeExecutor retains the ability to update the batch poster manager (along with any batch posters).",
          "accounts": [
            {
              "address": "0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x375906ADFD34D93236084F462BB2dB0D92129Fe1",
              "type": "EOA"
            },
            {
              "address": "0xfE2bf40f2A9183774BF8E871d634A4E50255158B",
              "type": "EOA"
            },
            {
              "address": "0x64379Dee676ab442B48925Ed603771f386510Ee7",
              "type": "EOA"
            },
            {
              "address": "0x290Aa3E7533c873B3326DabFe7579e86ed951428",
              "type": "EOA"
            },
            {
              "address": "0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C",
              "type": "EOA"
            },
            {
              "address": "0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": {
        "arbitrum": [
          {
            "name": "L2SecurityCouncilEmergency",
            "description": "This is a Gnosis Safe with 9 / 12 threshold. It uses the following modules: L2UpgradeExecutor. The elected signers for the Arbitrum SecurityCouncil can act through this multisig on Layer2, permissioned to upgrade all system contracts without delay.",
            "accounts": [
              {
                "address": "0x423552c0F05baCCac5Bfa91C6dCF1dc53a0A1641",
                "type": "MultiSig"
              }
            ],
            "chain": "arbitrum",
            "references": null,
            "participants": [
              {
                "address": "0x70C006fC86A392c16D7E085cefc0Ad1FF7de6C75",
                "type": "EOA"
              },
              {
                "address": "0xA821c8c245d1F3A257e3B0DEC99268cA05144422",
                "type": "EOA"
              },
              {
                "address": "0x5a09A94eE8198D3c474d723337aa58023810022C",
                "type": "EOA"
              },
              {
                "address": "0x5DD2205C3aac13E592F0a3D85188c948D1781df1",
                "type": "EOA"
              },
              {
                "address": "0x8F10e3413586c4a8DCfcE19D009872b19e9cd8E3",
                "type": "EOA"
              },
              {
                "address": "0xb71ca4FFbB7b58d75Ba29891ab45e9Dc12B444Ed",
                "type": "EOA"
              },
              {
                "address": "0x3E286452b1C66abB08Eb5494c3894F40aB5a59AF",
                "type": "EOA"
              },
              {
                "address": "0xb07dc9103328A51128bC6Cc1049d1137035f5E28",
                "type": "EOA"
              },
              {
                "address": "0x3Bd8e2AC65ad6f0F094BA6766cBd9484AB49eF23",
                "type": "EOA"
              },
              {
                "address": "0xf8e1492255d9428c2Fc20A98A1DeB1215C8ffEfd",
                "type": "EOA"
              },
              {
                "address": "0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae",
                "type": "EOA"
              },
              {
                "address": "0x475816ca2a31D601B4e336f5c2418A67978aBf09",
                "type": "EOA"
              }
            ]
          },
          {
            "name": "L2SecurityCouncilPropose",
            "description": "This is a Gnosis Safe with 9 / 12 threshold. It uses the following modules: L2UpgradeExecutor. The elected signers for the Arbitrum SecurityCouncil can act through this multisig on Layer2 to propose transactions in the L2Timelock (e.g. upgrade proposals).",
            "accounts": [
              {
                "address": "0xADd68bCb0f66878aB9D37a447C7b9067C5dfa941",
                "type": "MultiSig"
              }
            ],
            "chain": "arbitrum",
            "references": null,
            "participants": [
              {
                "address": "0x70C006fC86A392c16D7E085cefc0Ad1FF7de6C75",
                "type": "EOA"
              },
              {
                "address": "0xA821c8c245d1F3A257e3B0DEC99268cA05144422",
                "type": "EOA"
              },
              {
                "address": "0x5a09A94eE8198D3c474d723337aa58023810022C",
                "type": "EOA"
              },
              {
                "address": "0x5DD2205C3aac13E592F0a3D85188c948D1781df1",
                "type": "EOA"
              },
              {
                "address": "0x8F10e3413586c4a8DCfcE19D009872b19e9cd8E3",
                "type": "EOA"
              },
              {
                "address": "0xb71ca4FFbB7b58d75Ba29891ab45e9Dc12B444Ed",
                "type": "EOA"
              },
              {
                "address": "0x3E286452b1C66abB08Eb5494c3894F40aB5a59AF",
                "type": "EOA"
              },
              {
                "address": "0xb07dc9103328A51128bC6Cc1049d1137035f5E28",
                "type": "EOA"
              },
              {
                "address": "0x3Bd8e2AC65ad6f0F094BA6766cBd9484AB49eF23",
                "type": "EOA"
              },
              {
                "address": "0xf8e1492255d9428c2Fc20A98A1DeB1215C8ffEfd",
                "type": "EOA"
              },
              {
                "address": "0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae",
                "type": "EOA"
              },
              {
                "address": "0x475816ca2a31D601B4e336f5c2418A67978aBf09",
                "type": "EOA"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "The rollup node (Arbitrum Nitro) consists of four parts. The base layer is the core Geth server (with minor modifications to add hooks) that emulates the execution of EVM contracts and maintains Ethereum's state and [a fork of wasmer](https://github.com/OffchainLabs/wasmer) that is used for native WASM execution. The middle layer, ArbOS, provides additional Layer 2 functionalities such as decompressing data batches, accounting for Layer 1 gas costs, and supporting cross-chain bridge functionalities. The top layer consists of node software, primarily from Geth, that handles client connections (i.e., regular RPC node). [View Code](https://github.com/OffchainLabs/nitro/)",
        "compressionScheme": "The Sequencer's batches are compressed using a general-purpose data compression algorithm known as [Brotli](https://github.com/google/brotli), configured to its highest compression setting.",
        "genesisState": "They performed a regenesis from Classic to Nitro, and that file represents the [last Classic state](https://snapshot.arbitrum.foundation/arb1/nitro-genesis.tar). To sync from the initial Classic state, instructions can be found [here](https://docs.arbitrum.io/migration/state-migration).",
        "dataFormat": "Nitro supports Ethereum's data structures and formats by incorporating the core code of the popular go-ethereum (\"Geth\") Ethereum node software. The batch is composed of a header and a compressed blob, which results from compressing concatenated RLP-encoded transactions using the standard RLP encoding."
      },
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 1.0 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": "\n  All critical system smart contracts are upgradeable (can be arbitrarily changed). This permission is governed by the Arbitrum Decentralized Autonomous Organization (DAO) \n  and their elected Security Council. The Arbitrum DAO controls Arbitrum One and Arbitrum Nova through upgrades and modifications to their smart contracts on Layer 1 Ethereum and the Layer 2s. \n  While the DAO governs through token-weighted governance in their associated ARB token, the Security Council can directly act through \n  the Security Council smart contracts on all three chains. Although these multisigs are technically separate and connect to different target permissions, \n  their member- and threshold configuration is kept in sync by a manager contract on Arbitrum One and crosschain transactions.\n  \n  \n  Regular upgrades, Admin- and Owner actions originate from either the Arbitrum DAO or the non-emergency (proposer-) Security Council on Arbitrum One \n  and pass through multiple delays and timelocks before being executed at their destination. Contrarily, the three Emergency Security Council multisigs \n  (one on each chain: Arbitrum One, Ethereum, Arbitrum Nova) can skip delays and directly access all admin- and upgrade functions of all smart contracts. \n  These two general paths have the same destination: the respective UpgradeExecutor smart contract.\n  \n  \n  Regular upgrades are scheduled in the L2 Timelock. The proposer Security Council can do this directly and the Arbitrum DAO (ARB token holders and delegates) must meet a \n  CoreGovernor-enforced 5% threshold of the votable tokens. The L2 Timelock queues the transaction for a 3d delay and then sends it to the Outbox contract on Ethereum. This incurs another delay (the challenge period) of 6d 8h.\n  When that has passed, the L1 Timelock delays for additional 3d. Both timelocks serve as delays during which the transparent transaction contents can be audited, \n  and even cancelled by the Emergency Security Council. Finally, the transaction can be executed, calling Admin- or Owner functions of the respective destination smart contracts \n  through the UpgradeExecutor on Ethereum. If the predefined  transaction destination is Arbitrum One or -Nova, this last call is executed on L2 through the canonical bridge and the aliased address of the L1 Timelock.\n  \n  \n  Operator roles like the Sequencers and Validators are managed using the same paths. \n  Sequencer changes can be delegated to a Batch Poster Manager.\n  \n  \n  Transactions targeting the Arbitrum DAO Treasury can be scheduled in the 3d \n  Treasury Timelock by meeting a TreasuryGovernor-enforced 3% threshold of votable ARB tokens. The Security Council cannot regularly cancel \n  these transactions or schedule different ones but can overwrite them anyway by having full admin upgrade permissions for all the underlying smart contracts.",
      "milestones": [
        {
          "name": "ArbOS 32 Emergency upgrade",
          "link": "https://github.com/OffchainLabs/nitro/releases/tag/v3.2.0",
          "date": "2024-09-25T00:00:00Z",
          "description": "SecurityCouncil emergency upgrades to fix attack vectors related to Stylus resource pricing.",
          "type": "incident"
        },
        {
          "name": "ArbOS 31 Bianca upgrade",
          "link": "https://www.tally.xyz/gov/arbitrum/proposal/108288822474129076868455956066667369439381709547570289793612729242368710728616",
          "date": "2024-09-03T00:00:00Z",
          "description": "Arbitrum upgrades to ArbOS 31 activating Stylus (new languages for smart contracts).",
          "type": "general"
        },
        {
          "name": "Arbitrum starts using blobs",
          "link": "https://twitter.com/arbitrum/status/1768306107318178061",
          "date": "2024-03-14T00:00:00Z",
          "description": "Arbitrum starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "ARB token airdrop",
          "link": "https://twitter.com/arbitrum/status/1638888588443111425",
          "date": "2023-03-23T00:00:00Z",
          "description": "ARB token launched as a governance token for Arbitrum DAO.",
          "type": "general"
        },
        {
          "name": "Nitro Upgrade",
          "link": "https://medium.com/offchainlabs/arbitrum-nitro-one-small-step-for-l2-one-giant-leap-for-ethereum-bc9108047450",
          "date": "2022-08-31T00:00:00Z",
          "description": "Upgrade is live, introducing new architecture, increased throughput and lower fees.",
          "type": "general"
        },
        {
          "name": "Odyssey paused",
          "link": "https://twitter.com/arbitrum/status/1542159109511847937",
          "date": "2022-06-29T00:00:00Z",
          "description": "Due of the heavy load being put on the chain, Odyssey program got paused.",
          "type": "incident"
        },
        {
          "name": "Odyssey started",
          "link": "https://twitter.com/arbitrum/status/1539292126105706496",
          "date": "2022-06-21T00:00:00Z",
          "description": "Incentives program to onboard new users has started.",
          "type": "general"
        },
        {
          "name": "Mainnet for everyone",
          "description": "Whitelist got removed, there are no restrictions on who can transact with the network.",
          "link": "https://twitter.com/arbitrum/status/1432817424752128008",
          "date": "2021-08-31T00:00:00Z",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Arbitrum update boosts decentralization",
          "url": "https://twitter.com/bkiepuszewski/status/1594754717330309120",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Arbitrum is down... or is it?",
          "url": "https://twitter.com/bkiepuszewski/status/1438445910191710211",
          "thumbnail": "l2beat-04.jpg"
        }
      ],
      "badges": [
        "Nitro",
        "EthereumBlobs",
        "WasmVM",
        "Governance",
        "L3HostChain",
        "EVM"
      ],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Arbitrum One",
        "slug": "arbitrum",
        "description": "Arbitrum One is a general-purpose Optimistic Rollup built by Offchain Labs and governed by the Arbitrum DAO.",
        "links": {
          "websites": ["https://arbitrum.io/", "https://arbitrum.foundation/"],
          "apps": ["https://bridge.arbitrum.io"],
          "documentation": [
            "https://docs.arbitrum.io",
            "https://docs.arbitrum.foundation/"
          ],
          "explorers": [
            "https://arbiscan.io",
            "https://explorer.arbitrum.io/",
            "https://arbitrum.l2scan.co/"
          ],
          "repositories": [
            "https://github.com/ArbitrumFoundation/docs",
            "https://github.com/ArbitrumFoundation/governance",
            "https://github.com/OffchainLabs/arbitrum",
            "https://github.com/OffchainLabs/nitro",
            "https://github.com/OffchainLabs/arb-os"
          ],
          "socialMedia": [
            "https://twitter.com/arbitrum",
            "https://arbitrumfoundation.medium.com/",
            "https://discord.gg/Arbitrum",
            "https://youtube.com/@Arbitrum",
            "https://t.me/arbitrum"
          ],
          "rollupCodes": "https://rollup.codes/arbitrum-one"
        },
        "activityDataSource": "Blockchain RPC",
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Arbitrum One is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted on L1. Forced txs can be delayed up to 1d. The state root gets finalized 6d 8h after it has been posted."
        },
        "finality": { "finalizationPeriod": 549816 },
        "provider": "Arbitrum",
        "category": "Optimistic Rollup"
      },
      "stage": {
        "stage": "Stage 1",
        "missing": {
          "nextStage": "Stage 2",
          "requirements": [
            "Fraud proof submission is open only to whitelisted actors.",
            "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit.",
            "The Security Council's actions are not confined to on-chain provable bugs."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/OffchainLabs/nitro/)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "There are at least 5 external actors who can submit fraud proofs."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": true,
                "description": "In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."
              },
              {
                "satisfied": true,
                "description": "The Security Council is properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Fraud proof submission is open only to whitelisted actors."
              },
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "Fraud proofs allow 14 WHITELISTED actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. There is a 6d 8h challenge period.",
          "sentiment": "warning",
          "definingMetric": 14,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "2d",
          "description": "Non-emergency upgrades are initiated on L2 and go through a 3d delay. Since there is a 1d delay to force a tx (forcing the inclusion in the following state update), users have only 2d to exit. \n    \n  If users post a tx after that time, they would only be able to self propose a state root 12d 17h after the last state root was proposed and then wait for the 6d 8h challenge window, while the upgrade would be confirmed just after the 6d 8h challenge window and the 3d L1 timelock.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 172800,
          "warning": {
            "value": "The Security Council can upgrade with no delay.",
            "sentiment": "bad"
          },
          "sources": [
            {
              "contract": "RollupProxy",
              "references": [
                "https://etherscan.io/address/0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff#code#F1#L43"
              ]
            },
            {
              "contract": "Outbox",
              "references": [
                "https://etherscan.io/address/0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840#code"
              ]
            }
          ]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["ARB"],
        "escrows": [
          {
            "address": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
            "newVersion": true,
            "sinceTimestamp": "1661457944",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"],
                "implementations": [
                  "0x1066CEcC8880948FE55e427E94F1FF221d626591"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xcEe284F754E854890e311e3280b767F80797180d",
            "newVersion": true,
            "sinceTimestamp": "1623867835",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xcEe284F754E854890e311e3280b767F80797180d",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa"],
                "implementations": [
                  "0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 tokens that require minting custom token on L2.",
              "upgradableBy": ["SecurityCouncil", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xa3A7B6F88361F48403514059F1F16C8E78d60EeC",
            "newVersion": true,
            "sinceTimestamp": "1623784100",
            "tokens": "*",
            "excludedTokens": ["SolvBTC", "SolvBTC.BBN"],
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xa3A7B6F88361F48403514059F1F16C8E78d60EeC",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa"],
                "implementations": [
                  "0xb4299A1F5f26fF6a98B7BA35572290C359fde900"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.",
              "upgradableBy": ["SecurityCouncil", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xA10c7CE4b876998858b1a9E12b10092229539400",
            "newVersion": true,
            "sinceTimestamp": "1632133470",
            "tokens": ["DAI"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xA10c7CE4b876998858b1a9E12b10092229539400",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "DAI Vault for custom DAI Gateway. Fully controlled by MakerDAO governance.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x0F25c1DC2a9922304f2eac71DCa9B07E310e8E5a",
            "newVersion": true,
            "sinceTimestamp": "1659608791",
            "tokens": ["wstETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x0F25c1DC2a9922304f2eac71DCa9B07E310e8E5a",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],
                "implementations": [
                  "0xc4E3ff0b5B106f88Fc64c43031BE8b076ee9F21C"
                ]
              },
              "chain": "ethereum",
              "description": "wstETH Vault for custom wstETH Gateway. Fully controlled by Lido governance.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x6A23F4940BD5BA117Da261f98aae51A8BFfa210A",
            "newVersion": true,
            "sinceTimestamp": "1644777090",
            "tokens": ["LPT"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x6A23F4940BD5BA117Da261f98aae51A8BFfa210A",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "LPT Vault for custom Livepeer Token Gateway.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x011B6E24FfB0B5f5fCc564cf4183C5BBBc96D515",
            "chain": "ethereum",
            "sinceTimestamp": "1622243344",
            "tokens": ["ETH"],
            "isHistorical": true
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://arb1.arbitrum.io/rpc",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
              "selector": "0x8f111f3c",
              "functionSignature": "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1661457944"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
              "selector": "0x6f12b0c9",
              "functionSignature": "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder)",
              "sinceTimestamp": "1661457944"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
              "selector": "0xe0bc9729",
              "functionSignature": "function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1661457944"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
              "selector": "0x3e5aa082",
              "functionSignature": "function addSequencerL2BatchFromBlobs(uint256 sequenceNumber,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1710427823"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840",
              "selector": "0xa04cee60",
              "functionSignature": "function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external",
              "sinceTimestamp": "1661455766"
            }
          }
        ],
        "finality": {
          "type": "Arbitrum",
          "minTimestamp": "1710427823",
          "lag": 0,
          "stateUpdate": "disabled"
        }
      }
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "arcology",
      "createdAt": "1719931771",
      "display": {
        "name": "Arcology Network",
        "slug": "arcology",
        "description": "Powered by its parallel execution engine with STM (Software Transactional Memory) based concurrency control, Arcology Network is the first Rollup to process transactions fully in parallel. With EVM equivalence and horizontal scaling, it’s perfect for developers building high-performance, resource-intensive decentralized apps.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://arcology.network/"],
          "apps": [],
          "documentation": ["https://doc.arcology.network/main"],
          "explorers": [],
          "repositories": ["https://github.com/arcology-network"],
          "socialMedia": [
            "https://twitter.com/ArcologyN",
            "https://chatgpt.com/g/g-lkeB0ZG52-solidity-concurrent-programming-gpt"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "arithmic",
      "createdAt": "1725550343",
      "display": {
        "name": "Arithmic",
        "slug": "arithmic",
        "description": "Arithmic is an upcoming zero-knowledge Layer-2 powered by universal native (re)staking at a protocol-level.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://arithmic.com"],
          "apps": [],
          "documentation": [
            "https://arithmic-labs.gitbook.io/arithmic-documentation/"
          ],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/ArithmicNetwork"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "createdAt": "1690815262",
      "id": "astarzkevm",
      "display": {
        "name": "Astar zkEVM",
        "slug": "astarzkevm",
        "description": "Astar zkEVM is a Validium that leverages Polygon's CDK and zero-knowledge cryptography to enable off-chain transactions while maintaining EVM equivalence.",
        "links": {
          "websites": ["https://astar.network/blog/astar-evolution-phase-1-56"],
          "apps": [],
          "documentation": ["https://docs.astar.network/docs/build/zkEVM/"],
          "explorers": ["https://astar-zkevm.explorer.startale.com/"],
          "repositories": ["https://github.com/AstarNetwork"],
          "socialMedia": [
            "https://twitter.com/AstarNetwork",
            "https://discord.com/invite/astarnetwork",
            "https://youtube.com/@AstarNetwork",
            "https://t.me/PlasmOfficial"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "purposes": ["Universal"],
        "category": "Validium",
        "provider": "Polygon",
        "tvlWarning": null,
        "finality": {
          "finalizationPeriod": 0,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "Uniform block distribution is assumed for calculations."
            }
          }
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "newVersion": true,
            "sinceTimestamp": "1679653127",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
                "implementations": [
                  "0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "AggLayer",
              "nativeAsset": "etherPreminted",
              "premintedAmount": "340282366920938463463374607431768211455"
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.startale.com/astar-zkevm",
          "defaultCallsPerMinute": 500
        },
        "trackedTxs": null,
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": null
      },
      "chainConfig": {
        "name": "astarzkevm",
        "chainId": 3776,
        "explorerUrl": "https://astar-zkevm.explorer.startale.com",
        "minTimestampForTvl": "1708632059",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 183817,
            "version": "3"
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "3/5 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 3/5 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 3/5 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.6,
          "sources": [{ "contract": "AstarValidium", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -432000,
          "warning": {
            "value": "The Security Council can remove the delay on upgrades.",
            "sentiment": "bad"
          }
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.",
          "sentiment": "bad",
          "sources": [{ "contract": "AstarValidium", "references": [] }]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b",
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "PolygonRollupManager.sol - Etherscan source code, _verifyAndRewardBatches function",
              "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain. Transaction data is stored off-chain and only the hashes are posted on-chain by the Sequencer, after being signed by the DAC members.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "PolygonValidiumStorageMigration.sol - Etherscan source code, sequenceBatchesValidium function",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C#code#F1#L126"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "AstarValidium.sol - Etherscan source code, onlyTrustedSequencer modifier",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "The mechanism for allowing users to submit their own transactions is currently disabled.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "AstarValidium.sol - Etherscan source code, forceBatchAddress address",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "PolygonZkEvmBridgeV2.sol - Etherscan source code, claimAsset function",
                "href": "https://etherscan.io/address/0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "Node software can be found [here](https://github.com/0xPolygon/cdk-validium-node).",
        "compressionScheme": "No compression scheme yet.",
        "genesisState": "The genesis state, whose corresponding root is accessible as Batch 0 root in the `getRollupBatchNumToStateRoot` method of PolygonRollupManager, is available [here](https://github.com/0xPolygonHermez/zkevm-contracts/blob/1ad7089d04910c319a257ff4f3674ffd6fc6e64e/tools/addRollupType/genesis.json).",
        "dataFormat": "The trusted sequencer request signatures from DAC members off-chain, and posts hashed batches with signatures to the AstarValidium contract."
      },
      "stateValidation": null,
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0xA09F1c88C0194Da6b0a1c564CDBEcbF3AAd649E4",
              "type": "EOA"
            }
          ],
          "description": "Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."
        },
        {
          "name": "Proposer (Trusted Aggregator)",
          "accounts": [
            {
              "address": "0x6329Fe417621925C81c16F9F9a18c203C21Af7ab",
              "type": "EOA"
            },
            {
              "address": "0x20A53dCb196cD2bcc14Ece01F358f1C849aA51dE",
              "type": "EOA"
            }
          ],
          "description": "The trusted proposer (called Aggregator) provides ZK proofs for all the supported systems. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 6 / 8 threshold.  The Security Council is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.",
          "accounts": [
            {
              "address": "0x37c58Dfa7BF0A165C5AAEdDf3e2EdB475ac6Dcb6",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
              "type": "EOA"
            },
            {
              "address": "0xaF46a0ddf80DFFB49C87656625E65A37499B261D",
              "type": "EOA"
            },
            {
              "address": "0xBDc235cC9d6Baa641c5ae306bc83962475A5FEFf",
              "type": "EOA"
            },
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0x3ab9f4b964eE665F7CDf1d65f1cEEc6196B0D622",
              "type": "EOA"
            },
            {
              "address": "0x49c15936864690bCd6af0ecaca8E874adFF30E86",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0x21887c89368bf918346c62460e0c339113801C28",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Forced Batcher",
          "accounts": [
            {
              "address": "0xf98ee8c46baEa2B11e4f0450AD9D01861265F76E",
              "type": "MultiSig"
            }
          ],
          "description": "Sole account allowed to submit forced transactions. If this address is the zero address, anyone can submit forced transactions."
        },
        {
          "name": "RollupManagerAdminMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Admin of the PolygonRollupManager contract, can set core system parameters like timeouts and aggregator as well as deactivate emergency state. They can also upgrade the AstarValidium contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0xA0B02B28920812324f1cC3255bd8840867d3f227",
              "type": "EOA"
            },
            {
              "address": "0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LocalAdmin",
          "description": "This is a Gnosis Safe with 3 / 6 threshold.  Admin of the AstarValidium contract, can set core system parameters like timeouts, sequencer, activate forced transactions, update the DA mode and upgrade the AstarValidiumDAC contract",
          "accounts": [
            {
              "address": "0xf98ee8c46baEa2B11e4f0450AD9D01861265F76E",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xe4D4fBC6e27B3AE9D881BD9400071FB6c62E4dfa",
              "type": "EOA"
            },
            {
              "address": "0xEc24369A1269171e3cb0A323DD920F99Cb528Fb0",
              "type": "EOA"
            },
            {
              "address": "0x127Bae6Fc751dC92111a359500ae91EB437f3dCb",
              "type": "EOA"
            },
            {
              "address": "0x83cC8195856b0463dEd5f052021009b7985FDa2C",
              "type": "EOA"
            },
            {
              "address": "0x4324c3960c7B2567D0C13ba17493bb364c407937",
              "type": "EOA"
            },
            {
              "address": "0x6c4876Ecb5de33f76700f44d547C593065806dAC",
              "type": "MultiSig"
            }
          ]
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "AstarValidiumDAC",
            "address": "0x9CCD205052c732Ac1Df2cf7bf8aACC0E371eE0B0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1963D7b78e75A5eDfF9e5376E7A07A935Fb3d50d"],
              "implementations": ["0xF4e87685e323818E0aE35dCdFc3B65106002E456"]
            },
            "chain": "ethereum",
            "description": "Validium committee contract that allows the admin to setup the members of the committee and stores the required amount of signatures threshold.",
            "upgradableBy": ["LocalAdmin"],
            "upgradeDelay": "None"
          },
          {
            "name": "AstarValidium",
            "address": "0x1E163594e13030244DCAf4cDfC2cd0ba3206DA80",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"],
              "implementations": ["0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"]
            },
            "chain": "ethereum",
            "description": "The main contract of the Astar zkEVM. Contains sequenced transaction batch hashes and forced transaction logic.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "AstarVerifier",
            "address": "0x0775e11309d75aA6b0967917fB0213C5673eDf81",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "An autogenerated contract that verifies ZK proofs in the PolygonRollupManager system."
          },
          {
            "name": "PolygonRollupManager",
            "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]
            },
            "chain": "ethereum",
            "description": "It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the Security Council, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives L2 state roots as well as ZK proofs.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Bridge",
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]
            },
            "chain": "ethereum",
            "description": "The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer both ERC20 assets and arbitrary messages. To transfer funds a user initiated transaction on both sides is required.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "GlobalExitRootV2",
            "address": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x2E38cD55163137483E30580Cb468C2dFf1d85077"]
            },
            "chain": "ethereum",
            "description": "Synchronizes deposit and withdraw merkle trees across L1 and the L2s. The global root from this contract is injected into the L2 contracts.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Timelock",
            "address": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract upgrades have to go through a 10d timelock unless the Emergency State is activated. It can also add rollup types that can be used to upgrade verifier contracts of existing systems. It is controlled by the ProxyAdminOwner."
          }
        ],
        "references": [
          {
            "text": "State injections - stateRoot and exitRoot are part of the validity proof input.",
            "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 10d delay on code upgrades."
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Astar zkEVM Launch",
          "link": "https://astar.network/blog/astars-zkevm-mainnet-is-live-86096",
          "date": "2024-03-06",
          "description": "Astar Network launched Astar zkEVM, integrated with Polygon AggLayer.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Gelato", "PolygonCDK", "AggLayer", "EVM"]
    },
    {
      "type": "layer2",
      "id": "alienx",
      "createdAt": "1719847684",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x6fa8b24c85409A4fcb541c9964766862aA007f39",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xD4972734Ed659c03ca3e476e06Fc6f016397dfD4"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x69aB55146Bc52A0b31F74dBDc527b8B7e9c7C27c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x123C1E324BC742295B4278B41C4E33831C77655C"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xb7d188eb30e7984f93Bec34Ee8b45A148bd594C6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x123C1E324BC742295B4278B41C4E33831C77655C"],
              "implementations": ["0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x7b0159484f5cb4F3D4bb496A2eD7A01F409e70D1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x123C1E324BC742295B4278B41C4E33831C77655C"],
              "implementations": ["0x1162084C3C6575121146582Db5BE43189e8CEe6b"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xCA2AA2AA53C2225849Cc711FD472E4D2bFcD634b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x123C1E324BC742295B4278B41C4E33831C77655C"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xD4972734Ed659c03ca3e476e06Fc6f016397dfD4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x123C1E324BC742295B4278B41C4E33831C77655C"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x19a6Ffc45dDe55D93c99114ddC3b277025e5fDf3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x123C1E324BC742295B4278B41C4E33831C77655C"],
              "implementations": ["0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x57EA090Ac0554d174AE0e2855B460e84A1A7C221",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x17e7F68ce50A77e55C7834ddF31AEf86403B8010",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x72B166070781a552D7b95a907eF59ca05d3D5a62",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xff309E0c74874a3efeAAff630A818fd9c6DE4f25",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x32AD06477129F4470294Fbaf11C0FC682d92E4A3",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "AlienXMultisig",
          "description": "This is a Gnosis Safe with 5 / 7 threshold.  Can upgrade the smart contract system (via UpgradeExecutor) at any time and gain access to all funds.",
          "accounts": [
            {
              "address": "0x32f6CAE58A89aA7c91D736Bb1100E377C570bb27",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0xa179bB7DbA00815007866F20539D39116B36b052",
              "type": "EOA"
            },
            {
              "address": "0x4c024d26c6Fe9577BA715700D0A944621239D66C",
              "type": "EOA"
            },
            {
              "address": "0xbD8133A664bF0F13e2EFf9AA930021741F228186",
              "type": "EOA"
            },
            {
              "address": "0x740Eb3db7f1BF918acFa4840D47f06e8C81C666e",
              "type": "EOA"
            },
            {
              "address": "0x26F185382413c6289511E5e94e30222D2122622c",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Mainnet launch",
          "link": "https://medium.com/@ALIENXchain/alienx-mainnet-launch-join-the-genesis-voyage-and-claim-your-passcard-for-aix-airdrop-9bdf6a2a0472",
          "date": "2024-06-24T00:00:00Z",
          "description": "AlienX launches their public mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": null,
      "badges": ["Caldera", "DAC", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Gaming", "AI", "NFT"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "AlienX",
        "slug": "alienx",
        "description": "AlienX is an Orbit stack Optimium on Ethereum focused on Gaming, AI and NFTs.",
        "links": {
          "websites": ["https://alienxchain.io/"],
          "apps": ["https://bridge.alienxchain.io/", "https://alienswap.xyz/"],
          "documentation": ["https://docs.alienxchain.io"],
          "explorers": ["https://explorer.alienxchain.io"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/ALIENXchain",
            "https://discord.gg/alienxchain",
            "https://medium.com/@ALIENXchain",
            "https://t.me/alienx_ainode"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x69aB55146Bc52A0b31F74dBDc527b8B7e9c7C27c",
            "newVersion": true,
            "sinceTimestamp": "1717630139",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x69aB55146Bc52A0b31F74dBDc527b8B7e9c7C27c",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x123C1E324BC742295B4278B41C4E33831C77655C"],
                "implementations": [
                  "0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x5625d2a46fc582b3e6dE5288D9C5690B20EBdb8D",
            "newVersion": true,
            "sinceTimestamp": "1717630163",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x5625d2a46fc582b3e6dE5288D9C5690B20EBdb8D",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x123C1E324BC742295B4278B41C4E33831C77655C"],
                "implementations": [
                  "0xf43bce5D32742FFC862eA182b0b5544CbDBB0F02"
                ]
              },
              "chain": "ethereum",
              "description": "DApp Contract storing bounties fundsMain entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.alienxchain.io/http",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "align",
      "createdAt": "1719931843",
      "display": {
        "name": "Align Network",
        "slug": "align",
        "description": "Align Network is an upcoming Layer 2 on Ethereum, built on the Orbit stack. It focuses on providing a decentralized identity and verification layer for social interactions.",
        "purposes": ["Social"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://align.network/"],
          "apps": [],
          "documentation": ["https://docs.align.network/docs/getting-started"],
          "explorers": [],
          "repositories": ["https://github.com/alignnetwork"],
          "socialMedia": [
            "https://x.com/align_network",
            "https://discord.com/invite/KCSkfqW5js",
            "https://warpcast.com/~/channel/align"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "axonum",
      "createdAt": "1715871969",
      "display": {
        "name": "Axonum",
        "slug": "axonum",
        "description": "Axonum is an OP Stack L2 with a precompile to access AI inference directly from smart contracts.",
        "purposes": ["Universal", "AI"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://axonum.io"],
          "apps": ["https://app.axonum.io/bridge/deposit"],
          "documentation": ["https://docs.axonum.io"],
          "explorers": ["https://sepolia-explorer.axonum.io"],
          "repositories": ["https://github.com/axonum"],
          "socialMedia": [
            "https://twitter.com/axonum_io",
            "https://mirror.xyz/brainof.eth"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isArchived": true,
      "type": "layer2",
      "id": "aztec",
      "createdAt": "1623153328",
      "display": {
        "name": "Zk.Money v1 (Aztec v1)",
        "slug": "aztecv1",
        "warning": "EOL: Ownership of the rollup contract is irrevocably renounced and Aztec is not running a rollup processor (operator). Users or third parties have to [run the rollup system by themselves](https://github.com/AztecProtocol/aztec-v2-ejector/) to withdraw or transact.",
        "description": "Zk.Money v1 is an open source layer 2 network that aims to enable affordable, private crypto payments via zero-knowledge proofs.",
        "purposes": ["Private payments"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://aztec.network/"],
          "apps": ["https://old.zk.money"],
          "documentation": ["https://developers.aztec.network/"],
          "explorers": ["https://explorer.aztec.network/"],
          "repositories": [
            "https://github.com/AztecProtocol/aztec-2-bug-bounty"
          ],
          "socialMedia": [
            "https://twitter.com/aztecnetwork",
            "https://medium.com/aztec-protocol",
            "https://discord.gg/UDtJr9u",
            "https://plonk.cafe/"
          ]
        },
        "activityDataSource": "Explorer API"
      },
      "config": {
        "escrows": [
          {
            "address": "0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba",
            "chain": "ethereum",
            "sinceTimestamp": "1614799636",
            "tokens": ["ETH", "DAI", "renBTC", "USDT"]
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "RollupProcessor",
              "references": [
                "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L395"
              ]
            },
            {
              "contract": "TurboVerifier",
              "references": [
                "https://etherscan.io/address/0x48Cb7BA00D087541dC8E2B3738f80fDd1FEe8Ce8#code#F1#L37"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "RollupProcessor",
              "references": [
                "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L359"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "∞",
          "description": "Users can exit funds at any time because contracts are not upgradeable.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. Proposing new blocks requires creating ZK proofs.",
          "sentiment": "good",
          "definingMetric": null,
          "sources": [
            {
              "contract": "RollupProcessor",
              "references": [
                "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L347",
                "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L168"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "RollupProcessor",
              "references": [
                "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L347",
                "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L168"
              ]
            }
          ]
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "stateDerivation": {
        "nodeSoftware": "There are three ways to run a node and use the escape hatch: By running the [Aztec v2 Ejector](https://github.com/AztecProtocol/aztec-v2-ejector/) during the escape hatch window, 2) by running [falafel](https://github.com/AztecProtocol/aztec-2.0/tree/master/falafel), 3) by running the [SDK](https://developers.aztec.network/#/A%20Private%20Layer%202/zkAssets/emergencyWithdraw) in escape hatch mode and connecting to an [escape hatch server](https://github.com/AztecProtocol/aztec-v2-escape-hatch-server). The two latter methods are no longer recommended by the aztec team.",
        "compressionScheme": "No compression scheme is used.",
        "genesisState": "No genesis state is used.",
        "dataFormat": "The data format used can be found [here](https://github.com/AztecProtocol/aztec-2.0/blob/master/blockchain/contracts/Decoder.sol)"
      },
      "stage": {
        "stage": "Stage 2",
        "missing": null,
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://developers.aztec.network/#/A%20Private%20Layer%202/zkAssets/emergencyWithdraw)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": true,
                "description": "In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": true,
                "description": "Users can exit through the escape hatch mechanism and the rollup contract is immutable."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "RollupProcessor.sol#L395 - Etherscan source code",
              "href": "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L395"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "TurboVerifier.sol#L37 - Etherscan source code",
              "href": "https://etherscan.io/address/0x48Cb7BA00D087541dC8E2B3738f80fDd1FEe8Ce8#code#F1#L37"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "RollupProcessor.sol#L359 - Etherscan source code",
              "href": "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L359"
            }
          ]
        },
        "operator": {
          "name": "No operator",
          "risks": [],
          "description": "Only specific addresses appointed by the owner were permitted to propose new blocks during regular rollup operation. Since EOL, these operators are not processing the rollup anymore. Periodically a special window (escape hatch) is open during which anyone can propose new blocks.",
          "references": [
            {
              "text": "RollupProcessor.sol#L97 - Etherscan source code",
              "href": "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L97"
            },
            {
              "text": "RollupProcessor.sol#L369 - Etherscan source code",
              "href": "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L369"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the block production is open to anyone if users experience censorship from the operator they can propose their own blocks which would include their transactions. Periodically the rollup opens a special window (escape hatch) during which anyone can propose new blocks.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions and users lack resources to propose blocks themselves."
            }
          ],
          "references": [
            {
              "text": "RollupProcessor.sol#L347 - Etherscan source code",
              "href": "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L347"
            },
            {
              "text": "RollupProcessor.sol#L168 - Etherscan source code",
              "href": "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L168"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "EOL: Manual withdrawal using Aztec v2 Ejector",
            "description": "EOL: Ownership of the rollup contract is irrevocably renounced and operators are not processing the rollup. Assets in the escrow can be manually withdrawn with the [Aztec v2 Ejector](https://github.com/AztecProtocol/aztec-v2-ejector/).",
            "risks": [],
            "references": [
              {
                "text": "Aztec v2 Ejector - Codespace template for running the Aztec v2 rollup.",
                "href": "https://github.com/AztecProtocol/aztec-v2-ejector/"
              }
            ]
          },
          {
            "name": "Regular withdraw (deprecated)",
            "description": "The user initiates the withdrawal by submitting a transaction on L2. When the block containing that transaction is proven on L1 the assets are automatically withdrawn to the user.",
            "risks": [],
            "references": [
              {
                "text": "RollupProcessor.sol#LL396 - Etherscan source code",
                "href": "https://etherscan.io/address/0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba#code#F1#L396"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "Payments are private",
            "description": "Balances and identities for all tokens on the Aztec rollup are encrypted. Each transaction is encoded as a zkSNARK, protecting user data.",
            "risks": [],
            "references": [
              {
                "text": "Fast Privacy, Now - Aztec Medium Blog",
                "href": "https://medium.com/aztec-protocol/aztec-zkrollup-layer-2-privacy-1978e90ee3b6#3b25"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "RollupProcessor",
            "address": "0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Main Rollup contract responsible for deposits, withdrawals and accepting transaction batches alongside a ZK proof."
          },
          {
            "name": "AztecFeeDistributor",
            "address": "0x41A57F5581aDf11b25F3eDb7C1DB19f18bb76734",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract responsible for distributing fees and reimbursing gas to Rollup Providers."
          },
          {
            "name": "TurboVerifier",
            "address": "0x48Cb7BA00D087541dC8E2B3738f80fDd1FEe8Ce8",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Turbo Plonk zkSNARK Verifier."
          }
        ],
        "risks": []
      },
      "permissions": [
        {
          "name": "Rollup Providers",
          "description": "Addresses that can propose new blocks during regular rollup operation.",
          "accounts": [
            {
              "address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "type": "EOA"
            },
            {
              "address": "0xFcF75295f242C4E87203Abb5d7C9BbEda90a8895",
              "type": "EOA"
            }
          ]
        }
      ],
      "milestones": [
        {
          "name": "Aztec operator sunset",
          "date": "2023-07-08T00:00:00Z",
          "link": "https://github.com/AztecProtocol/aztec-v2-ejector/",
          "description": "Aztec stops their rollup operators. Users now have to run the Rollup manually.",
          "type": "general"
        },
        {
          "name": "Aztec 2.0",
          "date": "2021-03-15T00:00:00Z",
          "link": "https://medium.com/aztec-protocol/launching-aztec-2-0-rollup-ac7db8012f4b",
          "description": "Private Rollup is live on mainnet, allowing user to access DeFi.",
          "type": "general"
        }
      ]
    },
    {
      "isArchived": true,
      "type": "layer2",
      "id": "aztecconnect",
      "createdAt": "1623153328",
      "display": {
        "name": "Zk.Money v2 (Aztec Connect)",
        "slug": "aztecconnect",
        "warning": "EOL: Aztec team shut down their offchain rollup infrastructure on March 31st, 2024. Onchain deposits are disabled and ownership of the rollup contract is irrevocably renounced. Assets in the escrow can be manually withdrawn with the [Aztec Connect Ejector](https://github.com/AztecProtocol/aztec-connect-ejector).",
        "description": "Aztec Connect is an open source layer 2 network that aims to enable affordable, private crypto payments via zero-knowledge proofs.",
        "purposes": ["Payments"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://aztec.network/"],
          "apps": ["https://zk.money"],
          "documentation": ["https://developers.aztec.network/"],
          "explorers": ["https://aztec-connect-prod-explorer.aztec.network/"],
          "repositories": ["https://github.com/AztecProtocol/aztec-connect"],
          "socialMedia": [
            "https://twitter.com/aztecnetwork",
            "https://medium.com/aztec-protocol",
            "https://t.me/aztecprotocol",
            "https://discord.gg/UDtJr9u"
          ]
        },
        "activityDataSource": "Explorer API"
      },
      "config": {
        "escrows": [
          {
            "address": "0xFF1F2B4ADb9dF6FC8eAFecDcbF96A2B351680455",
            "sinceTimestamp": "1654587783",
            "tokens": ["ETH", "DAI", "wstETH"],
            "chain": "ethereum"
          }
        ],
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xFF1F2B4ADb9dF6FC8eAFecDcbF96A2B351680455",
              "selector": "0xf81cccbe",
              "functionSignature": "function processRollup(bytes ,bytes _signatures)",
              "sinceTimestamp": "1654638194",
              "untilTimestamp": "1712696939"
            }
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "RollupProcessorV3",
              "references": [
                "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L706",
                "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L1041",
                "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L1054",
                "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L1135"
              ]
            },
            {
              "contract": "Verifier28x32",
              "references": [
                "https://etherscan.io/address/0xb7baA1420f88b7758E341c93463426A2b7651CFB#code#F3#L150"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge.",
          "sentiment": "good"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "RollupProcessorV3",
              "references": [
                "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L686"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "∞",
          "description": "Users can exit funds at any time because contracts are not upgradeable.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. Proposing new blocks requires creating ZK proofs.",
          "sentiment": "good",
          "definingMetric": null,
          "sources": [
            {
              "contract": "RollupProcessorV3",
              "references": [
                "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L697"
              ]
            }
          ]
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 2",
        "missing": null,
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/AztecProtocol/aztec-connect/tree/v2.1)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": true,
                "description": "In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": true,
                "description": "Users can exit at any time and the rollup contract is immutable."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "RollupProcessorV3.sol#L706 - Etherscan source code",
              "href": "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L706"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "Verifier28x32.sol#L150 - Etherscan source code",
              "href": "https://etherscan.io/address/0xb7baA1420f88b7758E341c93463426A2b7651CFB#code#F3#L150"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "Since EOL this is only true if the user themself runs the rollup locally and publishes the data.",
          "risks": [],
          "references": [
            {
              "text": "RollupProcessorV3.sol#L686 - Etherscan source code",
              "href": "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L686"
            }
          ]
        },
        "operator": {
          "name": "No operator",
          "risks": [],
          "description": "Only specific addresses appointed by the owner were permitted to propose new blocks during regular rollup operation. Now that the system is EOL, the rollup can only be processed locally by volunteers.",
          "references": [
            {
              "text": "RollupProcessorV3.sol#L692 - Etherscan source code",
              "href": "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L692"
            },
            {
              "text": "Aztec Connect Ejector - Codespace template for running the Aztec Connect rollup.",
              "href": "https://github.com/AztecProtocol/aztec-connect-ejector"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the block production is open to anyone if users experience censorship from the operator they can propose their own blocks which would include their transactions.",
          "risks": [],
          "references": []
        },
        "exitMechanisms": [
          {
            "name": "EOL: Manual withdrawal using Aztec Connect Ejector",
            "description": "EOL: Aztec team announced they are going to shut down the rollup infrastructure on March 31st, 2024. Deposits are disabled and ownership of the rollup contract is irrevocably renounced. Assets in the escrow can be manually withdrawn with the [Aztec Connect Ejector](https://github.com/AztecProtocol/aztec-connect-ejector).",
            "risks": [],
            "references": [
              {
                "text": "Aztec Connect Ejector - Codespace template for running the Aztec Connect rollup.",
                "href": "https://github.com/AztecProtocol/aztec-connect-ejector"
              }
            ]
          },
          {
            "name": "Regular withdraw (disabled)",
            "description": "The user initiates the withdrawal by submitting a transaction on L2. When the block containing that transaction is proven on L1 the assets are automatically withdrawn to the user.",
            "risks": [],
            "references": [
              {
                "text": "RollupProcessorV3.sol#F1#L1174 - Etherscan source code",
                "href": "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L1174"
              },
              {
                "text": "RollupProcessorV3.sol#F1#L1332 - Etherscan source code",
                "href": "https://etherscan.io/address/0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728#code#F1#L1332"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "Payments are private",
            "description": "Balances and identities for all tokens on the Aztec rollup are encrypted. Each transaction is encoded as a zkSNARK, protecting user data.",
            "risks": [],
            "references": [
              {
                "text": "Fast Privacy, Now - Aztec Medium Blog",
                "href": "https://medium.com/aztec-protocol/aztec-zkrollup-layer-2-privacy-1978e90ee3b6#3b25"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "RollupProcessorV3",
            "address": "0xFF1F2B4ADb9dF6FC8eAFecDcbF96A2B351680455",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xC5b735d05c26579B701Be9bED253Bb588503B26B"],
              "implementations": ["0x7d657Ddcf7e2A5fD118dC8A6dDc3dC308AdC2728"]
            },
            "chain": "ethereum",
            "description": "Main Rollup contract (immutable) responsible for withdrawals and accepting transaction batches alongside a ZK proof."
          },
          {
            "address": "0x4cf32670a53657596E641DFCC6d40f01e4d64927",
            "description": "Contract responsible for distributing fees and reimbursing gas to Rollup Providers.",
            "name": "AztecFeeDistributor"
          },
          {
            "name": "DefiBridgeProxy",
            "address": "0xA1BBa894a6D39D79C0D1ef9c68a2139c84B81487",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Bridge Connector to various DeFi Bridges."
          },
          {
            "name": "Verifier28x32",
            "address": "0xb7baA1420f88b7758E341c93463426A2b7651CFB",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Standard Plonk zkSNARK Verifier."
          }
        ],
        "risks": []
      },
      "stateDerivation": {
        "nodeSoftware": "The entire stack's source code is housed in a single monorepo, which can be found [here](https://github.com/AztecProtocol/aztec-connect/). For instructions on running the node, please refer to [this readme](https://github.com/AztecProtocol/aztec-connect/blob/v2.1/yarn-project/README.md). Since EOL the [aztec-connect-ejector](https://github.com/AztecProtocol/aztec-connect-ejector) can be used to run a rollup instance and withdraw.",
        "compressionScheme": "No compression is used.",
        "genesisState": "The genesis file is available [here](https://github.com/AztecProtocol/aztec-connect/blob/v2.1/yarn-project/falafel/src/environment/init/data/mainnet/accounts), and it includes accounts from [zk.money](http://zk.money) as well.",
        "dataFormat": "The code to decode onchain data can be found [here](https://github.com/AztecProtocol/aztec-connect/blob/master/yarn-project/barretenberg.js/src/rollup_proof/rollup_proof_data.ts#L453)"
      },
      "milestones": [
        {
          "name": "Aztec operator sunset",
          "date": "2024-04-30T00:00:00Z",
          "link": "https://medium.com/aztec-protocol/sunsetting-aztec-connect-a786edce5cae",
          "description": "Aztec stops rollup operators, renouces ownership. Users must run the Rollup manually to withdraw.",
          "type": "general"
        },
        {
          "name": "Mainnet Launch",
          "date": "2022-07-07T00:00:00Z",
          "link": "https://medium.com/aztec-protocol/aztec-network-launches-first-ever-private-defi-solution-for-ethereum-e5ec7624d430",
          "description": "Aztec Connect is live on mainnet, enabling private DeFi on Ethereum.",
          "type": "general"
        },
        {
          "name": "Introducing Noir",
          "date": "2022-10-06T00:00:00Z",
          "link": "https://medium.com/aztec-protocol/introducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9",
          "description": "Noir - programming language for zero-knowledge proofs, has been introduced.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Explaining the Aztec Network",
          "url": "https://medium.com/aztec-protocol/explaining-the-network-in-aztec-network-166862b3ef7d",
          "thumbnail": "aztec-01.jpg"
        },
        {
          "title": "Economics of Aztec ZK Rollup",
          "url": "https://medium.com/aztec-protocol/privacy-for-pennies-scaling-aztecs-zkrollup-9f2b36615cc6",
          "thumbnail": "aztec-02.jpg"
        },
        {
          "title": "Understanding PLONK",
          "url": "https://vitalik.eth.limo/general/2019/09/22/plonk.html",
          "thumbnail": "vitalik-01.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "aztec-v2",
      "createdAt": "1700568758",
      "display": {
        "name": "Aztec",
        "slug": "aztec",
        "description": "Aztec is an open source layer 2 network that brings programmable privacy and scalability to Ethereum.",
        "purposes": ["Universal", "Privacy"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://aztec.network/"],
          "apps": [],
          "documentation": ["https://docs.aztec.network/"],
          "explorers": [],
          "repositories": ["https://github.com/AztecProtocol/aztec-packages"],
          "socialMedia": [
            "https://twitter.com/aztecnetwork",
            "https://medium.com/aztec-protocol",
            "https://t.me/aztecprotocol"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "base",
      "createdAt": "1679651674",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xFf00000000000000000000000000000000008453"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x14536667Cd30e52C0b458BaACcB9faDA7046E056",
              "type": "MultiSig"
            },
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
              "type": "Contract"
            },
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x642229f238fb9dE03374Be34B0eD8D9De80752c5",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x5050F69a9786F081509234F1a7F4684b5E5b76C9",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "LivenessModule",
          "accounts": [
            {
              "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "* Can act on behalf of SecurityCouncilMultisig.\n* Is a Guardian  (acting via SuperchainGuardianMultisig, SecurityCouncilMultisig).\n* used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig\n"
        },
        {
          "name": "BaseMultisig2",
          "description": "* This is a Gnosis Safe with 3 / 11 threshold. \n* Can act on behalf of Challenger1of2.\n* Is a Challenger  (acting via Challenger1of2).\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n",
          "accounts": [
            {
              "address": "0x14536667Cd30e52C0b458BaACcB9faDA7046E056",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xe32868ec7762650DdE723e945D638A05900974F4",
              "type": "EOA"
            },
            {
              "address": "0x5468985B560D966dEDEa2DAF493f5756101137DC",
              "type": "EOA"
            },
            {
              "address": "0x26c72586FB396325F58718152FEFA94E93Cf177b",
              "type": "EOA"
            },
            {
              "address": "0x73565876170a336Fa02fDe34EeD03E3121f70bA6",
              "type": "EOA"
            },
            {
              "address": "0x92B79E6C995Ee8B267EC1Ac2743D1c1fBFFFc447",
              "type": "EOA"
            },
            {
              "address": "0xC29A4a69886d5ee1E08BDBbdd4e35558A668ee04",
              "type": "EOA"
            },
            {
              "address": "0xa3D3c103442F162856163d564b983ae538c6202D",
              "type": "EOA"
            },
            {
              "address": "0x8e5de5cA219e3FFC9cdEb2Dc7D71B8a199cd2C4F",
              "type": "EOA"
            },
            {
              "address": "0x969ffD102fbF304d4e401999333FE9397DaC653D",
              "type": "EOA"
            },
            {
              "address": "0xa7a5e47D3959bf134e3EcdEb1f62e054f0D58a18",
              "type": "EOA"
            },
            {
              "address": "0x49243DcE94e0f5A1B08b9556bBEc5a84363c3839",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SuperchainProxyAdminOwner",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Can act on behalf of SuperchainProxyAdmin.\n* Can change configuration of Lib_AddressManager (acting via SuperchainProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of SuperchainConfig (acting via SuperchainProxyAdmin).\n",
          "accounts": [
            {
              "address": "0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "BaseAdminMultisig",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of OptimismMintableERC20Factory, OptimismPortal, L2OutputOracle, L1ERC721Bridge, SystemConfig (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x7bB41C3008B3f03FE483B28b8DB90e19Cf07595c",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x9855054731540A48b28990B63DcF4f33d8AE46A1",
              "type": "MultiSig"
            },
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "FoundationMultisig_2",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Member of BaseAdminMultisig.\n* Can act on behalf of Challenger1of2, DeputyGuardianModule.\n* Is a Challenger  (acting via Challenger1of2).\n* Is a Guardian  (acting via SuperchainGuardianMultisig, DeputyGuardianModule).\n",
          "accounts": [
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SecurityCouncilMultisig",
          "description": "* This is a Gnosis Safe with 10 / 13 threshold. It uses the following modules: LivenessModule (used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig).\n* Member of SuperchainGuardianMultisig, SuperchainProxyAdminOwner.\n* Is a Guardian  (acting via SuperchainGuardianMultisig).\n",
          "accounts": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x07dC0893cAfbF810e3E72505041f2865726Fd073",
              "type": "EOA"
            },
            {
              "address": "0x0a122d8aA40758FBAFf0360BFB391EdFfD9758b8",
              "type": "EOA"
            },
            {
              "address": "0x1822b35B09f5ce1C78ecbC06AC0A4e17885b925e",
              "type": "EOA"
            },
            {
              "address": "0x4A7322258c9E690e4CB8Cea6e5251443E956e61E",
              "type": "EOA"
            },
            {
              "address": "0x51aCb8e1205De850D1b512584FeE9C29C3813dDa",
              "type": "EOA"
            },
            {
              "address": "0x5C0F529d5B025540c54f71d2BcbB4c78F368C47e",
              "type": "EOA"
            },
            {
              "address": "0x6323ef2b80030f3fBc508bFc321Fc71fDB95c865",
              "type": "EOA"
            },
            {
              "address": "0x74FAE9a9fbe31d1F69b95f59CaF12736a8b6B310",
              "type": "EOA"
            },
            {
              "address": "0x7ed8d9Af9eaA194D1A75C67c1475579E42289E39",
              "type": "EOA"
            },
            {
              "address": "0x8Afe777B5A4D1e156435ab44Ad4b73A318cE0EA4",
              "type": "EOA"
            },
            {
              "address": "0x9Eb11A55132c851b9991F148b3Af791ca498fD7A",
              "type": "EOA"
            },
            {
              "address": "0xbfA046B0bc5cEa1596be62B8b3f79f9f41f1E0d9",
              "type": "EOA"
            },
            {
              "address": "0xE895076cD050F1f042d1040E47b5929bE989E514",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SuperchainGuardianMultisig",
          "description": "* This is a Gnosis Safe with 1 / 1 threshold. It uses the following modules: DeputyGuardianModule (allows the FoundationMultisig_2, called the deputy guardian, to act on behalf of the Gnosis Safe).\n* Can act as a Guardian.\n",
          "accounts": [
            {
              "address": "0x09f7150D8c019BeF34450d6920f6B3608ceFdAf2",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "GnosisSafe",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Member of FoundationMultisig_1, FoundationMultisig_2.\n",
          "accounts": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xb23794fd6BA1CEAd01Cf54D772b8341F2F0197A5",
              "type": "EOA"
            },
            {
              "address": "0x4665374939642965EfD8357D4568D2A77f677429",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FoundationMultisig_1",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Member of SuperchainProxyAdminOwner.\n",
          "accounts": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "BaseMultisig1",
          "description": "* This is a Gnosis Safe with 3 / 6 threshold. \n* Member of BaseAdminMultisig.\n",
          "accounts": [
            {
              "address": "0x9855054731540A48b28990B63DcF4f33d8AE46A1",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6CD3850756b7894774Ab715D136F9dD02837De50",
              "type": "EOA"
            },
            {
              "address": "0x3cd692eCE8b6573A2220ae00d0dEb98f0DfFA9a1",
              "type": "EOA"
            },
            {
              "address": "0x5FbEFA105bbd53b43bf537Cbc5cD30804Dd0c993",
              "type": "EOA"
            },
            {
              "address": "0x3Dad2200849925Bb46d9bF05aFa5f7F213F4c18E",
              "type": "EOA"
            },
            {
              "address": "0xB011a32ED8b4F70D9943A2199F539bbeCd7b62F7",
              "type": "EOA"
            },
            {
              "address": "0xf9e320f3dA12E68af219d9E2A490Dd649f6B177c",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x5050F69a9786F081509234F1a7F4684b5E5b76C9",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x642229f238fb9dE03374Be34B0eD8D9De80752c5",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "ProxyAdmin",
            "address": "0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of OptimismMintableERC20Factory, OptimismPortal, L2OutputOracle, L1ERC721Bridge, SystemConfig.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x05cc379EBD9B30BbA19C6fA282AB29218EC61D84",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E"],
              "implementations": ["0xE01efbeb1089D1d1dB9c6c8b135C934C0734c846"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["BaseAdminMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "LivenessGuard",
            "address": "0x24424336F04440b1c28685a38303aC33C9D14a25",
            "upgradeability": null,
            "chain": "ethereum",
            "description": ""
          },
          {
            "name": "L1StandardBridge",
            "address": "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E"],
              "implementations": ["0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["BaseAdminMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E"],
              "implementations": ["0x2D778797049FE9259d947D1ED8e5442226dFB589"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["BaseAdminMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainProxyAdmin",
            "address": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure Lib_AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SuperchainConfig.\n"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x56315b90c40730925ec5485cf004d835058518A0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E"],
              "implementations": ["0xF243BEd163251380e78068d317ae10f26042B292"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["BaseAdminMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x608d94945A64503E642E6370Ec598e519a2C1E53",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E"],
              "implementations": ["0xAE2AF01232a6c4a4d3012C5eC5b1b35059caF10d"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["BaseAdminMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "Challenger1of2",
            "address": "0x6F8C5bA3F59ea3E76300E3BEcDC231D656017824",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Can act as a Challenger."
          },
          {
            "name": "SystemConfig",
            "address": "0x73a79Fab69143498Ed3712e519A88a918e1f4072",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E"],
              "implementations": ["0xba2492e52F45651B60B8B38d4Ea5E2390C64Ffb1"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["BaseAdminMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x866E82a600A1414e583f7F13623F1aC5d58b0Afa",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "AddressManager",
            "address": "0x8EfB6B5c4767B09Dc9AA6Af4eAA89F749522BaE2",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SuperchainConfig",
            "address": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x53c165169401764778F780a69701385eb0FF19B7"]
            },
            "chain": "ethereum",
            "description": "Used to manage global configuration values for multiple OP Chains within a single Superchain network. The SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the Superchain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "wstETHEscrow",
            "address": "0x9de443AdC5A411E83F1878Ef24C3F52C61571e72",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],
              "implementations": ["0x313819736457910aC1Dd21a712a37f3d7595645A"]
            },
            "chain": "ethereum",
            "description": "Escrow for custom external tokens that use the canonical bridge for messaging but are governed externally."
          },
          {
            "name": "Lib_AddressManager",
            "address": "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Chain stall",
          "link": "https://status.base.org/incidents/n3q0q4z24b7h",
          "date": "2023-09-05T00:00:00Z",
          "description": "Due to an RPC issue, the sequencer stops producing blocks for ~30 minutes.",
          "type": "incident"
        },
        {
          "name": "Base starts using blobs",
          "link": "https://twitter.com/Optimism/status/1768235284494450922",
          "date": "2024-03-14T00:00:00Z",
          "description": "Base starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "Base Mainnet Launch",
          "link": "https://base.mirror.xyz/hwNwqXHVoLlO8s4DZppog4DfGvM34tigaDjOWuEJQfY",
          "date": "2023-07-13T00:00:00.00Z",
          "description": "Base is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": [
        "Superchain",
        "OPStack",
        "EthereumBlobs",
        "L3HostChain",
        "EVM"
      ],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "bedrock-superchain",
        "name": "Base",
        "slug": "base",
        "description": "Base is an Optimistic Rollup built with the OP Stack. It offers a low-cost and builder-friendly way for anyone, anywhere, to build onchain.",
        "links": {
          "websites": ["https://base.org/"],
          "apps": ["https://bridge.base.org/"],
          "documentation": [
            "https://docs.base.org/",
            "https://stack.optimism.io/"
          ],
          "explorers": [
            "https://basescan.org/",
            "https://base.superscan.network",
            "https://base.blockscout.com/",
            "https://base.l2scan.co/"
          ],
          "repositories": ["https://github.com/base-org"],
          "socialMedia": [
            "https://twitter.com/BuildOnBase",
            "https://discord.gg/buildonbase",
            "https://base.mirror.xyz/"
          ],
          "rollupCodes": "https://rollup.codes/base"
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Base is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": {
        "name": "base",
        "blockscoutV2ApiUrl": "https://base.blockscout.com/api/v2",
        "chainId": 8453,
        "explorerUrl": "https://basescan.org",
        "explorerApi": {
          "url": "https://api.basescan.org/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1686832547",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 5022,
            "version": "3"
          }
        ],
        "coingeckoPlatform": "base"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
            "newVersion": true,
            "sinceTimestamp": "1686793895",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E"],
                "implementations": [
                  "0x2D778797049FE9259d947D1ED8e5442226dFB589"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
            "newVersion": true,
            "sinceTimestamp": "1686793895",
            "tokens": "*",
            "excludedTokens": ["SolvBTC", "SolvBTC.BBN"],
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E"],
                "implementations": [
                  "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x9de443AdC5A411E83F1878Ef24C3F52C61571e72",
            "newVersion": true,
            "sinceTimestamp": "1695935315",
            "tokens": ["wstETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x9de443AdC5A411E83F1878Ef24C3F52C61571e72",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],
                "implementations": [
                  "0x313819736457910aC1Dd21a712a37f3d7595645A"
                ]
              },
              "chain": "ethereum",
              "description": "wstETH Vault for custom wstETH Gateway. Fully controlled by Lido governance.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://developer-access-mainnet.base.org",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x5050F69a9786F081509234F1a7F4684b5E5b76C9",
              "to": "0xFf00000000000000000000000000000000008453",
              "sinceTimestamp": "1686796655"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x56315b90c40730925ec5485cf004d835058518A0",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1686793895"
            }
          }
        ],
        "finality": {
          "type": "OPStack-blob",
          "minTimestamp": "1710375515",
          "genesisTimestamp": "1686789347",
          "l2BlockTimeSeconds": 2,
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": {
        "nodeSoftware": "The rollup node is composed of two software components: [op-node](https://github.com/ethereum-optimism/optimism/tree/develop/op-node), implementing consensus related logic, and [op-geth](https://github.com/ethereum-optimism/op-geth), implementing execution logic. The configuration file can be found [here](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/configs/mainnet/base.toml).",
        "compressionScheme": "Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.",
        "genesisState": "The genesis file can be found [here](https://raw.githubusercontent.com/base-org/node/refs/tags/v0.8.4/mainnet/genesis-l2.json).",
        "dataFormat": "The format specification of Sequencer's data batches can be found [here](https://blog.oplabs.co/reproduce-bedrock-migration/)."
      },
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "blast",
      "createdAt": "1700555008",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x1C90963D451316E3DBFdD5A30354EE56C29016EB#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xFf00000000000000000000000000000000081457"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xA280aEBF81c917DbD2aA1b39f979dfECEc9e4391#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x1C90963D451316E3DBFdD5A30354EE56C29016EB#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x1C90963D451316E3DBFdD5A30354EE56C29016EB#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xA280aEBF81c917DbD2aA1b39f979dfECEc9e4391#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Once funds are added to the withdrawal queue, operator must ensure there is enough liquidity for withdrawals. If not, they need to reclaim tokens from Yield Providers.",
            "risks": [
              {
                "category": "Funds can lose value if",
                "text": "there is a hack or the yield goes negative for yield providers.",
                "isCritical": true
              },
              {
                "category": "Funds can be frozen if",
                "text": "there is not enough liquidity in the bridge, transactions are locked in withdrawal queue.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xA280aEBF81c917DbD2aA1b39f979dfECEc9e4391#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xA280aEBF81c917DbD2aA1b39f979dfECEc9e4391#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x1C90963D451316E3DBFdD5A30354EE56C29016EB#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x4f72ee94B8ba3Be7F886565d3583A7F636c58B05",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x4f72ee94B8ba3Be7F886565d3583A7F636c58B05",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x082b616Ec99167B2FEdee053F07db6795D4dA821",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x415c8893D514F9BC5211d36eEDA4183226b84AA7",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "ProxyAdmin",
          "accounts": [
            {
              "address": "0x364289230b8cc7d9120eF962AF37ebCFe23cE883",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "* Can change configuration of AddressManager - set and change address mappings.\n* Can upgrade implementation of OptimismPortal, L1BlastBridge, SystemConfig, OptimismMintableERC20Factory, L2OutputOracle, ETHYieldManager, USDYieldManager, L1ERC721Bridge.\n* Can upgrade implementation of L1StandardBridge - upgrading bridge implementation allows to access all funds and change every system component.\n"
        },
        {
          "name": "BlastMultisig",
          "description": "* This is a Gnosis Safe with 3 / 5 threshold. \n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n",
          "accounts": [
            {
              "address": "0x4f72ee94B8ba3Be7F886565d3583A7F636c58B05",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6520ad883d3D76f0120443c72AD7463cab2439a4",
              "type": "EOA"
            },
            {
              "address": "0x480Ea8bA8De8d05A30F4f4CBedE1e28E05aE1B2C",
              "type": "EOA"
            },
            {
              "address": "0xf97eC9b92Efda3afe52945B4e9adE0394C9E705d",
              "type": "EOA"
            },
            {
              "address": "0xAb5972612e8CEe66f246feaCB8D500DF3C6cfADA",
              "type": "EOA"
            },
            {
              "address": "0x2cF48F69a61261e67e3317D28Cf0EdD1aCAfA03d",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "BridgeOwner",
          "description": "* This is a Gnosis Safe with 3 / 5 threshold. \n* Can upgrade implementation of LaunchBridge.\n",
          "accounts": [
            {
              "address": "0x67CA7Ca75b69711cfd48B44eC3F64E469BaF608C",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x49d495DE356259458120bfd7bCB463CFb6D6c6BA",
              "type": "EOA"
            },
            {
              "address": "0xb7c719eB2649c1F03bFab68b0AAa35AD538a7cC8",
              "type": "EOA"
            },
            {
              "address": "0x1f97306039530ADB4173C3786e86fab5e6b90F41",
              "type": "EOA"
            },
            {
              "address": "0x6a356C0EAA560f00127Adf5108FfAf503b9f1e11",
              "type": "EOA"
            },
            {
              "address": "0x46e31F27Df5047D7Fad9b1E8DFFec635cF6efAcF",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x082b616Ec99167B2FEdee053F07db6795D4dA821",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x415c8893D514F9BC5211d36eEDA4183226b84AA7",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "DSRYieldProvider",
            "address": "0x0733F618118bF420b6b604c969498ecf143681a8",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Yield Provider for DAI investing DAI into the MakerDAO DSR."
          },
          {
            "name": "OptimismPortal",
            "address": "0x0Ec68c5B10F21EFFb74f2A5C61DFe6b08C0Db6Cb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0xA280aEBF81c917DbD2aA1b39f979dfECEc9e4391"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1BlastBridge",
            "address": "0x3a05E5d33d7Ab3864D53aaEc93c8301C1Fa49115",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0x7A2075519Dd9598b62075FD397aF0Dd34b14619a"]
            },
            "chain": "ethereum",
            "description": "Custom bridge gateway for Blast that allows the Operators to reinvest L1 tokens while they are bridged to the L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "LidoYieldProvider",
            "address": "0x4316A00D31da1313617DbB04fD92F9fF8D1aF7Db",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Yield Provider for ETH investing ETH into stETH."
          },
          {
            "name": "SystemConfig",
            "address": "0x5531DcfF39EC1ec727C4c5D2fc49835368F805a9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0xA150f19B681a06E1a0B7E03934299a9bf9238cb7"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x84efcFCE2dEe08072d5D57BF232D379b6E92A836"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "LaunchBridge",
            "address": "0x5F6AE08B8AeB7078cf2F96AFb089D7c9f51DA47d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x67CA7Ca75b69711cfd48B44eC3F64E469BaF608C"],
              "implementations": ["0x0bD88b59D580549285f0A207Db5F06bf24a8e561"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["BridgeOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x697402166Fbf2F22E970df8a6486Ef171dbfc524",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0xD2C23A5A280AFF9182b953579f62EDdDF1c7ff22"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x6B916DcCa661d23794e78509723A6f4348564847",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0xBF21bc9AFaF817145B3886caDAF0860A2A0D782F"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x826D1B0D4111Ad9146Eb8941D7Ca2B6a44215c76",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0x1C90963D451316E3DBFdD5A30354EE56C29016EB"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ETHYieldManager",
            "address": "0x98078db053902644191f93988341E31289E1C8FE",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0xf2F6148327B3020610FCa26E094D9A5cc4689525"]
            },
            "chain": "ethereum",
            "description": "Contract managing Yield Providers for ETH.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "USDYieldManager",
            "address": "0xa230285d5683C74935aD14c446e137c8c8828438",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0xeCDdf748A60E23609c07af6CA3856744B139B911"]
            },
            "chain": "ethereum",
            "description": "Contract escrowing stablecoins and managing Yield Providers for stablecoins (like for example DAI).",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0xa45A0c7C47DB8C6e99b2d7C4939F7f7Cf69C8975",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
              "implementations": ["0x3B01aDF2f199144233A536b08244d63e5eb691B8"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0xE064B565Cf2A312a3e66Fe4118890583727380C0",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Blast Network Launch",
          "link": "https://x.com/Blast_L2/status/1763316176263008551?s=20",
          "date": "2024-02-29T00:00:00Z",
          "description": "Blast Network is live on mainnet.",
          "type": "general"
        },
        {
          "name": "Blast upgrades to censor exploiter",
          "link": "https://x.com/miszke_eth/status/1772946372309737970",
          "date": "2024-03-26T00:00:00Z",
          "description": "The Munchables exploiter is prohibited from forcing transactions.",
          "type": "incident"
        },
        {
          "name": "Blast Mainnet starts using blobs",
          "link": "https://x.com/Blast_L2/status/1793686918506623032",
          "date": "2024-05-27T00:00:00Z",
          "description": "Blast Mainnet starts publishing data to blobs.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "blast",
        "name": "Blast",
        "slug": "blast",
        "description": "Blast is an EVM-compatible Optimistic Rollup supporting native yield. It invests funds deposited into the L1 bridge into various DeFi protocols transferring yield back to the L2.",
        "links": {
          "websites": ["https://blast.io/en"],
          "apps": ["https://blast.io/en/bridge"],
          "documentation": ["https://docs.blast.io/about-blast"],
          "explorers": ["https://blastscan.io", "https://blastexplorer.io"],
          "repositories": ["https://github.com/blast-io"],
          "socialMedia": [
            "https://twitter.com/blast",
            "https://discord.gg/blast-l2"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "tvlWarning": {
          "content": "The TVL does account for rehypothecated tokens.",
          "sentiment": "bad"
        },
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Blast is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": {
        "name": "blast",
        "coingeckoPlatform": "blast",
        "chainId": 81457,
        "explorerUrl": "https://blastscan.io/",
        "explorerApi": {
          "url": "https://api.blastscan.io/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1708809815",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 88189,
            "version": "3"
          }
        ]
      },
      "config": {
        "associatedTokens": ["BLAST"],
        "escrows": [
          {
            "address": "0x0Ec68c5B10F21EFFb74f2A5C61DFe6b08C0Db6Cb",
            "newVersion": true,
            "sinceTimestamp": "1708812875",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x0Ec68c5B10F21EFFb74f2A5C61DFe6b08C0Db6Cb",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
                "implementations": [
                  "0xA280aEBF81c917DbD2aA1b39f979dfECEc9e4391"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x697402166Fbf2F22E970df8a6486Ef171dbfc524",
            "newVersion": true,
            "sinceTimestamp": "1708812911",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x697402166Fbf2F22E970df8a6486Ef171dbfc524",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
                "implementations": [
                  "0xD2C23A5A280AFF9182b953579f62EDdDF1c7ff22"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x5F6AE08B8AeB7078cf2F96AFb089D7c9f51DA47d",
            "newVersion": true,
            "sinceTimestamp": "1700359187",
            "tokens": ["stETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": "Pre-launch Blast Vault",
              "address": "0x5F6AE08B8AeB7078cf2F96AFb089D7c9f51DA47d",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x67CA7Ca75b69711cfd48B44eC3F64E469BaF608C"],
                "implementations": [
                  "0x0bD88b59D580549285f0A207Db5F06bf24a8e561"
                ]
              },
              "chain": "ethereum",
              "description": "Pre-launch Blast Vault that keeps stETH. Funds from this Vault can be migrated to Blast bridge.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x98078db053902644191f93988341E31289E1C8FE",
            "newVersion": true,
            "sinceTimestamp": "1708812935",
            "tokens": ["ETH", "stETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": "Interest-bearing ETH Vault",
              "address": "0x98078db053902644191f93988341E31289E1C8FE",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x364289230b8cc7d9120eF962AF37ebCFe23cE883"],
                "implementations": [
                  "0xf2F6148327B3020610FCa26E094D9A5cc4689525"
                ]
              },
              "chain": "ethereum",
              "description": "Escrow for ETH that is invested into a yield-bearing contracts such as stETH.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.blast.io/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x415c8893D514F9BC5211d36eEDA4183226b84AA7",
              "to": "0xFf00000000000000000000000000000000081457",
              "sinceTimestamp": "1708825259"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x826D1B0D4111Ad9146Eb8941D7Ca2B6a44215c76",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1708812887"
            }
          }
        ],
        "finality": { "type": "OPStack", "lag": 0, "stateUpdate": "disabled" }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/blast-io/blast)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": {
        "nodeSoftware": "Node software can be found [here](https://github.com/blast-io/blast).",
        "compressionScheme": "Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.",
        "genesisState": "The genesis file can be found [here](https://github.com/blast-io/deployment/blob/master/mainnet/genesis.json).",
        "dataFormat": "The format specification of Sequencer's data batches can be found [here](https://blog.oplabs.co/reproduce-bedrock-migration/)."
      },
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "bob",
      "createdAt": "1704267653",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x59191bD38EBA4a642C9FEc308dc188731b229822#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x3A75346f81302aAc0333FB5DCDD407e12A6CfA83"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x994e3B01D130944a3E67BFd3B8Fc73069b959FEc#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x59191bD38EBA4a642C9FEc308dc188731b229822#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x59191bD38EBA4a642C9FEc308dc188731b229822#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x994e3B01D130944a3E67BFd3B8Fc73069b959FEc#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x994e3B01D130944a3E67BFd3B8Fc73069b959FEc#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x994e3B01D130944a3E67BFd3B8Fc73069b959FEc#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x59191bD38EBA4a642C9FEc308dc188731b229822#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xC91482A96e9c2A104d9298D1980eCCf8C4dc764E",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xC91482A96e9c2A104d9298D1980eCCf8C4dc764E",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x7cB1022D30b9860C36b243E7B181A1d46f618C69",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x08F9F14fF43E112B18c96f0986F28Cb1878f1D11",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "BobMultisig",
          "description": "* This is a Gnosis Safe with 4 / 6 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Is a Guardian.\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n* Can upgrade implementation of OptimismPortal, SystemConfig, L2OutputOracle (acting via ProxyAdmin).\n",
          "accounts": [
            {
              "address": "0xC91482A96e9c2A104d9298D1980eCCf8C4dc764E",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x56b73FA51e09D0BBFA3A5346aaB7576Edc9d0436",
              "type": "EOA"
            },
            {
              "address": "0xC9D2c719d6C8Ba2876FC9B443c7d2690072F04ad",
              "type": "EOA"
            },
            {
              "address": "0xFB771f2640Dfd37B18332a84817B2a6e994f5BF6",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x08F9F14fF43E112B18c96f0986F28Cb1878f1D11",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x7cB1022D30b9860C36b243E7B181A1d46f618C69",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1ERC20TokenBridge",
            "address": "0x091dF5E1284E49fA682407096aD34cfD42B95B72",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],
              "implementations": ["0xB531445401926029B1647669cFAc8b4e5d8C7777"]
            },
            "chain": "ethereum",
            "description": "Escrow for custom external tokens that use the canonical bridge for messaging but are governed externally."
          },
          {
            "name": "ProxyAdmin",
            "address": "0x0d9f416260598313Be6FDf6B010f2FbC34957Cd0",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n* Can be used to upgrade implementation of OptimismPortal, SystemConfig, L2OutputOracle.\n"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x3F6cE1b36e5120BBc59D0cFe8A5aC8b6464ac1f7",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0d9f416260598313Be6FDf6B010f2FbC34957Cd0"],
              "implementations": ["0xEEAfA156A5dd3811Ee0D9F91db57A77eA53A8d31"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["BobMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1UsdcBridge",
            "address": "0x450D55a4B4136805B0e5A6BB59377c71FC4FaCBb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xC73b6E6ec346f9f1A07D2e7A4380858D7BEa0194"],
              "implementations": ["0x3C3b95e46DD24C5c85A49A4D7029D0ceA0fEe1D9"]
            },
            "chain": "ethereum",
            "description": "Escrow for custom external tokens that use the canonical bridge for messaging but are governed externally."
          },
          {
            "name": "OptimismPortal",
            "address": "0x8AdeE124447435fE03e3CD24dF3f4cAE32E65a3E",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0d9f416260598313Be6FDf6B010f2FbC34957Cd0"],
              "implementations": ["0x994e3B01D130944a3E67BFd3B8Fc73069b959FEc"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["BobMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0xACB886b75D76d1c8d9248cFdDfA09b70C71c5393",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0d9f416260598313Be6FDf6B010f2FbC34957Cd0"],
              "implementations": ["0xaa0A1EfD35d6578ea6B5704dbc2c40B36A55B590"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["BobMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0xdDa53E23f8a32640b04D7256e651C1db98dB11C1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0d9f416260598313Be6FDf6B010f2FbC34957Cd0"],
              "implementations": ["0x59191bD38EBA4a642C9FEc308dc188731b229822"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["BobMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0xE3d981643b806FB8030CDB677D6E60892E547EdA",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x237853621998a33Fa5B9B820592F4c6f4c158c12"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "AddressManager",
            "address": "0xF2dc77c697e892542cC53336178a78Bb313DFDC7",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Phase 1: Optimistic BOB",
          "link": "https://docs.gobob.xyz/docs/learn/bob-stack/op-stack",
          "date": "2024-05-01T00:00:00Z",
          "description": "BOB bootstrapping as an Optimistic Rollup on Ethereum.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Conduit", "Superchain", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "Bitcoin DApps"],
        "architectureImage": "opstack",
        "name": "BOB",
        "slug": "bob",
        "description": "BOB (Build on Bitcoin) is an OP Stack rollup that aims to natively support the Bitcoin stack. The current implementation supports a variety of canonical and external bridging for BTC-related assets and a tBTC-v2 LightRelay smart contract for verifying Bitcoin transaction proofs through their blocks' headers on the L2.",
        "links": {
          "websites": ["https://gobob.xyz"],
          "apps": ["https://app.gobob.xyz"],
          "documentation": ["https://docs.gobob.xyz"],
          "explorers": ["https://explorer.gobob.xyz?"],
          "repositories": ["https://github.com/bob-collective"],
          "socialMedia": ["https://twitter.com/build_on_bob"]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "BOB is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": {
        "name": "bob",
        "chainId": 60808,
        "explorerUrl": "https://explorer.gobob.xyz",
        "explorerApi": {
          "url": "https://explorer.gobob.xyz/api",
          "type": "blockscout"
        },
        "minTimestampForTvl": "1712861989"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x8AdeE124447435fE03e3CD24dF3f4cAE32E65a3E",
            "newVersion": true,
            "sinceTimestamp": "1712862059",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x8AdeE124447435fE03e3CD24dF3f4cAE32E65a3E",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0d9f416260598313Be6FDf6B010f2FbC34957Cd0"],
                "implementations": [
                  "0x994e3B01D130944a3E67BFd3B8Fc73069b959FEc"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x3F6cE1b36e5120BBc59D0cFe8A5aC8b6464ac1f7",
            "newVersion": true,
            "sinceTimestamp": "1712862107",
            "tokens": "*",
            "excludedTokens": ["SolvBTC", "SolvBTC.BBN"],
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x3F6cE1b36e5120BBc59D0cFe8A5aC8b6464ac1f7",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0d9f416260598313Be6FDf6B010f2FbC34957Cd0"],
                "implementations": [
                  "0xEEAfA156A5dd3811Ee0D9F91db57A77eA53A8d31"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x091dF5E1284E49fA682407096aD34cfD42B95B72",
            "newVersion": true,
            "sinceTimestamp": "1713786239",
            "tokens": ["wstETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x091dF5E1284E49fA682407096aD34cfD42B95B72",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],
                "implementations": [
                  "0xB531445401926029B1647669cFAc8b4e5d8C7777"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x450D55a4B4136805B0e5A6BB59377c71FC4FaCBb",
            "newVersion": true,
            "sinceTimestamp": "1714403615",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x450D55a4B4136805B0e5A6BB59377c71FC4FaCBb",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xC73b6E6ec346f9f1A07D2e7A4380858D7BEa0194"],
                "implementations": [
                  "0x3C3b95e46DD24C5c85A49A4D7029D0ceA0fEe1D9"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.gobob.xyz/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x08F9F14fF43E112B18c96f0986F28Cb1878f1D11",
              "to": "0x3A75346f81302aAc0333FB5DCDD407e12A6CfA83",
              "sinceTimestamp": "1712861989"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xdDa53E23f8a32640b04D7256e651C1db98dB11C1",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1712862083"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "bobanetwork",
      "createdAt": "1632469722",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x31f395dd26430a8CBFa530e31B46aaf7ad517017#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xfFF0000000000000000000000000000000000288"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xD8056243180C4b56a7d2ccd5df9c2696E1261826#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x31f395dd26430a8CBFa530e31B46aaf7ad517017#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x31f395dd26430a8CBFa530e31B46aaf7ad517017#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xD8056243180C4b56a7d2ccd5df9c2696E1261826#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xD8056243180C4b56a7d2ccd5df9c2696E1261826#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xD8056243180C4b56a7d2ccd5df9c2696E1261826#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x31f395dd26430a8CBFa530e31B46aaf7ad517017#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x56121a8612474C3eB65D69a3b871f284705b9bC4",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x56121a8612474C3eB65D69a3b871f284705b9bC4",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0xbfBAB4363034A930687B9320599a69DfBf1D21d0",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xe1B64045351B0B6e9821F19b39f81bc4711D2230",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "BobaMultisig",
          "description": "* This is a Gnosis Safe with 3 / 4 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of Lib_AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Is a Guardian.\n* Can upgrade implementation of SystemConfig, OptimismMintableERC20Factory, OptimismPortal, SuperchainConfig, L1ERC721Bridge, L2OutputOracle (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x56121a8612474C3eB65D69a3b871f284705b9bC4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x796dF5BaB196b84FFf10F65ac0f914E4b10DEaCd",
              "type": "EOA"
            },
            {
              "address": "0xCCDEbe62f7378D5A931970A847cdf1EcFfc71C63",
              "type": "EOA"
            },
            {
              "address": "0x6976498e37E4941E167161fC3BC5191EEDc302ab",
              "type": "EOA"
            },
            {
              "address": "0x33A0B6C2Bd60A592C5e91dCCd5E5f403693F0AC1",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0xbfBAB4363034A930687B9320599a69DfBf1D21d0",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xe1B64045351B0B6e9821F19b39f81bc4711D2230",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "SystemConfig",
            "address": "0x158Fd5715F16Ac1F2Dc959A299B383aAaf9B59EB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
              "implementations": ["0xfaE274B77BA59f001196689f93E9e73693866f4a"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["BobaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x4d898F66327Fa050131A17ed17a39EBeCC81f0c3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
              "implementations": ["0xd080A33E651780cD6f52F16020E1FFA04F0f15B2"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["BobaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x6D4528d192dB72E282265D6092F4B872f9Dff69e",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x3b48597212f2622511585914CC4D4152c9B1B077"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "ProxyAdmin",
            "address": "0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure Lib_AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SystemConfig, OptimismMintableERC20Factory, OptimismPortal, SuperchainConfig, L1ERC721Bridge, L2OutputOracle.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "OptimismPortal",
            "address": "0x7B02D13904D8e6E0f0Efaf756aB14Cb0FF21eE7e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
              "implementations": ["0xD8056243180C4b56a7d2ccd5df9c2696E1261826"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["BobaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "Lib_AddressManager",
            "address": "0x8376ac6C3f73a25Dd994E0b0669ca7ee0C02F089",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SuperchainConfig",
            "address": "0x996ffD627901f10C80A7d4B72A12316D2e77c076",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
              "implementations": ["0xe4e0f760409EB1661db76a4365c0803C3630270f"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["BobaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0xA6Ad22bb0E73DEF40a24E510cFbc93807d8bf87e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
              "implementations": ["0x99948157F4702B3EE9De4290C3dCDF2622Db9318"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["BobaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0xbB7aD3f9CCbC94085b7F7B1D5258e59F5F068741",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
              "implementations": ["0x31f395dd26430a8CBFa530e31B46aaf7ad517017"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["BobaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
              "implementations": ["0x5Eb02901135865aF8Da6752aF92fbAe62258520F"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["BobaMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Boba Anchorage Upgrade",
          "date": "2024-04-16T00:00:00Z",
          "link": "https://forum.boba.network/t/upgrade-boba-network-to-the-anchorage-framework/442",
          "description": "Boba upgrades to Bedrock (OP Stack) and to EIP-4844 data blobs for L1 data availability.",
          "type": "general"
        },
        {
          "name": "Boba launches L2 on BNB",
          "date": "2022-11-01T00:00:00Z",
          "link": "https://boba.network/education/multichain/bobabnb/",
          "description": "Boba launches on BnB.",
          "type": "general"
        },
        {
          "name": "Boba launches L2 on Avalanche",
          "date": "2022-09-21T00:00:00Z",
          "link": "https://boba.network/blog/an-avalanche-of-boba-is-coming/",
          "description": "Boba launches on Avalanche.",
          "type": "general"
        },
        {
          "name": "Boba launches L2 on Moonbeam and Fantom",
          "date": "2022-06-02T00:00:00Z",
          "link": "https://boba.network/education/boba-basics/multichain/",
          "description": "Boba launches on Moonbeam and Fantom.",
          "type": "general"
        },
        {
          "name": "Call data compression",
          "date": "2022-10-08T00:00:00Z",
          "link": "https://boba.network/blog/boba-call-data-compression/",
          "description": "The Boba Tree From (v0.1.0) release introduces Brotli compression for call data.",
          "type": "general"
        },
        {
          "name": "Hybrid Compute",
          "date": "2022-03-18T00:00:00Z",
          "link": "https://boba.network/education/boba-basics/hybrid-compute/",
          "description": "Boba’s proprietary technology enables dApps that trigger code executed on web-scale infrastructure.",
          "type": "general"
        },
        {
          "name": "Mainnet launch",
          "date": "2021-09-20T00:00:00Z",
          "link": "https://www.firstraysvc.com/news/enya-launches-mainnet-beta-boba-network",
          "description": "Layer 2 Optimistic Rollup based on the Optimism codebase is live on Ethereum.",
          "type": "general"
        },
        {
          "name": "BOBA Token launched",
          "date": "2021-11-18T00:00:00Z",
          "link": "https://x.com/bobanetwork/status/1461839296785051648",
          "description": "BOBA token launched by OMG Foundation.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "What is Hybrid Compute?",
          "url": "https://twitter.com/bkiepuszewski/status/1521849011594010624",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "bedrock-superchain",
        "name": "Boba Network",
        "shortName": "Boba",
        "slug": "bobanetwork",
        "description": "Boba is an OP stack Optimistic Rollup built by the Enya team as core contributors to the Boba Foundation.",
        "links": {
          "websites": ["https://boba.network"],
          "apps": [],
          "documentation": ["https://docs.boba.network/"],
          "explorers": ["https://bobascan.com/"],
          "repositories": ["https://github.com/bobanetwork/boba"],
          "socialMedia": [
            "https://boba.network/",
            "https://boba.network/blog/",
            "https://enya.ai/about-us/",
            "https://twitter.com/bobanetwork",
            "https://t.me/bobanetwork",
            "https://discord.com/invite/Hvu3zpFwWd"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Boba Network is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": {
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 446859,
            "version": "3"
          }
        ],
        "name": "bobanetwork",
        "chainId": 288,
        "explorerUrl": "https://eth.bobascan.com/",
        "explorerApi": {
          "url": "https://api.routescan.io/v2/network/mainnet/evm/288/etherscan/api/",
          "type": "etherscan"
        },
        "coingeckoPlatform": "boba",
        "minTimestampForTvl": "1635393439"
      },
      "config": {
        "associatedTokens": ["BOBA", "OMG"],
        "escrows": [
          {
            "address": "0x7B02D13904D8e6E0f0Efaf756aB14Cb0FF21eE7e",
            "newVersion": true,
            "sinceTimestamp": "1710967859",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x7B02D13904D8e6E0f0Efaf756aB14Cb0FF21eE7e",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
                "implementations": [
                  "0xD8056243180C4b56a7d2ccd5df9c2696E1261826"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00",
            "newVersion": true,
            "sinceTimestamp": "1628793901",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc"],
                "implementations": [
                  "0x5Eb02901135865aF8Da6752aF92fbAe62258520F"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://mainnet.boba.network/",
          "startBlock": 1
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xfBd2541e316948B259264c02f370eD088E04c3Db",
              "selector": "0xd0f89344",
              "functionSignature": "function appendSequencerBatch()",
              "sinceTimestamp": "1635386025",
              "untilTimestamp": "1713303530"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0xe1B64045351B0B6e9821F19b39f81bc4711D2230",
              "to": "0xfFF0000000000000000000000000000000000288",
              "sinceTimestamp": "1713303530"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xdE7355C971A5B733fe2133753Abd7e5441d441Ec",
              "selector": "0x8ca5cbb9",
              "functionSignature": "function appendStateBatch(bytes32[] _batch,uint256 _shouldStartAtElement)",
              "sinceTimestamp": "1635386294",
              "untilTimestamp": "1713303530"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xbB7aD3f9CCbC94085b7F7B1D5258e59F5F068741",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1713303530"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "camp",
      "createdAt": "1714294159",
      "display": {
        "name": "Camp",
        "slug": "camp",
        "description": "Camp is an Ethereum layer 2 designed for entertainment applications, based on the OP stack and utilizing Celestia for data availability.",
        "purposes": ["Universal"],
        "category": "Optimium",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://campnetwork.xyz/"],
          "apps": ["https://camp-testnet-bridge.vercel.app/"],
          "documentation": [
            "https://campaign-1.gitbook.io/camp-technical-docs"
          ],
          "explorers": [
            "https://explorerl2new-camp-network-4xje7wy105.t.conduit.xyz/"
          ],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/Camp_L2",
            "https://discord.com/invite/GDQRjR2PrY"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "canto",
      "createdAt": "1690815262",
      "display": {
        "name": "Canto",
        "slug": "canto",
        "description": "Canto is the L1 which will migrate to a Ethereum L2 scaling solution powered by Polygon's CDK dedicated to Real World Assets.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "provider": "Polygon",
        "links": {
          "websites": ["https://canto.io"],
          "apps": ["https://app.canto.io/bridge"],
          "documentation": ["https://docs.canto.io"],
          "explorers": ["https://tuber.build"],
          "repositories": ["https://github.com/Canto-Network"],
          "socialMedia": [
            "https://twitter.com/CantoPublic",
            "https://discord.gg/canto"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "capx",
      "createdAt": "1692958606",
      "display": {
        "name": "Capx",
        "slug": "capx",
        "description": "Capx is a sector-specific Layer 2 blockchain, specialized for token distribution and trading, facilitating curated distributions for project communities, token streaming for investor distributions, and a liquid secondary market for tokens.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "provider": "Polygon",
        "links": {
          "websites": ["https://capx.fi/"],
          "apps": ["https://app.capxai.org/"],
          "documentation": ["https://capx.gitbook.io/docs"],
          "explorers": ["https://explorer.palm.io/"],
          "repositories": [],
          "socialMedia": [
            "https://discord.com/invite/HAGATNqT8J",
            "https://twitter.com/capxfi",
            "https://t.me/capxfi"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "celo",
      "createdAt": "1718876598",
      "display": {
        "name": "Celo",
        "slug": "celo",
        "description": "Celo announced a strategic move to integrate with the Ethereum ecosystem as an OP Stack L2.",
        "purposes": ["Universal"],
        "category": "Optimium",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://celo.org/"],
          "apps": [],
          "documentation": ["https://docs.celo.org/"],
          "explorers": ["https://explorer.celo.org/mainnet/"],
          "repositories": ["https://github.com/celo-org"],
          "socialMedia": [
            "https://x.com/Celo",
            "https://discord.com/invite/celo"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "cyber",
      "createdAt": "1713364684",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x93E1c0D8ef27930130fb809CE18ca681A8C32F85#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data required to compute fraud proof is published offchain without onchain attestations",
          "description": "Cyber relies on DA challenges for data availability. If a DA challenger finds that the data behind a tx data commitment is not available, they can submit a challenge which requires locking a bond within 12h. A challenge can be resolved by publishing the preimage data within an additional 12h. In such case, a portion of the challenger bond is burned, with the exact amount estimated as the cost incurred by the resolver to publish the full data, meaning that the resolver and challenger will approximately lose the same amount of funds. The system is not secure if the malicious sequencer is able to outspend the altruistic challengers. If instead, after a challenge, the preimage data is not published, the chain reorgs to the last fully derivable state.",
          "references": [
            {
              "text": "OP Plasma specification",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/experimental/alt-da.md"
            },
            {
              "text": "Universal Plasma and DA Challenges - Ethresear.ch",
              "href": "https://ethresear.ch/t/universal-plasma-and-da-challenges/18629"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xfF00000000000000000000000000000000001d88"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xACfD93B4887cef4F05cF3440d150D2cE97339142#code"
            }
          ],
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the sequencer is malicious and is able to economically outspend the altruistic challengers."
            },
            {
              "category": "Funds can be stolen if",
              "text": "there is no challenger willing to challenge unavailable data commitments."
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x93E1c0D8ef27930130fb809CE18ca681A8C32F85#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x93E1c0D8ef27930130fb809CE18ca681A8C32F85#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xACfD93B4887cef4F05cF3440d150D2cE97339142#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xACfD93B4887cef4F05cF3440d150D2cE97339142#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xACfD93B4887cef4F05cF3440d150D2cE97339142#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x93E1c0D8ef27930130fb809CE18ca681A8C32F85#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "ProxyAdmin",
          "accounts": [
            {
              "address": "0x7E54107731EC43e78DA678DFa5fB6222Ad036e03",
              "type": "Contract"
            }
          ],
          "description": "Owner of AddressManager. Admin of OptimismPortal, SystemConfig, L2OutputOracle, L1ERC721Bridge, OptimismMintableERC20Factory, L1StandardBridge.",
          "chain": "ethereum"
        },
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0xf0748C52EDC23135d9845CDFB91279Cf61ee14b4",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to commit L2 transactions to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Proposer",
          "accounts": [
            {
              "address": "0xF2987f0A626c8D29dFB2E0A21144ca3026d6F1E1",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to post new L2 state roots to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Challenger",
          "accounts": [
            {
              "address": "0x87bD2cFf3b59d615b1Eac7A7f809B5e5f0Ee6752",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to delete L2 state roots proposed by a Proposer.",
          "chain": "ethereum"
        },
        {
          "name": "Guardian",
          "accounts": [
            {
              "address": "0x0C883f622b4ccbF1e8ce86217998f87e6d36BCE4",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to pause deposits and withdrawals.",
          "chain": "ethereum"
        },
        {
          "name": "ProxyAdminOwner",
          "description": "This is a Gnosis Safe with 3 / 4 threshold.  Owner of the ProxyAdmin and the rollup system. It can upgrade the bridge implementation potentially gaining access to all funds, and change any system component.",
          "accounts": [
            {
              "address": "0xc2259E7Fb719411f97aBdCdf449f6Ba3B9D75398",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xB5b01E638CEF6AE50462A487d70005D6fe85eCf2",
              "type": "EOA"
            },
            {
              "address": "0xaC79765A73eB9dcBd3c427181E6819902AE25b48",
              "type": "EOA"
            },
            {
              "address": "0xa8AC7D03BEb92Fa3E6030AEB21629D00Ffb66dD7",
              "type": "EOA"
            },
            {
              "address": "0x1a76Ed328600489811F819959a74043f106CF0f9",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SystemConfig + DAC Owner",
          "description": "Account privileged to change System Config parameters such as Sequencer Address and gas limit. It can also upgrade the DataAvailabilityChallenge contract and change its parameters like bondSize.",
          "accounts": [
            {
              "address": "0xc76C563185d01284AdbC9cF5bb909162dD2F15e7",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0xa669A743b065828682eE16109273F5CFeF5e676d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
              "implementations": ["0x93E1c0D8ef27930130fb809CE18ca681A8C32F85"]
            },
            "chain": "ethereum",
            "description": "The L2OutputOracle contract contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x1d59bc9fcE6B8E2B1bf86D4777289FFd83D24C99",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
              "implementations": ["0xACfD93B4887cef4F05cF3440d150D2cE97339142"]
            },
            "chain": "ethereum",
            "description": "The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x5D1F4bbaF6D484fA9D5D9705f92dE6063bff6055",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
              "implementations": ["0x726C6ac8A53061e56AfB2c890545348ba6f0DF0E"]
            },
            "chain": "ethereum",
            "description": "It contains configuration parameters such as the Sequencer address, the L2 gas limit and the unsafe block signer address.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x3c01ebF22e9c111528c1E027D68944eDaB08Dfc9",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x849d0821B1D313b65f6FF152176F4b6a0AF7aa56"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "The L1CrossDomainMessenger (L1xDM) contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x12a580c05466eefb2c467C6b115844cDaF55B255",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
              "implementations": ["0x01b46e02fcE5FC0731076711aFFe73bEeCD87997"]
            },
            "chain": "ethereum",
            "description": "The L1StandardBridge contract is the main entry point to deposit ERC20 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x4F4B716627D2Ba0439327Ce8B563b4443aF47Dbd",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
              "implementations": ["0x1234c7a75f40551Fce5aFf1d58efD72F2ee2AFB1"]
            },
            "chain": "ethereum",
            "description": "The L1ERC721Bridge contract is used to bridge ERC-721 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DataAvailabilityChallenge",
            "address": "0x10E34EfE14E4D270C0f77Bf1aF01b6C832161B49",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
              "implementations": ["0x0d93eAA86eb6948b977857750A5512Bef6B05C51"]
            },
            "chain": "ethereum",
            "description": "The DataAvailabilityChallenge contract is used to challenge the data availability of tx data hashes. See the technology section for more details."
          },
          {
            "name": "SuperchainConfig",
            "address": "0x1aeC4c3BE47C30d0BEfa7514Cf9D99EaC596959D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
              "implementations": ["0x579f8dFDAF8F180050C67B5D41342d686F2b28a6"]
            },
            "chain": "ethereum",
            "description": "Upgradable contract that manages the PAUSED_SLOT, a boolean value indicating whether the Superchain is paused, and GUARDIAN_SLOT, the address of the guardian which can pause and unpause the system. The address of the guardian can only be modified by the ProxyAdmin by upgrading the SuperchainConfig contract. This contract is a fork of Optimism's superchainConfig contract and it's unrelated to the one used by the Superchain."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["CustomDA", "Superchain", "AltLayer", "OPStack", "EVM"],
      "discoveryDrivenData": null,
      "display": {
        "purposes": ["Universal", "Social"],
        "architectureImage": "cyber",
        "name": "Cyber",
        "slug": "cyber",
        "description": "Cyber is a chain designed for social applications using an implementation of OP Plasma with DA challenges.",
        "links": {
          "websites": ["https://cyber.co/"],
          "apps": [
            "https://cyber-bridge.alt.technology/",
            "https://cyber.co/stake",
            "https://wallet.cyber.co/"
          ],
          "documentation": ["https://docs.cyber.co/"],
          "explorers": ["https://cyberscan.co/", "https://7560.routescan.io/"],
          "repositories": ["https://github.com/cyberconnecthq"],
          "socialMedia": [
            "https://twitter.com/cyberconnecthq",
            "https://discord.com/invite/cUc8VRGmPs",
            "https://cyber.co/blog"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": {
        "name": "cyber",
        "chainId": 7560,
        "explorerUrl": "https://cyberscan.co/",
        "coingeckoPlatform": "cyber",
        "explorerApi": {
          "url": "https://api.routescan.io/v2/network/mainnet/evm/7560/etherscan/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1713428569",
        "multicallContracts": [
          {
            "sinceBlock": 1,
            "batchSize": 150,
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "version": "3"
          }
        ]
      },
      "config": {
        "associatedTokens": ["CYBER"],
        "escrows": [
          {
            "address": "0x1d59bc9fcE6B8E2B1bf86D4777289FFd83D24C99",
            "newVersion": true,
            "sinceTimestamp": "1713430391",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x1d59bc9fcE6B8E2B1bf86D4777289FFd83D24C99",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
                "implementations": [
                  "0xACfD93B4887cef4F05cF3440d150D2cE97339142"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x12a580c05466eefb2c467C6b115844cDaF55B255",
            "newVersion": true,
            "sinceTimestamp": "1713430415",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x12a580c05466eefb2c467C6b115844cDaF55B255",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x7E54107731EC43e78DA678DFa5fB6222Ad036e03"],
                "implementations": [
                  "0x01b46e02fcE5FC0731076711aFFe73bEeCD87997"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://cyber.alt.technology/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "External",
          "sentiment": "warning",
          "description": "The data is posted off chain."
        },
        "bridge": {
          "value": "None + DA challenges",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available. However, there is a mechanism that allows users to challenge unavailability of data."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely on data that is NOT published onchain. Cyber uses a custom data availability system without attestations, but allowing data challenges.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "canvasconnect",
      "createdAt": "1623153328",
      "isArchived": true,
      "display": {
        "name": "Canvas Connect",
        "slug": "canvasconnect",
        "warning": "Canvas Connect is currently open only to whitelisted institutional clients.",
        "description": "Canvas Connect is a Layer 2 solution based on StarkEx technology, specifically designed to provide centralized investment and trading services to financial institutions.",
        "purposes": ["Privacy", "Exchange"],
        "provider": "StarkEx",
        "category": "Validium",
        "links": {
          "websites": ["https://canvas.co/"],
          "apps": [],
          "documentation": ["https://docs.starkware.co/starkex/index.html"],
          "explorers": [],
          "repositories": [
            "https://github.com/starkware-libs/starkex-contracts"
          ],
          "socialMedia": [
            "https://twitter.com/canvas_defi",
            "https://canvasdefi.medium.com/",
            "https://linkedin.com/company/canvasblockchaingroup",
            "https://canvas.co/content",
            "https://youtube.com/@canvas_defi"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "escrows": [
          {
            "address": "0x7A7f9c8fe871cd50f6Ce935d7c7caD2e89987f9d",
            "newVersion": true,
            "sinceTimestamp": "1675209600",
            "tokens": ["ETH", "USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x7A7f9c8fe871cd50f6Ce935d7c7caD2e89987f9d",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": ["0xc7C731AF62Cd43eB158ad3Ac0fC5d2dd32648C7A"],
                "implementations": [
                  "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                  "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                  "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                  "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                  "0x613ee54C54D5548627064B4D648942bF3648f376",
                  "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                  "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 7d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 604800
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds. NFTs will be minted on L1 to exit.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. When withdrawing NFTs they are minted on L1.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/withdrawal.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchange",
            "address": "0x7A7f9c8fe871cd50f6Ce935d7c7caD2e89987f9d",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": ["0xc7C731AF62Cd43eB158ad3Ac0fC5d2dd32648C7A"],
              "implementations": [
                "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                "0x613ee54C54D5548627064B4D648942bF3648f376",
                "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
              ],
              "immutable": false
            },
            "chain": "ethereum"
          },
          {
            "name": "Committee",
            "address": "0x8B3A6662809195453645e37C2005d655f57ca818",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governors",
          "accounts": [
            {
              "address": "0xc7C731AF62Cd43eB158ad3Ac0fC5d2dd32648C7A",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "Data Availability Committee",
          "accounts": [
            {
              "address": "0xE00A7D799A60495ce50f188348498E500C9016ea",
              "type": "EOA"
            },
            {
              "address": "0x7e1BBDbE450e9f5988AE3d10a99911A20C138063",
              "type": "EOA"
            }
          ],
          "minSigners": 1,
          "minAssumedHonestMembers": 2,
          "description": "Validity proof must be signed by at least 1 of these addresses to approve state update."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
              "type": "EOA"
            },
            {
              "address": "0x107691bD4F590270B9793c807cB912DD278e8cB5",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update state of the system. When Operator is down the state cannot be updated."
        }
      ],
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "coti",
      "createdAt": "1712133479",
      "display": {
        "name": "Coti",
        "slug": "coti",
        "description": "Coti is a privacy-centric Ethereum Layer 2 leveraging multiparty computation and secure enclaves for scalable privacy.",
        "purposes": ["Universal", "Privacy"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://coti.io/"],
          "apps": [],
          "documentation": [
            "https://medium.com/cotinetwork/how-coti-is-gearing-up-for-2024-and-beyond-e0d465794767"
          ],
          "explorers": [],
          "repositories": ["https://github.com/coti-io"],
          "socialMedia": [
            "https://twitter.com/COTInetwork",
            "https://medium.com/@cotinetwork",
            "https://t.me/COTInetwork",
            "https://discord.gg/9tq6CP6XrT"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "creator",
      "createdAt": "1724863689",
      "display": {
        "name": "Creator",
        "slug": "creator",
        "description": "The CREATOR chain will leverage exclusive relationships with successful Web 2 platforms to generate new user onboarding strategies. To attract and retain users, CREATOR will offer personalized DeFi services for creators and position itself as the premier Web 2.5 hub and a one-stop shop for new entrants to crypto.",
        "purposes": ["Universal", "Gaming"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://oncreator.com/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/oncreator_"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "cronoszkevm",
      "createdAt": "1722430938",
      "badges": ["EVM", "CustomDA", "ZKStack", "ElasticChain"],
      "display": {
        "purposes": ["Universal"],
        "upgradesAndGovernanceImage": "zk-stack",
        "name": "Cronos zkEVM",
        "slug": "cronoszkevm",
        "description": "Cronos zkEVM is a general-purpose Validium on Ethereum built on the ZK Stack, scaling the existing portfolio of Cronos apps and chains.",
        "links": {
          "websites": ["https://cronos.org/zkevm"],
          "apps": ["https://zkevm.cronos.org/bridge"],
          "documentation": ["https://docs-zkevm.cronos.org/"],
          "explorers": ["https://explorer.zkevm.cronos.org/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/cronos_chain",
            "https://discord.com/invite/cronos"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "ZK Stack",
        "category": "Validium",
        "liveness": {
          "explanation": "Cronos zkEVM is a Validium that posts commitments to the L1. Transactions within a state diff can be considered final when proven on L1 using a ZK proof, except that an operator can revert them if not executed yet. Currently, there is at least a 21h delay between state diffs verification and the execution of the corresponding state actions."
        },
        "finality": {
          "finalizationPeriod": 75600,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "warning",
              "value": "Proven but not executed batches can be reverted by the validator(s) or the StateTransitionManager."
            }
          }
        },
        "tvlWarning": null
      },
      "config": {
        "associatedTokens": ["zkCRO"],
        "escrows": [
          {
            "address": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
            "newVersion": true,
            "sinceTimestamp": "1717521479",
            "tokens": ["ybETH", "CRO", "USDC", "WBTC", "zkCRO"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
                "implementations": [
                  "0xb56A8225A745756DD215faf22E4796f373561AcD"
                ]
              },
              "chain": "ethereum",
              "description": "Shared bridge for depositing tokens to Cronos zkEVM and other ZK stack chains.",
              "upgradableBy": ["ProtocolUpgradeHandler"],
              "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "ElasticChian",
              "l2BridgeAddress": "0x309429DE3621992Cb0ab8982A448c9Cc5c38405b",
              "l2EtherAddress": "0x898B3560AFFd6D955b1574D87EE09e46669c60eA",
              "tokensToAssignFromL1": ["zkCRO"]
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://mainnet.zkevm.cronos.org",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "chainConfig": {
        "name": "cronoszkevm",
        "chainId": 388,
        "coingeckoPlatform": "cronos-zkevm",
        "explorerUrl": "https://explorer.zkevm.cronos.org/",
        "minTimestampForTvl": "1722394995"
      },
      "dataAvailability": {
        "layer": {
          "value": "External",
          "sentiment": "warning",
          "description": "The data is posted off chain."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "State diffs (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ValidatorTimelock",
              "references": [
                "https://etherscan.io/address/0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E#code#F1#L169"
              ]
            },
            {
              "contract": "CronosZkEvm",
              "references": [
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L448",
                "https://etherscan.io/address/0xE60E94fCCb18a81D501a38959E532C0A85A1be89#code#F6#L23"
              ]
            },
            {
              "contract": "Verifier",
              "references": [
                "https://etherscan.io/address/0x70F3FBf8a427155185Ec90BED8a3434203de9604#code#F1#L343"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely fully on data that is NOT published onchain.",
          "sentiment": "bad",
          "sources": [
            {
              "contract": "ValidatorTimelock",
              "references": [
                "https://etherscan.io/address/0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E#code#F1#L120",
                "https://etherscan.io/tx/0x9dbf29985eae00b7a1b7dbd5b21eedfb287be17310eb8bef6c524990b6928f63"
              ]
            },
            {
              "contract": "CronosZkEvm",
              "references": [
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L216",
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L52",
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F11#L120"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no window for users to exit in case of an unwanted standard upgrade because the central operator can censor withdrawal transactions by implementing a TransactionFilterer with no delay. The standard upgrade delay is 4d 21h.",
          "sources": [
            {
              "contract": "CronosZkEvm",
              "references": [
                "https://etherscan.io/address/0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a#code#F1#L114",
                "https://etherscan.io/address/0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a#code#F1#L128"
              ]
            }
          ]
        },
        "sequencerFailure": {
          "value": "Enqueue via L1",
          "description": "Users can submit transactions to an L1 queue, but can't force them. The sequencer cannot selectively skip transactions but can stop processing the queue entirely. In other words, if the sequencer censors or is down, it is so for everyone.",
          "sentiment": "warning",
          "sources": [
            {
              "contract": "CronosZkEvm",
              "references": [
                "https://etherscan.io/address/0xCDB6228b616EEf8Df47D69A372C4f725C43e718C#code#F1#L53",
                "https://etherscan.io/address/0xE60E94fCCb18a81D501a38959E532C0A85A1be89#code#F1#L95"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen. There is a decentralized Governance system that can attempt changing Proposers with an upgrade.",
          "sentiment": "warning",
          "definingMetric": "-Infinity",
          "sources": [
            {
              "contract": "CronosZkEvm",
              "references": [
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L219"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain. Transaction data is stored off-chain and only the hashes are posted on-chain by the centralized Sequencer.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "ExecutorFacet - _commitOneBatch() function",
              "href": "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L53"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can force any transaction via L1",
          "description": "If a user is censored by the L2 Sequencer, they can try to force their transaction via an L1 queue. Right now there is no mechanism that forces L2 Sequencer to include        transactions from the queue in an L2 block. The operator can implement a TransactionFilterer that censors forced transactions.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            },
            {
              "category": "Users can be censored if",
              "text": "the operator implements a TransactionFilterer, which is possible without delay."
            }
          ],
          "references": [
            {
              "text": "L1 - L2 interoperability - Developer's documentation",
              "href": "https://docs.zksync.io/build/developer-reference/l1-l2-interoperability#priority-queue"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawing funds - ZKsync documentation",
                "href": "https://docs.zksync.io/build/developer-reference/bridging-assets"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all messages from L1, including all forced withdrawals and deposits. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": []
          }
        ]
      },
      "upgradesAndGovernance": "\n    There are two main paths for contract upgrades in the shared ZK stack ecosystem - standard and emergency - both converging on the shared upgrade proxy contract ProtocolUpgradeHandler. \n    The standard path involves a governance proposal and voting through the DAO, multiple timelock delays and finally approval by the Guardians or 6 SecurityCouncil participants. \n    The emergency path allows for contract upgrades without any delay by the EmergencyUpgradeBoard, which acts as a 3/3 Multisig between SecurityCouncil, Guardians and the FoundationMultisig. \n    ## Standard path\n    ### On ZKsync Era\n    Delegates can start new proposals by reaching a threshold of 21M ZK tokens on the ZKsync Era Rollup's ZkProtocolGovernor contract.\n    This launches a 7d 'voting delay' after which the 7d voting period starts. During these first two periods, the proposal can be canceled by the proposer or if it falls below the proposing threshold.\n    A proposal is only successful if it reaches both quorum (630M ZK tokens) and simple majority. When it reaches quorum, the voting period is reset to 7d. \n    In the successful case, it can be queued in the 0s timelock which forwards it to Ethereum as an L2->L1 log. \n    ### On Ethereum\n    After the execution of the proposal-containing batch (21h delay), the proposal is now picked up by the ProtocolUpgradeHandler and enters the 3d 'legal veto period'.\n    This serves as a window in which a veto could be coordinated offchain, to be then enforced by non-approval of Guardians and SecurityCouncil. A threshold of 2 Guardians can extend the veto period to 7d. \n    After this a proposal enters a *waiting* state of 30d, from which it can be immediately approved (cancelling the delay) by 6 participants of the SecurityCouncil. \n    For the unlikely case that the SC does not approve here, the Guardians can instead approve the proposal, or nobody. In the two latter cases, the waiting period is enforced in full. \n    A proposal cannot be actively cancelled in the ProtocolUpgradeHandler, but will be expired if not approved within the waiting period. An approved proposal now enters the *pendingExecution* state for a final delay of 1d, and can then be executed.\n    ### Other governance tracks\n    There are two other tracks of Governance also starting with DAO Delegate proposals the ZKsync Era rollup: 1) Token Program Proposals that add new minters, allocations or upgrade the ZK token and \n    2) Governance Advisory Proposals that e.g. change the ZK Credo or other offchain Governance Procedures without onchain targets. \n    The protocol for these two other tracks is similar to the first part of the standard path described above (albeit having different quorum and timelock values), and not passing over to the Ethereum L1. \n    Further customizations are that the ZkFoundationMultisig can propose to the ZkTokenGovernor without a threshold and that the Guardians' L2 alias can cancel proposals in the ZkTokenGovernor and the ZkGovOpsGovernor.\n    ## Emergency path \n    SecurityCouncil (9 / 12), Guardians (5 / 8) and ZkFoundationMultisig (3 / 5) form a de-facto 3/3 Multisig \n    by pushing an immediate upgrade proposal through the EmergencyUpgradeBoard, which circumvents all delays and executes immediately via the ProtocolUpgradeHandler.\n    ## Upgrade Delays\n    The cumulative duration of the upgrade paths from the moment of a voted 'successful' proposal is 4d 21h or 8d 21h (depending on Guardians extending the LegalVetoPeriod) for Standard, 0 for Emergency and 34d 21h for the path in which the SecurityCouncil is not approving the proposal.\n    ## Freezing\n    The SecurityCouncil can freeze (pause withdrawals and settlement) all chains connected to the current StateTransitionManager. \n    Either for a softFreeze of 12h or a hardFreeze of 7d. \n    After a softFreeze and / or a hardFreeze, a proposal from the EmergencyUpgradeBoard has to be passed before subsequent freezes are possible. \n    Only the SecurityCouncil can unfreeze an active freeze.\n    ## Elastic Chain Operator and ChainAdmin\n    Apart from the paths that can upgrade all shared implementations, the ZK stack governance system defines other roles that can modify the system: \n    A single *Elastic Chain operator* role that governs parameters in the shared contracts and a *ChainAdmin* role (in the chain-specific diamond contract) for managing parameters of each individual Hyperchain that builds on the stack.\n    These chain-specific actions include setting a transaction filterer that can censor L1 -> L2 messages, setting fee parameters and adding / removing Validators in the ValidatorTimelock. \n    ZKsync Era's ChainAdmin differs from the others as it also has the above *Elastic Chain Operator* role in the shared ZK stack contracts.\n    ",
      "permissions": [
        {
          "name": "SecurityCouncil",
          "accounts": [
            {
              "address": "0xBDFfCC71FE84020238F2990a6D2954e87355De0D",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "One of the three signers of the EmergencyUpgradeBoard. Can freeze all ZK stack chains. Can approve governance proposals in the ProtocolUpgradeHandler. The default threshold for the members of this contract is 9 / 12 but is customized for certain actions."
        },
        {
          "name": "SecurityCouncil members",
          "accounts": [
            {
              "address": "0x13f07d9BF17615f6a17F272fe1A913168C275A66",
              "type": "Contract"
            },
            {
              "address": "0x34Ea62D4b9bBB8AD927eFB6ab31E3Ab3474aC93a",
              "type": "Contract"
            },
            {
              "address": "0x35eA56fd9eAd2567F339Eb9564B6940b9DD5653F",
              "type": "Contract"
            },
            {
              "address": "0x3888777686F0b0d8c3108fc22ad8DE9E049bE26F",
              "type": "Contract"
            },
            {
              "address": "0x69462a81ba94D64c404575f1899a464F123497A2",
              "type": "Contract"
            },
            {
              "address": "0x725065b4eB99294BaaE57AdDA9c32e42F453FA8A",
              "type": "Contract"
            },
            {
              "address": "0x84BF0Ac41Eeb74373Ddddae8b7055Bf2bD3CE6E0",
              "type": "Contract"
            },
            {
              "address": "0x9B39Ea22e838B316Ea7D74e7C4B07d91D51ccA88",
              "type": "Contract"
            },
            {
              "address": "0x9B8Be3278B7F0168D82059eb6BAc5991DcdfA803",
              "type": "Contract"
            },
            {
              "address": "0xB7aC3A79A23B148c85fba259712c5A1e7ad0ca44",
              "type": "Contract"
            },
            {
              "address": "0xc3Abc9f9AA75Be8341E831482cdA0125a7B1A23e",
              "type": "Contract"
            },
            {
              "address": "0xFB90Da9DC45378A1B50775Beb03aD10C7E8DC231",
              "type": "Contract"
            }
          ],
          "description": "Members of the SecurityCouncil. The members are mostly low-threshold multisigs themselves. ",
          "references": [
            {
              "text": "Security Council members - ZK Nation docs",
              "href": "https://docs.zknation.io/zksync-governance/schedule-3-zksync-security-council"
            }
          ]
        },
        {
          "name": "Guardians",
          "accounts": [
            {
              "address": "0xD677e09324F8Bb3cC64F009973693f751c33A888",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Is one of the three signers of the EmergencyUpgradeBoard. Can extend the legal veto period and / or approve governance proposals in the ProtocolUpgradeHandler. Permissioned to cancel non-protocolUpgrade proposals on L2. The default threshold for the members of this contract is 5 / 8 but is customized for certain actions."
        },
        {
          "name": "ZKsync Guardians",
          "accounts": [
            {
              "address": "0x015318c16AE443a20DE0A776dB06a59F0D279057",
              "type": "MultiSig"
            },
            {
              "address": "0x178D8Eb1A1fb81B5102808A83318Bb04C6a9fC6D",
              "type": "MultiSig"
            },
            {
              "address": "0x2A90830083C5Ca1f18d7AA7fCDC2998f93475384",
              "type": "MultiSig"
            },
            {
              "address": "0x538612F6eba6ff80FBD95D60dCDee16b8FfF2c0f",
              "type": "MultiSig"
            },
            {
              "address": "0x55c671BcE13120387Ded710A1d1b80C0e3d8E857",
              "type": "MultiSig"
            },
            {
              "address": "0x590926dBCDfD19627c3BbD2A6Eb96DeC7a3AbF69",
              "type": "MultiSig"
            },
            {
              "address": "0x6D26874130A174839b9cd8CB87Ed4E09D0c1a5f0",
              "type": "MultiSig"
            },
            {
              "address": "0xCe7a3dFcc35602155809920Ff65e093aa726f6cf",
              "type": "MultiSig"
            }
          ],
          "description": "Members of the Guardians contract, usually 1/1 Gnosis multisigs themselves. ",
          "references": [
            {
              "text": "ZKsync Guardians - ZK Nation docs",
              "href": "https://docs.zknation.io/zksync-governance/schedule-4-zksync-guardians"
            }
          ]
        },
        {
          "name": "ZkFoundationMultisig",
          "description": "This is a Gnosis Safe with 3 / 5 threshold.  Is one of the three signers of the EmergencyUpgradeBoard.",
          "accounts": [
            {
              "address": "0xbC1653bd3829dfEc575AfC3816D4899cd103B51c",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x56B3120c32AE9C3188fafc5Cc542F9c53B0b2222",
              "type": "EOA"
            },
            {
              "address": "0x441e5c8910Ef39996B2D01499509861228cbc2d1",
              "type": "EOA"
            },
            {
              "address": "0xd5966E3dd25f6086b6aD7D7Fa3292d11b988da95",
              "type": "EOA"
            },
            {
              "address": "0x0B2E7ffbcD1E3e6f5034555Fb638889FE7564709",
              "type": "EOA"
            },
            {
              "address": "0x610e45F112e0c8a9aA7137677C83E7A198A1b991",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ProtocolUpgradeHandler",
          "accounts": [
            {
              "address": "0x8f7a9912416e8AdC4D9c21FAe1415D3318A11897",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Owner and upgrade Admin of all shared ZK stack contracts. Can also upgrade the individual Hyperchain diamond contracts."
        },
        {
          "name": "Matter Labs Multisig",
          "description": "This is a Gnosis Safe with 4 / 7 threshold.  Has the *ChainAdmin* role in the ZKsync Era diamond and the *Elastic Chain Operator* role in the shared contracts.",
          "accounts": [
            {
              "address": "0x4e4943346848c4867F81dFb37c4cA9C5715A7828",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x3F0009D00cc78979d00Eb635490F23E8d6aCc481",
              "type": "EOA"
            },
            {
              "address": "0xe79af29d618141Ffef951B240b250d47030D56d7",
              "type": "EOA"
            },
            {
              "address": "0x3068415e0F857A5eEd03302A1F7E44f67468d2Bc",
              "type": "EOA"
            },
            {
              "address": "0x702caCafA54B88e9c54449563Fb2e496e85c78b7",
              "type": "EOA"
            },
            {
              "address": "0xFAdb20191Ab38362C50f52909817B74214CA79AE",
              "type": "EOA"
            },
            {
              "address": "0xfd03dA3aeb6807a98db96C1704Ea4CFf031BaEd2",
              "type": "EOA"
            },
            {
              "address": "0x700DA14328eC2F81053E5B6aAE4803E16BEdF1df",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Elastic Chain Operator",
          "accounts": [
            {
              "address": "0x4e4943346848c4867F81dFb37c4cA9C5715A7828",
              "type": "MultiSig"
            }
          ],
          "description": "Can change the ValidatorTimelock in the StateTransitionManager, manage validators of the Hyperchain diamonds, revert batches and create new Hyperchains."
        },
        {
          "name": "ChainAdmin",
          "accounts": [
            {
              "address": "0x6a88E8f6B5382d87F39213eB3df43c5FF2498Dd4",
              "type": "Contract"
            }
          ],
          "description": "Can manage fees, apply predefined upgrades and censor bridge transactions (*ChainAdmin* role)."
        },
        {
          "name": "Diamond Contract Validators",
          "accounts": [
            {
              "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
              "type": "Contract"
            }
          ],
          "description": "Addresses permissioned to call the functions to propose, execute and revert L2 batches in the Cronos zkEVM diamond. Usually these are addresses of proxying ValidatorTimelock contracts."
        },
        {
          "name": "ValidatorTimelock Validators",
          "accounts": [
            {
              "address": "0xb9d48DaF26F3CBE01A959F09f98E8a2eC8204122",
              "type": "EOA"
            },
            {
              "address": "0x7fEA26A181A792B5107ee0a31e434F5dBcbBe0B7",
              "type": "EOA"
            }
          ],
          "description": "Actors that are allowed to propose, execute and revert L2 batches on L1 through the ValidatorTimelock."
        },
        {
          "name": "CronosChainAdminMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Inherits all *ChainAdmin* permissions.",
          "accounts": [
            {
              "address": "0x4c57b73435FcB2D60AAf581e44d6a8AFc57ddFce",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xE9A03EB4C2262A7d01981cAD1f2c1FFa05CB64Fb",
              "type": "EOA"
            },
            {
              "address": "0x5628D5EF2bAd701617b4003F6a2e34eeB89F2ADa",
              "type": "EOA"
            },
            {
              "address": "0xc7e3F37766627b5DAF734f5bb5e43Ae9327011D8",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "CronosChainAdminEOA",
          "accounts": [
            {
              "address": "0xfD7a03Cdb68E6488F950108A4d24f15519b87339",
              "type": "EOA"
            }
          ],
          "description": "Inherits all *ChainAdmin* permissions."
        },
        {
          "name": "TxFiltererOwnerMultisig",
          "description": "This is a Gnosis Safe with 2 / 5 threshold.  Owns the TransactionFiltererDenyList contract and can manage addresses in the censoring list. Currently also has all *ChainAdmin* permissions through the CronosZkEVMAdmin contract.",
          "accounts": [
            {
              "address": "0xC774CDFc4d2AcE7aaD12D77B6A3752a393E1ab8b",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xE9A03EB4C2262A7d01981cAD1f2c1FFa05CB64Fb",
              "type": "EOA"
            },
            {
              "address": "0xAaC5b858d10107900e642681a97887D33FC3c9E9",
              "type": "EOA"
            },
            {
              "address": "0xc7e3F37766627b5DAF734f5bb5e43Ae9327011D8",
              "type": "EOA"
            },
            {
              "address": "0x5628D5EF2bAd701617b4003F6a2e34eeB89F2ADa",
              "type": "EOA"
            },
            {
              "address": "0x149f3850AcfC5caa3ecF31dCF922A75eD2944a5e",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": {
        "zksync2": [
          {
            "accounts": [
              {
                "address": "0xcd2753Bd3829dfeC575AFC3816d4899CD103C62D",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "ZkFoundationMultisig L2 alias",
            "description": "The Layer2 alias address through which the ZkFoundationMultisig can act."
          },
          {
            "accounts": [
              {
                "address": "0xe788e09324F8bb3cc64f009973693f751C33b999",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "Guardians L2 alias",
            "description": "The Layer2 alias address through which the Guardians contract can act."
          },
          {
            "accounts": [
              {
                "address": "0xA08b9912416E8aDc4D9C21Fae1415d3318A129A8",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "ProtocolUpgradeHandler L2 alias",
            "description": "The Layer2 alias address through which the ProtocolUpgradeHandler contract can act."
          },
          {
            "accounts": [
              {
                "address": "0xe788e09324F8bb3cc64f009973693f751C33b999",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "Veto Guardian TokenGovernor",
            "description": "This address can cancel proposals in the ZkTokenGovernor while they are pending (after having been proposed) or active (during the voting period)."
          },
          {
            "accounts": [
              {
                "address": "0xcd2753Bd3829dfeC575AFC3816d4899CD103C62D",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "Propose Guardian TokenGovernor",
            "description": "This address can make direct proposals in the ZkTokenGovernor without owning ZK tokens."
          },
          {
            "accounts": [
              {
                "address": "0xA08b9912416E8aDc4D9C21Fae1415d3318A129A8",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "ZK Token upgrade Admin",
            "description": "Can upgrade the ZK token contract, affecting all holders of the ZK token."
          },
          {
            "accounts": [
              {
                "address": "0x3E21c654B545Bf6236DC08236169DcF13dA4dDd6",
                "type": "Contract"
              }
            ],
            "chain": "zksync2",
            "name": "ZK Token minter Admin",
            "description": "Can add and remove minters from the ZK token contract and mint unlimited amounts."
          },
          {
            "accounts": [
              {
                "address": "0xe788e09324F8bb3cc64f009973693f751C33b999",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "Veto Guardian GovOpsGovernor",
            "description": "This address can cancel proposals in the ZkGovOpsGovernor while they are pending (after having been proposed) or active (during the voting period)."
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "CronosZkEvm",
            "address": "0x7b2DA4e77BAE0e0d23c53C3BE6650497d0576CFc",
            "upgradeability": {
              "proxyType": "EIP2535 diamond proxy",
              "admins": [],
              "implementations": [
                "0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a",
                "0xE60E94fCCb18a81D501a38959E532C0A85A1be89",
                "0xCDB6228b616EEf8Df47D69A372C4f725C43e718C",
                "0xaD193aDe635576d8e9f7ada71Af2137b16c64075"
              ],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "The main Rollup contract. The operator commits blocks and provides a ZK proof which is validated by the Verifier contract           then processes transactions. During batch execution it processes L1 --> L2 and L2 --> L1 transactions.",
            "upgradableBy": ["ProtocolUpgradeHandler"],
            "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
          },
          {
            "name": "CronosZkEVMAdmin",
            "address": "0x6a88E8f6B5382d87F39213eB3df43c5FF2498Dd4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Intermediary governance contract that has the *ChainAdmin* role in the Cronos zkEVM diamond contract."
          },
          {
            "name": "TransactionFiltererDenyList",
            "address": "0xA8998F231a660Eca365B382943c71ad9b7619139",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Censorship contract that is registered as the TransactionFilterer in the Cronos zkEVM diamond contract. Keeps a list of addresses that are not allowed to force transactions to the Layer 2 (`requestL2Transaction()`)."
          },
          {
            "name": "ValidatorTimelock",
            "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Intermediary contract between the *Validators* and the ZKsync Era diamond that delays block execution (ie withdrawals and other L2 --> L1 messages) by 21h."
          },
          {
            "name": "Verifier",
            "address": "0x70F3FBf8a427155185Ec90BED8a3434203de9604",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Implements ZK proof verification logic."
          },
          {
            "name": "SecurityCouncil",
            "address": "0xBDFfCC71FE84020238F2990a6D2954e87355De0D",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Custom contract acting as a Multisig. The default threshold for the members of this contract is 9 / 12 but is customized for certain actions."
          },
          {
            "name": "Guardians",
            "address": "0xD677e09324F8Bb3cC64F009973693f751c33A888",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Custom contract acting as a Multisig. The default threshold for the members of this contract is 5 / 8 but is customized for certain actions."
          },
          {
            "name": "ProtocolUpgradeHandler",
            "address": "0x8f7a9912416e8AdC4D9c21FAe1415D3318A11897",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The central upgrade contract and Governance proxy for all ZK stack contracts. Accepts successful DAO proposals from L2 and emergency proposals from the EmergencyUpgradeBoard."
          },
          {
            "name": "L1SharedBridge",
            "address": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
              "implementations": ["0xb56A8225A745756DD215faf22E4796f373561AcD"]
            },
            "chain": "ethereum",
            "description": "This bridge contract escrows all ERC-20s and ETH that are deposited to registered ZK stack chains like ZKsync Era.",
            "upgradableBy": ["ProtocolUpgradeHandler"],
            "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
          },
          {
            "name": "BridgeHub",
            "address": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
              "implementations": ["0x509dA1BE24432F8804C4A9FF4a3c3f80284CDd13"]
            },
            "chain": "ethereum",
            "description": "Sits between the single shared bridge and the StateTransitionManager(s) and relays L1 <-> L2 messages from the shared bridge or other ZK stack chains to their respective destinations.",
            "upgradableBy": ["ProtocolUpgradeHandler"],
            "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
          },
          {
            "name": "StateTransitionManager",
            "address": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
              "implementations": ["0xed1Dc7F0Be2B19cb02a2476150C8ea24A37c5274"]
            },
            "chain": "ethereum",
            "description": "Defines L2 diamond contract creation and upgrade data, proof verification for the `ZKsync diamond` contract connected to it (and other L2 diamond contracts that share the logic).",
            "upgradableBy": ["ProtocolUpgradeHandler"],
            "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
          }
        ],
        "nativeAddresses": {
          "zksync2": [
            {
              "name": "ZkProtocolGovernor",
              "address": "0x76705327e682F2d96943280D99464Ab61219e34f",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "Main Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for protocol upgrade proposals (ZIPs) that go through Ethereum Layer 1 and can target all L1 and L2 contracts. At least 21M ZK tokens are necessary to start a proposal and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the ProtocolTimelockController."
            },
            {
              "name": "ProtocolTimelockController",
              "address": "0x3701fB675bCd4A85eb11A2467628BBe193F6e6A8",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "Timelock contract that can send L2->L1 logs that start a proposal in the ProtocolUpgradeHandler on Ethereum. This timelock has no minimum delay"
            },
            {
              "name": "ZkTokenGovernor",
              "address": "0x10560f8B7eE37571AD7E3702EEb12Bc422036E89",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for Token Program Proposals (TPPs) usually targeting the ZK token. At least 21M ZK tokens are necessary to start a proposal (for delegates) and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the TokenTimelockController."
            },
            {
              "name": "TokenTimelockController",
              "address": "0x3E21c654B545Bf6236DC08236169DcF13dA4dDd6",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "This timelock contract has 3d minimum delay"
            },
            {
              "name": "ZkGovOpsGovernor",
              "address": "0x496869a7575A1f907D1C5B1eca28e4e9E382afAb",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for Governance Advisory Proposals (GAPs) that are not executable onchain. At least 21M ZK tokens are necessary to start a proposal and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the GovOpsTimelockController."
            },
            {
              "name": "GovOpsTimelockController",
              "address": "0xC3e970cB015B5FC36edDf293D2370ef5D00F7a19",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "This timelock contract has 3d minimum delay"
            },
            {
              "name": "ZkToken",
              "address": "0x5A7d6b2F92C77FAD6CCaBd7EE0624E64907Eaf3E",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdB1E46B448e68a5E35CB693a99D59f784aD115CC"],
                "implementations": [
                  "0x01a6715d3560241E09E865a46122bf347A576c09"
                ]
              },
              "chain": "zksync2",
              "description": "The ZK token contract on ZKsync Era. Used for voting in the ZK stack governance system.",
              "upgradableBy": ["ProtocolUpgradeHandler"],
              "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
            }
          ]
        },
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 4d 21h - 8d 21h delay on code upgrades unless upgrade is initiated by the     EmergencyUpgradeBoard in which case there is no delay."
          }
        ]
      },
      "stateDerivation": null,
      "stateValidation": {
        "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
        "categories": [
          {
            "title": "Prover Architecture",
            "description": "ZKsync Era proof system Boojum can be found [here](https://github.com/matter-labs/era-boojum/tree/main) and contains essential tools like the Prover, the Verifier, and other backend components. The specs of the system can be found [here](https://github.com/matter-labs/zksync-era/tree/main/docs/specs/prover)."
          },
          {
            "title": "ZK Circuits",
            "description": "ZKsync Era circuits are built from Boojum and are designed to replicate the behavior of the EVM. The source code can be found [here](https://github.com/matter-labs/era-zkevm_circuits/tree/main). The circuits are checked against tests that can be found [here](https://github.com/matter-labs/era-zkevm_test_harness/tree/main).",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the proof system is implemented incorrectly."
              }
            ]
          },
          {
            "title": "Verification Keys Generation",
            "description": "SNARK verification keys can be generated and checked against the Ethereum verifier contract using [this tool](https://github.com/matter-labs/zksync-era/tree/main/prover/crates/bin/vk_setup_data_generator_server_fri). The system requires a trusted setup."
          }
        ],
        "proofVerification": {
          "shortDescription": "ZKsync Era is a ZK-EVM rollup on Ethereum.",
          "aggregation": true,
          "requiredTools": [
            {
              "name": "Custom tool",
              "version": "v14.2.0",
              "link": "https://github.com/matter-labs/zksync-era/tree/prover-v14.2.0/prover/vk_setup_data_generator_server_fri"
            }
          ],
          "verifiers": [
            {
              "name": "ZKsyncEraVerifier",
              "description": "ZKsync Era utilizes [Boojum](https://github.com/matter-labs/era-boojum/tree/main) as the main proving stack for their system. Boojum is an implementation of the [Redshift](https://eprint.iacr.org/2019/1400.pdf) protocol. The protocol makes use of recursive proof aggregation. The final Redshift proof is wrapped in a SNARK (Plonk + KZG) proof.",
              "verified": "no",
              "contractAddress": "0x70F3FBf8a427155185Ec90BED8a3434203de9604",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Final wrap",
                  "proofSystem": "Plonk SNARK",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Aztec ceremony",
                  "link": "https://github.com/matter-labs/era-zkevm_test_harness/blob/v1.5.0/circuit_definitions/src/circuit_definitions/aux_layer/wrapper.rs"
                },
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "Redshift",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "LPC",
                  "trustedSetup": "None",
                  "link": "https://github.com/matter-labs/era-zkevm_test_harness/blob/v1.5.0/circuit_definitions/src/circuit_definitions/recursion_layer/mod.rs#L45"
                },
                {
                  "name": "Main circuit",
                  "proofSystem": "Redshift",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "LPC",
                  "trustedSetup": "None",
                  "link": "https://github.com/matter-labs/era-zkevm_circuits"
                }
              ]
            }
          ]
        }
      },
      "milestones": [
        {
          "name": "Alpha Mainnet Launch",
          "link": "https://blog.cronos.org/p/cronos-zkevm-launches-its-alpha-mainnet",
          "date": "2024-08-15T00:00:00Z",
          "description": "Cronos zkEVM Launches Its Alpha Mainnet powered by ZKsync.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "State diffs vs raw tx data",
          "url": "https://twitter.com/krzKaczor/status/1641505354600046594",
          "thumbnail": "l2beat-03.jpg"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "dbk",
      "createdAt": "1726825120",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xE5000acFE7997a7B381C4d9f72fB593AD0AD6034#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xFF00000000000000000000000000000020240603"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xF666CE8Bf4d1b1be67eCe022132B36ee2e89c031#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xE5000acFE7997a7B381C4d9f72fB593AD0AD6034#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xE5000acFE7997a7B381C4d9f72fB593AD0AD6034#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xF666CE8Bf4d1b1be67eCe022132B36ee2e89c031#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xF666CE8Bf4d1b1be67eCe022132B36ee2e89c031#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xF666CE8Bf4d1b1be67eCe022132B36ee2e89c031#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xE5000acFE7997a7B381C4d9f72fB593AD0AD6034#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xfdA4cCC8dCE3f4b9ACE21d030Ed345e975b8a7B8",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xfdA4cCC8dCE3f4b9ACE21d030Ed345e975b8a7B8",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x322C9a45368FdcdF358a4Ba340f88073Dc239e24",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x7aB7da0C3117D7Dfe0ABfAA8d8D33883f8477C74",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "DeBankChainMultisig",
          "description": "* This is a Gnosis Safe with 2 / 4 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L2OutputOracle, OptimismPortal, OptimismMintableERC20Factory, L1ERC721Bridge, SuperchainConfig, SystemConfig (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0xfB04A190dC7D91E86109433858A48E0B98EF1450",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6F0bc3fF0BE6fD52Ba3631bF9cB245a6d3181bdb",
              "type": "EOA"
            },
            {
              "address": "0x3867795f21ab2Fcb2dACb05f03CC6FCf50eb4BAF",
              "type": "EOA"
            },
            {
              "address": "0x0786509ADf5a28e8baA6247CE0faBCA42b5de4c9",
              "type": "EOA"
            },
            {
              "address": "0x6De8148Dad080548bd2D0C5a294549438aD5EFfD",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x322C9a45368FdcdF358a4Ba340f88073Dc239e24",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x7aB7da0C3117D7Dfe0ABfAA8d8D33883f8477C74",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0xfdA4cCC8dCE3f4b9ACE21d030Ed345e975b8a7B8",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n"
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x0341bb689CB8a4c16c61307F4BdA254E1bFD525e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
              "implementations": ["0xE5000acFE7997a7B381C4d9f72fB593AD0AD6034"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["DeBankChainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x28f1b9F457CB51E0af56dff1d11CD6CEdFfD1977",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
              "implementations": ["0xE62EaD0c8d90f602AdE7c9B0df89025AFB61AbA4"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["DeBankChainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x306402f889035e2Cbd7e396080bf365ADB38B7DC",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "OptimismPortal",
            "address": "0x63CA00232F471bE2A3Bf3C4e95Bc1d2B3EA5DB92",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
              "implementations": ["0xF666CE8Bf4d1b1be67eCe022132B36ee2e89c031"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["DeBankChainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x7F7a01cBE67a31625B0C137e835a12d494E293c2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
              "implementations": ["0x2470eE5fDCa25fD60d178e16821931f830200ef9"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["DeBankChainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x830e68669019a05F41676546417D2A06fdfFF9fB",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, OptimismPortal, OptimismMintableERC20Factory, L1ERC721Bridge, SuperchainConfig, SystemConfig.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0xc4C9bfB77DAC8d8d03Fd24E1C2b86bb6A0664b02",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
              "implementations": ["0xBb41aeB788607249b3D479CB42d1eb466f28d1Cd"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["DeBankChainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0xC8271C3Be50B9D575220dA2F9FE2f670DD6483D6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
              "implementations": ["0xAB4DaE8DA2708609D81636Ca5C27CAa489160B63"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["DeBankChainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0xcCcc98e93CeE060a03604D3916EE527a57078c8b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
              "implementations": ["0xcb32593E7eD1FBbf6db22348d444e2b1dDe71Fe6"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["DeBankChainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0xDEfab7699Ed60a863dce4B1095576F6d9EC5d254",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x307c7773097445400d2F2a51D65e38AEa8231868"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "DeBank Chain Launch",
          "link": "https://debank.com/stream/2539393",
          "date": "2024-07-19T00:00:00Z",
          "description": "DeBank mainnet is open for users.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "bedrock-superchain",
        "name": "DeBank Chain",
        "slug": "dbk",
        "description": "DeBank Chain is an OP stack Layer 2 on Ethereum that is deeply integrated into the DeBank ecosystem, allowing bridging directly from inside the Rabby Wallet.",
        "links": {
          "websites": ["https://dbkchain.io/"],
          "apps": [],
          "documentation": ["https://docs.dbkchain.io/"],
          "explorers": ["https://scan.dbkchain.io/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/dbkchain",
            "https://debank.com/official/117425"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "DeBank Chain is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x63CA00232F471bE2A3Bf3C4e95Bc1d2B3EA5DB92",
            "newVersion": true,
            "sinceTimestamp": "1717462691",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x63CA00232F471bE2A3Bf3C4e95Bc1d2B3EA5DB92",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
                "implementations": [
                  "0xF666CE8Bf4d1b1be67eCe022132B36ee2e89c031"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x28f1b9F457CB51E0af56dff1d11CD6CEdFfD1977",
            "newVersion": true,
            "sinceTimestamp": "1717462691",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x28f1b9F457CB51E0af56dff1d11CD6CEdFfD1977",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x830e68669019a05F41676546417D2A06fdfFF9fB"],
                "implementations": [
                  "0xE62EaD0c8d90f602AdE7c9B0df89025AFB61AbA4"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.mainnet.dbkchain.io/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x7aB7da0C3117D7Dfe0ABfAA8d8D33883f8477C74",
              "to": "0xFF00000000000000000000000000000020240603",
              "sinceTimestamp": "1717461337"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x0341bb689CB8a4c16c61307F4BdA254E1bFD525e",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1717462691"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "honeypot",
      "createdAt": "1683905088",
      "badges": ["CartesiVM", "AppChain", "EthereumCalldata", "Cartesi"],
      "display": {
        "name": "Honeypot (Cartesi)",
        "shortName": "Honeypot",
        "slug": "cartesi-honeypot",
        "provider": "Cartesi Rollups",
        "description": "Honeypot is an application-specific rollup designed to challenge the security of Cartesi Rollups. It provides a gamified battlefield to incentivize bug hunters to hack the application to obtain the funds locked in the rollup contract.",
        "purposes": ["Bug bounty"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://cartesi.io/"],
          "apps": ["https://explorer.cartesi.io/stake"],
          "documentation": ["https://docs.cartesi.io/cartesi-rollups/"],
          "explorers": [
            "https://cartesiscan.io/",
            "https://explorer.cartesi.io/"
          ],
          "repositories": ["https://github.com/cartesi/honeypot"],
          "socialMedia": [
            "https://twitter.com/cartesiproject",
            "https://discord.gg/G2tCH5KkcM",
            "https://cartesi.io/blog/",
            "https://reddit.com/r/cartesi/",
            "https://youtube.com/@cartesiproject",
            "https://t.me/cartesiproject",
            "https://linkedin.com/company/cartesiproject",
            "https://instagram.com/cartesiproject/",
            "https://medium.com/cartesi"
          ]
        },
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          }
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "There is no onchain fraud proof system.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/cartesi/rollups/tree/v1.0.2/offchain)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "There is no onchain fraud proof system."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "config": {
        "escrows": [
          {
            "address": "0x0974CC873dF893B302f6be7ecf4F9D4b1A15C366",
            "newVersion": true,
            "sinceTimestamp": "1694553335",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x0974CC873dF893B302f6be7ecf4F9D4b1A15C366",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "Contract storing bounty funds.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x9DB17B9426E6d3d517a969994E7ADDadbCa9C45f",
              "selector": "0xddfdfbb0",
              "functionSignature": "function submitClaim(bytes calldata _claimData) external onlyOwner",
              "sinceTimestamp": "1694467715"
            }
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "InputBox",
              "references": [
                "https://etherscan.io/address/0x59b22D57D4f067708AB0c00552767405926dc768#code#F1#L30"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "∞",
          "description": "Users can exit funds at any time because contracts are not upgradeable.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is no delay on this operation.",
          "sentiment": "good",
          "definingMetric": 0
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are in development",
          "description": "Ultimately, Cartesi DApps will use interactive fraud proofs to enforce state correctness. This feature is currently in development and the Honeypot DApp permits invalid state roots. Since Honeypot is immutable, this feature will not be added to the DApp.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system by the configured Authority.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Authority.sol#L148 - Etherscan source code, submitClaim function",
              "href": "https://etherscan.io/address/0x9DB17B9426E6d3d517a969994E7ADDadbCa9C45f#code#F1#L48"
            }
          ]
        },
        "dataAvailability": {
          "name": "All transaction data is recorded on chain",
          "description": "All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.",
          "risks": [],
          "references": [
            {
              "text": "InputBox.sol#30 - Etherscan source code, addInput function",
              "href": "https://etherscan.io/address/0x59b22D57D4f067708AB0c00552767405926dc768#code#F1#L30"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": []
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": []
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "The Cartesi node software source code can be found [here](https://github.com/cartesi/rollups/tree/v1.0.2/offchain).",
        "compressionScheme": "No compression is used.",
        "genesisState": "The genesis state is derived from the Honeypot Cartesi Machine template, which can be found within the [Honeypot server Docker image](https://hub.docker.com/layers/cartesi/honeypot/main-server-mainnet/images/sha256-9067ebcf3d915e8091aba45bd231a328a7ac260924d85387137ed133f3e240ac) at `/var/opt/cartesi/machine-snapshots/0_0`. Alternatively, it is possible to recreate it by following the build procedure outlined in the [Honeypot GitHub Repository](https://github.com/cartesi/honeypot#building-machine-to-deploy).",
        "dataFormat": "The reference implementation for ERC20 deposits can be found [here](https://github.com/cartesi/rollups/blob/v1.0.2/onchain/rollups/contracts/common/InputEncoding.sol#L40). To learn about the withdrawal request format, please refer to the documentation [here](https://github.com/cartesi/honeypot#withdrawing-the-pot)."
      },
      "contracts": {
        "addresses": [
          {
            "name": "Honeypot",
            "address": "0x0974CC873dF893B302f6be7ecf4F9D4b1A15C366",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "CartesiDApp instance for the Honeypot DApp, responsible for holding assets and allowing the DApp to interact with other smart contracts."
          },
          {
            "name": "InputBox",
            "address": "0x59b22D57D4f067708AB0c00552767405926dc768",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract that receives arbitrary blobs as inputs to Cartesi DApps."
          },
          {
            "name": "ERC20Portal",
            "address": "0x9C21AEb2093C32DDbC53eEF24B873BDCd1aDa1DB",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract that allows anyone to perform transfers of ERC-20 tokens to Cartesi DApps."
          },
          {
            "name": "Authority",
            "address": "0x9DB17B9426E6d3d517a969994E7ADDadbCa9C45f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Simple consensus model controlled by a single address, the owner."
          },
          {
            "name": "History",
            "address": "0x385485FcaCD8AdB70C8A5a6B07155C907e78FAd9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract that stores claims for Cartesi DApps."
          }
        ],
        "risks": []
      },
      "permissions": [
        {
          "name": "Authority owner",
          "description": "The Authority owner can submit claims to the Honeypot DApp.",
          "accounts": [
            {
              "address": "0x79Ec6ba3352216E496FCfEd1d2e86Ee15eed3861",
              "type": "EOA"
            }
          ]
        }
      ],
      "milestones": [
        {
          "name": "Honeypot announcement",
          "link": "https://medium.com/cartesi/cartesi-ecosystem-update-2023-124b384401cc#:~:text=Honeypot%20DApp%20on%20Mainnet",
          "date": "2023-04-11T00:00:00Z",
          "description": "Honeypot first announced to the community.",
          "type": "general"
        },
        {
          "name": "Honeypot launch",
          "link": "https://x.com/cartesiproject/status/1706685141421047982",
          "date": "2023-09-26T00:00:00Z",
          "description": "Honeypot launched on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Application-Specific Rollups",
          "url": "https://medium.com/cartesi/application-specific-rollups-e12ed5d9de01"
        }
      ]
    },
    {
      "isArchived": true,
      "type": "layer2",
      "id": "degate",
      "createdAt": "1684838286",
      "badges": ["AppChain", "EthereumCalldata", "LoopringFork"],
      "display": {
        "name": "DeGate Legacy",
        "slug": "degate",
        "headerWarning": "This project is in shutdown mode and no longer active.",
        "description": "DeGate is an app-specific ZK Rollup that enables a trustless, fast and low-fee decentralized order book exchange, helping users to trade easy and sleep easy. DeGate smart contracts are forked from Loopring V3.",
        "purposes": ["Exchange"],
        "provider": "Loopring",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://degate.com/"],
          "apps": ["https://app.degate.com/"],
          "documentation": ["https://docs.degate.com/"],
          "explorers": [],
          "repositories": ["https://github.com/degatedev/protocols"],
          "socialMedia": [
            "https://twitter.com/DeGateDex",
            "https://discord.gg/degate",
            "https://youtube.com/@degatedex1718",
            "https://medium.com/degate",
            "https://mirror.xyz/0x078a601f492043C8e7D0E15B0F8815f58b4c342f"
          ]
        }
      },
      "config": {
        "associatedTokens": ["DG"],
        "escrows": [
          {
            "address": "0x814d0c1903D69EB1c7ceB8F5190B20A06892d1dA",
            "newVersion": true,
            "sinceTimestamp": "1681991243",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x814d0c1903D69EB1c7ceB8F5190B20A06892d1dA",
              "upgradeability": null,
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x6B937A5920726e70c5bF1d4d4E18EEeEd46FaE83",
              "selector": "0x377bb770",
              "functionSignature": "function submitBlocks(bool isDataCompressed,bytes data)",
              "sinceTimestamp": "1681993655",
              "untilTimestamp": "1695902496"
            }
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "∞",
          "description": "Users can exit funds at any time because contracts are not upgradeable.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1 with a 0.01 ETH fee. If the sequencer is down for more than 15d, users can use the exit hatch to withdraw their funds. The sequencer can censor individual deposits, but in such case after 15d users can get their funds back.",
          "sentiment": "good",
          "definingMetric": 1296000,
          "sources": [
            {
              "contract": "ExchangeV3",
              "references": [
                "https://etherscan.io/address/0xe63602a9B3DFE983187525AC985Fec4F57B24eD5#code#F23#L102",
                "https://etherscan.io/address/0xe63602a9B3DFE983187525AC985Fec4F57B24eD5#code#F35#L162"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ExchangeV3",
              "references": [
                "https://etherscan.io/address/0xe63602a9B3DFE983187525AC985Fec4F57B24eD5#code#F1#L420"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 2",
        "missing": null,
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/degatedev/degate-state-recover)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": true,
                "description": "Users have at least 30d to exit as the system cannot be upgraded."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "Operator - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#operator"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "Operator - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#operator"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "Introduction - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#design-features"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "ExchangeV3.sol#L341-L348 - DeGate source code",
              "href": "https://etherscan.io/address/0xe63602a9B3DFE983187525AC985Fec4F57B24eD5#code#F1#L341"
            },
            {
              "text": "LoopringIOExchangeOwner.sol#L98-L101 - DeGate source code",
              "href": "https://etherscan.io/address/0x6B937A5920726e70c5bF1d4d4E18EEeEd46FaE83#code#F1#L98"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Forced Withdrawals - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#force-withdrawal"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdraw - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#normal-withdrawal"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Request Handling - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#force-withdrawal"
              },
              {
                "text": "ExchangeV3.sol#L392 - DeGate source code, forceWithdraw function",
                "href": "https://etherscan.io/address/0xe63602a9B3DFE983187525AC985Fec4F57B24eD5#code#F1#L392"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the 15d deadline passes and the forced exit is still ignored the user can put the system into Withdrawal Mode, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Request Handling - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#exodus-mode"
              },
              {
                "text": "ExchangeV3.sol#L420 - DeGate source code, withdrawFromMerkleTree function",
                "href": "https://etherscan.io/address/0xe63602a9B3DFE983187525AC985Fec4F57B24eD5#code#F1#L420"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "Node software source code can be found [here](https://github.com/degatedev/degate-state-recover).",
        "compressionScheme": "No compression is used.",
        "genesisState": "The system does not begin with a genesis state; instead, it initiates from a zero state, as referenced in [`CreateEmptyState`](https://github.com/degatedev/degate-state-recover/blob/main/statemanager/state.go#L28).",
        "dataFormat": "DeGate bundles off-chain transactions into [zkBlocks](https://github.com/degatedev/protocols/blob/degate_mainnet/Circuit%20Design.md#zkblock) and submits them to the blockchain. zkBlock data definition is documented [here](https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#zkblock-data-definition)."
      },
      "permissions": [
        {
          "name": "DefaultDepositContract Owner",
          "accounts": [
            {
              "address": "0x2028834B2c0A36A918c10937EeA71BE4f932da52",
              "type": "Contract"
            }
          ],
          "description": "This address is the owner of the following contracts: LoopringIOExchangeOwner, LoopringV3, DefaultDepositContract. Can add or remove block submitters. Can change the forced withdrawal fee up to 0.25 ETH. Can change a way that balance is calculated per contract during the deposit, allowing the support of non-standard tokens."
        },
        {
          "name": "BlockVerifier Owner",
          "description": "This address is the owner of the BlockVerifier contract.",
          "accounts": [
            {
              "address": "0xd8C695DfAab475f55327Ce269096923EFECa2e0F",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Block Submitters",
          "accounts": [
            {
              "address": "0x84A00D39C3c95e839202E19F892F17743d6370a0",
              "type": "EOA"
            },
            {
              "address": "0xE9A37E8DDDbf4Bb3f5d6aCE6D01a137e484Db77C",
              "type": "EOA"
            }
          ],
          "description": "Actors who can submit new blocks, updating the L2 state on L1."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "ExchangeV3",
            "address": "0xe63602a9B3DFE983187525AC985Fec4F57B24eD5",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Main ExchangeV3 contract."
          },
          {
            "name": "LoopringIOExchangeOwner",
            "address": "0x6B937A5920726e70c5bF1d4d4E18EEeEd46FaE83",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used by the Prover to submit exchange blocks with zkSNARK proofs that are later processed and verified by the BlockVerifier contract."
          },
          {
            "name": "DefaultDepositContract",
            "address": "0x814d0c1903D69EB1c7ceB8F5190B20A06892d1dA",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "ERC 20 token basic deposit contract. Handles user deposits and withdrawals."
          },
          {
            "name": "LoopringV3",
            "address": "0x4d707cae77c5E82a00BF9572A55d3ef3a4e0c458",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract for setting exchange fee parameters."
          },
          {
            "name": "BlockVerifier",
            "address": "0x1c602313cDDC68C5789aCb7df0C92a93B0E04C9e",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "zkSNARK Verifier based on ethsnarks library."
          }
        ],
        "risks": []
      },
      "milestones": [
        {
          "name": "DeGate DEX Launches Mainnet Beta",
          "link": "https://medium.com/degate/degate-dex-launches-mainnet-beta-trade-easy-sleep-easy-603574bd3a46",
          "date": "2023-05-03T00:00:00Z",
          "description": "DeGate launches mainnet beta with a deposit cap and a program to recover eventual user losses.",
          "type": "general"
        }
      ]
    },
    {
      "isArchived": true,
      "type": "layer2",
      "id": "degate2",
      "createdAt": "1684838286",
      "badges": ["AppChain", "EthereumCalldata", "LoopringFork"],
      "display": {
        "name": "DeGate V1 Legacy",
        "slug": "degate2",
        "headerWarning": "This project is in shutdown mode and no longer active.",
        "description": "DeGate is an app-specific ZK Rollup that enables a trustless, fast and low-fee decentralized order book exchange, helping users to trade easy and sleep easy. DeGate smart contracts are forked from Loopring V3.",
        "purposes": ["Exchange"],
        "provider": "Loopring",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://degate.com/"],
          "apps": ["https://app.degate.com/"],
          "documentation": ["https://docs.degate.com/"],
          "explorers": [],
          "repositories": ["https://github.com/degatedev/protocols"],
          "socialMedia": [
            "https://twitter.com/DeGateDex",
            "https://discord.gg/degate",
            "https://youtube.com/@degatedex1718",
            "https://medium.com/degate",
            "https://mirror.xyz/0x078a601f492043C8e7D0E15B0F8815f58b4c342f"
          ]
        }
      },
      "config": {
        "associatedTokens": ["DG"],
        "escrows": [
          {
            "address": "0xF13e21653AEB763595D5E4baA1dC115689Da49b9",
            "newVersion": true,
            "sinceTimestamp": "1693304807",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xF13e21653AEB763595D5E4baA1dC115689Da49b9",
              "upgradeability": null,
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x2CFd271e9b4d0344Fd2Aa0cb1ffd4f6b85c0B215",
              "selector": "0x377bb770",
              "functionSignature": "function submitBlocks(bool isDataCompressed,bytes data)",
              "sinceTimestamp": "1693304819",
              "untilTimestamp": "1699766508"
            }
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "∞",
          "description": "Users can exit funds at any time because contracts are not upgradeable.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1 with a 0.01 ETH fee. If the sequencer is down for more than 15d, users can use the exit hatch to withdraw their funds. The sequencer can censor individual deposits, but in such case after 15d users can get their funds back.",
          "sentiment": "good",
          "definingMetric": 1296000,
          "sources": [
            {
              "contract": "ExchangeV3",
              "references": [
                "https://etherscan.io/address/0x9C8f884B15a1fcd5B4bcEb8647DC2D15165906c7#code#F23#L102",
                "https://etherscan.io/address/0x9C8f884B15a1fcd5B4bcEb8647DC2D15165906c7#code#F35#L162"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ExchangeV3",
              "references": [
                "https://etherscan.io/address/0x9C8f884B15a1fcd5B4bcEb8647DC2D15165906c7#code#F1#L420"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 2",
        "missing": null,
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": true,
                "description": "Users have at least 30d to exit as the system cannot be upgraded."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "Operator - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#operator"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "Operator - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#operator"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "Introduction - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#design-features"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "ExchangeV3.sol#L341-L348 - DeGate source code",
              "href": "https://etherscan.io/address/0x9C8f884B15a1fcd5B4bcEb8647DC2D15165906c7#code#F1#L341"
            },
            {
              "text": "LoopringIOExchangeOwner.sol#L98-L101 - DeGate source code",
              "href": "https://etherscan.io/address/0x2CFd271e9b4d0344Fd2Aa0cb1ffd4f6b85c0B215#code#F1#L98"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Forced Withdrawals - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#force-withdrawal"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdraw - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#normal-withdrawal"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Request Handling - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#force-withdrawal"
              },
              {
                "text": "ExchangeV3.sol#L392 - DeGate source code, forceWithdraw function",
                "href": "https://etherscan.io/address/0x9C8f884B15a1fcd5B4bcEb8647DC2D15165906c7#code#F1#L392"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the 15d deadline passes and the forced exit is still ignored the user can put the system into Withdrawal Mode, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Request Handling - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#exodus-mode"
              },
              {
                "text": "ExchangeV3.sol#L420 - DeGate source code, withdrawFromMerkleTree function",
                "href": "https://etherscan.io/address/0x9C8f884B15a1fcd5B4bcEb8647DC2D15165906c7#code#F1#L420"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "DefaultDepositContract Owner",
          "accounts": [
            {
              "address": "0xacD3A62F3eED1BfE4fF0eC8240d645c1F5477F82",
              "type": "EOA"
            }
          ],
          "description": "This address is the owner of the following contracts: LoopringIOExchangeOwner, LoopringV3, DefaultDepositContract. Can add or remove block submitters. Can change the forced withdrawal fee up to 0.25 ETH. Can change a way that balance is calculated per contract during the deposit, allowing the support of non-standard tokens."
        },
        {
          "name": "BlockVerifier Owner",
          "description": "This address is the owner of the BlockVerifier contract.",
          "accounts": [
            {
              "address": "0xacD3A62F3eED1BfE4fF0eC8240d645c1F5477F82",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Block Submitters",
          "accounts": [
            {
              "address": "0x4e3FE240B50A445fc6137a6363aC3593Af173b8a",
              "type": "EOA"
            }
          ],
          "description": "Actors who can submit new blocks, updating the L2 state on L1."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "ExchangeV3",
            "address": "0x9C8f884B15a1fcd5B4bcEb8647DC2D15165906c7",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Main ExchangeV3 contract."
          },
          {
            "name": "LoopringIOExchangeOwner",
            "address": "0x2CFd271e9b4d0344Fd2Aa0cb1ffd4f6b85c0B215",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used by the Prover to submit exchange blocks with zkSNARK proofs that are later processed and verified by the BlockVerifier contract."
          },
          {
            "name": "DefaultDepositContract",
            "address": "0xF13e21653AEB763595D5E4baA1dC115689Da49b9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "ERC 20 token basic deposit contract. Handles user deposits and withdrawals."
          },
          {
            "name": "LoopringV3",
            "address": "0x5F412bf72ceE6ceB3e9f8b0F966429b59255a9B7",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract for setting exchange fee parameters."
          },
          {
            "name": "BlockVerifier",
            "address": "0x707B12e8921b442D4015eb03c86E66F3b8042Dd2",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "zkSNARK Verifier based on ethsnarks library."
          }
        ],
        "risks": []
      },
      "milestones": [
        {
          "name": "DeGate Redeploy",
          "link": "https://medium.com/degate/degate-mainnet-beta-redeployment-update-a0f1a6b7350c",
          "date": "2023-09-14T00:00:00Z",
          "description": "DeGate redeploys the contracts to fix a bug.",
          "type": "general"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "degate3",
      "createdAt": "1684838286",
      "badges": ["AppChain", "EthereumCalldata", "LoopringFork"],
      "display": {
        "name": "DeGate V1",
        "slug": "degate3",
        "description": "DeGate is a ZK Rollup enabling a decentralized order book exchange. DeGate smart contracts are forked from Loopring V3.",
        "purposes": ["Exchange", "NFT"],
        "provider": "Loopring",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://degate.com/"],
          "apps": ["https://app.degate.com/"],
          "documentation": ["https://docs.degate.com/"],
          "explorers": [],
          "repositories": ["https://github.com/degatedev/protocols"],
          "socialMedia": [
            "https://twitter.com/DeGateDex",
            "https://discord.gg/degate",
            "https://youtube.com/@degatedex1718",
            "https://medium.com/degate",
            "https://mirror.xyz/0x078a601f492043C8e7D0E15B0F8815f58b4c342f"
          ]
        },
        "activityDataSource": "Explorer API",
        "liveness": {
          "explanation": "DeGate is a ZK rollup based on Loopring’s code base that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. "
        },
        "finality": { "finalizationPeriod": 0 }
      },
      "config": {
        "associatedTokens": ["DG"],
        "escrows": [
          {
            "address": "0x54D7aE423Edb07282645e740C046B9373970a168",
            "newVersion": true,
            "sinceTimestamp": "1699746983",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x54D7aE423Edb07282645e740C046B9373970a168",
              "upgradeability": {
                "proxyType": "ZeppelinOS proxy",
                "admins": ["0xf2991507952d9594E71A44A54fb19f3109D213A5"],
                "implementations": [
                  "0x8CCc06C4C3B2b06616EeE1B62F558f5b9C08f973"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "degate",
          "defaultUrl": "https://v1-mainnet-backend.degate.com/order-book-api",
          "defaultCallsPerMinute": 120
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x9b93e47b7F61ad1358Bd47Cd01206708E85AE5eD",
              "selector": "0x377bb770",
              "functionSignature": "function submitBlocks(bool isDataCompressed,bytes data)",
              "sinceTimestamp": "1699747007"
            }
          }
        ],
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": {
          "type": "Degate",
          "minTimestamp": "1699747007",
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "30d",
          "description": "Users have 30d to exit funds in case of an unwanted regular upgrade. There is a 45d delay before a regular upgrade is applied, and withdrawals can take up to 15d to be processed.",
          "secondLine": null,
          "sentiment": "good",
          "definingMetric": 2592000
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1 with a 0.01 ETH fee. If the sequencer is down for more than 15d, users can use the exit hatch to withdraw their funds. The sequencer can censor individual deposits, but in such case after 15d users can get their funds back.",
          "sentiment": "good",
          "definingMetric": 1296000,
          "sources": [
            {
              "contract": "ExchangeV3",
              "references": [
                "https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F23#L102",
                "https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F35#L162"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ExchangeV3",
              "references": [
                "https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F1#L420"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 2",
        "missing": null,
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/degatedev/degate-state-recover)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": true,
                "description": "Users have at least 30d to exit as the system upgrades have a 45d delay."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "Operator - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#operator"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "Operator - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#operator"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "Introduction - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/DeGate%20Protocol%20Specification%20Document.md#design-features"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "ExchangeV3.sol#L341-L348 - DeGate source code",
              "href": "https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F1#L341"
            },
            {
              "text": "LoopringIOExchangeOwner.sol#L98-L101 - DeGate source code",
              "href": "https://etherscan.io/address/0x9b93e47b7F61ad1358Bd47Cd01206708E85AE5eD#code#F1#L98"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Forced Withdrawals - DeGate design doc",
              "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#force-withdrawal"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdraw - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#normal-withdrawal"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Request Handling - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#force-withdrawal"
              },
              {
                "text": "ExchangeV3.sol#L392 - DeGate source code, forceWithdraw function",
                "href": "https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F1#L392"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the 15d deadline passes and the forced exit is still ignored the user can put the system into Withdrawal Mode, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Request Handling - DeGate design doc",
                "href": "https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#exodus-mode"
              },
              {
                "text": "ExchangeV3.sol#L420 - DeGate source code, withdrawFromMerkleTree function",
                "href": "https://etherscan.io/address/0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b#code#F1#L420"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "Node software source code can be found [here](https://github.com/degatedev/degate-state-recover).",
        "compressionScheme": "No compression is used.",
        "genesisState": "The system does not begin with a genesis state; instead, it initiates from a zero state, as referenced in [`CreateEmptyState`](https://github.com/degatedev/degate-state-recover/blob/main/statemanager/state.go#L28).",
        "dataFormat": "DeGate bundles off-chain transactions into [zkBlocks](https://github.com/degatedev/protocols/blob/degate_mainnet/Circuit%20Design.md#zkblock) and submits them to the blockchain. zkBlock data definition is documented [here](https://github.com/degatedev/protocols/blob/degate_mainnet/Smart%20Contract%20Design.md#zkblock-data-definition)."
      },
      "stateValidation": {
        "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
        "categories": [
          {
            "title": "ZK Circuits",
            "description": "DeGate utilizes Groth16 for their proving system. The source code of the circuits can be found [here](https://github.com/degatedev/protocols/tree/degate_mainnet/packages/loopring_v3/circuit).",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the proof system is implemented incorrectly."
              }
            ]
          },
          {
            "title": "Verification Keys Generation",
            "description": "Groth16 requires a circuit specific trusted setup, so they run their own ceremony. The first phase is run using Powers of Tau ceremony. Some of the instructions on how to regenerate the verification keys can be found [here](https://github.com/degatedev/trusted_setup/tree/master)."
          }
        ],
        "proofVerification": {
          "shortDescription": "DeGate is a DEX rollup on Ethereum, based on Loopring V3.",
          "aggregation": false,
          "requiredTools": [
            {
              "name": "Custom tool",
              "version": "v1.1.0",
              "link": "https://github.com/degatedev/trusted_setup/tree/master"
            }
          ],
          "verifiers": [
            {
              "name": "BlockVerifier",
              "description": "DeGate utilizes Groth16 for their proving system.",
              "verified": "no",
              "contractAddress": "0xE3B7fE3ce0fa54C5AC7F48E7ED9E52dA045bE4d6",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Main circuit",
                  "proofSystem": "Groth16",
                  "mainArithmetization": "R1CS+QAP",
                  "mainPCS": "N/A",
                  "trustedSetup": "?",
                  "link": "https://github.com/degatedev/protocols/tree/degate_mainnet/packages/loopring_v3/circuit"
                }
              ]
            }
          ]
        }
      },
      "permissions": [
        {
          "name": "BlockVerifier Owner",
          "description": "This address is the owner of the BlockVerifier contract.",
          "accounts": [
            {
              "address": "0xacD3A62F3eED1BfE4fF0eC8240d645c1F5477F82",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Block Submitters",
          "accounts": [
            {
              "address": "0x4e3FE240B50A445fc6137a6363aC3593Af173b8a",
              "type": "EOA"
            }
          ],
          "description": "Actors who can submit new blocks, updating the L2 state on L1."
        },
        {
          "name": "Degate HomeDAO2 Multisig",
          "accounts": [
            {
              "address": "0x2028834B2c0A36A918c10937EeA71BE4f932da52",
              "type": "Contract"
            }
          ],
          "description": "Actor allowed to upgrade the ExchangeV3 and DefaultDepositContract contracts. This address is the owner of the following contracts: LoopringIOExchangeOwner, LoopringV3, DefaultDepositContract. Can add or remove block submitters. Can change the forced withdrawal fee up to 0.25 ETH. Can change a way that balance is calculated per contract during the deposit, allowing the support of non-standard tokens."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "ExchangeV3",
            "address": "0x9C07A72177c5A05410cA338823e790876E79D73B",
            "upgradeability": {
              "proxyType": "ZeppelinOS proxy",
              "admins": ["0x0D2eC0a5858730E7D49f5B4aE6f2C665e46c1d9d"],
              "implementations": ["0xc56C1dfE64D21A345E3A3C715FFcA1c6450b964b"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Main ExchangeV3 contract.",
            "upgradableBy": ["Degate HomeDAO2 Multisig"],
            "upgradeDelay": "45d"
          },
          {
            "name": "LoopringIOExchangeOwner",
            "address": "0x9b93e47b7F61ad1358Bd47Cd01206708E85AE5eD",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used by the Prover to submit exchange blocks with zkSNARK proofs that are later processed and verified by the BlockVerifier contract."
          },
          {
            "name": "DefaultDepositContract",
            "address": "0x54D7aE423Edb07282645e740C046B9373970a168",
            "upgradeability": {
              "proxyType": "ZeppelinOS proxy",
              "admins": ["0xf2991507952d9594E71A44A54fb19f3109D213A5"],
              "implementations": ["0x8CCc06C4C3B2b06616EeE1B62F558f5b9C08f973"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "ERC 20 token basic deposit contract. Handles user deposits and withdrawals.",
            "upgradableBy": ["Degate HomeDAO2 Multisig"],
            "upgradeDelay": "45d"
          },
          {
            "name": "LoopringV3",
            "address": "0x9385aCd9d78dFE854c543294770d0C94c2B07EDC",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract for setting exchange fee parameters."
          },
          {
            "name": "BlockVerifier",
            "address": "0xE3B7fE3ce0fa54C5AC7F48E7ED9E52dA045bE4d6",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "zkSNARK Verifier based on ethsnarks library."
          },
          {
            "name": "TimeLock1",
            "address": "0x0D2eC0a5858730E7D49f5B4aE6f2C665e46c1d9d",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "This timelock contract is set as the proxyOwner of the ExchangeV3 contract. There is a 45d time delay for upgrading the contract."
          },
          {
            "name": "TimeLock2",
            "address": "0xf2991507952d9594E71A44A54fb19f3109D213A5",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "This timelock contract is set as the proxyOwner of the DefaultDepositContract contract. There is a 45d time delay for upgrading the contract."
          }
        ],
        "risks": []
      },
      "milestones": [
        {
          "name": "DeGate Mainnet Beta Redeploy",
          "link": "https://medium.com/degate/degate-mainnet-beta-redeployment-oct-2023-e07c8eeaec4c",
          "date": "2023-11-13T00:00:00Z",
          "description": "DeGate redeploys Mainnet Beta due to a bug, with the ability to upgrade the smart contracts.",
          "type": "incident"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "dydx",
      "createdAt": "1623153328",
      "badges": ["AppChain", "StarkEx", "EthereumCalldata", "Governance"],
      "display": {
        "name": "dYdX v3",
        "slug": "dydx",
        "warning": "This page describes dYdX v3, which is an L2 built on Ethereum. Recently deployed dYdX v4 is a separate blockchain based on Cosmos SDK, unrelated to Ethereum and is using different technology. No information on this page applies to dYdX v4.",
        "headerWarning": "dYdX v3 is planned to shut down on October 28th at 12:05 P.M. UTC. [Read more](https://dydx.exchange/blog/v3-product-sunset)",
        "description": "dYdX v3 aims to build a powerful and professional exchange for trading crypto assets where users can truly own their trades and, eventually, the exchange itself.",
        "purposes": ["Exchange"],
        "provider": "StarkEx",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://dydx.exchange/"],
          "apps": [
            "https://trade.dydx.exchange/",
            "https://margin.dydx.exchange/",
            "https://dydx.l2beat.com"
          ],
          "documentation": [
            "https://docs.starkware.co/starkex/",
            "https://docs.dydx.exchange/",
            "https://docs.dydx.community/dydx-governance/"
          ],
          "explorers": ["https://dydx.l2beat.com"],
          "repositories": [
            "https://github.com/starkware-libs/starkex-contracts",
            "https://github.com/dydxprotocol/"
          ],
          "socialMedia": [
            "https://dydx.exchange/blog",
            "https://twitter.com/dYdX",
            "https://discord.gg/dydx",
            "https://youtube.com/c/dydxprotocol",
            "https://reddit.com/r/dydxprotocol/",
            "https://linkedin.com/company/dydx"
          ]
        },
        "activityDataSource": "Closed API",
        "liveness": {
          "explanation": "dYdX is a ZK rollup that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. The verification is done as part of the state update."
        },
        "finality": { "finalizationPeriod": 0 }
      },
      "config": {
        "associatedTokens": ["DYDX"],
        "escrows": [
          {
            "address": "0xD54f502e184B6B739d7D27a6410a67dc462D69c8",
            "newVersion": true,
            "sinceTimestamp": "1613033682",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xD54f502e184B6B739d7D27a6410a67dc462D69c8",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": [
                  "0xFCAac0F14deA11eDe11Afcb875f29130e1ad5ec0",
                  "0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE"
                ],
                "implementations": [
                  "0x2C0df87E073755139101b35c0A51e065291cc2d3",
                  "0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5",
                  "0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545",
                  "0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0",
                  "0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": ["Rollup Admin"],
              "upgradeDelay": "9d or 2d if overridden by Priority Controller"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "starkex",
          "product": ["dydx"],
          "sinceTimestamp": "1613033682",
          "resyncLastDays": 7
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
              "selector": "0x9b3b76cc",
              "functionSignature": "function verifyProofAndRegister(uint256[] proofParams, uint256[] proof, uint256[] taskMetadata, uint256[] cairoAuxInput, uint256 cairoVerifierId)",
              "sinceTimestamp": "1615417556"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xD54f502e184B6B739d7D27a6410a67dc462D69c8",
              "selector": "0x538f9406",
              "functionSignature": "function updateState(uint256[] publicInput, uint256[] applicationData)",
              "sinceTimestamp": "1613033682"
            }
          }
        ],
        "finality": "coming soon"
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "StarkPerpetual",
              "references": [
                "https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F35#L125"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "StarkPerpetual",
              "references": [
                "https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F35#L82"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no exit window. Upgrades have a 9d delay, (or 2d if shortened by the Priority Controller), but withdrawals can be censored for up to 14d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -432000
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a trade or a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for 14d, users can use the exit hatch to withdraw their funds. Users are required to find a counterparty for the trade by out of system means.",
          "sentiment": "good",
          "definingMetric": 1209600,
          "sources": [
            {
              "contract": "StarkPerpetual",
              "references": [
                "https://etherscan.io/address/0xc43f5526124877f9125e3b48101dca6d7c6b4ea3#code#F4#L46"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds. Positions will be closed using the average price from the last batch state update.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "StarkPerpetual",
              "references": [
                "https://etherscan.io/address/0xc43f5526124877f9125e3b48101dca6d7c6b4ea3#code#F6#L32"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "USDC transferred is considered canonical as it is the basis of the perpetual protocol on the chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            },
            {
              "text": "UpdatePerpetualState.sol#L125 - Etherscan source code, verifyFact function call",
              "href": "https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F35#L125"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the relevant data that is used to recover the balances Merkle Tree is published on-chain as calldata. This includes, in addition to the proven new state, the complete list of differences of the users' balances from the previous state.",
          "risks": [],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "ZK Rollup - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#zk_rollup"
            },
            {
              "text": "UpdatePerpetualState.sol#L82 - Etherscan source code, updateState function",
              "href": "https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F35#L82"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            },
            {
              "text": "Operator.sol#L42 - Etherscan source code, onlyOperator modifier",
              "href": "https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F26#L42"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within 14d. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds. Perpetual positions can also be force closed before withdrawing, however this requires the user to find the counterparty for the trade themselves.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            },
            {
              "category": "Funds can be lost if",
              "text": "the user is unable to find the counterparty for the force trade."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/overview-architecture.html#8_censorship_prevention"
            },
            {
              "text": "Forced Trade - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/forced-actions-escape-hatch-perpetual.html#forcedtrade"
            },
            {
              "text": "ForcedTrades.sol#L46 - Etherscan source code, forcedTradeRequest function",
              "href": "https://etherscan.io/address/0xc43f5526124877f9125e3b48101dca6d7c6b4ea3#code#F4#L46"
            },
            {
              "text": "ForcedWithdrawals.sol#L32 - Etherscan source code, forcedWithdrawalRequest function",
              "href": "https://etherscan.io/address/0xc43f5526124877f9125e3b48101dca6d7c6b4ea3#code#F6#L32"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/withdrawal-perpetual.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"
              },
              {
                "text": "Forced Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"
              },
              {
                "text": "Forced Trade - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"
              },
              {
                "text": "Forced Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"
              },
              {
                "text": "Forced Trade - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"
              }
            ]
          }
        ]
      },
      "stage": {
        "stage": "Stage 1",
        "missing": {
          "nextStage": "Stage 2",
          "requirements": [
            "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/l2beat/starkex-explorer)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": true,
                "description": "In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkPerpetual",
            "address": "0xD54f502e184B6B739d7D27a6410a67dc462D69c8",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": [
                "0xFCAac0F14deA11eDe11Afcb875f29130e1ad5ec0",
                "0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE"
              ],
              "implementations": [
                "0x2C0df87E073755139101b35c0A51e065291cc2d3",
                "0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5",
                "0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545",
                "0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0",
                "0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3"
              ],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Main contract of dYdX exchange. Updates dYdX state and verifies its integrity using STARK Verifier. Allows users to deposit and withdraw tokens via normal and emergency modes.",
            "upgradableBy": ["Rollup Admin"],
            "upgradeDelay": "9d or 2d if overridden by Priority Controller"
          },
          {
            "name": "FinalizableGpsFactAdapter",
            "address": "0xF23754231BC4cE8C8E92C3bADfB37d922d46053C",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract serving as an adapter for STARK Verifier. It holds the address of the STARK Verifier and CAIRO program hash needed for verification.",
            "upgradeConsiderations": "This contract is not upgradeable and the program hash cannot be updated because it is in the finalized state."
          },
          {
            "name": "GpsStatementVerifier",
            "address": "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "STARK Verifier. In contrast to other StarkWare systems which use common SHARP Prover, dYdX uses separate Prover/Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xEfbCcE4659db72eC6897F46783303708cf9ACef8",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract storing CAIRO Program Output, in case of dYdX, it stores state diffs of dYdX Exchange."
          },
          {
            "name": "FriStatementContract",
            "address": "0xf6b83CcaDeee478FC372AF6ca7069b14FBc5E1B1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x0d62bac5c346c78DC1b27107CAbC5F4DE057a830",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x1dd8945200f5a09D6Fe0ed68494c2ac41cd02E2D",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "PerpetualEscapeVerifier",
            "address": "0x626211C1e9BC633f4D342Af99f4E8bc93f11F3DD",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract responsible for validating force withdrawal requests."
          },
          {
            "name": "MerkleDistributor",
            "address": "0x01d3348601968aB85b4bb028979006eac235a588",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6C5cd3aD7A16Ae207D221908E6b997d9B0DcD7b0"],
              "implementations": ["0xFE1d5439625a9524a80F66670733129E80E0C112"]
            },
            "chain": "ethereum",
            "description": "The Merkle Distributor smart contract distributes DYDX token rewards according to a Merkle tree of balances.",
            "upgradableBy": ["Treasury Admin"],
            "upgradeDelay": "2d",
            "upgradeConsiderations": "This contract can be paused by the Merkle Pauser with 0s delay."
          },
          {
            "name": "LiquidityStaking",
            "address": "0x5Aa653A076c1dbB47cec8C1B4d152444CAD91941",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xAc5D8bCD13da463bea96c75f9085c4e40037F790"],
              "implementations": ["0xBE607a58206180fef691bf1B5aE9670174284388"]
            },
            "chain": "ethereum",
            "description": "The Liquidity Module is a collection of smart contracts for staking and borrowing, which incentivize the allocation of USDC funds for market making purposes on the dYdX layer 2 exchange.",
            "upgradableBy": ["Treasury Admin"],
            "upgradeDelay": "2d"
          },
          {
            "name": "SafetyModule",
            "address": "0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6aaD0BCfbD91963Cf2c8FB042091fd411FB05b3C"],
              "implementations": ["0x31D76F5Db8F40D28886Bf00F3be5F157472Bf77A"]
            },
            "chain": "ethereum",
            "description": "The Safety Module is a staking pool that offers DYDX rewards to users who stake DYDX towards the security of the Protocol.",
            "upgradableBy": ["Safety Module Admin"],
            "upgradeDelay": "7d"
          },
          {
            "name": "DydxGovernor",
            "address": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract storing dYdX Governance logic."
          },
          {
            "name": "GovernanceStrategyV2",
            "address": "0xc2f5F3505910Da80F0592a3Cc023881C50b16505",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract storing logic for votes counting in dYdX Governance.",
            "upgradeConsiderations": "This contract is not upgradeable, although the address of the GovernanceStrategyV2 can be changed by the owner of DydxGovernor contract."
          },
          {
            "name": "DydxToken",
            "address": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Token used by the dYdX Governance for voting."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 9d delay on code upgrades.The delay can be decreased by the Priority Controller to 2d."
          }
        ]
      },
      "permissions": [
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0x8129b737912e17212C8693B781928f5D0303390a",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update state of the rollup. When Operator is down the state cannot be updated."
        },
        {
          "name": "Rollup Admin",
          "accounts": [
            {
              "address": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
              "type": "Contract"
            }
          ],
          "description": "Controlled by dYdX Governance. Defines rules of governance via the dYdX token. Can upgrade implementation of the rollup, potentially gaining access to all funds stored in the bridge. Currently there is 9d delay before the upgrade.",
          "references": [
            {
              "text": "Rollup Admin documentation",
              "href": "https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#long-timelock-executor"
            }
          ]
        },
        {
          "name": "Rollup Priority Controller",
          "accounts": [
            {
              "address": "0xDC7eBbc857Ad2d276c387100dB67c1041dA0B2c0",
              "type": "EOA"
            }
          ],
          "description": "Can decrease the delay required for the Rollup upgrade to 2d.",
          "references": [
            {
              "text": "dYdX governance documentation",
              "href": "https://docs.dydx.community/dydx-governance/"
            },
            {
              "text": "Priority Controller documentation",
              "href": "https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#long-timelock-executor"
            }
          ]
        },
        {
          "name": "Treasury Admin",
          "accounts": [
            {
              "address": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
              "type": "Contract"
            }
          ],
          "description": "Controlled by dYdX Governance. Owner of dYdX token. Can upgrade Treasury, Liquidity Module and Merkle Distributor. Currently there is 2d delay before the upgrade.",
          "references": [
            {
              "text": "Treasury Admin documentation",
              "href": "https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#long-timelock-executor"
            }
          ]
        },
        {
          "name": "Safety Module Admin",
          "accounts": [
            {
              "address": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
              "type": "Contract"
            }
          ],
          "description": "Controlled by dYdX Governance. Has the ability to update Governance Strategy resulting in different logic of votes counting. Can upgrade Safety Module. Currently there is 7d delay before the upgrade.",
          "references": [
            {
              "text": "Safety Module Admin",
              "href": "https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#long-timelock-executor"
            }
          ]
        },
        {
          "name": "Merkle Pauser",
          "accounts": [
            {
              "address": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
              "type": "Contract"
            }
          ],
          "description": "Controlled by dYdX Governance. The Merkle-pauser executor can freeze the Merkle root, which is updated periodically with each user cumulative reward balance, in case the proposed root is incorrect or malicious. It can also veto forced trade requests by any of the stark proxy contracts.Currently there is 0s delay before the upgrade.",
          "references": [
            {
              "text": "Merkle Pauser documentation",
              "href": "https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#merkle-pauser-executor"
            }
          ]
        }
      ],
      "stateDerivation": {
        "nodeSoftware": "State can be independently derived from data (state updates) published on Ethereum by running an open-source [StarkEx Explorer](https://github.com/l2beat/starkex-explorer). The explorer, once fully synced, provides UI interface to perform forced actions, trigger rollup freeze and withdraw funds using escape hatch.",
        "compressionScheme": "No compression is used, state updates and other metadata are simply serialized for L1",
        "genesisState": "There is no genesis file for dYdX. By default, all accounts were empty at the beginning.",
        "dataFormat": "dYdX doesn't publish transactions. Balances of user positions are stored in a Merkle Tree and updates to that tree are published on Ethereum, together with Merkle Root and a ZK proof. Deserialization of that data is implemented [here](https://github.com/l2beat/starkex-explorer/blob/59e5c744cd3a1103c01893881a40492a817f13bd/packages/encoding/src/decoding/decodeOnChainData.ts#L6). Generating Merkle Proof is implemented [here](https://github.com/l2beat/starkex-explorer/blob/d957fe5ed3b8f6590a84507655eb76c7b2876e67/packages/state/src/MerkleTree.ts#L92)."
      },
      "milestones": [
        {
          "name": "Public launch",
          "link": "https://dydx.exchange/blog/public",
          "date": "2021-04-06T00:00:00Z",
          "description": "Layer 2 cross-margined Perpetuals are now live in production for all traders.",
          "type": "general"
        },
        {
          "name": "dYdX Foundation",
          "link": "https://dydx.exchange/blog/introducing-dydx-foundation",
          "date": "2021-08-03T00:00:00Z",
          "description": "Independent foundation was created to participate in the Protocol governance.",
          "type": "general"
        },
        {
          "name": "dYdX v4 announcement",
          "link": "https://dydx.exchange/blog/dydx-chain",
          "date": "2022-06-22T00:00:00Z",
          "description": "dYdX V4 will be developed as a standalone blockchain based on the Cosmos SDK.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How does escape hatch work?",
          "url": "https://twitter.com/bkiepuszewski/status/1469201939049103360",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "edgeless",
      "createdAt": "1712313901",
      "contracts": {
        "addresses": [
          {
            "name": "EdgelessDeposit",
            "address": "0x7E0bc314535f430122caFEF18eAbd508d62934bf",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa5f13fbc57f14Bf322C900Cae0F67b4819364281"],
              "implementations": ["0xE4E2BBaCAb9bE9258D7cf3eF9D993cfA81a55356"]
            },
            "chain": "ethereum",
            "description": "Receives deposits and issues ewETH tokens. Funds are forwarded to the StakingManger contract.",
            "upgradableBy": ["StrategyManager"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "StakingManager",
            "address": "0x1e6d08769be5Dc83d38C64C5776305Ad6F01c227",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa5f13fbc57f14Bf322C900Cae0F67b4819364281"],
              "implementations": ["0x121892C0620E349723dfd3E1535cD668CD414dfD"]
            },
            "chain": "ethereum",
            "description": "Manages strategies to be used with funds forwarded from the EdgelessDeposit contract.",
            "upgradableBy": ["StrategyManager"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "RenzoStrategy",
            "address": "0xBCc1Ceb75De4BBb75918627E7CB301DF9Ccc8aF9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa5f13fbc57f14Bf322C900Cae0F67b4819364281"],
              "implementations": ["0xfF03657dCe3c3EAE996Bf82fD41572D47D049747"]
            },
            "chain": "ethereum",
            "description": "Deposits funds into the Renzo protocol.",
            "upgradableBy": ["StrategyManager"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "EthStrategy",
            "address": "0xbD95aa0f68B95e6C01d02F1a36D8fde29C6C8e7b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa5f13fbc57f14Bf322C900Cae0F67b4819364281"],
              "implementations": ["0xaD69577988FD1fF2F265C0B46E45fbC722F4Cf4c"]
            },
            "chain": "ethereum",
            "description": "Deposits funds into the Lido protocol.",
            "upgradableBy": ["StrategyManager"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "RollupProxy",
            "address": "0x890025891508a463A636f81D2f532a97210240de",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xc213d433802ea473e23623476b26FB12e9B4eFe6"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x6B595398152999bBc759D5D8ed8169793F915488",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48E84C45fE99859B1D72FA56Ce5D3c76FF2F7006"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xFfbf2b49524e09B1F1fBcA707B830e79c68c2086",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48E84C45fE99859B1D72FA56Ce5D3c76FF2F7006"],
              "implementations": ["0x873484Ba63353C8b71210ce123B465512d408B27"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xf51551afD112a50Fc5EDa0454111078fE6E6096E",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48E84C45fE99859B1D72FA56Ce5D3c76FF2F7006"],
              "implementations": ["0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x5e8749760c5051fF80b73319cCf4d05ef9959563",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48E84C45fE99859B1D72FA56Ce5D3c76FF2F7006"],
              "implementations": ["0x19431dc37098877486532250FB3158140717C00C"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xc213d433802ea473e23623476b26FB12e9B4eFe6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48E84C45fE99859B1D72FA56Ce5D3c76FF2F7006"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x893057442A952E3254CA53d007AD6BBB502f557e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48E84C45fE99859B1D72FA56Ce5D3c76FF2F7006"],
              "implementations": ["0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x09824fe72BFF474d16D9c2774432E381BBD60662",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xDf94F0474F205D086dbc2e66D69a856FCf520622",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x873484Ba63353C8b71210ce123B465512d408B27#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x4e4aC6F04106964b5B69FDA5EcC207295bCae81f",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x282e630b33B684DF61e3459316BAe4f27a28dE29",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "OrbitProxyAdmin",
          "accounts": [
            {
              "address": "0x48E84C45fE99859B1D72FA56Ce5D3c76FF2F7006",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Admin of main Orbit contracts. Controlled by the UpgradeExecutor."
        },
        {
          "name": "ExecutorMultisig",
          "description": "This is a Gnosis Safe with 3 / 4 threshold.  Multisig that can execute upgrades on the main Orbit contracts via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0x4dE424B0BDe70504Ad7b3c644EaAd052F4D993b4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0xA61A62352FAF6AD883A8D36975cf39cDEB477D25",
              "type": "EOA"
            },
            {
              "address": "0xC616EA9D34ec12D6879A9DE7910CA9Bf5f28C9E7",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "StrategiesProxyAdmin",
          "accounts": [
            {
              "address": "0xa5f13fbc57f14Bf322C900Cae0F67b4819364281",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Admin of the strategies contracts."
        },
        {
          "name": "StrategyManager",
          "accounts": [
            {
              "address": "0xcB58d1142e53e37aDE44E1F125248FbfAc99352A",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade the StakingManager, EdgelessDeposit, RenzoStrategy and EthStrategy contracts via the StrategiesProxyAdmin, including adding and removing strategies."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": null,
      "knowledgeNuggets": null,
      "badges": ["CustomDA", "Caldera", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Edgeless",
        "slug": "edgeless",
        "description": "Edgeless is an Orbit stack general-purpose Optimium without application layer fees. It uses ewETH as the native token, which is a wrapped version of underlying investment strategies.",
        "links": {
          "websites": ["https://edgeless.network/"],
          "apps": ["https://bridge.edgeless.network/"],
          "documentation": ["https://docs.edgeless.network/"],
          "explorers": ["https://explorer.edgeless.network/"],
          "repositories": ["https://github.com/edgelessNetwork"],
          "socialMedia": [
            "https://twitter.com/EdgelessNetwork",
            "https://discord.gg/edgeless",
            "https://paragraph.xyz/@edgeless",
            "https://t.me/+f8yhoOg-4cNhYWEx"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x6B595398152999bBc759D5D8ed8169793F915488",
            "newVersion": true,
            "sinceTimestamp": "1711069223",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x6B595398152999bBc759D5D8ed8169793F915488",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x48E84C45fE99859B1D72FA56Ce5D3c76FF2F7006"],
                "implementations": [
                  "0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xbD95aa0f68B95e6C01d02F1a36D8fde29C6C8e7b",
            "sinceTimestamp": "1711057199",
            "tokens": ["ETH", "stETH"],
            "chain": "ethereum"
          },
          {
            "address": "0xBCc1Ceb75De4BBb75918627E7CB301DF9Ccc8aF9",
            "sinceTimestamp": "1713942971",
            "tokens": ["ETH", "ezETH"],
            "chain": "ethereum"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.edgeless.network/http",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "ethernity",
      "createdAt": "1718182472",
      "display": {
        "name": "Ethernity",
        "slug": "ethernity",
        "description": "Ethernity is an Ethereum L2 leveraging the OP stack and focusing on entertainment.",
        "purposes": ["Universal", "AI"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://ethernity.io/"],
          "apps": ["https://app.ethernity.io/"],
          "documentation": [
            "https://drive.google.com/file/d/1o74ZBmYMIUa8QUwvLOK7KhoXP9-LCsPf/view"
          ],
          "explorers": ["https://ethplorer.io/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/EthernityChain",
            "https://ethernitychain.medium.com/"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "everclear",
      "createdAt": "1717512064",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0xc6CAd31D83E33Fc8fBc855f36ef9Cb2fCE070f5C",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xb0d7A2d1eBA69dbcff839037D060E4f8B5c4431B"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x4eb4fB614e1aa3634513319F4Ec7334bC4321356",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x7B0517E0104dB60198f9d573C0aB8d480207827E",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],
              "implementations": ["0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x97FdC935c5E25613AA13a054C7Aa71cf751DB495",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],
              "implementations": ["0x1162084C3C6575121146582Db5BE43189e8CEe6b"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x38fB6Ad5908f61dC0bCeffbeDf4Bf781CbeA22Aa",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xb0d7A2d1eBA69dbcff839037D060E4f8B5c4431B",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0xCdA94226d0BAFA963D6011fb2A06dEc7333646e8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],
              "implementations": ["0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x57EA090Ac0554d174AE0e2855B460e84A1A7C221",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x17e7F68ce50A77e55C7834ddF31AEf86403B8010",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x72B166070781a552D7b95a907eF59ca05d3D5a62",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 2.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 4d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x54F9375F5a6CEA1eECc561FC7f309aD8Cb633Ef9",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xA7275dd18Fe2BFd9A85c8BCd197ea3dE9a6cA6AA",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "AdminEOA",
          "accounts": [
            {
              "address": "0x98a426C8ED821cAaef1b4BF7D29b514dcef970C0",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade any project implementation via UpgradeExecutor, potentially gaining access to all funds."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Mainnet Beta launch",
          "link": "https://blog.everclear.org/everclears-mainnet-is-live-24dedd572d56?gi=2c5d29c1443a",
          "date": "2024-09-18T00:00:00Z",
          "description": "Everclear Hub, the first Clearing Layer, is Live on Mainnet Beta.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": null,
      "badges": ["Gelato", "DAC", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Interoperability"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Everclear Hub",
        "slug": "everclear",
        "redWarning": "Critical contracts can be upgraded by an EOA which could result in the loss of all funds.",
        "description": "Everclear Hub is an AnyTrust Optimium on Ethereum, built on the Orbit stack. It is used as a liquidity hub (clearing layer) to solve the liquidity fragmentation between modular scaling solutions.",
        "links": {
          "websites": ["https://everclear.org"],
          "apps": ["https://bridge.gelato.network/bridge/everclear-mainnet"],
          "documentation": ["https://docs.everclear.org"],
          "explorers": ["https://scan.everclear.org/"],
          "repositories": ["https://github.com/connext"],
          "socialMedia": [
            "https://x.com/everclearorg",
            "https://discord.gg/everclear",
            "https://blog.everclear.org/"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -345600
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 4d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 345600
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["NEXT"],
        "escrows": [
          {
            "address": "0x4eb4fB614e1aa3634513319F4Ec7334bC4321356",
            "newVersion": true,
            "sinceTimestamp": "1725539051",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x4eb4fB614e1aa3634513319F4Ec7334bC4321356",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x305042e5A81424f2f824f93Ff2195b5712D7dE14"],
                "implementations": [
                  "0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.everclear.raas.gelato.cloud",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "fhenix",
      "createdAt": "1719225560",
      "display": {
        "name": "Fhenix",
        "slug": "fhenix",
        "description": "Fhenix is Fully Homomorphic Encryption rollup, build on top of Arbitrum Stack.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://fhenix.io/"],
          "apps": [],
          "documentation": [
            "https://fhenix.io/fhe-rollups-scaling-confidential-smart-contracts-on-ethereum-and-beyond-whitepaper/"
          ],
          "explorers": [],
          "repositories": ["https://github.com/orgs/FhenixProtocol/"],
          "socialMedia": [
            "https://x.com/FhenixIO",
            "https://discord.com/invite/FuVgxrvJMY"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "fluent",
      "createdAt": "1721218971",
      "display": {
        "name": "Fluent",
        "slug": "fluent",
        "description": "Fluent is an Ethereum L2 that blends Wasm, EVM and SVM-based smart contracts into a unified execution environment.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://fluentlabs.xyz/"],
          "apps": [],
          "documentation": ["https://docs.fluentlabs.xyz/learn"],
          "explorers": [],
          "repositories": ["https://github.com/fluentlabs-xyz"],
          "socialMedia": [
            "https://x.com/fluentxyz",
            "https://linkedin.com/company/fluentxyz",
            "https://discord.com/invite/fluentlabs"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "form",
      "createdAt": "1717490033",
      "display": {
        "name": "Form",
        "slug": "form",
        "description": "Form is an Optimistic Rollup utilizing the OP Stack. The Form L2 is focused on bringing mass adoption and interoperability to the SocialFi category.",
        "purposes": ["Universal", "Social"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://form.network"],
          "apps": ["https://bridge.form.network"],
          "documentation": ["https://docs.form.network"],
          "explorers": ["https://explorer.form.network"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/0xform",
            "https://discord.com/invite/formnetwork",
            "https://t.me/formnetwork"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "frame",
      "createdAt": "1695904849",
      "display": {
        "name": "Frame",
        "slug": "frame",
        "description": "Frame is an Ethereum L2 designed to scale NFT adoption across the Ethereum ecosystem utilizing Arbitrum Nitro technology.",
        "purposes": ["Universal", "NFT"],
        "category": "Optimistic Rollup",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://frame.xyz/"],
          "apps": [],
          "documentation": ["https://docs.frame.xyz/"],
          "explorers": ["https://explorer.testnet.frame.xyz/"],
          "repositories": ["https://github.com/frame-network"],
          "socialMedia": [
            "https://twitter.com/frame_xyz",
            "https://discord.gg/framexyz"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "fraxtal",
      "createdAt": "1708511622",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x6f3CcC8C9DAf8B9b39aDe481213Ff7A626a42B65#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data required to compute fraud proof is not published on chain, and currently not publicly accessible",
          "description": "Fraxtal uses a separate data availability module developed by the Frax Core Team. Data is posted off chain, and only hashes of blob data is published on an on chain inbox.",
          "references": [
            {
              "text": "Fraxtal documentation",
              "href": "https://docs.frax.com/fraxtal"
            },
            {
              "text": "On-Chain Inbox",
              "href": "https://etherscan.io/address/0xff000000000000000000000000000000000420fc"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xfF000000000000000000000000000000000420fC"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x47Ec03B67ba4f3C71a4320D2947f2173E0B45a23#code"
            }
          ],
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the data is not made available on the external provider.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable or malicious transaction root.",
              "isCritical": true
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x6f3CcC8C9DAf8B9b39aDe481213Ff7A626a42B65#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x6f3CcC8C9DAf8B9b39aDe481213Ff7A626a42B65#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x47Ec03B67ba4f3C71a4320D2947f2173E0B45a23#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x47Ec03B67ba4f3C71a4320D2947f2173E0B45a23#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x47Ec03B67ba4f3C71a4320D2947f2173E0B45a23#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x6f3CcC8C9DAf8B9b39aDe481213Ff7A626a42B65#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xe0d7755252873c4eF5788f7f45764E0e17610508",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xe0d7755252873c4eF5788f7f45764E0e17610508",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0xFb90465f3064fF63FC460F01A6307eC73d64bc50",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x6017f75108f251a488B045A7ce2a7C15b179d1f2",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "FraxtalTimelockMultisig",
          "description": "* This is a Gnosis Safe with 3 / 5 threshold. \n* Can act on behalf of Timelock.\n* Can change configuration of frxETH (acting via Timelock with 2d delay) - can add and remove frxETH minters and set a new timelock address.\n* Can change configuration of frxETHMinter (acting via Timelock with 2d delay) - can withdraw all escrowed ETH, pause the contract and set user fees for minting frxETH (`submit()`).\n",
          "accounts": [
            {
              "address": "0xB1748C79709f4Ba2Dd82834B8c82D4a505003f27",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6933BCC3e96f1C4d2cb73Cb391d854b18Ab7A4F2",
              "type": "EOA"
            },
            {
              "address": "0xcbc616D595D38483e6AdC45C7E426f44bF230928",
              "type": "EOA"
            },
            {
              "address": "0x17e06ce6914E3969f7BD37D8b2a563890cA1c96e",
              "type": "EOA"
            },
            {
              "address": "0xc8dE9f45601DA8C76158b8CAF3E56E8A037F2228",
              "type": "EOA"
            },
            {
              "address": "0x05FB8eC3C41da95b26fCb85503DaF8B89B89A935",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "frxETHMinter",
          "accounts": [
            {
              "address": "0xbAFA44EFE7901E04E39Dad13167D089C559c1138",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "* Can change configuration of frxETH - can mint frxETH tokens.\n* Accepts user-supplied ETH and converts it to frxETH.\n"
        },
        {
          "name": "FraxtalMultisig",
          "description": "* This is a Gnosis Safe with 3 / 5 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Is a Guardian.\n* Can upgrade implementation of OptimismMintablePermitERC20Factory, SystemConfig, OptimismPortal, SuperchainConfig, L2OutputOracle, L1ERC721Bridge (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0xe0d7755252873c4eF5788f7f45764E0e17610508",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x8da4E997e051605878c9C0B793c496556EACC2C0",
              "type": "EOA"
            },
            {
              "address": "0x6e74053a3798e0fC9a9775F7995316b27f21c4D2",
              "type": "EOA"
            },
            {
              "address": "0x6933BCC3e96f1C4d2cb73Cb391d854b18Ab7A4F2",
              "type": "EOA"
            },
            {
              "address": "0x17e06ce6914E3969f7BD37D8b2a563890cA1c96e",
              "type": "EOA"
            },
            {
              "address": "0xcbc616D595D38483e6AdC45C7E426f44bF230928",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "frxETHMultisig",
          "description": "This is a Gnosis Safe with 4 / 7 threshold. ",
          "accounts": [
            {
              "address": "0x8306300ffd616049FD7e4b0354a64Da835c1A81C",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x381e2495e683868F693AA5B1414F712f21d34b40",
              "type": "EOA"
            },
            {
              "address": "0xc8dE9f45601DA8C76158b8CAF3E56E8A037F2228",
              "type": "EOA"
            },
            {
              "address": "0xcbc616D595D38483e6AdC45C7E426f44bF230928",
              "type": "EOA"
            },
            {
              "address": "0xc28339c70054bC22255A74E927a0B9e9A475F224",
              "type": "EOA"
            },
            {
              "address": "0x6933BCC3e96f1C4d2cb73Cb391d854b18Ab7A4F2",
              "type": "EOA"
            },
            {
              "address": "0x8da4E997e051605878c9C0B793c496556EACC2C0",
              "type": "EOA"
            },
            {
              "address": "0x6e74053a3798e0fC9a9775F7995316b27f21c4D2",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x0000000000000000000000000000000000000000",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Can change configuration of frxETH - can mint frxETH tokens."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x6017f75108f251a488B045A7ce2a7C15b179d1f2",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0xFb90465f3064fF63FC460F01A6307eC73d64bc50",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "OptimismMintablePermitERC20Factory",
            "address": "0x11FE3be54aC01C13Dd985cE2BdD10eD77e1376cc",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
              "implementations": ["0x6cA98f43719231d38F6426DB64C7F3D5C7CE7876"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["FraxtalMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x126bcc31Bc076B3d515f60FBC81FddE0B0d542Ed",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xC6e4ECE5576dC96846bb11eD8910f3dF3CE516b8"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "ProxyAdmin",
            "address": "0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of OptimismMintablePermitERC20Factory, SystemConfig, OptimismPortal, SuperchainConfig, L2OutputOracle, L1ERC721Bridge.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "SystemConfig",
            "address": "0x34a9f273cbD847d49c3De015FC26c3E66825f8b2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
              "implementations": ["0x4D7A1a16d0DA89B50FBd8b524508FC393A6Dc367"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["FraxtalMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x34C0bD5877A5Ee7099D0f5688D65F4bB9158BDE2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
              "implementations": ["0x30Cd695249394eED44C576f2caEC5304be6455F9"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["FraxtalMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x36cb65c1967A0Fb0EEE11569C51C2f2aA1Ca6f6D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
              "implementations": ["0x47Ec03B67ba4f3C71a4320D2947f2173E0B45a23"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["FraxtalMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "frxETH",
            "address": "0x5E8422345238F34275888049021821E8E08CAa1f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "frxETH token contract. Fraxtal uses Frax Ether as the designated gas token, allowing users to pay for blockspace with frxETH."
          },
          {
            "name": "SuperchainConfig",
            "address": "0x61ca43CB037aC9181d8Fa5CD0073dC314065Ccc4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
              "implementations": ["0x0d9C39c64CF8eDA1EdFeBD78AFa895bAA797eFc4"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["FraxtalMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x66CC916Ed5C6C2FA97014f7D1cD141528Ae171e4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
              "implementations": ["0x6f3CcC8C9DAf8B9b39aDe481213Ff7A626a42B65"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["FraxtalMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "Timelock",
            "address": "0x8412ebf45bAC1B340BbE8F318b928C466c4E39CA",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure frxETH  - can add and remove frxETH minters and set a new timelock address.\n* Can be used to configure frxETHMinter  - can withdraw all escrowed ETH, pause the contract and set user fees for minting frxETH (`submit()`).\n* Allows for time-delayed execution of transactions. Current delay is 2d.\n"
          },
          {
            "name": "AddressManager",
            "address": "0x8c5D64d10394cFa070066e70Ec19E67398b4dABE",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0xa9B5Fb84B7aeAF0D51C95DB04a76B1D4738D0eC5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
              "implementations": ["0x7eE1637C33Ed0DFEE6403f3301B6d404106018e4"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["FraxtalMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "sfrxETH",
            "address": "0xac3E018457B222d93114458476f3E3416Abbe38F",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Vault token contract (ERC-4626) for staked frxETH. The smart contract receives frxETH tokens and mints sfrxETH tokens."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["CustomDA", "Superchain", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "bedrock-superchain",
        "name": "Fraxtal",
        "slug": "fraxtal",
        "description": "Fraxtal is an EVM equivalent Optimium utilizing the OP stack as its smart contract platform and execution environment.",
        "links": {
          "websites": ["https://frax.com/"],
          "apps": ["https://app.frax.finance/"],
          "documentation": ["https://docs.frax.com/"],
          "explorers": ["https://fraxscan.com/"],
          "repositories": ["https://github.com/FraxFinance"],
          "socialMedia": [
            "https://discord.com/invite/UJVtDTFRaA",
            "https://twitter.com/fraxfinance",
            "https://t.me/fraxfinance"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": {
        "name": "fraxtal",
        "chainId": 252,
        "explorerUrl": "https://fraxscan.com/",
        "explorerApi": {
          "url": "https://api.fraxscan.com/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1706810713",
        "coingeckoPlatform": "fraxtal"
      },
      "config": {
        "associatedTokens": ["FXS", "FPIS"],
        "escrows": [
          {
            "address": "0x36cb65c1967A0Fb0EEE11569C51C2f2aA1Ca6f6D",
            "newVersion": true,
            "sinceTimestamp": "1706811599",
            "tokens": ["ETH", "frxETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x36cb65c1967A0Fb0EEE11569C51C2f2aA1Ca6f6D",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
                "implementations": [
                  "0x47Ec03B67ba4f3C71a4320D2947f2173E0B45a23"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH, frxETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x34C0bD5877A5Ee7099D0f5688D65F4bB9158BDE2",
            "newVersion": true,
            "sinceTimestamp": "1706811599",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x34C0bD5877A5Ee7099D0f5688D65F4bB9158BDE2",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x13Fe62cB24aEa5afd179F20D362c056c3881ABcA"],
                "implementations": [
                  "0x30Cd695249394eED44C576f2caEC5304be6455F9"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.frax.com",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "FraxtalDA",
          "sentiment": "warning",
          "description": "The data is posted to FraxtalDA which is a separate data availability module developed by the Frax Core Team. Data is posted off chain, and only hashes of blob data are published on an on chain inbox."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely fully on data that is NOT published on chain. Fraxtal uses a separate data availability module developed by the Frax Core Team, and data availability attestations are not published on chain.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "id": "fuel",
      "createdAt": "1729589660",
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "display": {
        "name": "Fuel Ignition",
        "slug": "fuel",
        "description": "Fuel Ignition is a high-performance Ethereum L2 built on FuelVM and the Sway language.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://fuel.network/"],
          "apps": [
            "https://app.fuel.network/ecosystem",
            "https://app.fuel.network/bridge"
          ],
          "documentation": ["https://docs.fuel.network/"],
          "explorers": ["https://app.fuel.network/"],
          "repositories": ["https://github.com/FuelLabs/"],
          "socialMedia": [
            "https://twitter.com/fuel_network",
            "https://discord.com/invite/fuelnetwork",
            "https://forum.fuel.network/",
            "https://t.me/fuelcommunity",
            "https://youtube.com/channel/UCam2Sj3SvFSAIfDbP-4jWZQ"
          ]
        }
      },
      "badges": ["FuelVM", "EthereumBlobs"],
      "type": "layer2",
      "config": {
        "escrows": [
          {
            "address": "0xAEB0c00D0125A8a788956ade4f4F12Ead9f65DDf",
            "sinceTimestamp": "1724767871",
            "tokens": ["ETH"],
            "chain": "ethereum"
          },
          {
            "address": "0xa4cA04d02bfdC3A2DF56B9b6994520E69dF43F67",
            "sinceTimestamp": "1725464663",
            "tokens": "*",
            "chain": "ethereum"
          }
        ],
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0xEA0337EFC12e98AB118948dA570C07691E8E4b37",
              "to": "0xEA0337EFC12e98AB118948dA570C07691E8E4b37",
              "sinceTimestamp": "1728323243"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xf3D20Db1D16A4D0ad2f280A5e594FF3c7790f130",
              "selector": "0xe900ead8",
              "functionSignature": "function commit(bytes32 blockHash, uint256 commitHeight)",
              "sinceTimestamp": "1725061115"
            }
          }
        ]
      },
      "riskView": {
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1.",
          "sentiment": "good",
          "definingMetric": null
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.",
            "The Security Council is not properly set up."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": false,
                "description": "The Security Council is not properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are in development",
          "description": "Ultimately, Fuel will use one round fraud proofs with single round performed via a RISC-V-based zkVM. Currently, there is a 7d challenge period.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system by the proposer.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "FuelChainState.sol - Etherscan source code, commit function",
              "href": "https://etherscan.io/address/0xf3D20Db1D16A4D0ad2f280A5e594FF3c7790f130#code"
            },
            {
              "text": "Fuel docs - Hybrid proving",
              "href": "https://docs.fuel.network/docs/fuel-book/the-architecture/fuel-and-ethereum/#hybrid-proving"
            }
          ]
        },
        "dataAvailability": {
          "name": "All transaction data is recorded on chain",
          "description": "All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.",
          "risks": [],
          "references": [
            {
              "text": "Sequencer - Etherscan address",
              "href": "https://etherscan.io/address/0xEA0337EFC12e98AB118948dA570C07691E8E4b37"
            },
            {
              "text": "Fuel docs - Blobs",
              "href": "https://docs.fuel.network/docs/fuel-book/the-architecture/fuel-and-ethereum/#blobs"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "FuelMessagePortalV3.sol - Etherscan source code, sendMessage function",
              "href": "https://etherscan.io/address/0xAEB0c00D0125A8a788956ade4f4F12Ead9f65DDf#code"
            },
            {
              "text": "Fuel docs - L1->L2 messaging",
              "href": "https://docs.fuel.network/docs/fuel-book/the-architecture/fuel-and-ethereum/#l1--l2-messaging"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": []
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "Fuel operates via the FuelVM and the Sway language",
            "description": "The FuelVM makes use of the UTXO model and a register-based design to enable parallel transaction processing. The language used is Sway and it does not support Solidity contracts.",
            "references": [
              {
                "text": "Fuel docs - FuelVM",
                "href": "https://docs.fuel.network/docs/fuel-book/the-architecture/the-fuelvm/#the-fuelvm"
              }
            ],
            "risks": []
          }
        ]
      },
      "permissions": [
        {
          "name": "ERC20Gateway pausers",
          "description": "Whitelisted addresses that can pause the ERC20Gateway.",
          "accounts": [
            {
              "address": "0xE7DCFE1B21D4b9899A80Dc67847e03830a88585e",
              "type": "EOA"
            },
            {
              "address": "0x32da601374b38154f05904B16F44A1911Aa6f314",
              "type": "MultiSig"
            },
            {
              "address": "0x958470a2ADe72b7a01A2e160F3286767b9623Ad7",
              "type": "EOA"
            },
            {
              "address": "0x81ACA96D4Ae0932d2F3463a043392efcCB1F05b6",
              "type": "EOA"
            },
            {
              "address": "0x796C3f536C6bf5CB7661C9A0570da0e1ECD303Dd",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0xC8Bd2Ead61e54C53C5A1836352c29F10383FBad2",
              "type": "EOA"
            },
            {
              "address": "0x45aa9fF818Ffaca57CA31b1C624b2a8CBF5B417e",
              "type": "EOA"
            },
            {
              "address": "0xf88b0247e611eE5af8Cf98f5303769Cba8e7177C",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FuelMessagePortal pausers",
          "description": "Whitelisted addresses that can pause the FuelMessagePortal and blacklist L2->L1 messages.",
          "accounts": [
            {
              "address": "0xE7DCFE1B21D4b9899A80Dc67847e03830a88585e",
              "type": "EOA"
            },
            {
              "address": "0xe7d56c84cEA9b58569fdfe8863085207F9a14881",
              "type": "EOA"
            },
            {
              "address": "0x32da601374b38154f05904B16F44A1911Aa6f314",
              "type": "MultiSig"
            },
            {
              "address": "0x958470a2ADe72b7a01A2e160F3286767b9623Ad7",
              "type": "EOA"
            },
            {
              "address": "0x81ACA96D4Ae0932d2F3463a043392efcCB1F05b6",
              "type": "EOA"
            },
            {
              "address": "0x796C3f536C6bf5CB7661C9A0570da0e1ECD303Dd",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0xC8Bd2Ead61e54C53C5A1836352c29F10383FBad2",
              "type": "EOA"
            },
            {
              "address": "0x45aa9fF818Ffaca57CA31b1C624b2a8CBF5B417e",
              "type": "EOA"
            },
            {
              "address": "0xf88b0247e611eE5af8Cf98f5303769Cba8e7177C",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FuelChainState pausers",
          "description": "Whitelisted addresses that can pause the FuelChainState.",
          "accounts": [
            {
              "address": "0xE7DCFE1B21D4b9899A80Dc67847e03830a88585e",
              "type": "EOA"
            },
            {
              "address": "0xe7d56c84cEA9b58569fdfe8863085207F9a14881",
              "type": "EOA"
            },
            {
              "address": "0x32da601374b38154f05904B16F44A1911Aa6f314",
              "type": "MultiSig"
            },
            {
              "address": "0x958470a2ADe72b7a01A2e160F3286767b9623Ad7",
              "type": "EOA"
            },
            {
              "address": "0x81ACA96D4Ae0932d2F3463a043392efcCB1F05b6",
              "type": "EOA"
            },
            {
              "address": "0x796C3f536C6bf5CB7661C9A0570da0e1ECD303Dd",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0xC8Bd2Ead61e54C53C5A1836352c29F10383FBad2",
              "type": "EOA"
            },
            {
              "address": "0x45aa9fF818Ffaca57CA31b1C624b2a8CBF5B417e",
              "type": "EOA"
            },
            {
              "address": "0xf88b0247e611eE5af8Cf98f5303769Cba8e7177C",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Sequencer",
          "description": "Permissioned address submitting tx data as blobs.",
          "accounts": [
            {
              "address": "0xEA0337EFC12e98AB118948dA570C07691E8E4b37",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Proposer",
          "description": "Permissioned address that can propose new state roots.",
          "accounts": [
            {
              "address": "0x83dC58504D1d2276Bc8D9Cf01d0B341D84A49cfF",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FuelMultisig",
          "description": "This is a Gnosis Safe with 10 / 13 threshold.  Can upgrade the FuelERC20Gateway, FuelMessagePortal and FuelChainState contracts, potentially gaining access to all funds. It can unpause contracts and remove L2->L1 messages from the blacklist. It can also limit the tokens that can be bridged to L2.",
          "accounts": [
            {
              "address": "0x32da601374b38154f05904B16F44A1911Aa6f314",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x7cdbF64f57f0D623D924d2b4c17664c1Cd9f93d4",
              "type": "Contract"
            },
            {
              "address": "0x8a34B78Feb23b97b5ccDf83D9aDC7669C34D346F",
              "type": "Contract"
            },
            {
              "address": "0xAA52e167e8Ad426054DCF0fd5BD5481348F4FfC8",
              "type": "Contract"
            },
            {
              "address": "0x76707a7F4b40ecFCc7431A3D7345Ef597ee7e306",
              "type": "Contract"
            },
            {
              "address": "0xd4c29D8ddC7D3E326030270f35d9FD4973AbBE09",
              "type": "Contract"
            },
            {
              "address": "0x5F5e0C904153789a9E978c286180b4191950d886",
              "type": "Contract"
            },
            {
              "address": "0x446f9d40cA491cf0788dacCAc4D16d5d8B4015Cc",
              "type": "Contract"
            },
            {
              "address": "0x515Fa9b26E195a043582377F51F9A9bAD2D10c7d",
              "type": "Contract"
            },
            {
              "address": "0x958470a2ADe72b7a01A2e160F3286767b9623Ad7",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0xC8Bd2Ead61e54C53C5A1836352c29F10383FBad2",
              "type": "EOA"
            },
            {
              "address": "0x81ACA96D4Ae0932d2F3463a043392efcCB1F05b6",
              "type": "EOA"
            },
            {
              "address": "0x796C3f536C6bf5CB7661C9A0570da0e1ECD303Dd",
              "type": "EOA"
            }
          ]
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "FuelERC20Gateway",
            "address": "0xa4cA04d02bfdC3A2DF56B9b6994520E69dF43F67",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0000000000000000000000000000000000000000"],
              "implementations": ["0xdE2D792ca3C4d02DE3CE1cD1456d8D0990cC3fab"]
            },
            "chain": "ethereum",
            "description": "Standard gateway to deposit and withdraw ERC20 tokens. It implements rate limits and a whitelist for tokens. The whitelist is currently active.",
            "upgradableBy": ["FuelMultisig"],
            "upgradeDelay": "None"
          },
          {
            "name": "FuelMessagePortal",
            "address": "0xAEB0c00D0125A8a788956ade4f4F12Ead9f65DDf",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0000000000000000000000000000000000000000"],
              "implementations": ["0x05f886DDeE0FE07496f6e38b0e140F8eF4655B16"]
            },
            "chain": "ethereum",
            "description": "Contract that allows to send and receive arbitrary messages to and from L2. It implements a max deposit limit for ETH, currently set to 19572.0 ETH, and rate limits withdrawals. Pausers are allowed to blacklist L2->L1 messages.",
            "upgradableBy": ["FuelMultisig"],
            "upgradeDelay": "None"
          },
          {
            "name": "FuelChainState",
            "address": "0xf3D20Db1D16A4D0ad2f280A5e594FF3c7790f130",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0000000000000000000000000000000000000000"],
              "implementations": ["0x725B2b1a15D818E1f25c68be77816802e6036559"]
            },
            "chain": "ethereum",
            "description": "Contract that allows state root submissions and settlement.",
            "upgradableBy": ["FuelMultisig"],
            "upgradeDelay": "None"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on upgrades.",
            "isCritical": true
          },
          {
            "category": "Funds can be frozen if",
            "text": "pausers blacklist L2->L1 messages.",
            "isCritical": true
          },
          {
            "category": "Funds can be frozen if",
            "text": "the limit of tokens that can be withdrawn is set too low."
          }
        ]
      },
      "milestones": [
        {
          "name": "Fuel Ignition Mainnet is Live",
          "date": "2024-10-16T00:00:00Z",
          "link": "https://x.com/fuel_network/status/1846536888003313786",
          "description": "Fuel Ignition announces its official launch.",
          "type": "general"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "fuelv1",
      "createdAt": "1623153328",
      "badges": ["AppChain", "EthereumCalldata"],
      "display": {
        "name": "Fuel v1",
        "slug": "fuelv1",
        "description": "Fuel v1 is the first Optimistic Rollup live on Ethereum, supporting payments.",
        "purposes": ["Payments"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://fuel.sh/"],
          "apps": [],
          "documentation": ["https://docs.fuel.sh/"],
          "explorers": ["https://mainnet.fuel.sh/network/"],
          "repositories": [
            "https://github.com/FuelLabs/fuel-core",
            "https://github.com/FuelLabs/fuels-rs",
            "https://github.com/FuelLabs/fuels-ts",
            "https://github.com/FuelLabs/fuel-v1-contracts"
          ],
          "socialMedia": [
            "https://discord.gg/xfpK4Pe",
            "https://twitter.com/fuellabs_",
            "https://linkedin.com/company/fuel-labs",
            "https://youtube.com/@fuelnetwork",
            "https://hey.xyz/u/fuelnetwork"
          ]
        }
      },
      "config": {
        "escrows": [
          {
            "address": "0x6880f6Fd960D1581C2730a451A22EED1081cfD72",
            "sinceTimestamp": "1612414780",
            "tokens": ["ETH", "DAI", "USDC", "USDT"],
            "chain": "ethereum"
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (1R)",
          "description": "Fraud proofs allow actors watching the chain to prove that the state is incorrect. Single round proofs (1R) only require a single transaction to resolve.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "∞",
          "description": "Users can exit funds at any time because contracts are not upgradeable.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1.",
          "sentiment": "good",
          "definingMetric": null
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can be a Proposer and propose new roots to the L1 bridge.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 2",
        "missing": null,
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/cartesi/rollups/tree/v1.0.2/offchain)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "There are at least 5 external actors who can submit fraud proofs."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": true,
                "description": "Fraud proof submission is open to everyone."
              },
              {
                "satisfied": true,
                "description": "Users have at least 30d to exit as the system cannot be upgraded."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs ensure state correctness",
          "description": "After some period of time, the published state root is assumed to be correct. For a certain time period, usually one week anyone can submit a fraud proof that shows that the state was incorrect.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "there is no one that checks the published state. Fraud proofs assume at least one honest and able validator."
            }
          ],
          "references": [
            {
              "text": "Background - Fuel documentation",
              "href": "https://docs.fuel.sh/v1.1.0/Concepts/Fundamentals/Fuel%20Overview.html#background"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "Background - Fuel documentation",
              "href": "https://docs.fuel.sh/v1.1.0/Concepts/Fundamentals/Fuel%20Overview.html#background"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Architecture: A High-Level View - Fuel documentation",
              "href": "https://docs.fuel.sh/v1.1.0/Concepts/Fundamentals/Fuel%20Overview.html#architectureahighlevelview"
            },
            {
              "text": "Mainnet deployment parameters - Fuel documentation",
              "href": "https://docs.fuel.sh/v1.1.0/Concepts/Fundamentals/Deployment%20Parameters.html#mainnet"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the block production is open to anyone if users experience censorship from the operator they can propose their own blocks which would include their transactions.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions and users lack resources to propose blocks themselves."
            }
          ],
          "references": [
            {
              "text": "Architecture: A High-Level View - Fuel documentation",
              "href": "https://docs.fuel.sh/v1.1.0/Concepts/Fundamentals/Fuel%20Overview.html#architectureahighlevelview"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdraw.yulp#L40 - Fuel documentation",
                "href": "https://github.com/FuelLabs/fuel-v1-contracts/blob/master/src/Withdraw.yulp#L40"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "The node software source code can be found [here](https://github.com/FuelLabs/fuel-js).",
        "genesisState": "The bridge contracts deployments are the genesis state of the rollup chain. The bridge contracts of mainnet and testnet (rinkeby) deployment block number are available [here](https://github.com/FuelLabs/fuel-js/blob/master/packages/logic/src/genesis.js).",
        "dataFormat": "The data format details are documented in the Data Structure subsection [here](https://docs.fuel.sh/v1.1.0/Concepts/Fundamentals/System%20Description%20Primer.html)."
      },
      "contracts": {
        "addresses": [
          {
            "address": "0x6880f6Fd960D1581C2730a451A22EED1081cfD72",
            "name": "Fuel"
          }
        ],
        "risks": []
      },
      "milestones": [
        {
          "name": "Fuel v1 is live on Mainnet",
          "link": "https://twitter.com/fuellabs_/status/1344707195250896899",
          "date": "2020-12-31T00:00:00Z",
          "description": "First trustless Optimistic Rollup is live on Mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Fuel security stress test by L2BEAT team",
          "url": "https://twitter.com/krzKaczor/status/1524753284434587649",
          "thumbnail": "fuel-01.jpg"
        }
      ]
    },
    {
      "isUnderReview": true,
      "type": "layer2",
      "id": "funki",
      "createdAt": "1728289959",
      "display": {
        "name": "Funki",
        "slug": "funki",
        "description": "Funki chain is an OP Stack Optimium on Ethereum reimagining the blockchain experience as an interconnected world brimming with wonder, adventure, and fun.",
        "purposes": ["Universal"],
        "category": "Optimium",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://funkichain.com"],
          "apps": [
            "https://funkichain.com/bridge",
            "https://swap.funkichain.com"
          ],
          "documentation": ["https://docs.funkichain.com/"],
          "explorers": ["https://funkiscan.io/"],
          "repositories": ["https://github.com/funkichain"],
          "socialMedia": [
            "https://x.com/funkichain",
            "https://facebook.com/funkichain",
            "https://instagram.com/funkichain",
            "https://t.me/funkichain"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "chain": "ethereum",
            "address": "0x5C9C7f98eD153a2deAA981eB5C97B31744AccF22",
            "sinceTimestamp": "1721212775",
            "tokens": ["ETH"]
          },
          {
            "chain": "ethereum",
            "address": "0xA2C1C1A473250094a6244F2bcf6Cb51F670Ad3aC",
            "sinceTimestamp": "1721212799",
            "tokens": "*"
          }
        ],
        "transactionApi": null
      },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": null
    },
    {
      "type": "layer2",
      "id": "gluon",
      "createdAt": "1623332638",
      "isArchived": true,
      "display": {
        "name": "Gluon",
        "slug": "gluon",
        "description": "Gluon aims to be a Layer 2 scalable trading engine built on top of Ethereum, unlocking low fees and high frequency trading.",
        "warning": "LeverJ trading platform appears to be in a maintenance mode as the team moved to build NFT trading platform. Social medias associated with the project are silent since mid 2021.",
        "purposes": ["Exchange"],
        "category": "Plasma",
        "links": {
          "websites": ["https://gluon.network/", "https://leverj.io/"],
          "apps": ["https://live.leverj.io/"],
          "documentation": ["https://leverj.github.io/claim-gluon-balances/"],
          "explorers": ["https://gluon.leverj.io/"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/Leverj_io",
            "https://t.me/leverj",
            "https://discord.gg/xpsjfwn",
            "https://blog.leverj.io/",
            "https://linkedin.com/company/leverj/",
            "https://youtube.com/channel/UCGor-eEpq0ObqN9u3jutq2w"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "escrows": [
          {
            "address": "0x75ACe7a086eA0FB1a79e43Cc6331Ad053d8C67cB",
            "sinceTimestamp": "1573694037",
            "tokens": ["ETH", "DAI"],
            "chain": "ethereum"
          },
          {
            "address": "0x84e34fD82FC368F1a072075114AdC4b552a7a1F4",
            "sinceTimestamp": "1612360715",
            "tokens": ["DAI", "USDT"],
            "chain": "ethereum"
          }
        ]
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (!)",
          "description": "Fraud proofs allow actors watching the chain to prove that the state is incorrect. Because the data is not present on chain the security of fraud proofs is severely weakened.",
          "sentiment": "warning"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely fully on data that is NOT published onchain.",
          "sentiment": "bad"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for , users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": null
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs ensure state correctness",
          "description": "After some period of time, the published state root is assumed to be correct. For a certain time period, usually one week anyone can submit a fraud proof that shows that the state was incorrect.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "there is no one that checks the published state. Fraud proofs assume at least one honest and able validator."
            }
          ],
          "references": [],
          "isIncomplete": true
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is stored on a plasma chain and is not recorded on the Ethereum main chain.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [],
          "isIncomplete": true
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [],
          "isIncomplete": true
        },
        "forceTransactions": {
          "name": "Users can independently exit the system",
          "description": "Independent exit allows the users to escape censorship by withdrawing their funds. The system allows users to  withdraw their funds by submitting a transaction directly to the contract on-chain.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [],
          "isIncomplete": true
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user executes the withdrawal by submitting a transaction on L1 that requires a merkle proof of funds.",
            "risks": [],
            "references": [],
            "isIncomplete": true
          }
        ],
        "massExit": {
          "name": "The mass exit problem is unsolved",
          "description": "In case the operator is malicious all users need to exit within a predetermined time frame. Users that do not manage to do this will lose their funds.",
          "references": [],
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "users are unable to withdraw in a mass exit event."
            }
          ],
          "isIncomplete": true
        }
      },
      "contracts": {
        "addresses": [
          {
            "name": "Gluon",
            "address": "0x75ACe7a086eA0FB1a79e43Cc6331Ad053d8C67cB"
          },
          {
            "name": "RegistryLogic",
            "address": "0x385827aC8d1AC7B2960D4aBc303c843D9f87Bb0C",
            "upgradeability": {
              "proxyType": "Reference",
              "admins": [],
              "implementations": []
            }
          },
          {
            "name": "RegistryData",
            "address": "0x0fC25C7931679B838209c484d49Df0Cb9E633C41",
            "upgradeability": {
              "proxyType": "Reference",
              "admins": [],
              "implementations": []
            }
          },
          {
            "name": "StakeLogic",
            "address": "0x84e34fD82FC368F1a072075114AdC4b552a7a1F4",
            "upgradeability": {
              "proxyType": "Reference",
              "admins": [],
              "implementations": []
            }
          },
          {
            "name": "StakeData",
            "address": "0xaB3AC436D66CBEeDc734ed2c1562c3a213c9bc77",
            "upgradeability": {
              "proxyType": "Reference",
              "admins": [],
              "implementations": []
            }
          },
          {
            "name": "SpotLogic",
            "address": "0x2D627FF93d32f5FEBb04d68409A889895B4aef2D",
            "upgradeability": {
              "proxyType": "Reference",
              "admins": [],
              "implementations": []
            }
          },
          {
            "name": "SpotData",
            "address": "0x0d283D685F0A741C463846176e4c8EFF90D3F9EC",
            "upgradeability": {
              "proxyType": "Reference",
              "admins": [],
              "implementations": []
            }
          },
          {
            "name": "DerivativesLogic",
            "address": "0xDfBFe895e07e5115773Cb9631CB2148114589caC",
            "upgradeability": {
              "proxyType": "Reference",
              "admins": [],
              "implementations": []
            }
          },
          {
            "name": "DerivativesData",
            "address": "0x563052914Fd973a2305763269A106a7B0B6D50Cc",
            "upgradeability": {
              "proxyType": "Reference",
              "admins": [],
              "implementations": []
            }
          },
          {
            "name": "LegacyTokensExtension",
            "address": "0xDA88EfA53c85Afa30564bb651A2E76b99a232082"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      }
    },
    {
      "type": "layer2",
      "createdAt": "1720180654",
      "id": "gpt",
      "display": {
        "name": "GPT Protocol",
        "slug": "gpt",
        "description": "GPT Protocol is a Validium built on the Polygon CDK stack. The purpose of the project is to create a decentralized market of AI compute power.",
        "links": {
          "websites": ["https://gptprotocol.org/"],
          "apps": [
            "https://bridge.gptprotocol.io/",
            "https://assistant.gptprotocol.io/",
            "https://staking.gptprotocol.org/"
          ],
          "documentation": [],
          "explorers": ["https://explorer.gptprotocol.io/"],
          "repositories": ["https://github.com/gptprotocol"],
          "socialMedia": [
            "https://x.com/gpt_protocol",
            "https://t.me/gpt_protocol",
            "https://discord.com/invite/gptprotocol",
            "https://instagram.com/gptprotocol/"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "purposes": ["Universal", "AI"],
        "category": "Validium",
        "provider": "Polygon",
        "tvlWarning": null,
        "finality": {
          "finalizationPeriod": 0,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "Uniform block distribution is assumed for calculations."
            }
          }
        }
      },
      "config": {
        "associatedTokens": ["GPT"],
        "escrows": [
          {
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "newVersion": true,
            "sinceTimestamp": "1712620800",
            "tokens": ["GPT", "WETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
                "implementations": [
                  "0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "AggLayer",
              "nativeAsset": "etherWrapped",
              "tokensToAssignFromL1": ["GPT"],
              "wethAddress": "0x5A77f1443D16ee5761d310e38b62f77f726bC71c"
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.gptprotocol.io",
          "defaultCallsPerMinute": 500
        },
        "trackedTxs": null,
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": null
      },
      "chainConfig": {
        "chainId": 1511670449,
        "minTimestampForTvl": "1716807971",
        "name": "gpt"
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5,
          "sources": [{ "contract": "GptProtocolValidium", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -432000,
          "warning": {
            "value": "The Security Council can remove the delay on upgrades.",
            "sentiment": "bad"
          }
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.",
          "sentiment": "bad",
          "sources": [{ "contract": "GptProtocolValidium", "references": [] }]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b",
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "PolygonRollupManager.sol - Etherscan source code, _verifyAndRewardBatches function",
              "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain. Transaction data is stored off-chain and only the hashes are posted on-chain by the Sequencer, after being signed by the DAC members.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "PolygonValidiumStorageMigration.sol - Etherscan source code, sequenceBatchesValidium function",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C#code#F1#L126"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "GptProtocolValidium.sol - Etherscan source code, onlyTrustedSequencer modifier",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "The mechanism for allowing users to submit their own transactions is currently disabled.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "GptProtocolValidium.sol - Etherscan source code, forceBatchAddress address",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "PolygonZkEvmBridgeV2.sol - Etherscan source code, claimAsset function",
                "href": "https://etherscan.io/address/0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "Node software can be found [here](https://github.com/0xPolygon/cdk-validium-node).",
        "compressionScheme": "No compression scheme yet.",
        "genesisState": "The genesis state, whose corresponding root is accessible as Batch 0 root in the `getRollupBatchNumToStateRoot(5,0)` method of PolygonRollupManager, is available [here](https://github.com/0xPolygonHermez/zkevm-contracts/blob/1ad7089d04910c319a257ff4f3674ffd6fc6e64e/tools/addRollupType/genesis.json).",
        "dataFormat": "The trusted sequencer request signatures from DAC members off-chain, and posts hashed batches with signatures to the GptProtocolValidium contract."
      },
      "stateValidation": null,
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x3451F208447c4D81346c10239eF92A1eB98b65C3",
              "type": "EOA"
            }
          ],
          "description": "Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."
        },
        {
          "name": "Proposer (Trusted Aggregator)",
          "accounts": [
            {
              "address": "0x6329Fe417621925C81c16F9F9a18c203C21Af7ab",
              "type": "EOA"
            },
            {
              "address": "0x20A53dCb196cD2bcc14Ece01F358f1C849aA51dE",
              "type": "EOA"
            }
          ],
          "description": "The trusted proposer (called Aggregator) provides ZK proofs for all the supported systems. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 6 / 8 threshold.  The Security Council is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.",
          "accounts": [
            {
              "address": "0x37c58Dfa7BF0A165C5AAEdDf3e2EdB475ac6Dcb6",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
              "type": "EOA"
            },
            {
              "address": "0xaF46a0ddf80DFFB49C87656625E65A37499B261D",
              "type": "EOA"
            },
            {
              "address": "0xBDc235cC9d6Baa641c5ae306bc83962475A5FEFf",
              "type": "EOA"
            },
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0x3ab9f4b964eE665F7CDf1d65f1cEEc6196B0D622",
              "type": "EOA"
            },
            {
              "address": "0x49c15936864690bCd6af0ecaca8E874adFF30E86",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0x21887c89368bf918346c62460e0c339113801C28",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Forced Batcher",
          "accounts": [
            {
              "address": "0x5B8C9f36c8F84E49EC89Ae2881D920Ceb36D7F40",
              "type": "EOA"
            }
          ],
          "description": "Sole account allowed to submit forced transactions. If this address is the zero address, anyone can submit forced transactions."
        },
        {
          "name": "RollupManagerAdminMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Admin of the PolygonRollupManager contract, can set core system parameters like timeouts and aggregator as well as deactivate emergency state. They can also upgrade the GptProtocolValidium contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0xA0B02B28920812324f1cC3255bd8840867d3f227",
              "type": "EOA"
            },
            {
              "address": "0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LocalAdmin",
          "accounts": [
            {
              "address": "0x5B8C9f36c8F84E49EC89Ae2881D920Ceb36D7F40",
              "type": "EOA"
            }
          ],
          "description": "Admin and ForceBatcher of the GptProtocolValidium contract, can set core system parameters like timeouts, sequencer, activate forced transactions, and set the DA committee members in the GptProtocolDAC contract."
        },
        {
          "name": "GptProtocolDAC Upgrader",
          "accounts": [
            {
              "address": "0xb8605297399baEb6628C9E8F5D3E52A056492cfe",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade the GptProtocolDAC contract and thus change the data availability rules any time."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "GptProtocolDAC",
            "address": "0x75E26A2996DEAbA20386B6f3c1C957eFadb3f6E8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xada59D145126A746976F0F56477aafFEB3acc8e3"],
              "implementations": ["0xA36aFB6b79A3d164a3d12C141c916BECc6e012D8"]
            },
            "chain": "ethereum",
            "description": "Validium committee contract that allows the owner to setup the members of the committee and stores the required amount of signatures threshold.",
            "upgradableBy": ["GptProtocolDAC Upgrader"],
            "upgradeDelay": "None"
          },
          {
            "name": "GptProtocolValidium",
            "address": "0xC4E903D3Af4c3d2e437492d602adcC9d9b536858",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"],
              "implementations": ["0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"]
            },
            "chain": "ethereum",
            "description": "The main contract of the GPT Protocol. Contains sequenced transaction batch hashes and forced transaction logic.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Verifier",
            "address": "0x0775e11309d75aA6b0967917fB0213C5673eDf81",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "An autogenerated contract that verifies ZK proofs in the PolygonRollupManager system."
          },
          {
            "name": "PolygonRollupManager",
            "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]
            },
            "chain": "ethereum",
            "description": "It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the Security Council, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives L2 state roots as well as ZK proofs.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Bridge",
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]
            },
            "chain": "ethereum",
            "description": "The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer both ERC20 assets and arbitrary messages. To transfer funds a user initiated transaction on both sides is required.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "GlobalExitRootV2",
            "address": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x2E38cD55163137483E30580Cb468C2dFf1d85077"]
            },
            "chain": "ethereum",
            "description": "Synchronizes deposit and withdraw merkle trees across L1 and the L2s. The global root from this contract is injected into the L2 contracts.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Timelock",
            "address": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract upgrades have to go through a 10d timelock unless the Emergency State is activated. It can also add rollup types that can be used to upgrade verifier contracts of existing systems. It is controlled by the ProxyAdminOwner."
          }
        ],
        "references": [
          {
            "text": "State injections - stateRoot and exitRoot are part of the validity proof input.",
            "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 10d delay on code upgrades."
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "GPT Protocol Launch",
          "link": "https://x.com/gpt_protocol/status/1827155009123090891",
          "date": "2024-08-24",
          "description": "GPT Protocol launches officially, integrated with Polygon AggLayer.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Gateway", "PolygonCDK", "AggLayer", "EVM"]
    },
    {
      "type": "layer2",
      "id": "galxegravity",
      "createdAt": "1719415787",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0xf993AF239770932A0EDaB88B6A5ba3708Bd58239",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xa5D23c69894241825dAffB570c3c742C0F52df96"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x7983403dDA368AA7d67145a9b81c5c517F364c42",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xBbc3872E30C91ef69336937838c2a283F79f7E68"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x8D99372612e8cFE7163B1a453831Bc40eAeb3cF3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xBbc3872E30C91ef69336937838c2a283F79f7E68"],
              "implementations": ["0x383f16fB2809a56fC639c1eE2c93Ad2aa7Ee130A"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x7AD2a94BefF3294a31894cFb5ba4206957a53c19",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xBbc3872E30C91ef69336937838c2a283F79f7E68"],
              "implementations": ["0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x1153a1e4B1523DFf36f77d696bd6eBF2B0e7DAbF",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xBbc3872E30C91ef69336937838c2a283F79f7E68"],
              "implementations": ["0x19431dc37098877486532250FB3158140717C00C"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xa5D23c69894241825dAffB570c3c742C0F52df96",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xBbc3872E30C91ef69336937838c2a283F79f7E68"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x68466622Aae5a9Ffd02530247d75Dd107f06B333",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xBbc3872E30C91ef69336937838c2a283F79f7E68"],
              "implementations": ["0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x57EA090Ac0554d174AE0e2855B460e84A1A7C221",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x17e7F68ce50A77e55C7834ddF31AEf86403B8010",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x72B166070781a552D7b95a907eF59ca05d3D5a62",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "galxegravity",
        "chainId": 1625,
        "explorerUrl": "https://gscan.xyz/",
        "explorerApi": {
          "url": "https://explorer.gravity.xyz/api",
          "type": "blockscout"
        },
        "blockscoutV2ApiUrl": "https://explorer.gravity.xyz/api/v2",
        "minTimestampForTvl": "1716054191",
        "multicallContracts": [
          {
            "sinceBlock": 52682,
            "batchSize": 150,
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "version": "3"
          }
        ]
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1000d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x383f16fB2809a56fC639c1eE2c93Ad2aa7Ee130A#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xBa369bd77a346babCd282cB1a015194E8ec54542",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x18c87d3DbF779E3F7793fc6c62ead9Ff15F0e634",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "ConduitMultisig",
          "description": "This is a Gnosis Safe with 4 / 7 threshold.  MultiSig that can upgrade the rollup's smart contract system (via UpgradeExecutor) and gain access to all funds.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 5d 14h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": null,
      "knowledgeNuggets": null,
      "badges": ["DAC", "Conduit", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Gravity",
        "slug": "galxegravity",
        "description": "Gravity is an Optimium built on the Orbit stack. It features onchain questing and has its own gas token - G. Other Galxe products are aiming to integrate with the L2 and a future migration to an L1 of the same name is planned.",
        "links": {
          "websites": ["https://gravity.xyz"],
          "apps": ["https://bridge.gravity.xyz/"],
          "documentation": ["https://docs.gravity.xyz/"],
          "explorers": ["https://gscan.xyz/", "https://explorer.gravity.xyz/"],
          "repositories": ["https://github.com/Galxe"],
          "socialMedia": [
            "https://x.com/GravityChain",
            "https://discord.com/invite/GravityChain",
            "https://t.me/GravityChain"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 483840 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400000
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1000d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400000
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 11d 23h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1033656
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["G"],
        "escrows": [
          {
            "address": "0x7983403dDA368AA7d67145a9b81c5c517F364c42",
            "newVersion": true,
            "sinceTimestamp": "1716053843",
            "tokens": ["G"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x7983403dDA368AA7d67145a9b81c5c517F364c42",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xBbc3872E30C91ef69336937838c2a283F79f7E68"],
                "implementations": [
                  "0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows G sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.gravity.xyz",
          "defaultCallsPerMinute": 1500,
          "startBlock": 1
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "grvt",
      "createdAt": "1690815262",
      "display": {
        "name": "GRVT",
        "slug": "grvt",
        "description": "Gravity (GRVT) is a hybrid crypto derivatives exchange, providing a centralized exchange-like experience while being decentralized, featuring self-custodial funds and wallets.",
        "purposes": ["Universal"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://grvt.io"],
          "apps": [],
          "documentation": ["https://docs.grvt.io"],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/grvt_io",
            "https://discord.gg/3jsVPwaGeB"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "gwyneth",
      "createdAt": "1721989895",
      "display": {
        "name": "Gwyneth",
        "slug": "gwyneth",
        "description": "Gwyneth is a based booster rollup synchronously composable with Ethereum utilizing Taiko technology.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "provider": "Taiko",
        "links": {
          "websites": [
            "https://mirror.xyz/0xeac5Bc2abB5141c1510c18a9637437D49cE71e3F/r6CyuXtA7HKGw4FtF3b6YBHRoL5Kmbh_zufHFvKxIuQ"
          ],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": ["https://github.com/taikoxyz/taiko-reth/pulls"],
          "socialMedia": [
            "https://x.com/gwyneth_taiko",
            "https://discord.gg/7EU5aP8P"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "hemi",
      "createdAt": "1727449740",
      "display": {
        "name": "Hemi",
        "slug": "hemi",
        "description": "Hemi is an OP Stack based L2 on Ethereum focusing on interoperability with the Bitcoin blockchain.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://hemi.xyz"],
          "apps": ["https://app.hemi.xyz"],
          "documentation": ["https://docs.hemi.xyz"],
          "explorers": ["https://testnet.explorer.hemi.xyz/"],
          "repositories": ["https://github.com/hemilabs"],
          "socialMedia": [
            "https://twitter.com/hemi_xyz",
            "https://discord.gg/hemixyz",
            "https://linkedin.com/company/hemi-labs",
            "https://youtube.com/@HemiLabs"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "happy-chain",
      "createdAt": "1727519160",
      "display": {
        "name": "Happy chain",
        "slug": "happy-chain",
        "description": "HappyChain is an Ethereum L2 chain that brings free-to-play and zero-friction onboarding onchain.",
        "purposes": ["Universal", "Gaming"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://linktr.ee/happychaindevs"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://x.com/HappyChainDevs",
            "https://mirror.xyz/0x20Af38e22e1722F97f5A1b5afc96c00EECd566b2"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "hermez",
      "createdAt": "1623153328",
      "isArchived": true,
      "display": {
        "name": "Polygon Hermez",
        "slug": "hermez",
        "warning": "Hermez and Polygon have recently merged. Hermez and Polygon Hermez are two names for the same rollup.",
        "description": "Hermez is an open-source ZK Rollup that aims to be optimized for secure, low-cost and usable token transfers on the wings of Ethereum.",
        "purposes": ["Payments"],
        "category": "ZK Rollup",
        "provider": "Polygon",
        "links": {
          "websites": ["https://hermez.io/"],
          "apps": ["https://wallet.hermez.io/"],
          "documentation": [
            "https://docs.hermez.io/",
            "https://hermez.io/polygon-hermez-whitepaper.pdf"
          ],
          "explorers": ["https://explorer.hermez.io/"],
          "repositories": ["https://github.com/0xpolygonhermez"],
          "socialMedia": [
            "https://blog.hermez.io/",
            "https://t.me/PolygonHermez",
            "https://discord.gg/AczuUXDA2N",
            "https://twitter.com/0xPolygonZK"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "escrows": [
          {
            "address": "0xA68D85dF56E733A06443306A095646317B5Fa633",
            "sinceTimestamp": "1616482490",
            "tokens": "*",
            "chain": "ethereum"
          }
        ]
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "7d",
          "description": "Users have 7d to exit funds in case of an unwanted regular upgrade. There is a 7d delay before a regular upgrade is applied, and withdrawals can take up to 0s to be processed.",
          "secondLine": null,
          "sentiment": "warning",
          "definingMetric": 604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for , users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": null
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "ZK proofs - Hermez documentation",
              "href": "https://docs.hermez.io/#/about/security?id=zk-proofs"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "ZK proofs - Hermez documentation",
              "href": "https://docs.hermez.io/#/about/security?id=zk-proofs"
            },
            {
              "text": "Multi-party Computation for the Trusted Setup - Hermez documentation",
              "href": "https://docs.hermez.io/#/about/security?id=multi-party-computation-for-the-trusted-setup"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "Data Availability - Hermez documentation",
              "href": "https://docs.hermez.io/#/developers/glossary?id=data-availability"
            }
          ]
        },
        "operator": {
          "name": "There is no central operator",
          "description": "The system runs an auction in which anyone can bid to become the operator for a set number of blocks. The operator will be able to propose blocks and collect fees during this window. Hermez will also run a operator known as boot coordinator that will propose blocks in case no one bids in the auction. This operator can be removed by the governance.",
          "risks": [],
          "references": [
            {
              "text": "Forging Consensus Protocol - Hermez documentation",
              "href": "https://docs.hermez.io/#/developers/protocol/consensus/consensus?id=forging-consensus-protocol"
            },
            {
              "text": "Boot Coordinator - Hermez documentation",
              "href": "https://docs.hermez.io/#/developers/protocol/consensus/consensus?id=boot-coordinator"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the block production is open to anyone if users experience censorship from the operator they can propose their own blocks which would include their transactions.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions and users lack resources to propose blocks themselves."
            }
          ],
          "references": [
            {
              "text": "Can coordinators censor transactions? - Hermez documentation",
              "href": "https://docs.hermez.io/#/faq/end-users?id=can-coordinators-censor-transactions"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof. This operation cannot be performed if the withdrawal exceeds certain threshold.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawing Funds from Hermez - Hermez documentation",
                "href": "https://docs.hermez.io/#/developers/sdk?id=withdrawing-funds-from-hermez"
              }
            ]
          },
          {
            "name": "Forced withdraw",
            "description": "The user submits the withdrawal request on L1. This forces the operators to pick up the request before other L2 transactions. A block still needs to be proved, the user still submits a merkle proof, and the funds threshold still cannot be exceeded.",
            "risks": [],
            "references": [
              {
                "text": "Force Exit - Hermez documentation",
                "href": "https://docs.hermez.io/#/developers/sdk?id=force-exit"
              }
            ]
          },
          {
            "name": "Delayed withdraw",
            "description": "When the user does a regular or forced withdraw and their funds exceed a certain threshold a timer activates. After a specified time has passed and the emergency mode has not been activated the funds can be withdrawn.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal Delayer Mechanism - Hermez documentation",
                "href": "https://docs.hermez.io/#/developers/protocol/withdrawal-delayer/withdrawal-delayer?id=mechanism"
              }
            ]
          },
          {
            "name": "Emergency mode",
            "description": "When the user does a regular or forced withdraw and their funds exceed a certain threshold a timer activates. The operators can now trigger emergency mode and transfer the user's funds to the governance.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "the operators trigger a false alarm during withdrawal.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "Withdrawal Delayer Mechanism - Hermez documentation",
                "href": "https://docs.hermez.io/#/developers/protocol/withdrawal-delayer/withdrawal-delayer?id=mechanism"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "HermezAuctionProtocol",
            "address": "0x15468b45eD46C8383F5c0b1b6Cf2EcF403C2AeC2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "implementations": ["0x9D62Cdc389caaB35ada830A7C6Ae847D5E8512C6"],
              "admins": ["0x07a00a617e1DaB02Aa31887Eb5d521d4529a32E3"]
            }
          },
          {
            "name": "Hermez",
            "address": "0xA68D85dF56E733A06443306A095646317B5Fa633",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "implementations": ["0x6D85D79D69b7e190E671C16e8611997152bD3e95"],
              "admins": ["0x07a00a617e1DaB02Aa31887Eb5d521d4529a32E3"]
            }
          },
          {
            "name": "ProxyAdmin",
            "address": "0x07a00a617e1DaB02Aa31887Eb5d521d4529a32E3",
            "description": "Admin of HermezAuctionProtocol and Hermez, owned by the timelock."
          },
          {
            "name": "WithdrawalDelayer",
            "address": "0x392361427Ef5e17b69cFDd1294F31ab555c86124"
          },
          {
            "name": "Timelock",
            "address": "0xf7b20368Fe3Da5CD40EA43d61F52B23145544Ec3",
            "description": "Enforces a 7 day delay on upgrades."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 7 days delay on code upgrades."
          }
        ]
      }
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "hybrid",
      "createdAt": "1720191862",
      "display": {
        "name": "Hybrid",
        "slug": "hybrid",
        "description": "Hybrid is an upcoming Layer 2 on Ethereum, built on the Orbit stack. It is focused on building consumer AI products like the custom AI Agent infrastructure and Atlas. Transitioned from a Layer 1 blockchain to an Orbit Layer 2.",
        "purposes": ["AI"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://buildonhybrid.com/"],
          "apps": [],
          "documentation": ["https://docs.buildonhybrid.com"],
          "explorers": [],
          "repositories": ["https://github.com/buildonhybrid"],
          "socialMedia": [
            "https://x.com/BuildOnHybrid",
            "https://t.me/HybridCommunity"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "hychain",
      "createdAt": "1710846977",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x8f98f9ae2f2836Ed3a628c23311Ad9976B9fBF1B",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x88d3f3F43Ecd46635bd9f546bE7C4d52eBc20881"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x73C6af7029E714DFf1F1554F88b79B335011Da68",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x4C5984E3841790335E6DC2e7ed92802FbF8a300F"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xaF5800ADF22301968613c37DA9C3C2a486eA915A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x4C5984E3841790335E6DC2e7ed92802FbF8a300F"],
              "implementations": ["0x873484Ba63353C8b71210ce123B465512d408B27"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xD6c596b7ca17870DD50D322393deCE6C2085a116",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x4C5984E3841790335E6DC2e7ed92802FbF8a300F"],
              "implementations": ["0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x0389E24A4Bc96518169f83F50FCDdA442dD8eAFd",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x4C5984E3841790335E6DC2e7ed92802FbF8a300F"],
              "implementations": ["0x19431dc37098877486532250FB3158140717C00C"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x88d3f3F43Ecd46635bd9f546bE7C4d52eBc20881",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x4C5984E3841790335E6DC2e7ed92802FbF8a300F"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0xE8AcC0E28a82a26D498f2C66B64C56B9Ef996c2e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x4C5984E3841790335E6DC2e7ed92802FbF8a300F"],
              "implementations": ["0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x09824fe72BFF474d16D9c2774432E381BBD60662",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xDf94F0474F205D086dbc2e66D69a856FCf520622",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x873484Ba63353C8b71210ce123B465512d408B27#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xC1d59449a546bA80d332De629724df8e9A9e9584",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x88781Fb85EA68bd5B8bE4C1C0c1ED94f4fd35647",
              "type": "EOA"
            },
            {
              "address": "0xf0DDa810ed19bb640f2A03e8382814e3f0D36e13",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "Hychain Admin EOA",
          "accounts": [
            {
              "address": "0x798Fa726f0B4DF564681446D051b344E3FE4a6ca",
              "type": "EOA"
            }
          ],
          "description": "EOA address that can upgrade the rollup's smart contract system (via UpgradeExecutor) and gain access to all funds."
        },
        {
          "name": "HychainMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  Can execute upgrades via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0x798Fa726f0B4DF564681446D051b344E3FE4a6ca",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x42875471D43d54B538B333F041E75a9a45Bf3Aa0",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0x9A80c6437ad9b6E7a1608814cBab93dEeecf388a",
              "type": "EOA"
            },
            {
              "address": "0xF77010B8a68512c67bBca86ef39BeA6B3c064423",
              "type": "EOA"
            },
            {
              "address": "0xe8417C755391Ea9c0D4Bf50f764275574125B32f",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": null,
      "knowledgeNuggets": null,
      "badges": ["DAC", "Caldera", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Gaming"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "HYCHAIN",
        "slug": "hychain",
        "description": "HYCHAIN is a gaming-focused Orbit stack Optimium that was created to eliminate onboarding and technical challenges for web3 games aiming for widespread adoption.",
        "links": {
          "websites": ["https://hychain.com"],
          "apps": ["https://bridge.hychain.com"],
          "documentation": ["https://docs.hychain.com"],
          "explorers": ["https://explorer.hychain.com"],
          "repositories": ["https://github.com/kintoxyz"],
          "socialMedia": [
            "https://x.com/HYCHAIN_GAMES",
            "https://discord.gg/hytopiagg",
            "https://hychain.substack.com/"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "Fraud proofs only allow 2 WHITELISTED actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 2,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["TOPIA"],
        "escrows": [
          {
            "address": "0x73C6af7029E714DFf1F1554F88b79B335011Da68",
            "newVersion": true,
            "sinceTimestamp": "1709606087",
            "tokens": ["TOPIA"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x73C6af7029E714DFf1F1554F88b79B335011Da68",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4C5984E3841790335E6DC2e7ed92802FbF8a300F"],
                "implementations": [
                  "0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows TOPIA sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.hychain.com/http",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "type": "layer2",
      "id": "hypr",
      "createdAt": "1695904849",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x2246d85AC397d289d49a92C804201738C4Bd2d73#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x0C57B7f3bAc278bE091431B52470fBAdBc4240E6"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xC3fE3e0Ea967B2878faB2fEc7e1067b32aDf1C03#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x2246d85AC397d289d49a92C804201738C4Bd2d73#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x2246d85AC397d289d49a92C804201738C4Bd2d73#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xC3fE3e0Ea967B2878faB2fEc7e1067b32aDf1C03#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xC3fE3e0Ea967B2878faB2fEc7e1067b32aDf1C03#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xC3fE3e0Ea967B2878faB2fEc7e1067b32aDf1C03#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x2246d85AC397d289d49a92C804201738C4Bd2d73#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x28fB4D0e436874F4107948E358df3C242De06788",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x28fB4D0e436874F4107948E358df3C242De06788",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0xeF2169180a2eda91B695eA5e5C4f4547C013840c",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x994c288de8418c8D3c5a4D21A69f35bF9641781C",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "HyprMultisig",
          "description": "* This is a Gnosis Safe with 4 / 6 threshold. \n* Is a Challenger.\n* Is a Guardian.\n",
          "accounts": [
            {
              "address": "0x28fB4D0e436874F4107948E358df3C242De06788",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0x6D4c6D77a87F5aA89444dcCb37A65AEEb152717F",
              "type": "EOA"
            },
            {
              "address": "0x7A28B193dab5566bB1781f131A1d15603F2577D8",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n* Can upgrade implementation of L1ERC721Bridge, L2OutputOracle, OptimismMintableERC20Factory, OptimismPortal, SystemConfig (acting via ProxyAdmin).\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x994c288de8418c8D3c5a4D21A69f35bF9641781C",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xeF2169180a2eda91B695eA5e5C4f4547C013840c",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1StandardBridge",
            "address": "0x1bBde518ad01BaABFE30020407A7630FB17B545d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x20D697b63d7747cF78C94ad9ee75C1436781E27E"],
              "implementations": ["0xa1D67ED34D6485cf59C5aA4AC3AE555959A0adA1"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x20D697b63d7747cF78C94ad9ee75C1436781E27E",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n* Can be used to upgrade implementation of L1ERC721Bridge, L2OutputOracle, OptimismMintableERC20Factory, OptimismPortal, SystemConfig.\n"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x2e5687010b5f62Ad0ef84370325bC91DED2724fe",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x20D697b63d7747cF78C94ad9ee75C1436781E27E"],
              "implementations": ["0x384BA1d14cDdE620d309AcA9B154e6CACbF27d11"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x3E4F4Eb77a9c1f88c0e1F5aDCc9d3521Ce157FdD",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x20D697b63d7747cF78C94ad9ee75C1436781E27E"],
              "implementations": ["0x2246d85AC397d289d49a92C804201738C4Bd2d73"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x5F67587FB3f1736a5a91C10E3EeB7cA92117177B",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x20D697b63d7747cF78C94ad9ee75C1436781E27E"],
              "implementations": ["0x2A033B70a4D7FAbc6E651E964D18fcf65D9d2aED"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x9f6F58F07863D72C47D001066C65528C27D3AE19",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xdf3CEeA6357eb051c7D5C6aA0E31908C99Ec4E7e"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "OptimismPortal",
            "address": "0xba1ac896F3b7cB273daE94bF9A6291A432e826c7",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x20D697b63d7747cF78C94ad9ee75C1436781E27E"],
              "implementations": ["0xC3fE3e0Ea967B2878faB2fEc7e1067b32aDf1C03"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0xBB08cf90DEb93492b463f1Ee5DA9453e51643586",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x20D697b63d7747cF78C94ad9ee75C1436781E27E"],
              "implementations": ["0xd136b83fd10735AB0001B8F8B361900c3717d6C2"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0xeA078231B0ED94F816E57960423af6d028529b09",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Hypr live on mainnet",
          "link": "https://x.com/hypr_network/status/1750251802451378528",
          "date": "2024-01-24T00:00:00Z",
          "description": "Hypr launches on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "opstack",
        "name": "Hypr",
        "slug": "hypr",
        "description": "Hypr is a blockchain focused on scaling ZK gaming.",
        "links": {
          "websites": ["https://hypr.network/"],
          "apps": ["https://bridge.hypr.network/"],
          "documentation": ["https://docs.hypr.network"],
          "explorers": ["https://explorer.hypr.network/"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/hypr_network",
            "https://t.me/hyprnetwork"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xba1ac896F3b7cB273daE94bF9A6291A432e826c7",
            "newVersion": true,
            "sinceTimestamp": "1705512431",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xba1ac896F3b7cB273daE94bF9A6291A432e826c7",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x20D697b63d7747cF78C94ad9ee75C1436781E27E"],
                "implementations": [
                  "0xC3fE3e0Ea967B2878faB2fEc7e1067b32aDf1C03"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x1bBde518ad01BaABFE30020407A7630FB17B545d",
            "newVersion": true,
            "sinceTimestamp": "1705512431",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x1bBde518ad01BaABFE30020407A7630FB17B545d",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x20D697b63d7747cF78C94ad9ee75C1436781E27E"],
                "implementations": [
                  "0xa1D67ED34D6485cf59C5aA4AC3AE555959A0adA1"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": null,
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "immutablex",
      "createdAt": "1623153328",
      "badges": ["AppChain", "DAC", "StarkEx", "SHARP"],
      "display": {
        "name": "Immutable X",
        "slug": "immutablex",
        "description": "Immutable X is a NFT-focused Validium providing zero gas fees, instant trades and scalability for applications.",
        "purposes": ["NFT", "Exchange"],
        "provider": "StarkEx",
        "category": "Validium",
        "links": {
          "websites": ["https://immutable.com/"],
          "apps": ["https://market.immutable.com/"],
          "documentation": [
            "https://docs.starkware.co/starkex/perpetual/perpetual_overview.html"
          ],
          "explorers": ["https://immutascan.io/"],
          "repositories": [
            "https://github.com/starkware-libs/starkex-contracts"
          ],
          "socialMedia": [
            "https://medium.com/@immutablex",
            "https://twitter.com/Immutable"
          ]
        },
        "activityDataSource": "Closed API"
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": ["IMX"],
        "escrows": [
          {
            "address": "0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
            "newVersion": true,
            "sinceTimestamp": "1615389188",
            "tokens": ["ETH", "IMX", "USDC", "OMI"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": ["0x9C41deab42Bae7c0ec4DB3cECc0faD86F4D6EC91"],
                "implementations": [
                  "0x4EDD62189732e9fF476ABa880b48c29432A7AC9B",
                  "0x62BCA4DB742A99c834e2c24b609656A70EA25379",
                  "0x8536850750956c2FEebeCAB786d82271a5467687",
                  "0x1c3A4EfF75a287Fe6249CAb49606FA25659929A2",
                  "0x3799ad2a4Eb4E882219B02C036656d4ECbD437A1",
                  "0x1688abB0B5c72F34B7f78e857Aa317deD5B5D339",
                  "0xB3788a88F063B217227E27ae16Ba550db3132bE6"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "Main StarkEx contract, used also as an escrow.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "starkex",
          "product": ["immutable"],
          "sinceTimestamp": "1615389188",
          "resyncLastDays": 7
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "5/7 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 5/7 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 5/7 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.7142857142857143,
          "sources": [
            {
              "contract": "StarkExchange",
              "references": [
                "https://etherscan.io/address/0x1c3A4EfF75a287Fe6249CAb49606FA25659929A2#code#F34#L123"
              ]
            },
            {
              "contract": "Committee",
              "references": [
                "https://etherscan.io/address/0x16BA0f221664A5189cf2C1a7AF0d3AbFc70aA295#code#F1#L63"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 7d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 604800
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds. NFTs will be minted on L1 to exit.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. When withdrawing NFTs they are minted on L1.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/withdrawal.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchange",
            "address": "0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": ["0x9C41deab42Bae7c0ec4DB3cECc0faD86F4D6EC91"],
              "implementations": [
                "0x4EDD62189732e9fF476ABa880b48c29432A7AC9B",
                "0x62BCA4DB742A99c834e2c24b609656A70EA25379",
                "0x8536850750956c2FEebeCAB786d82271a5467687",
                "0x1c3A4EfF75a287Fe6249CAb49606FA25659929A2",
                "0x3799ad2a4Eb4E882219B02C036656d4ECbD437A1",
                "0x1688abB0B5c72F34B7f78e857Aa317deD5B5D339",
                "0xB3788a88F063B217227E27ae16Ba550db3132bE6"
              ],
              "immutable": false
            },
            "chain": "ethereum"
          },
          {
            "name": "Committee",
            "address": "0x16BA0f221664A5189cf2C1a7AF0d3AbFc70aA295",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governor",
          "accounts": [
            {
              "address": "0x9C41deab42Bae7c0ec4DB3cECc0faD86F4D6EC91",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge. Currently there is 14d delay before the upgrade."
        },
        {
          "name": "Data Availability Committee",
          "accounts": [
            {
              "address": "0x1FfBDb8061B586A6D29fb608d025e5D8744f58d1",
              "type": "EOA"
            },
            {
              "address": "0x24EeFFC269bB8E540F5B2C8f45750489abf8D54b",
              "type": "EOA"
            },
            {
              "address": "0x48AF849535DDFa560A0EB0FbDEf436688169B949",
              "type": "EOA"
            },
            {
              "address": "0x51AbdE72a4542500a7b1Cb32B18b13fbe1F9ff2E",
              "type": "EOA"
            },
            {
              "address": "0xAfC4589aF46C72CBF550F2eEAE38c97AeDE15d17",
              "type": "EOA"
            },
            {
              "address": "0xB71FC111D7BA82D5955BaDdD7717f3467184FF61",
              "type": "EOA"
            },
            {
              "address": "0xfF506616E8C53EE5e513b906AC00B5D76664C537",
              "type": "EOA"
            }
          ],
          "minSigners": 5,
          "minAssumedHonestMembers": 3,
          "description": "Validity proof must be signed by at least 5 of these addresses to approve state update."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0x9B7f7d0d23d4CAce5A3157752D0D4e4bf25E927e",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update the state. When the Operator is down the state cannot be updated."
        }
      ],
      "milestones": [
        {
          "name": "Trading is live on Immutable X Marketplace",
          "link": "https://twitter.com/immutable/status/1380269810525872131?s=21&t=kyMdE6ORI9f76e8aqizlpg",
          "date": "2021-04-08T00:00:00Z",
          "description": "Immutable has launched the first phase of its Layer 2 scaling protocol.",
          "type": "general"
        },
        {
          "name": "IMX Token introduced",
          "link": "https://www.immutable.com/blog/introducing-imx-to-power-ethereums-first-layer-2-for-nfts",
          "date": "2022-06-29T00:00:00Z",
          "description": "Immutable announce IMX, the native ERC-20 utility token of Immutable X.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "intmax",
      "createdAt": "1722256071",
      "display": {
        "name": "INTMAX",
        "slug": "intmax",
        "description": "INTMAX is a stateless Plasma-like ZK Rollup with permissionless block production.",
        "purposes": ["Payments"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://intmax.io/"],
          "apps": [],
          "documentation": [
            "https://eprint.iacr.org/2023/1082.pdf",
            "https://medium.com/intmax/the-deep-dive-into-statelessness-intmax2-algorithm-was-published-be7a306048ff"
          ],
          "explorers": [],
          "repositories": ["https://github.com/InternetMaximalism"],
          "socialMedia": ["https://twitter.com/intmaxIO"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "kakarotzkevm",
      "createdAt": "1712943035",
      "display": {
        "name": "Kakarot zkEVM",
        "slug": "kakarotzkevm",
        "description": "Kakarot is an EVM-compatible ZK Rollup that leverages Cairo to spearhead innovations on Ethereum.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://kakarot.org/"],
          "apps": [],
          "documentation": ["https://docs.kakarot.org/"],
          "explorers": ["https://sepolia.kakarotscan.org/"],
          "repositories": ["https://github.com/kkrt-labs/kakarot"],
          "socialMedia": [
            "https://twitter.com/KakarotZkEvm",
            "https://t.me/KakarotZkEvm",
            "https://discord.gg/kakarotzkevm"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "karak",
      "createdAt": "1687459278",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x394317B191f5c7A371e74594776B1EfDc33d10D6#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xff00000000000000000000000000000000002410"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x3fe449Ef47228F03f979F9D955196494243cdf7E#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x394317B191f5c7A371e74594776B1EfDc33d10D6#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x394317B191f5c7A371e74594776B1EfDc33d10D6#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x3fe449Ef47228F03f979F9D955196494243cdf7E#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 3d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x3fe449Ef47228F03f979F9D955196494243cdf7E#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x3fe449Ef47228F03f979F9D955196494243cdf7E#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x394317B191f5c7A371e74594776B1EfDc33d10D6#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x28A227d4faF0f4f75897438E24C43EF1CDABb920",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x28A227d4faF0f4f75897438E24C43EF1CDABb920",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x4179f43f3b994e97090557363b09F403138a729e",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x84BdFb21ed7C8B332a42bFD595744a84F3101e4E",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "KarakMultisig",
          "description": "* This is a Gnosis Safe with 3 / 5 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Is a Guardian.\n* Can upgrade implementation of L2OutputOracle, SystemConfig, L1ERC721Bridge, OptimismPortal, OptimismMintableERC20Factory (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x28A227d4faF0f4f75897438E24C43EF1CDABb920",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xAb86E21e9BFA559B93ca6f783362BFf5504f2cac",
              "type": "EOA"
            },
            {
              "address": "0x7E973c8f8aCDb71E4e00A19631739FFBF9748Cd0",
              "type": "EOA"
            },
            {
              "address": "0xBcB3EaB21eCe8864aFcC07f7613bD6D8bB5C28d3",
              "type": "EOA"
            },
            {
              "address": "0x988378eD49F538104fDBaC1A0ac2Edf9890EA4f2",
              "type": "EOA"
            },
            {
              "address": "0x282DB123D1cbf5437c295EA0df0137E5FaDbD117",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x4179f43f3b994e97090557363b09F403138a729e",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x84BdFb21ed7C8B332a42bFD595744a84F3101e4E",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x0a23342520Aa8Ca963c4201801F4D3E95e731637",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C"],
              "implementations": ["0x394317B191f5c7A371e74594776B1EfDc33d10D6"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["KarakMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, SystemConfig, L1ERC721Bridge, OptimismPortal, OptimismMintableERC20Factory.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "SystemConfig",
            "address": "0x622333688CC1878C7ff4205c89bDe051798788A7",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C"],
              "implementations": ["0x01D5303F326B992845eef2782D4c9a7c6DdE4470"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["KarakMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x952851CecB07705A5bb483C1CE080F97e1E7491E",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C"],
              "implementations": ["0xc4550911Df26E604aA560dee6a9b66D0CA933482"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["KarakMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x9BFfA66a8FcAAd7AC9ea7c7d4b9a6fc46777022d",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xc5c3DF92714aAf510F8dD9a4c9C67D35f7d7376b"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L1StandardBridge",
            "address": "0xBA61F25dd9f2d5f02D01B1C2c1c5F0B14c4B48A3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C"],
              "implementations": ["0xC4De51792746960FC0ac78360b8e9c6E103F3B13"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["KarakMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0xeeCE9CD7Abd1CC84d9dfc7493e7e68079E47eA73",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C"],
              "implementations": ["0x3fe449Ef47228F03f979F9D955196494243cdf7E"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["KarakMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0xF04a74899FF4c4410fAF3B5faa29B8Fd199C13DB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C"],
              "implementations": ["0xe1863A873f61fDD16560cAa7692a2A994b51E76A"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["KarakMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0xF2C89960B6D63eC6c61dF3EA8BaFa0a02c26e8C9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Karak Network Early Access Launch",
          "link": "https://x.com/Karak_Network/status/1762561646999068899?s=20",
          "date": "2024-02-27T00:00:00Z",
          "description": "Karak Network is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Blobstream and Celestia Architecture",
          "url": "https://www.youtube.com/watch?v=cn_fN6pkakQ",
          "thumbnail": "modular-rollup.jpg"
        },
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "Caldera", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "opstack",
        "name": "Karak",
        "slug": "karak",
        "description": "Karak is a general-purpose Optimium.",
        "links": {
          "websites": ["https://karak.network/"],
          "apps": ["https://karak.network/karak-xp/"],
          "documentation": ["https://docs.karak.network/"],
          "explorers": ["https://explorer.karak.network/"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/Karak_Network",
            "https://t.me/Karak_Network"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xeeCE9CD7Abd1CC84d9dfc7493e7e68079E47eA73",
            "newVersion": true,
            "sinceTimestamp": "1703048687",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xeeCE9CD7Abd1CC84d9dfc7493e7e68079E47eA73",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C"],
                "implementations": [
                  "0x3fe449Ef47228F03f979F9D955196494243cdf7E"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xBA61F25dd9f2d5f02D01B1C2c1c5F0B14c4B48A3",
            "newVersion": true,
            "sinceTimestamp": "1703048687",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xBA61F25dd9f2d5f02D01B1C2c1c5F0B14c4B48A3",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x1612F868EbA1cea65ee66bF4A7C75001b0D4065C"],
                "implementations": [
                  "0xC4De51792746960FC0ac78360b8e9c6E103F3B13"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.karak.network/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "3d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -259200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "kinto",
      "createdAt": "1695735468",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x5073dA9cA4810f3E0aA01c20c7d9d02C3f522e11",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x59B851c8b1643e0735Ec3F2f0e528f3d89c3408a"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x859a53Fe2C8DA961387030E7CB498D6D20d0B2DB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74C717C01425eb475A5fC55d2A4a9045fC9800df"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xF4Ef823D57819AC7202a081A5B49376BD28E7b3a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74C717C01425eb475A5fC55d2A4a9045fC9800df"],
              "implementations": ["0x57411f5BA52531e8199066bC8EC650470A744883"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xBFfaA85c1756472fFC37e6D172A7eC0538C14474",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74C717C01425eb475A5fC55d2A4a9045fC9800df"],
              "implementations": ["0xc235c5194f2404234fc7C99b4dd15289BB735Cf5"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x655761AD5FC251F414D6993A73184B0669F278c8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74C717C01425eb475A5fC55d2A4a9045fC9800df"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x59B851c8b1643e0735Ec3F2f0e528f3d89c3408a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74C717C01425eb475A5fC55d2A4a9045fC9800df"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x6228e2FB8C561f1a5A963039Bc38Eb6D539A1A7F",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74C717C01425eb475A5fC55d2A4a9045fC9800df"],
              "implementations": ["0x122B88885F1f365B69CAd38B167B039fEd0Ba096"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x8B02a8B985a81f96e49B8289FF60847FC6020e51",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0xf09Bc0285055BEA82165cA3F54054aa88BB3C169",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0xba9D43FA3576bc40f13cb0731D770d1e510EdE46",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x6c4322e9A0478CA7aDd30e561f96af379D3A22Bb",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x76f72B8eFDA2DCDD3fB5A8c16d576c25eD43D645",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "kinto",
        "chainId": 7887,
        "explorerUrl": "https://explorer.kinto.xyz",
        "explorerApi": {
          "url": "https://explorer.kinto.xyz/api",
          "type": "blockscout"
        },
        "minTimestampForTvl": "1716249601"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing followed by deterministic execution - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/#sequencing-followed-by-deterministic-execution"
            },
            {
              "text": "SequencerInbox.sol - Etherscan source code, addSequencerL2BatchFromOrigin function",
              "href": "https://etherscan.io/address/0x57411f5BA52531e8199066bC8EC650470A744883#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x57411f5BA52531e8199066bC8EC650470A744883#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xe27f3f6db6824def1738b2aACe2672aC59046a39",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x2bfDA59220413DEd39dD0E443620b5277EcE6348",
              "type": "EOA"
            },
            {
              "address": "0x64Cf65036a76E3827e448cadbc53D31EefDCE04a",
              "type": "EOA"
            },
            {
              "address": "0x944eB0a2829A859959586b10D54229278534a696",
              "type": "EOA"
            },
            {
              "address": "0x9A6a3354Ea78572EDB7df8458911e1ceD733c224",
              "type": "EOA"
            },
            {
              "address": "0xe528E74302FFCF6F9F6a1c973968d98F0fDbad8f",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "ExecutorMultisig",
          "description": "This is a Gnosis Safe with 3 / 5 threshold.  Multisig that can execute upgrades via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0x17Eb10e12a78f986C78F973Fc70eD88072B33B7d",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x08E674c4538caE03B6c05405881dDCd95DcaF5a8",
              "type": "EOA"
            },
            {
              "address": "0xc1f4D15C16A1f3555E0a5F7AeFD1e17AD4aaf40B",
              "type": "EOA"
            },
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0x94561e98DD5E55271f91A103e4979aa6C493745E",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "BridgerOwnerMultisig",
          "description": "This is a Gnosis Safe with 3 / 5 threshold.  Multisig that can upgrade the Bridger gateway contract. It also owns the Socket contracts used as escrows for bridged assets.",
          "accounts": [
            {
              "address": "0xf152Abda9E4ce8b134eF22Dc3C6aCe19C4895D82",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x5D973Ea995d14799E528B14472346bfDE21eAe2e",
              "type": "EOA"
            },
            {
              "address": "0x08E674c4538caE03B6c05405881dDCd95DcaF5a8",
              "type": "EOA"
            },
            {
              "address": "0xc1f4D15C16A1f3555E0a5F7AeFD1e17AD4aaf40B",
              "type": "EOA"
            },
            {
              "address": "0x94561e98DD5E55271f91A103e4979aa6C493745E",
              "type": "EOA"
            },
            {
              "address": "0xc31C4549356d46c37021393EeEb6f704B38061eC",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Bridger Sender Account",
          "description": "EOA privileged to call `depositBySig()` on the Bridger gateway to deposit assets to the L2 using pre-signed transactions from users.",
          "accounts": [
            {
              "address": "0x89A01e3B2C3A16c3960EADc2ceFcCf2D3AA3F82e",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Mainnet full launch",
          "link": "https://medium.com/mamori-finance/%EF%B8%8F-engen-is-over-kinto-is-launching-d9f2dd49fb2e",
          "date": "2024-05-22T00:00:00Z",
          "description": "Engen mining is completed and locked funds are bridged to the Kinto L2.",
          "type": "general"
        },
        {
          "name": "Kinto Mainnet Genesis",
          "link": "https://medium.com/mamori-finance/%EF%B8%8F-kintos-launch-the-set-up-7eddfbb4bc38",
          "date": "2023-12-15T00:00:00Z",
          "description": "Kinto mainnet is launched. Deposits by users are disabled.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": null,
      "badges": ["Caldera", "Orbit", "EthereumBlobs", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "RWA"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Kinto",
        "slug": "kinto",
        "headerWarning": "",
        "description": "Kinto is an Orbit stack L2 with account abstraction and KYC enabled for all users, supporting both modern financial institutions and decentralized protocols.",
        "links": {
          "websites": ["https://kinto.xyz"],
          "apps": ["https://engen.kinto.xyz"],
          "documentation": ["https://docs.kinto.xyz"],
          "explorers": [
            "https://explorer.kinto.xyz/",
            "https://kintoscan.io/",
            "https://searchkinto.com/"
          ],
          "repositories": ["https://github.com/kintoxyz"],
          "socialMedia": [
            "https://twitter.com/kintoxyz",
            "https://discord.com/invite/kinto",
            "https://mirror.xyz/kintoxyz.eth",
            "https://medium.com/mamori-finance"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimistic Rollup",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Kinto is an Optimistic Rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted to the L1. Forced txs can be delayed up to 1d. The state root gets finalized 6d 8h after it has been posted."
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Fraud proof submission is not sufficiently decentralized.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.",
            "The Security Council is not properly set up."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": false,
                "description": "No source-available node exists that can recreate the state from L1 data."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Fraud proof submission is not sufficiently decentralized."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": false,
                "description": "The Security Council is not properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Fraud proof submission is open only to whitelisted actors."
              },
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": {
          "type": "warning",
          "text": "There is no available node software that can reconstruct the state from L1 data, hence there is no way to verify that this system is a rollup."
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "Fraud proofs allow 5 WHITELISTED actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. There is a 6d 8h challenge period.",
          "sentiment": "warning",
          "definingMetric": 5,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x859a53Fe2C8DA961387030E7CB498D6D20d0B2DB",
            "newVersion": true,
            "sinceTimestamp": "1702607855",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x859a53Fe2C8DA961387030E7CB498D6D20d0B2DB",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x74C717C01425eb475A5fC55d2A4a9045fC9800df"],
                "implementations": [
                  "0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x0f1b7bd7762662B23486320AA91F30312184f70C",
            "newVersion": true,
            "sinceTimestamp": "1710248135",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x0f1b7bd7762662B23486320AA91F30312184f70C",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xf152Abda9E4ce8b134eF22Dc3C6aCe19C4895D82"],
                "implementations": [
                  "0x21D3921B50617BDef223207118950B0b577e4007"
                ]
              },
              "chain": "ethereum",
              "description": "Bridger gateway that can swap assets to 'L2 final assets' before bridging them to the L2.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x00A0c9d82B95a17Cdf2D46703F2DcA13EB0E8A94",
            "sinceTimestamp": "1716142367",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WETH"],
            "chain": "ethereum"
          },
          {
            "address": "0xc5d01939Af7Ce9Ffc505F0bb36eFeDde7920f2dc",
            "sinceTimestamp": "1716128303",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wstETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x755cD5d147036E11c76F1EeffDd94794fC265f0d",
            "sinceTimestamp": "1716142595",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "ethereum"
          },
          {
            "address": "0x12Cf431BdF7F143338cC09A0629EDcCEDCBCEcB5",
            "sinceTimestamp": "1715972567",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["DAI"],
            "chain": "ethereum"
          },
          {
            "address": "0x351d8894fB8bfa1b0eFF77bFD9Aab18eA2da8fDd",
            "sinceTimestamp": "1716142919",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["ENA"],
            "chain": "ethereum"
          },
          {
            "address": "0xdf34E61B6e7B9e348713d528fEB019d504d38c1e",
            "sinceTimestamp": "1716143207",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDe"],
            "chain": "ethereum"
          },
          {
            "address": "0xdb161cdc9c11892922F7121a409b196f3b00e640",
            "sinceTimestamp": "1716143711",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["EIGEN"],
            "chain": "ethereum"
          },
          {
            "address": "0xc7a542f73049C11f9719Be6Ff701fCA882D60020",
            "sinceTimestamp": "1716143759",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["eETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x5B8Ae1C9c5970e2637Cf3Af431acAAebEf7aFb85",
            "sinceTimestamp": "1716143807",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sDAI"],
            "chain": "ethereum"
          },
          {
            "address": "0x43b718Aa5e678b08615CA984cbe25f690B085b32",
            "sinceTimestamp": "1716143855",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sUSDe"],
            "chain": "ethereum"
          },
          {
            "address": "0xD357F7Ec4826Bd1234CDA2277B623F6dE7dA56Dc",
            "sinceTimestamp": "1716143903",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wUSDM"],
            "chain": "ethereum"
          },
          {
            "address": "0xeB66259d2eBC3ed1d3a98148f6298927d8A36397",
            "sinceTimestamp": "1716143951",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["weETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x95d60E34aB2E626407d98dF8C240e6174e5D37E5",
            "sinceTimestamp": "1716216227",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["ETHFI"],
            "chain": "ethereum"
          },
          {
            "address": "0xfDF267c43c0C868046c66695c1a85c973418CBFb",
            "sinceTimestamp": "1716142417",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WETH"],
            "chain": "base"
          },
          {
            "address": "0xE194f2B41A5dc6Be311aD7811eF391a0ac84687d",
            "sinceTimestamp": "1716128411",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wstETH"],
            "chain": "base"
          },
          {
            "address": "0xc7744d1A93c56a6eE12CCF1F2264641F219528fE",
            "sinceTimestamp": "1716142647",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "base"
          },
          {
            "address": "0x9354E3822CE6BF77B2761f8922972BB767D771d8",
            "sinceTimestamp": "1715972109",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["DAI"],
            "chain": "base"
          },
          {
            "address": "0x8de880ecA6B95214C1ECd1556BF1DB4d23f212B5",
            "sinceTimestamp": "1716143999",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["weETH"],
            "chain": "base"
          },
          {
            "address": "0x4D585D346DFB27b297C37F480a82d4cAB39491Bb",
            "sinceTimestamp": "1716142397",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WETH"],
            "chain": "arbitrum"
          },
          {
            "address": "0x6F855dE562CC9d019757f5F68a15Cd392FF52962",
            "sinceTimestamp": "1716128387",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wstETH"],
            "chain": "arbitrum"
          },
          {
            "address": "0xC88A469B96A62d4DA14Dc5e23BDBC495D2b15C6B",
            "sinceTimestamp": "1716142624",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "arbitrum"
          },
          {
            "address": "0x36E2DBe085eE4d028fD60f70670f662365d0E978",
            "sinceTimestamp": "1715972440",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["DAI"],
            "chain": "arbitrum"
          },
          {
            "address": "0x7C852c2a3e367453Ce3a68A4D12c313BaD0565e3",
            "sinceTimestamp": "1716143237",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDe"],
            "chain": "arbitrum"
          },
          {
            "address": "0x8bD30d8c5d5cBb5e41Af7B9A4bD654b34772e890",
            "sinceTimestamp": "1716143980",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["weETH"],
            "chain": "arbitrum"
          },
          {
            "address": "0x500c8337782a9f82C5376Ea71b66A749cE42b507",
            "sinceTimestamp": "1717616624",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wUSDM"],
            "chain": "arbitrum"
          },
          {
            "address": "0x25a1baC7314Ff40Ee8CD549251924D066D7d5bC6",
            "sinceTimestamp": "1718367579",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["SolvBTC"],
            "chain": "arbitrum"
          },
          {
            "address": "0x25f0D71Da51A77Ca231484eBbAD1f588A0230ef2",
            "sinceTimestamp": "1721253827",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["PAXG"],
            "chain": "ethereum"
          },
          {
            "address": "0xd04Bc056BE36a6127267E4F71d3b43D1BEEfE8bF",
            "sinceTimestamp": "1721253935",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["XAUt"],
            "chain": "ethereum"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.kinto-rpc.com",
          "defaultCallsPerMinute": 600,
          "startBlock": 1
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xF4Ef823D57819AC7202a081A5B49376BD28E7b3a",
              "selector": "0x8f111f3c",
              "functionSignature": "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1702607855",
              "untilTimestamp": "1721705699"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xF4Ef823D57819AC7202a081A5B49376BD28E7b3a",
              "selector": "0x6f12b0c9",
              "functionSignature": "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder)",
              "sinceTimestamp": "1702607855",
              "untilTimestamp": "1721705699"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xF4Ef823D57819AC7202a081A5B49376BD28E7b3a",
              "selector": "0xe0bc9729",
              "functionSignature": "function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1702607855",
              "untilTimestamp": "1721705699"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xF4Ef823D57819AC7202a081A5B49376BD28E7b3a",
              "selector": "0xe0bc9729",
              "functionSignature": "function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1721705699"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xF4Ef823D57819AC7202a081A5B49376BD28E7b3a",
              "selector": "0x8f111f3c",
              "functionSignature": "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1721705699"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xF4Ef823D57819AC7202a081A5B49376BD28E7b3a",
              "selector": "0x3e5aa082",
              "functionSignature": "function addSequencerL2BatchFromBlobs(uint256 sequenceNumber,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1721705699"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x655761AD5FC251F414D6993A73184B0669F278c8",
              "selector": "0xa04cee60",
              "functionSignature": "function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external",
              "sinceTimestamp": "1702607855"
            }
          }
        ],
        "finality": "coming soon"
      }
    },
    {
      "type": "layer2",
      "id": "kroma",
      "createdAt": "1686820004",
      "badges": ["EVM", "EthereumBlobs", "OPStack", "Superchain"],
      "display": {
        "name": "Kroma",
        "slug": "kroma",
        "description": "Kroma aims to develop an universal ZK Rollup based on the Optimism Bedrock architecture. Currently, Kroma operates as an Optimistic Rollup with ZK fault proofs, utilizing a zkEVM based on Scroll.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://kroma.network/"],
          "apps": ["https://kroma.network/bridge/"],
          "documentation": [
            "https://docs.kroma.network/",
            "https://specs.kroma.network/"
          ],
          "explorers": [
            "https://kromascan.com/",
            "https://blockscout.kroma.network/"
          ],
          "repositories": ["https://github.com/kroma-network/"],
          "socialMedia": [
            "https://discord.com/invite/kroma-network",
            "https://twitter.com/kroma_network",
            "https://medium.com/@kroma-network"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Kroma is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": {
        "name": "kroma",
        "chainId": 255,
        "explorerUrl": "https://kromascan.com",
        "explorerApi": {
          "url": "https://api.kromascan.com/api",
          "type": "etherscan"
        },
        "multicallContracts": [],
        "minTimestampForTvl": "1693882800"
      },
      "config": {
        "escrows": [
          {
            "address": "0x31F648572b67e60Ec6eb8E197E1848CC5F5558de",
            "newVersion": true,
            "sinceTimestamp": "1693880555",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x31F648572b67e60Ec6eb8E197E1848CC5F5558de",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
                "implementations": [
                  "0x381F53695230BAF83a39D1a08304D233A35730Fa"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x827962404D7104202C5aaa6b929115C8211d9596",
            "newVersion": true,
            "sinceTimestamp": "1693880555",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x827962404D7104202C5aaa6b929115C8211d9596",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
                "implementations": [
                  "0x404133EdF24F56b7dD9c6d89Fb56bb35244461B4"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x7e1Bdb9ee75B6ef1BCAAE3B1De1c616C7B11ef6e",
            "newVersion": true,
            "sinceTimestamp": "1700122827",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x7e1Bdb9ee75B6ef1BCAAE3B1De1c616C7B11ef6e",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x22605A12cB77Fe420B0cC1263cEb58a77352FDc1"],
                "implementations": [
                  "0xE4e9F3AD8A6F224c4b39854D3550AD258441AfE3"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing USDC.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://api.kroma.network",
          "defaultCallsPerMinute": 1500,
          "startBlock": 1
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x41b8cD6791De4D8f9E0eaF7861aC506822AdcE12",
              "to": "0xfF00000000000000000000000000000000000255",
              "sinceTimestamp": "1693883663"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x180c77aE51a9c505a43A2C7D81f8CE70cacb93A6",
              "selector": "0x5a045f78",
              "functionSignature": "function submitL2Output(bytes32 _outputRoot,uint256 _l2BlockNumber,bytes32 _l1BlockHash,uint256 _l1BlockNumber)",
              "sinceTimestamp": "1693880579"
            }
          }
        ],
        "finality": { "type": "OPStack", "lag": 0, "stateUpdate": "disabled" }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT, ZK)",
          "description": "Fraud proofs allow actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. ZK proofs are used to adjudicate the correctness of the last step. The challenge protocol can be subject to delay attacks and can fail under certain conditions. The current system doesn't use posted L2 txs batches on L1 as inputs to prove a fault, meaning that DA is not enforced.",
          "sentiment": "bad",
          "definingMetric": "Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "KromaPortal",
              "references": [
                "https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#430"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [
            {
              "contract": "KromaPortal",
              "references": [
                "https://etherscan.io/address/0x31F648572b67e60Ec6eb8E197E1848CC5F5558de"
              ]
            }
          ]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [
            {
              "contract": "KromaPortal",
              "references": [
                "https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#430"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can be a Proposer and propose new roots to the L1 bridge.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "L2OutputOracle",
              "references": [
                "https://etherscan.io/address/0x14126FFa3889a026A79F0f99FaE80B3dc9E38095#code#F1#L197"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/kroma-network/kroma)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": true,
                "description": "There are at least 5 external actors who can submit fraud proofs."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": true,
                "description": "The Security Council is properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": true,
                "description": "Fraud proof submission is open to everyone."
              },
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Fraud Proofs ensure state correctness",
          "description": "Kroma uses an interactive fraud proof system to find a single block of disagreement, which is then ZK proven. The zkEVM used is based on Scroll.        Once the single block of disagreement is found, the challenger is required to present ZK proof of the fraud. When the proof is validated, the incorrect        state output is deleted. The Security Council can always override the result of the challenge, it can also delete any L2 state root at any time. If        the malicious attester and challenger collude and are willing to spend bonds, they can perform a delay attack by engaging in continuous challenge        resulting in lack of finalization of the L2 state root on L1. The protocol can also fail under certain conditions.",
          "references": [
            {
              "text": "Colosseum.sol#L300 - Etherscan source code, createChallenge function",
              "href": "https://etherscan.io/address/0xb87eaB624EE684C1799f1E8b24936A1c90759eEc#code#F1#L300"
            },
            {
              "text": "Colosseum.sol#L378 - Etherscan source code, bisect function",
              "href": "https://etherscan.io/address/0xb87eaB624EE684C1799f1E8b24936A1c90759eEc#code#F1#L378"
            },
            {
              "text": "Colosseum.sol#L434 - Etherscan source code, proveFault function",
              "href": "https://etherscan.io/address/0xb87eaB624EE684C1799f1E8b24936A1c90759eEc#code#F1#L434"
            },
            {
              "text": "KROMA-020: lack of validation segments and proofs in Colosseum.sol - ChainLight security audit",
              "href": "https://drive.google.com/file/d/13TUxZ9KPyvUXNZGddALcJLin-xmp_Fkj/view"
            }
          ],
          "risks": [
            {
              "category": "Withdrawals can be delayed if",
              "text": "the fraud proof system is under a delay attack."
            },
            {
              "category": "Funds can be lost if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ]
        },
        "dataAvailability": {
          "name": "All transaction data is recorded on chain",
          "description": "All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch Submission - Kroma specs",
              "href": "https://specs.kroma.network/glossary.html#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xff00000000000000000000000000000000000255"
            },
            {
              "text": "KromaPortal.sol#L430 - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#L430"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "SystemConfig - batcher address",
              "href": "https://etherscan.io/address/0x3971EB866AA9b2b8aFEa8a7C816F3b7e8b195a35#readProxyContract#F3"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - Kroma specs",
              "href": "https://specs.kroma.network/glossary.html#sequencing-window"
            },
            {
              "text": "KromaPortal.sol#430 - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#L430"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "KromaPortal.sol#L241 - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#L241"
              },
              {
                "text": "KromaPortal.sol#L324 - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#L324"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "Kroma nodes source code, including full node, proposer and validator, can be found [here](https://github.com/kroma-network/kroma). Also, the geth server, source maintained [here](https://github.com/kroma-network/go-ethereum), is a fork of go-ethereum. For more details on how they are different from the Optimism implementation, see [here](https://github.com/kroma-network/kroma-specs/blob/main/specs/protocol/differences-from-optimism.md).\nThe instructions to run the proposer (called validator) and the ZK prover, are documented [here](https://docs.kroma.network/developers/running-nodes-on-kroma).",
        "compressionScheme": "Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.",
        "genesisState": "The genesis file can be found [here](https://github.com/kroma-network/kroma-up/blob/main/config/mainnet/genesis.json).",
        "dataFormat": "L2 blocks derivation from L1 data plus the format and architecture of batch submission is documented [here](https://specs.kroma.network/protocol/rollup-node.html#derivation)."
      },
      "permissions": [
        {
          "name": "Spectrum EOA Admin",
          "accounts": [
            {
              "address": "0x7D76Ae60dcc2FdB57d3924024E2Ad940B76Ef81f",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade all Spectrum-related contracts and potentially gain access to all escrowed weETH."
        },
        {
          "name": "SecurityCouncil",
          "accounts": [
            {
              "address": "0x3de211088dF516da72efe68D386b561BEE256Ec4",
              "type": "Contract"
            }
          ],
          "description": "MultiSig (currently 7 / 9) that is a guardian of KromaPortal, privileged Validator that does not need a bond         and privileged actor in Colosseum contract that can remove any L2Output state root regardless of the outcome of the challenge."
        },
        {
          "name": "SecurityCouncil members",
          "accounts": [
            {
              "address": "0x3aa00bb915A8e78b0523E4c365e3E70A19d329e6",
              "type": "EOA"
            },
            {
              "address": "0x77Fe100758c5320cdfBb4f4a0Bed57885c97158A",
              "type": "EOA"
            },
            {
              "address": "0x8ECF028Cd647379E580DaA6701A11154750fcd3c",
              "type": "EOA"
            },
            {
              "address": "0x42a4f1958A5d99A62C50eb24a80d1D8b142ea3A1",
              "type": "EOA"
            },
            {
              "address": "0x7B3225ADc5D908668FaA050246680CBE4e75A93f",
              "type": "EOA"
            },
            {
              "address": "0x5ddcf494A8b6EeE4904934E829109cCF584EAF80",
              "type": "EOA"
            },
            {
              "address": "0xECe4AAf6A41aa81A164363Ec6C420510617Fc998",
              "type": "EOA"
            },
            {
              "address": "0x3a4F65D1ACFb2A3F5AD93ef7b240bfa1079052e0",
              "type": "EOA"
            },
            {
              "address": "0x66FA82F4AEA284d1d208437F179dFE13d8118f3A",
              "type": "EOA"
            }
          ],
          "description": "Members of the SecurityCouncil.",
          "references": [
            {
              "text": "Security Council members - Announcing Kroma Security Council",
              "href": "https://blog.kroma.network/announcing-kroma-security-council-435b540d2ab4"
            }
          ]
        },
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x41b8cD6791De4D8f9E0eaF7861aC506822AdcE12",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to commit L2 transactions on L1."
        },
        {
          "name": "Guardian",
          "accounts": [
            {
              "address": "0x3de211088dF516da72efe68D386b561BEE256Ec4",
              "type": "Contract"
            }
          ],
          "description": "Actor allowed to pause withdrawals. Currently set to the Security Council."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x180c77aE51a9c505a43A2C7D81f8CE70cacb93A6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0x14126FFa3889a026A79F0f99FaE80B3dc9E38095"]
            },
            "chain": "ethereum",
            "description": "The L2OutputOracle contract contains a list of proposed state roots which Proposers assert to be a result of block execution. Anyone can participate as a Proposer by depositing in the ValidatorPool. A root can be proposed every 1h.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "KromaPortal",
            "address": "0x31F648572b67e60Ec6eb8E197E1848CC5F5558de",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0x381F53695230BAF83a39D1a08304D233A35730Fa"]
            },
            "chain": "ethereum",
            "description": "The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x3971EB866AA9b2b8aFEa8a7C816F3b7e8b195a35",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0x2af8a383C395EBa6551E674EeD02344936fE36f5"]
            },
            "chain": "ethereum",
            "description": "It contains configuration parameters such as the Sequencer address, the L2 gas limit and the unsafe block signer address.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x46d07221dfC313afe1BF104F4bB1f185301D65B9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0xbB1cDB5Cc35B1c9801DA8772aCBcDbd323A912D9"]
            },
            "chain": "ethereum",
            "description": "The L1ERC721Bridge contract is the main entry point to deposit ERC721 tokens from L1 to L2.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x46B8bB4C5dd27bB42807Db477af4d1a7C8A5B746",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0x675924D68200F2C967Ba12349d5d510676C7214c"]
            },
            "chain": "ethereum",
            "description": "The L1 Cross Domain Messenger contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "Timelock",
            "address": "0x22605A12cB77Fe420B0cC1263cEb58a77352FDc1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0xe44da6e9fA92E3FD897Da84d38fa6B9322Dd22c3"]
            },
            "chain": "ethereum",
            "description": "Timelock contract behind which the ProxyAdmin is. There is a 0s delay."
          },
          {
            "name": "SecurityCouncil",
            "address": "0x3de211088dF516da72efe68D386b561BEE256Ec4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0x61c7C854Dcdf8393230B1242a4c1107f4d023c28"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to start upgrades, dismiss challenges and delete roots. It is also designated as a guardian, meaning it can pause withdrawals.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "UpgradeGovernor",
            "address": "0xb3c415c2Aad428D5570208e1772cb68e7D06a537",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0x64F8F4EB207D51F74caf6db644Bf710Ad86989b3"]
            },
            "chain": "ethereum",
            "description": "Controls the Timelock. It is governed using a Soulbound NFT."
          },
          {
            "name": "ProxyAdmin",
            "address": "0x665c23A5722B6A237fa6Be2B49c0A94504db1edd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Admin of the L2OutputOracle, Timelock, KromaPortal, SystemConfig, SecurityCouncil, L1CrossDomainMessenger, L1ERC721Bridge, ZKVerifier, Colosseum, L1StandardBridge, UpgradeGovernor, SecurityCouncilToken, ValidatorPool proxies. It's effectively controlled by the Security Council. The proxy is behind a Timelock."
          },
          {
            "name": "Colosseum",
            "address": "0x713C2BEd44eB45D490afB8D4d1aA6F12290B829a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0xb87eaB624EE684C1799f1E8b24936A1c90759eEc"]
            },
            "chain": "ethereum",
            "description": "Contract used to challenge state roots and prove fraud. The SecurityCouncil can interfere by deleting challenges and roots.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "ValidatorPool",
            "address": "0xFdFF462845953D90719A78Fd12a2d103541d2103",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0x8EDc4cCa2aF96f5D5141d55333043a65c3f59Ec4"]
            },
            "chain": "ethereum",
            "description": "Contract used to manage the Proposers. Anyone can submit a deposit and bond to a state root, or create a challenge. It also manages the Proposer rotation for each submittable block using a random selection. If the selected proposer fails to publish a root within 30m, then the submission becomes open to everyone.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "ZKMerkleTrie",
            "address": "0x339208824010425cBE73201ceD4372308ACD610B",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Trie contract used to prove withdrawals."
          },
          {
            "name": "ZKVerifier",
            "address": "0x6deb6a630D7b486c1C08d4016AEe3835a2F52Fa7",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],
              "implementations": ["0x4cd05aB629055a449617a28E3466660403eA7126"]
            },
            "chain": "ethereum",
            "description": "ZK verifier used to verify the last step of a fraud proof, which corresponds to a block.",
            "upgradableBy": ["SecurityCouncil"],
            "upgradeDelay": "0s delay"
          },
          {
            "name": "Poseidon2",
            "address": "0xFd234971881a7c72965175fA8E438c97B2Dcd273",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to compute hashes. It is used by the ZKMerkeTrie. The contract has been generated using the circomlibjs library."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 0s delay on code upgrades."
          }
        ]
      },
      "milestones": [
        {
          "name": "Chain fork #2 - Output root replaced",
          "link": "https://x.com/kroma_network/status/1774683208753590506",
          "date": "2024-04-05T00:00:00Z",
          "description": "The chain forked and an L2 output on Ethereum has to be replaced by the Security Council.",
          "type": "incident"
        },
        {
          "name": "Chain fork - Output root replaced",
          "link": "https://x.com/kroma_network/status/1767478100819153009",
          "date": "2024-03-18T00:00:00Z",
          "description": "The chain forked and an L2 output on Ethereum has to be replaced by the Security Council.",
          "type": "incident"
        },
        {
          "name": "Ecotone upgrade",
          "link": "https://twitter.com/kroma_network/status/1783410075346063564",
          "date": "2024-04-25T00:00:00.00Z",
          "description": "Introduces EIP-4844 data blobs for L1 data availability and more L2 opcodes.",
          "type": "general"
        },
        {
          "name": "Kroma Mainnet Launch",
          "link": "https://twitter.com/kroma_network/status/1699267271968055305?s=20",
          "date": "2023-09-06T00:00:00Z",
          "description": "Kroma is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Kroma’s Road to Stage 2",
          "url": "https://blog.kroma.network/kromas-road-to-stage-2-0c02e41d8c99",
          "thumbnail": "kroma-01.jpg"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "lambda",
      "createdAt": "1718703383",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x850DFdB4035db757e49eCF997ef051290959167A#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xfF00000000000000000000000000000000056026"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x5865A0BCf08dd24A0691Dc746F181EDc6821bea9#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x850DFdB4035db757e49eCF997ef051290959167A#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x850DFdB4035db757e49eCF997ef051290959167A#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x5865A0BCf08dd24A0691Dc746F181EDc6821bea9#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x5865A0BCf08dd24A0691Dc746F181EDc6821bea9#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x5865A0BCf08dd24A0691Dc746F181EDc6821bea9#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x850DFdB4035db757e49eCF997ef051290959167A#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x864A02Ca4a40616f8995709D1B26CDe588709043",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xD5FDcf4ab4b682ab8D4a99fBE1b6Bd08dC83Ea40",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0xC16EAEDaB78E033B555c9eF3C326c07B49F21907",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xDeC273BF31AD79ad00D619c52662f724176A12Fb",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "GnosisSafe",
          "description": "* This is a Gnosis Safe with 1 / 1 threshold. \n* Can act on behalf of ProxyAdmin.\n",
          "accounts": [
            {
              "address": "0x0b489aC3516F692159E4E5cc0C4a17B11fD6a501",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xD5FDcf4ab4b682ab8D4a99fBE1b6Bd08dC83Ea40",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x864A02Ca4a40616f8995709D1B26CDe588709043",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Challenger."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xC16EAEDaB78E033B555c9eF3C326c07B49F21907",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0xD5FDcf4ab4b682ab8D4a99fBE1b6Bd08dC83Ea40",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "* Member of GnosisSafe.\n* Can change configuration of AddressManager (acting via ProxyAdmin, GnosisSafe) - set and change address mappings.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n* Can upgrade implementation of SuperchainConfig, L2OutputOracle, OptimismMintableERC20Factory, OptimismPortal, L1ERC721Bridge, SystemConfig (acting via ProxyAdmin, GnosisSafe).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin, GnosisSafe) - upgrading bridge implementation allows to access all funds and change every system component.\n"
        },
        {
          "name": "EOA 4",
          "accounts": [
            {
              "address": "0xDeC273BF31AD79ad00D619c52662f724176A12Fb",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "SuperchainConfig",
            "address": "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
              "implementations": ["0x527021A71d6E76Bb4243A0BabAd4e160245b8aAE"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["EOA 3"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SuperchainConfig, L2OutputOracle, OptimismMintableERC20Factory, OptimismPortal, L1ERC721Bridge, SystemConfig.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x2297eB8DC91f532C91c57b3fb33C06b782e9594A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
              "implementations": ["0x850DFdB4035db757e49eCF997ef051290959167A"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["EOA 3"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x5C3D1b1334b6939e6D042BF5E15249cF86A875A4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
              "implementations": ["0x4CA20D48C87129Df90A3cAd73000568331548316"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["EOA 3"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x624808dc4A34B79B90C3c085942D2100F09A0376",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "OptimismPortal",
            "address": "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
              "implementations": ["0x5865A0BCf08dd24A0691Dc746F181EDc6821bea9"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["EOA 3"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x26B5810033fd2380c87F9E22CC20101778b5F584"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x8334f9A70294556101527bfB9bdEdeF7EB382D94",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
              "implementations": ["0x5121000767198Ad7D60fe8e47458F556B7B51aa0"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["EOA 3"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0xae809d42f861A6381b0DFCf7216556e95362a7a8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
              "implementations": ["0x781dAB53cC9d9870a96A84f4AE3130c084a2fAfD"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["EOA 3"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
              "implementations": ["0x3aF70e7103d29a9466663514DE3C421769b30382"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["EOA 3"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Lambda Chain Mainnet Launch",
          "link": "https://lambdanetwork.medium.com/lambda-is-about-to-launch-a-permanent-storage-da-network-leveraging-das-technology-to-provide-data-cdc80c8f69d1",
          "date": "2024-04-17T00:00:00.00Z",
          "description": "Lambda Chain is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "Storage"],
        "architectureImage": "bedrock-superchain",
        "name": "Lambda Chain",
        "slug": "lambda",
        "redWarning": "Critical contracts can be upgraded by an EOA which could result in the loss of all funds.",
        "description": "Lambda Chain is an OP Stack Rollup on Ethereum, focusing on long-term data storage and -availability.",
        "links": {
          "websites": ["https://lambda.im/"],
          "apps": ["https://portal.lambda.im/bridge/"],
          "documentation": [
            "https://docs.lambda.im/",
            "https://docs.optimism.io/"
          ],
          "explorers": ["https://scan.lambda.im/"],
          "repositories": ["https://github.com/LambdaIM"],
          "socialMedia": [
            "https://twitter.com/Lambdaim",
            "https://discord.gg/lambdastorage",
            "https://t.me/HelloLambda"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Lambda Chain is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": {
        "name": "lambda",
        "chainId": 56026,
        "explorerUrl": "https://scan.lambda.im",
        "explorerApi": {
          "url": "https://scan.lambda.im/api",
          "type": "blockscout"
        },
        "blockscoutV2ApiUrl": "https://scan.lambda.im/api/v2",
        "minTimestampForTvl": "1713345623",
        "multicallContracts": []
      },
      "config": {
        "associatedTokens": ["LAMB"],
        "escrows": [
          {
            "address": "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054",
            "newVersion": true,
            "sinceTimestamp": "1713347123",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
                "implementations": [
                  "0x5865A0BCf08dd24A0691Dc746F181EDc6821bea9"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F",
            "newVersion": true,
            "sinceTimestamp": "1713347147",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"],
                "implementations": [
                  "0x3aF70e7103d29a9466663514DE3C421769b30382"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://nrpc.lambda.im",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0xDeC273BF31AD79ad00D619c52662f724176A12Fb",
              "to": "0xfF00000000000000000000000000000000056026",
              "sinceTimestamp": "1713345623"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x2297eB8DC91f532C91c57b3fb33C06b782e9594A",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1713347207"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "layerai",
      "createdAt": "1722861199",
      "display": {
        "name": "LayerAI",
        "slug": "layerai",
        "description": "LayerAI is the dedicated blockchain network for data monetization within AI models. It functions as a sophisticated ecosystem strategically crafted to expedite the rise of the data economy. The LayerAI ecosystem empowers individuals to step into a transformative epoch where they can own, control, and capitalize on their most substantial digital asset – Data.",
        "purposes": ["AI"],
        "category": "ZK Rollup",
        "provider": "Polygon",
        "links": {
          "websites": ["https://layerai.org/"],
          "apps": ["https://kyotox.com/", "https://layervpn.com/"],
          "documentation": ["https://docs.layerai.org/"],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://t.me/LayerAI_org",
            "https://x.com/LayerAIorg"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isArchived": true,
      "type": "layer2",
      "id": "layer2finance",
      "createdAt": "1623153328",
      "display": {
        "name": "Layer2.Finance",
        "slug": "layer2finance",
        "warning": "Currently the TVL is calculated incorrectly, because it does not take assets locked in DeFi into account.",
        "description": "Layer2.Finance aims to democratize access to DeFi protocols for everyone. Users can aggregate their DeFi usage and save on Ethereum fees.",
        "purposes": ["Exchange"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://layer2.finance/"],
          "apps": ["https://app.l2.finance/"],
          "documentation": ["https://docs.l2.finance/"],
          "explorers": [],
          "repositories": [
            "https://github.com/celer-network/layer2-finance-contracts"
          ],
          "socialMedia": [
            "https://discord.gg/uGx4fjQ",
            "https://t.me/celernetwork",
            "https://twitter.com/CelerNetwork"
          ]
        }
      },
      "config": {
        "escrows": [
          {
            "address": "0xf86FD6735f88d5b6aa709B357AD5Be22CEDf1A05",
            "sinceTimestamp": "1619011215",
            "tokens": ["BUSD", "DAI", "USDC", "USDT", "WETH"],
            "chain": "ethereum"
          }
        ]
      },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stage": { "stage": "UnderReview" },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": {
        "isUnderReview": true,
        "addresses": [
          {
            "name": "RollupChain",
            "address": "0xf86FD6735f88d5b6aa709B357AD5Be22CEDf1A05"
          },
          {
            "name": "TransitionDisputer",
            "address": "0x5D3c0F4cA5EE99f8E8F59Ff9A5fAb04F6a7e007f"
          },
          {
            "name": "Registry",
            "address": "0xFe81ab6930A30BdaE731fe7b6C6ABFbEAFc014a8"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "the owner calls owner-only functions that pause the contract and drain funds.",
            "isCritical": true
          }
        ],
        "references": [
          {
            "text": "RollupChain.sol#L460-L496 - Layer2.Finance source code",
            "href": "https://github.com/celer-network/layer2-finance-contracts/blob/61ed0f17a15e8ba06778776ade1a82956a9de842/contracts/RollupChain.sol#L460-L496"
          }
        ]
      }
    },
    {
      "type": "layer2",
      "id": "layer2financezk",
      "createdAt": "1654522914",
      "isArchived": true,
      "display": {
        "name": "L2.Finance-zk",
        "slug": "layer2financezk",
        "warning": "Layer2.finance-ZK has been shut down, users are encouraged to use optimistic rollup version.",
        "description": "Celer’s Layer2.finance in ZK proofs Mode Built with StarkEx from StarkWare.",
        "purposes": ["Exchange"],
        "provider": "StarkEx",
        "category": "Validium",
        "links": {
          "websites": ["https://layer2.finance/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [
            "https://github.com/starkware-libs/starkex-contracts",
            "https://github.com/celer-network/defi-pooling-broker-contracts"
          ],
          "socialMedia": [
            "https://discord.gg/uGx4fjQ",
            "https://t.me/celernetwork",
            "https://twitter.com/CelerNetwork"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "escrows": [
          {
            "address": "0x82123571C8a5e0910280C066bc634c4945FFcbC8",
            "sinceTimestamp": "1645130774",
            "tokens": ["ETH", "USDC", "USDT"],
            "chain": "ethereum"
          },
          {
            "address": "0x8581cd55ff53F1F85A237fa9D60E72a79f0973b6",
            "sinceTimestamp": "1648621885",
            "tokens": ["cETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x4455E4435Cf7e6B6A4Df17bEAE1A413ef3663B90",
            "sinceTimestamp": "1647862894",
            "tokens": ["cETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x3F3b821243E5664822c0babBA2B4f37bf294e7a0",
            "sinceTimestamp": "1648621976",
            "tokens": ["cUSDC"],
            "chain": "ethereum"
          }
        ]
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for , users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": null
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/withdrawal-perpetual.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"
              },
              {
                "text": "Forced Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"
              },
              {
                "text": "Forced Trade - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"
              },
              {
                "text": "Forced Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"
              },
              {
                "text": "Forced Trade - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchange",
            "address": "0x82123571C8a5e0910280C066bc634c4945FFcbC8",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": ["0x1E153596BceB29c6EAE88DDB290eBeCC3FE9735e"],
              "implementations": [
                "0x4EDD62189732e9fF476ABa880b48c29432A7AC9B",
                "0x62BCA4DB742A99c834e2c24b609656A70EA25379",
                "0x8536850750956c2FEebeCAB786d82271a5467687",
                "0x1c3A4EfF75a287Fe6249CAb49606FA25659929A2",
                "0x3799ad2a4Eb4E882219B02C036656d4ECbD437A1",
                "0x1688abB0B5c72F34B7f78e857Aa317deD5B5D339",
                "0xB3788a88F063B217227E27ae16Ba550db3132bE6"
              ],
              "immutable": false
            },
            "chain": "ethereum"
          },
          {
            "name": "Committee",
            "address": "0xF000A3B10e1920aDC6e7D829828e3357Fc5128A9"
          },
          {
            "name": "Broker",
            "description": "Broker manages investment strategies on L1 for tokens deposited to the system. Strategies invest in specific protocols, e.g. Compound and they escrow LP tokens as custom Wrapped tokens.",
            "address": "0xe7c753895d492f8D4B06a2A1B16c1aEF2A7d16E5"
          },
          {
            "name": "StrategyCompound",
            "description": "It is through this contract that groups of users interact with the Compound DeFi protocol.",
            "address": "0x5b000954F70B0410685193B0afd3074B744B5C97"
          },
          {
            "name": "GpsFactRegistryAdapter",
            "address": "0x6e3AbCE72A3CD5edc05E59283c733Fd4bF8B3baE"
          },
          {
            "name": "OrderRegistry",
            "address": "0x518c4A79a1102eEDc987005CA8cE6B87Ca14dDf8"
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governor",
          "accounts": [
            {
              "address": "0x1E153596BceB29c6EAE88DDB290eBeCC3FE9735e",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge. Currently there is no delay before the upgrade, so the users will not have time to migrate."
        },
        {
          "name": "Data Availability Committee",
          "accounts": [],
          "description": "There exists a Data Availability Committee with unknown members and an unverified smart contract."
        },
        {
          "name": "SHARP Verifier Governor",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is no delay before the upgrade, so the users will not have time to migrate."
        },
        {
          "name": "Broker Owner",
          "accounts": [
            {
              "address": "0xe0b79Cf6311E72caF7D31a552BFec67841Dd5988",
              "type": "EOA"
            }
          ],
          "description": "Most Broker functionality is restricted only for the owner, it includes managing rides, setting prices or slippages, burning shares."
        },
        {
          "name": "Operator",
          "accounts": [
            {
              "address": "0x85A732d8e21f1890BdeA4eDddCf4Dd0E70a31EA5",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update state of the system. When Operator is down the state cannot be updated."
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "lens",
      "createdAt": "1716536821",
      "display": {
        "name": "Lens",
        "slug": "lens",
        "description": "Lens Network is the main social networking hub for the entire user base of Lens Protocol, built using ZKsync's ZK Stack technology.",
        "purposes": ["Social"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://lens.xyz"],
          "apps": [],
          "documentation": ["https://docs.lens.xyz"],
          "explorers": ["https://momoka.lens.xyz"],
          "repositories": ["https://github.com/lens-protocol"],
          "socialMedia": [
            "https://hey.xyz/u/lens",
            "https://x.com/lensprotocol",
            "https://discord.com/invite/lensprotocol"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "linea",
      "createdAt": "1679651674",
      "display": {
        "name": "Linea",
        "slug": "linea",
        "warning": "The circuit of the program being proven is not public.",
        "description": "Linea is a ZK Rollup powered by Consensys zkEVM, designed to scale the Ethereum network.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://linea.build/"],
          "apps": ["https://bridge.linea.build/"],
          "documentation": ["https://docs.linea.build/"],
          "explorers": [
            "https://lineascan.build/",
            "https://explorer.linea.build/",
            "https://linea.l2scan.co/"
          ],
          "repositories": [
            "https://github.com/Consensys?q=linea&type=all&language=&sort=stargazers"
          ],
          "socialMedia": [
            "https://twitter.com/LineaBuild",
            "https://discord.gg/linea",
            "https://linea.mirror.xyz/",
            "https://community.linea.build/"
          ],
          "rollupCodes": "https://rollup.codes/linea"
        },
        "activityDataSource": "Blockchain RPC",
        "liveness": {
          "explanation": "Linea is a ZK rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted on L1. Tx data, proofs and state roots are currently posted in the same transaction. Blocks can also be finalized by the operator without the need to provide a proof."
        },
        "finality": { "finalizationPeriod": 0 }
      },
      "config": {
        "escrows": [
          {
            "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
            "newVersion": true,
            "sinceTimestamp": "1689159923",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xF5058616517C068C7b8c7EbC69FF636Ade9066d6"],
                "implementations": [
                  "0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x504A330327A089d8364C4ab3811Ee26976d388ce",
            "newVersion": true,
            "sinceTimestamp": "1691079071",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x504A330327A089d8364C4ab3811Ee26976d388ce",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x41fAD3Df1B07B647D120D055259E474fE8046eb5"],
                "implementations": [
                  "0x0eC393209674090368C592A591B25811e490BF36"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319",
            "newVersion": true,
            "sinceTimestamp": "1691060675",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xF5058616517C068C7b8c7EbC69FF636Ade9066d6"],
                "implementations": [
                  "0xd52c09E67aF3BE0977B52b4817366e9BaB5dCFA2"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://linea-mainnet.infura.io/v3",
          "startBlock": 1
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
              "selector": "0x7a776315",
              "functionSignature": "function submitData((bytes32,bytes32,bytes32,uint256,uint256,bytes32,bytes))",
              "sinceTimestamp": "1707831168"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
              "selector": "0x2d3c12e5",
              "functionSignature": "function submitBlobData(tuple(bytes32,bytes32,bytes32,uint256,uint256,bytes32),uint256,bytes,bytes)",
              "sinceTimestamp": "1711449407",
              "untilTimestamp": "1717588271"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
              "selector": "0x42fbe842",
              "functionSignature": "function submitBlobs(((bytes32,uint256,uint256,bytes32),uint256,bytes,bytes)[], bytes32, bytes32)",
              "sinceTimestamp": "1717588271"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
              "selector": "0x4165d6dd",
              "functionSignature": "function finalizeBlocks((bytes32, uint32, bytes[], bytes32[], bytes, uint16[])[] _blocksData,bytes _proof,uint256 _proofType,bytes32 _parentStateRootHash)",
              "sinceTimestamp": "1689159923",
              "untilTimestamp": "1707831168"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
              "selector": "0xd630280f",
              "functionSignature": "function finalizeCompressedBlocksWithProof(bytes,uint256,(bytes32,bytes32[],bytes32,uint256,uint256,uint256,bytes32,uint256,bytes32[],uint256,bytes))",
              "sinceTimestamp": "1707831168",
              "untilTimestamp": "1717508999"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
              "selector": "0xabffac32",
              "functionSignature": "function finalizeBlocksWithProof(bytes,uint256,(bytes32,bytes32,uint256,(bytes32,bytes32,bytes32,bytes32,bytes32),uint256,uint256,bytes32,bytes32,uint256,uint256,uint256,bytes32[],bytes))",
              "sinceTimestamp": "1717508999"
            }
          }
        ],
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": {
          "type": "Linea",
          "lag": 0,
          "minTimestamp": "1717588271",
          "stateUpdate": "disabled"
        }
      },
      "chainConfig": {
        "name": "linea",
        "chainId": 59144,
        "explorerUrl": "https://lineascan.build",
        "explorerApi": {
          "url": "https://api.lineascan.build/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1689775200",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 42,
            "version": "3"
          }
        ],
        "coingeckoPlatform": "linea"
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "zkEVM",
              "references": [
                "https://etherscan.io/address/0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562#code"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1. Unlike most ZK rollups, transaction data is posted instead of state diffs.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "zkEVM",
              "references": [
                "https://etherscan.io/address/0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562#code"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring.",
          "sentiment": "bad"
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.",
            "Security Council members are not publicly known."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": false,
                "description": "No source-available node exists that can recreate the state from L1 data."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": false,
                "description": "Security Council members are not publicly known."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": {
          "type": "warning",
          "text": "There is no available node software that can reconstruct the state from L1 data, hence there is no way to verify that this system is a rollup."
        }
      },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": []
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. Operator can finalize L2 state root without proof.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the operator forces and finalizes L2 state root without proof."
            }
          ],
          "references": [
            {
              "text": "ZkEvmV2.sol - Etherscan source code, _verifyProof() function",
              "href": "https://etherscan.io/address/0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "LineaRollup.sol - Etherscan source code, submitData() function",
              "href": "https://etherscan.io/address/0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "LineaRollup.sol - Etherscan source code, onlyRole(OPERATOR_ROLE) modifier",
              "href": "https://etherscan.io/address/0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "There is no general mechanism to force the sequencer to include the transaction.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": []
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. Note that withdrawal requests can be censored by the Sequencer. Currently, there is a general limit of 18750.0 ETH that can be withdrawn within each 1d time window.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the operator censors withdrawal transaction."
              }
            ],
            "references": [
              {
                "text": "L1MessageService.sol - Etherscan source code, claimMessageWithProof() function",
                "href": "https://etherscan.io/address/0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562#code"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "AdminMultisig",
          "description": "This is a Gnosis Safe with 4 / 8 threshold. It uses the following modules: Roles. Admin of the Linea rollup. It can upgrade core contracts, bridges, update permissioned actors, and publish blocks by effectively overriding the proof system.",
          "accounts": [
            {
              "address": "0x892bb7EeD71efB060ab90140e7825d8127991DD3",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x497515578b0BE54d2f0f32cF3F08B85Bf8cEB6aB",
              "type": "EOA"
            },
            {
              "address": "0x239d9B860399366F8d25F6e2962Fb2B9D070aEFE",
              "type": "EOA"
            },
            {
              "address": "0x12d674b7eCc0302977E956Cd2d5AC8D030fdbea9",
              "type": "EOA"
            },
            {
              "address": "0x5822D8457c00FB82203918ED92907b935B9D40AE",
              "type": "EOA"
            },
            {
              "address": "0x9376c137AF5124FFc39bD8940A3D88D1cd508992",
              "type": "EOA"
            },
            {
              "address": "0x4CB4da1D1C198E506031C0Aa8480BA8b57C0fAD4",
              "type": "EOA"
            },
            {
              "address": "0xab23f8E6c3288952fdf193A17ad49b15F5EE55A1",
              "type": "EOA"
            },
            {
              "address": "0xB4dAebe4D01f467701F95f0196fc29033c54dBcb",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Roles",
          "accounts": [
            {
              "address": "0xF24f1DC519d88246809B660eb56D94048575d083",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Module to the AdminMultisig. Allows to add additional members to the multisig via permissions to call functions specified by roles."
        },
        {
          "accounts": [
            {
              "address": "0x46d2F319fd42165D4318F099E143dEA8124E9E3e",
              "type": "EOA"
            },
            {
              "address": "0x52FF08F313A00A54e3Beffb5C4a7F7446eFb6754",
              "type": "EOA"
            }
          ],
          "name": "Operators",
          "description": "The operators are allowed to prove blocks and post the corresponding transaction data."
        },
        {
          "accounts": [
            {
              "address": "0x453B3A4b4d64B4E6f472A306c3D4Fc318C34bbA8",
              "type": "EOA"
            }
          ],
          "name": "Pauser",
          "description": "Address allowed to pause the ERC20Bridge, the USDCBridge and the core functionalities of the project."
        },
        {
          "accounts": [
            {
              "address": "0xd6B95c960779c72B8C6752119849318E5d550574",
              "type": "Contract"
            }
          ],
          "name": "Verifier Setters",
          "description": "The verifier setters are allowed to change the verifier address."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "zkEVM",
            "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xF5058616517C068C7b8c7EbC69FF636Ade9066d6"],
              "implementations": ["0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562"]
            },
            "chain": "ethereum",
            "description": "The main contract of the Linea zkEVM rollup. Contains state roots, the verifier addresses and manages messages between L1 and the L2. The contract is pausable by AdminMultisig.",
            "upgradableBy": ["AdminMultisig"],
            "upgradeDelay": "No delay",
            "pausable": { "pausableBy": ["AdminMultisig"], "paused": false },
            "references": [
              {
                "text": "LineaRollup.sol - Etherscan source code, state injections: stateRoot and l2MerkleRoot are part of the validity proof input.",
                "href": "https://etherscan.io/address/0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562#code"
              }
            ]
          },
          {
            "name": "Timelock",
            "address": "0xd6B95c960779c72B8C6752119849318E5d550574",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Owner of the ProxyAdmin and Verifier Setter. The current delay is 0s."
          },
          {
            "name": "VerifierProofType3",
            "address": "0xBfF4a03A355eEF7dA720bBC7878F9BdBBE81fe6F",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Currently used smart contract verifying the proofs for the Linea zkEVM."
          },
          {
            "name": "ERC20Bridge",
            "address": "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xF5058616517C068C7b8c7EbC69FF636Ade9066d6"],
              "implementations": ["0xd52c09E67aF3BE0977B52b4817366e9BaB5dCFA2"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge ERC20 tokens.",
            "upgradableBy": ["AdminMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "USDCBridge",
            "address": "0x504A330327A089d8364C4ab3811Ee26976d388ce",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x41fAD3Df1B07B647D120D055259E474fE8046eb5"],
              "implementations": ["0x0eC393209674090368C592A591B25811e490BF36"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge USDC tokens.",
            "upgradableBy": ["AdminMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 0s delay on code upgrades."
          }
        ]
      },
      "stateValidation": {
        "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
        "categories": [
          {
            "title": "Prover Architecture",
            "description": "The source code of the prover is currently not public."
          },
          {
            "title": "ZK Circuits",
            "description": "The source code of the circuits is currently not public.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the proof system is implemented incorrectly."
              },
              {
                "category": "Funds can be stolen if",
                "text": "the prover is able to generate false proofs."
              }
            ]
          },
          {
            "title": "Verification Keys Generation",
            "description": "Given that the circuit is not public, the generation of the verification keys is not public either."
          }
        ],
        "proofVerification": {
          "shortDescription": "Linea is a universal ZK-EVM rollup on Ethereum.",
          "aggregation": false,
          "requiredTools": [],
          "verifiers": [
            {
              "name": "LineaVerifier (ProofType 1)",
              "description": "The smart contract verifying the computational integrity of the Linea zkEVM. Since the circuit behind it is not public, we are not able to verify any claim about the proof system.",
              "verified": "failed",
              "performedBy": { "name": "L2BEAT", "link": "https://l2beat.com" },
              "contractAddress": "0x8AB455030E1Ea718e445f423Bb8D993dcAd24Cc4",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Main circuit",
                  "proofSystem": "?",
                  "mainArithmetization": "?",
                  "mainPCS": "?"
                }
              ]
            },
            {
              "name": "LineaVerifier (ProofType 3)",
              "description": "The smart contract verifying the computational integrity of the Linea zkEVM. Since the circuit behind it is not public, we are not able to verify any claim about the proof system.",
              "verified": "no",
              "contractAddress": "0xBfF4a03A355eEF7dA720bBC7878F9BdBBE81fe6F",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Main circuit",
                  "proofSystem": "?",
                  "mainArithmetization": "?",
                  "mainPCS": "?"
                }
              ]
            }
          ]
        }
      },
      "milestones": [
        {
          "name": "Linea starts using blobs",
          "link": "https://twitter.com/LineaBuild/status/1772711269159567483",
          "date": "2024-03-26T00:00:00Z",
          "description": "Linea starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "Alpha v2 is released",
          "date": "2024-02-13",
          "description": "This release reduces L1 costs and fees for users.",
          "link": "https://docs.linea.build/build-on-linea/linea-version#alpha-v2-release-notes",
          "type": "general"
        },
        {
          "name": "Open Testnet is Live",
          "date": "2023-03-28",
          "description": "Linea has launched on the Goerli testnet, allowing users and developers to test the platform.",
          "link": "https://linea.mirror.xyz/6G30hwV2wPs_wPv0VEgHYaIdghMkIQaad-OI_0br1hM",
          "type": "general"
        },
        {
          "name": "Mainnet Alpha Launch",
          "date": "2023-07-12",
          "description": "Linea has launched on the Ethereum mainnet.",
          "link": "https://linea.mirror.xyz/7l9gKzYzKVOxEOnReavov467Ss_fsrkGzABvbRISPMY",
          "type": "general"
        }
      ],
      "badges": ["EVM", "EthereumBlobs", "L3HostChain"]
    },
    {
      "type": "layer2",
      "id": "lisk",
      "createdAt": "1695904849",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xe8912070277Dd5D9473904b7F4e6C71290F2AE90#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xFf00000000000000000000000000000000001135"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x3Ff11Cde41a5f7c791eFfcd6AeEA05dd2df5e21e#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xe8912070277Dd5D9473904b7F4e6C71290F2AE90#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xe8912070277Dd5D9473904b7F4e6C71290F2AE90#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x3Ff11Cde41a5f7c791eFfcd6AeEA05dd2df5e21e#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x3Ff11Cde41a5f7c791eFfcd6AeEA05dd2df5e21e#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x3Ff11Cde41a5f7c791eFfcd6AeEA05dd2df5e21e#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xe8912070277Dd5D9473904b7F4e6C71290F2AE90#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x0AbD6da1cE10D1cD6c7C9C14b905786D20f3EB23",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xa6Ea2f3299b63c53143c993d2d5E60A69Cd6Fe24",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "GelatoMultisig",
          "description": "* This is a Gnosis Safe with 6 / 9 threshold. \n* Member of LiskRollupOwnerMultisig.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of AddressManager (acting via ProxyAdmin, LiskRollupOwnerMultisig) - set and change address mappings.\n* Is a Guardian.\n* Can upgrade implementation of SystemConfig, L2OutputOracle, SuperchainConfig, OptimismPortal, L1ERC721Bridge, OptimismMintableERC20Factory (acting via ProxyAdmin, LiskRollupOwnerMultisig).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin, LiskRollupOwnerMultisig) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xB0C2CBFfCd4C31AFFEe14993b6d48f99D285f621",
              "type": "EOA"
            },
            {
              "address": "0x28bB9385A588EF4747264D19B9A9F1603591680c",
              "type": "EOA"
            },
            {
              "address": "0x691C2EF68e25E620fa6cAdE2728f6aE34F37aAD2",
              "type": "EOA"
            },
            {
              "address": "0x5bE3E96Cdc3A97628bD7308d3588B9a474F4A54d",
              "type": "EOA"
            },
            {
              "address": "0xBc0ca6865d6883a83D4aDDD6b862aE042d855E0d",
              "type": "EOA"
            },
            {
              "address": "0xc85aC6d2fdC376F335455D4cCA30c45ED1080849",
              "type": "EOA"
            },
            {
              "address": "0x01a0A7BaAAca31AFB5b770FeFD69CE4917D9c32e",
              "type": "EOA"
            },
            {
              "address": "0xf83bC4688979b13Da02CB94c76cEB169540760b5",
              "type": "EOA"
            },
            {
              "address": "0x547D0F472309e4239b296D01e03bEDc101241a26",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LiskRollupOwnerMultisig",
          "description": "* This is a Gnosis Safe with 1 / 1 threshold. \n* Can act on behalf of ProxyAdmin.\n",
          "accounts": [
            {
              "address": "0xECd4150ABbb1EBff13f74e42Fb43C3d78B4E0b45",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x0AbD6da1cE10D1cD6c7C9C14b905786D20f3EB23",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xa6Ea2f3299b63c53143c993d2d5E60A69Cd6Fe24",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "SystemConfig",
            "address": "0x05f23282FFDCA8286E4738C1aF79079f3d843750",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
              "implementations": ["0xc6cF1149d23F2788AC94312E68EB52a74F288ebe"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["GelatoMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x113cB99283AF242Da0A0C54347667edF531Aa7d6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
              "implementations": ["0xe8912070277Dd5D9473904b7F4e6C71290F2AE90"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["GelatoMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x2658723Bf70c7667De6B25F99fcce13A16D25d08",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
              "implementations": ["0x5BFC7acc740D2E19c290167052F69947e19475F3"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["GelatoMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0x26C7bFB430d68Bf74d2d52497836d4336b555dE7",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
              "implementations": ["0xd637dc6d7DA9151b5069a4bFB74a12E67a532CC3"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["GelatoMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x26dB93F8b8b4f7016240af62F7730979d353f9A7",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
              "implementations": ["0x3Ff11Cde41a5f7c791eFfcd6AeEA05dd2df5e21e"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["GelatoMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x2dF7057d3F25212E51aFEA8dA628668229Ea423f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x31B72D76FB666844C41EdF08dF0254875Dbb7edB",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x0318A37e2662507789a6E17E85A506709F89488b"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x3A44A3b263FB631cdbf25f339e2D29497511A81f",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
              "implementations": ["0xefBDff012170ae592A3d197bf9Ac10eBF313233a"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["GelatoMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0xc1dA06CC5DD5cE23bABa924463de7F762039252d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
              "implementations": ["0xD00e38514d66bf1B761a8937559c6b2854A5B3ad"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["GelatoMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xeC432c4F1d0E12737f3a42a459B84848Af979b2d",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SystemConfig, L2OutputOracle, SuperchainConfig, OptimismPortal, L1ERC721Bridge, OptimismMintableERC20Factory.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Gelato", "OPStack", "EthereumBlobs", "MigratedFromL1", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "bedrock-superchain",
        "name": "Lisk",
        "slug": "lisk",
        "description": "Lisk is an OP stack rollup on Ethereum that migrated from the L1 blockchain of the same name.",
        "links": {
          "websites": ["https://lisk.com/"],
          "apps": [
            "https://bridge.lisk.com/bridge/lisk",
            "https://portal.lisk.com/"
          ],
          "documentation": ["https://docs.lisk.com/"],
          "explorers": ["https://blockscout.lisk.com/"],
          "repositories": ["https://github.com/LiskHQ/lisk-node"],
          "socialMedia": [
            "https://x.com/LiskHQ",
            "https://lisk.chat/",
            "https://reddit.com/r/lisk/",
            "https://facebook.com/LiskHQ",
            "https://linkedin.com/company/lisk",
            "https://instagram.com/lisk_blockchain",
            "https://t.me/Lisk_HQ",
            "https://youtube.com/channel/UCuqpGfg_bOQ8Ja4pj811PWg"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Lisk is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": ["LSK"],
        "escrows": [
          {
            "address": "0x26dB93F8b8b4f7016240af62F7730979d353f9A7",
            "newVersion": true,
            "sinceTimestamp": "1714730003",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x26dB93F8b8b4f7016240af62F7730979d353f9A7",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
                "implementations": [
                  "0x3Ff11Cde41a5f7c791eFfcd6AeEA05dd2df5e21e"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x2658723Bf70c7667De6B25F99fcce13A16D25d08",
            "newVersion": true,
            "sinceTimestamp": "1714730063",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": ["LSK"],
            "contract": {
              "name": null,
              "address": "0x2658723Bf70c7667De6B25F99fcce13A16D25d08",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xeC432c4F1d0E12737f3a42a459B84848Af979b2d"],
                "implementations": [
                  "0x5BFC7acc740D2E19c290167052F69947e19475F3"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.api.lisk.com",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0xa6Ea2f3299b63c53143c993d2d5E60A69Cd6Fe24",
              "to": "0xFf00000000000000000000000000000000001135",
              "sinceTimestamp": "1714728793"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x113cB99283AF242Da0A0C54347667edF531Aa7d6",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1714730027"
            }
          }
        ],
        "finality": {
          "type": "OPStack-blob",
          "genesisTimestamp": "1714728793",
          "minTimestamp": "1714746983",
          "l2BlockTimeSeconds": 2,
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "loopring",
      "createdAt": "1623153328",
      "badges": ["AppChain", "EthereumCalldata"],
      "display": {
        "name": "Loopring",
        "slug": "loopring",
        "description": "Loopring is a ZK Rollup exchange protocol for trading and payments.",
        "purposes": ["NFT", "Exchange"],
        "provider": "Loopring",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://loopring.org"],
          "apps": ["https://loopring.io/#/trade"],
          "documentation": [
            "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md",
            "https://docs.loopring.io/"
          ],
          "explorers": ["https://explorer.loopring.io/"],
          "repositories": ["https://github.com/Loopring/protocols"],
          "socialMedia": [
            "https://loopring.org/#/blog",
            "https://medium.com/loopring-protocol",
            "https://twitter.com/loopringorg",
            "https://discord.gg/loopring",
            "https://youtube.com/c/loopring",
            "https://weibo.com/loopringfoundation",
            "https://reddit.com/r/loopringorg/",
            "https://loopring.substack.com/"
          ]
        },
        "activityDataSource": "Explorer API",
        "liveness": {
          "explanation": "Loopring is a ZK rollup that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. "
        },
        "finality": { "finalizationPeriod": 0 }
      },
      "config": {
        "associatedTokens": ["LRC"],
        "escrows": [
          {
            "address": "0x7D3D221A8D8AbDd868E8e88811fFaF033e68E108",
            "sinceTimestamp": "1575539271",
            "tokens": ["LRC", "USDT"],
            "isHistorical": true,
            "chain": "ethereum"
          },
          {
            "address": "0xD97D09f3bd931a14382ac60f156C1285a56Bb51B",
            "sinceTimestamp": "1578284114",
            "tokens": ["LRC", "USDT"],
            "isHistorical": true,
            "chain": "ethereum"
          },
          {
            "address": "0x674bdf20A0F284D710BC40872100128e2d66Bd3f",
            "sinceTimestamp": "1603949642",
            "tokens": "*",
            "chain": "ethereum"
          }
        ],
        "transactionApi": {
          "type": "loopring",
          "defaultUrl": "https://api3.loopring.io/api/v3",
          "defaultCallsPerMinute": 240
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x153CdDD727e407Cb951f728F24bEB9A5FaaA8512",
              "selector": "0xdcb2aa31",
              "functionSignature": "function submitBlocksWithCallbacks(bool isDataCompressed, bytes calldata data, ((uint16,(uint16,uint16,uint16,bytes)[])[], address[])  calldata config)",
              "sinceTimestamp": "1616396742"
            }
          }
        ],
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": {
          "lag": 0,
          "type": "Loopring",
          "minTimestamp": "1616396742",
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -1296000
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1 with a 0.02 ETH fee. If the sequencer is down for more than 15d, users can use the exit hatch to withdraw their funds. The sequencer can censor individual deposits, but in such case after 15d users can get their funds back.",
          "sentiment": "good",
          "definingMetric": 1296000,
          "sources": [
            {
              "contract": "ExchangeV3",
              "references": [
                "https://etherscan.io/address/0x26d8Ba776a067C5928841985bCe342f75BAE7E82#code#L7252",
                "https://etherscan.io/address/0x26d8Ba776a067C5928841985bCe342f75BAE7E82#code#L6195",
                "https://etherscan.io/address/0x26d8Ba776a067C5928841985bCe342f75BAE7E82#code#L6090"
              ]
            },
            {
              "contract": "LoopringV3",
              "references": [
                "https://etherscan.io/address/0xe56D6ccab6551932C0356E4e8d5dAF0630920C71#code#L1825"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ExchangeV3",
              "references": [
                "https://etherscan.io/address/0x26d8Ba776a067C5928841985bCe342f75BAE7E82#code#L8159"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "LRC transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/Loopring/loopring-subgraph-v2)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "Operators - Loopring design doc",
              "href": "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md#operators"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "Operators - Loopring design doc",
              "href": "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md#operators"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "Introduction - Loopring design doc",
              "href": "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md#introduction"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "ExchangeV3.sol#L315-L322 - Etherscan source code, submitBlocks function",
              "href": "https://etherscan.io/address/0x26d8Ba776a067C5928841985bCe342f75BAE7E82#code#L8022"
            },
            {
              "text": "LoopringIOExchangeOwner.sol#L123-L126 - Etherscan source code, hasAccessTo function call",
              "href": "https://etherscan.io/address/0x153CdDD727e407Cb951f728F24bEB9A5FaaA8512#code#L5539"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Forced Withdrawals - Loopring design doc",
              "href": "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md#forced-withdrawals"
            },
            {
              "text": "Forced Request Handling - Loopring design doc",
              "href": "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md#forced-request-handling"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdraw - Loopring design doc",
                "href": "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md#withdraw"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Request Handling - Loopring design doc",
                "href": "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md#forced-request-handling"
              },
              {
                "text": "ExchangeV3.sol#L8118 - Loopring source code, forceWithdraw function",
                "href": "https://etherscan.io/address/0x26d8Ba776a067C5928841985bCe342f75BAE7E82#code#L8118"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the 15d deadline passes and the forced exit is still ignored the user can put the system into Withdrawal Mode, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Request Handling - Loopring design doc",
                "href": "https://github.com/Loopring/protocols/blob/master/packages/loopring_v3/DESIGN.md#forced-request-handling"
              },
              {
                "text": "ExchangeV3.sol#L8159 - Loopring source code, withdrawFromMerkleTree function",
                "href": "https://etherscan.io/address/0x26d8Ba776a067C5928841985bCe342f75BAE7E82#code#L8159"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "ProxyOwner",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  This address is the owner of the following contracts: LoopringIOExchangeOwner, ExchangeV3 (proxy), BlockVerifier, AgentRegistry, LoopringV3. This allows it to grant access to submitting blocks, arbitrarily change the forced withdrawal fee, change the Verifier address and upgrade ExchangeV3 implementation potentially gaining access to all funds in DefaultDepositContract.",
          "accounts": [
            {
              "address": "0xDd2A08a1c1A28c1A571E098914cA10F2877D9c97",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x88f8Dbd3dC44c6E2e368258D3eee8EB9A07aF191",
              "type": "EOA"
            },
            {
              "address": "0x3b1D1F89E0b6803174A2dE72e21A6f6f8464d5F1",
              "type": "EOA"
            },
            {
              "address": "0x4CBbD41a2c057cAb8db00AC60f1AB52F36870185",
              "type": "EOA"
            },
            {
              "address": "0x55d79345Afc87806B690C9f96c4D7BfE2Bca8268",
              "type": "EOA"
            },
            {
              "address": "0x7414eA41bd1844f61e8990b209a1Dc301489baa9",
              "type": "EOA"
            },
            {
              "address": "0x1F28F10176F89F4E9985873B84d14e75751BB3D1",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Block Submitters",
          "accounts": [
            {
              "address": "0x2b263f55Bf2125159Ce8Ec2Bb575C649f822ab46",
              "type": "EOA"
            },
            {
              "address": "0x4774d954D20DB98492B0487BC9F91dc401dBA3aE",
              "type": "EOA"
            },
            {
              "address": "0x53dD53dAf8F112BcA64332eA97398EfbC8a0E234",
              "type": "EOA"
            },
            {
              "address": "0x212e75BF264C4FB3133fA5ef6f47A34367020A1A",
              "type": "EOA"
            },
            {
              "address": "0x238b649E62a0C383b54060b1625516b489183843",
              "type": "EOA"
            },
            {
              "address": "0x3243Ed9fdCDE2345890DDEAf6b083CA4cF0F68f2",
              "type": "EOA"
            },
            {
              "address": "0xbfCc986cA6E6729c1D191cC0179ef060b87a7C42",
              "type": "EOA"
            },
            {
              "address": "0xA921aF7e4dd279e1325399E4E3Bf13d0E57f48Fc",
              "type": "EOA"
            },
            {
              "address": "0xeadb3d065f8d15cc05e92594523516aD36d1c834",
              "type": "EOA"
            },
            {
              "address": "0xB1a6BF349c947A540a5fe6f1e89992ACDad836AB",
              "type": "EOA"
            },
            {
              "address": "0xeDEE915Ae45Cc4B2FDd1Ce12a2f70dCa0B2AD9e5",
              "type": "EOA"
            },
            {
              "address": "0xE6b0cf8ed864F9bfEBa1b03bac785B5aC82cf095",
              "type": "EOA"
            },
            {
              "address": "0x487e8Be2BaD383b5B62fC5fb46005A8Fac10E341",
              "type": "EOA"
            }
          ],
          "description": "Actors who can submit new blocks, updating the L2 state on L1."
        },
        {
          "name": "RollupOwner",
          "accounts": [
            {
              "address": "0x153CdDD727e407Cb951f728F24bEB9A5FaaA8512",
              "type": "Contract"
            }
          ],
          "description": "The rollup owner can submit blocks, set rollup parameters and shutdown the exchange."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "ExchangeV3",
            "address": "0x0BABA1Ad5bE3a5C0a66E7ac838a129Bf948f1eA4",
            "upgradeability": {
              "proxyType": "ZeppelinOS proxy",
              "admins": ["0xDd2A08a1c1A28c1A571E098914cA10F2877D9c97"],
              "implementations": ["0x26d8Ba776a067C5928841985bCe342f75BAE7E82"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Main Loopring contract.",
            "upgradableBy": ["ProxyOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "LoopringIOExchangeOwner",
            "address": "0x153CdDD727e407Cb951f728F24bEB9A5FaaA8512",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used by the Prover to submit exchange blocks with zkSNARK proofs that are later processed and verified by the BlockVerifier contract. It allows to give or revoke permissions to submit blocks and to open block submission to everyone."
          },
          {
            "name": "DefaultDepositContract",
            "address": "0x674bdf20A0F284D710BC40872100128e2d66Bd3f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "ERC 20 token basic deposit contract. Handles user deposits and withdrawals."
          },
          {
            "name": "LoopringV3",
            "address": "0xe56D6ccab6551932C0356E4e8d5dAF0630920C71",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract managing LRC staking for exchanges (one Loopring contract can manage many exchanges). It also allows to change the forced withdrawal fee and the Verifier address."
          },
          {
            "name": "FastWithdrawalAgent",
            "address": "0xec3Cc6Cf0252565b56FC7AC396017Df5b9B78a31",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Auxiliary contract allowing users to process fast withdrawals."
          },
          {
            "name": "ForcedWithdrawalAgent",
            "address": "0x52ea1971C05B0169c02a0bBeC05Fe8b5E3A24470",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Auxiliary contract able to force withdrawals from L1 on behalf of users."
          },
          {
            "name": "BlockVerifier",
            "address": "0x6150343E0F43A17519c0327c41eDd9eBE88D01ef",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "zkSNARK Verifier based on ethsnarks library.",
            "upgradableBy": ["ProxyOwner"],
            "upgradeDelay": "No delay",
            "upgradeConsiderations": "The Verifier contract address can be changed by the ProxyOwner."
          },
          {
            "name": "AgentRegistry",
            "address": "0x39B9bf169a7e225ba037C443A40460c77438ea14",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Agent registry that is used by all other Loopring contracts. Currently used are FastWithdrawalAgent, ForcedWithdrawalAgent, DestroyableWalletAgent and a number of LoopringAmmPool contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "stateValidation": {
        "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
        "categories": [
          {
            "title": "ZK Circuits",
            "description": "Loopring utilizes Groth16 for their proving system. The source code of the circuits can be found [here](https://github.com/Loopring/protocol3-circuits).",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the proof system is implemented incorrectly."
              }
            ]
          },
          {
            "title": "Verification Keys Generation",
            "description": "Groth16 requires a circuit specific trusted setup, so they run their own ceremony. The first phase is run using Powers of Tau ceremony. Some of the instructions on how to regenerate the verification keys can be found [here](https://github.com/Loopring/trusted_setup/tree/loopring-3.6.2)."
          }
        ],
        "proofVerification": {
          "shortDescription": "Loopring is a DEX rollup on Ethereum.",
          "aggregation": false,
          "requiredTools": [
            {
              "name": "Custom tool",
              "version": "v3.6.2",
              "link": "https://github.com/Loopring/trusted_setup/tree/loopring-3.6.2"
            }
          ],
          "verifiers": [
            {
              "name": "LoopringVerifier",
              "description": "Loopring utilizes Groth16 for their proving system.",
              "verified": "no",
              "contractAddress": "0x6150343E0F43A17519c0327c41eDd9eBE88D01ef",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Main circuit",
                  "proofSystem": "Groth16",
                  "mainArithmetization": "R1CS+QAP",
                  "mainPCS": "N/A",
                  "trustedSetup": "POT18 + circuit specific",
                  "link": "https://github.com/Loopring/protocol3-circuits.git"
                }
              ]
            }
          ]
        }
      },
      "milestones": [
        {
          "name": "Loopring ZK Rollup is live",
          "link": "https://medium.com/loopring-protocol/loopring-deployed-protocol-3-0-on-ethereum-a33103c9e5bf",
          "date": "2019-12-04T00:00:00Z",
          "description": "Loopring Protocol 3.0 is fully operational with support for orderbook trading on WeDex.",
          "type": "general"
        },
        {
          "name": "Loopring Protocol 3.6 Pre-release",
          "link": "https://medium.loopring.io/loopring-3-6-is-code-complete-and-security-audit-has-begun-68a642506e31",
          "date": "2020-09-22T00:00:00Z",
          "description": "Enhancements in transfers, order-book trading and AMM swap.",
          "type": "general"
        },
        {
          "name": "Loopring’s ZK Rollup AMM is Live",
          "link": "https://medium.loopring.io/looprings-zkrollup-amm-is-live-2f8251cd0fcd",
          "date": "2020-12-02T00:00:00Z",
          "description": "Improved implementation, enabling gas-free instant swaps and liquidity changes.",
          "type": "general"
        },
        {
          "name": "Loopring Supports Payments",
          "link": "https://medium.loopring.io/loopring-pay-is-live-zkrollup-transfers-on-ethereum-770d35213408",
          "date": "2020-06-06T00:00:00Z",
          "description": "Support for ERC20 transfers is live on Loopring.",
          "type": "general"
        },
        {
          "name": "DeFi Port is Live on Loopring",
          "link": "https://medium.loopring.io/loopring-l2-defi-port-cd6e811250a9",
          "date": "2022-09-27T00:00:00Z",
          "description": "Dutch auctions, lending, and other DeFi functions can be performed on Loopring.",
          "type": "general"
        },
        {
          "name": "Loopring Supports NFTs",
          "link": "https://medium.loopring.io/loopring-now-supports-nfts-on-l2-29174a343d0d",
          "date": "2021-08-24T00:00:00Z",
          "description": "Loopring supports NFT minting, trading, and transfers.",
          "type": "general"
        },
        {
          "name": "Loopring DEX is online",
          "link": "https://medium.loopring.io/loopring-launches-zkrollup-exchange-loopring-io-d6a85beeed21",
          "date": "2020-02-27T00:00:00Z",
          "description": "ZK Rollup trading is live, as Loopring launches their order book based exchange.",
          "type": "general"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "lumia",
      "createdAt": "1718181773",
      "display": {
        "name": "Lumia",
        "slug": "lumia",
        "description": "Lumia is a modular L2 aiming at leveraging Polygon CDK, EigenDA, and AggLayer to achieve enhanced functionality in DeFi applications.",
        "purposes": ["Universal", "Restaking"],
        "category": "Validium",
        "provider": "Polygon",
        "links": {
          "websites": ["https://lumia.org/"],
          "apps": [],
          "documentation": ["https://docs.lumia.org/"],
          "explorers": [],
          "repositories": ["https://github.com/orionprotocol"],
          "socialMedia": [
            "https://x.com/BuildOnLumia",
            "https://t.me/lumia_community"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": ["AggLayer"]
    },
    {
      "type": "layer2",
      "id": "lyra",
      "createdAt": "1702978961",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xad206309916Fe08A27221133dde05a8F30f75e29#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x5f7f7f6DB967F0ef10BdA0678964DBA185d16c50"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x4Ec5C80Fa12d04DB3A208DD0Fa5C01178FF5a16e#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xad206309916Fe08A27221133dde05a8F30f75e29#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xad206309916Fe08A27221133dde05a8F30f75e29#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x4Ec5C80Fa12d04DB3A208DD0Fa5C01178FF5a16e#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x4Ec5C80Fa12d04DB3A208DD0Fa5C01178FF5a16e#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x4Ec5C80Fa12d04DB3A208DD0Fa5C01178FF5a16e#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xad206309916Fe08A27221133dde05a8F30f75e29#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x91F4be0C264FAFA1fEd75c4440910Cba2cAd98e8",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x91F4be0C264FAFA1fEd75c4440910Cba2cAd98e8",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x03e820562ffd2e0390787caD706EaF1FF98C2608",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x14e4E97bDc195d399Ad8E7FC14451C279FE04c8e",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of OptimismMintableERC20Factory, SystemConfig, L2OutputOracle, L1ERC721Bridge, OptimismPortal (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LyraMultisig",
          "description": "* This is a Gnosis Safe with 4 / 6 threshold. \n* Is a Challenger.\n* Is a Guardian.\n",
          "accounts": [
            {
              "address": "0x91F4be0C264FAFA1fEd75c4440910Cba2cAd98e8",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xdb5CF90A8f97C372d5AEC650a5668d4E4bECFC10",
              "type": "EOA"
            },
            {
              "address": "0x824CACbBeA0377801f72d736CFd5C869dd89b931",
              "type": "EOA"
            },
            {
              "address": "0x52E84149daE06CB5C4E92029140Da4faD86CE968",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x03e820562ffd2e0390787caD706EaF1FF98C2608",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x14e4E97bDc195d399Ad8E7FC14451C279FE04c8e",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x08Dea366F26C25a08C8D1C3568ad07d1e587136d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x35d5D43271548c984662d4879FBc8e041Bc1Ff93"],
              "implementations": ["0x81C2645D347a67c089169a4Da074aF7788650955"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x0e4C4CDd01ceCB01070E9Fdfe7600871e4ae996e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x35d5D43271548c984662d4879FBc8e041Bc1Ff93"],
              "implementations": ["0x81CCFC10CB55B58449A3FEE870D63C4D61941DaC"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x1145E7848c8B64c6cab86Fd6D378733385c5C3Ba",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x35d5D43271548c984662d4879FBc8e041Bc1Ff93"],
              "implementations": ["0xad206309916Fe08A27221133dde05a8F30f75e29"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x35d5D43271548c984662d4879FBc8e041Bc1Ff93",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of OptimismMintableERC20Factory, SystemConfig, L2OutputOracle, L1ERC721Bridge, OptimismPortal.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x5456f02c08e9A018E42C39b351328E5AA864174A",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x93f5d9CD5BE592F1DC602E0CF4A38148b880cd13"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L1StandardBridge",
            "address": "0x61E44dC0dae6888B5a301887732217d5725B0bFf",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x35d5D43271548c984662d4879FBc8e041Bc1Ff93"],
              "implementations": ["0xff7E236F171131cCB7a5149cE4645aBc92E0D8fb"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x6CC3268794c5d3E3d9d52adEfC748B59d536cb22",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x35d5D43271548c984662d4879FBc8e041Bc1Ff93"],
              "implementations": ["0x4f993d43f697Cb4c63D719Bb8Dc762dcbbB11476"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x85eA9c11cf3D4786027F7FD08F4406b15777e5f8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x35d5D43271548c984662d4879FBc8e041Bc1Ff93"],
              "implementations": ["0x4Ec5C80Fa12d04DB3A208DD0Fa5C01178FF5a16e"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0xC845F9C4004EB35a8bde8ad89C4760a9c0e65CAB",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Derive rebrand",
          "link": "https://x.com/derivexyz/status/1828607400116658227",
          "date": "2024-08-28T00:00:00Z",
          "description": "Lyra is now called Derive.",
          "type": "general"
        },
        {
          "name": "Lyra V2 live on mainnet",
          "link": "https://x.com/lyrafinance/status/1735516929341980748",
          "date": "2023-12-15T00:00:00Z",
          "description": "Lyra V2 launches on Mainnet.",
          "type": "general"
        },
        {
          "name": "Lyra switches to Celestia",
          "link": "https://x.com/lyrafinance/status/1750235026136965260",
          "date": "2024-01-16T00:00:00.00Z",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Blobstream and Celestia Architecture",
          "url": "https://www.youtube.com/watch?v=cn_fN6pkakQ",
          "thumbnail": "modular-rollup.jpg"
        },
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "Superchain", "Conduit", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "Exchange"],
        "architectureImage": "lyra",
        "name": "Derive",
        "slug": "derive",
        "description": "Derive Chain is an L2 scaling solution built using OP Stack specially for the Derive protocol - a settlement protocol for spot, perpetuals, and options trading.",
        "links": {
          "websites": ["https://derive.xyz/"],
          "apps": ["https://derive.xyz/options/eth"],
          "documentation": ["https://docs.lyra.finance/"],
          "explorers": ["https://explorer.lyra.finance/"],
          "repositories": ["https://github.com/lyra-finance/v2-core"],
          "socialMedia": [
            "https://x.com/derivexyz",
            "https://warpcast.com/lyra.eth",
            "https://discord.gg/Derive"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": {
        "name": "lyra",
        "chainId": 957,
        "explorerUrl": "https://explorer.lyra.finance",
        "explorerApi": {
          "url": "https://explorer.lyra.finance/api",
          "type": "blockscout"
        },
        "minTimestampForTvl": "1700021615",
        "multicallContracts": [
          {
            "sinceBlock": 1935198,
            "batchSize": 150,
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "version": "3"
          }
        ]
      },
      "config": {
        "associatedTokens": ["LYRA"],
        "escrows": [
          {
            "address": "0x85eA9c11cf3D4786027F7FD08F4406b15777e5f8",
            "newVersion": true,
            "sinceTimestamp": "1700021675",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x85eA9c11cf3D4786027F7FD08F4406b15777e5f8",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x35d5D43271548c984662d4879FBc8e041Bc1Ff93"],
                "implementations": [
                  "0x4Ec5C80Fa12d04DB3A208DD0Fa5C01178FF5a16e"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x61E44dC0dae6888B5a301887732217d5725B0bFf",
            "newVersion": true,
            "sinceTimestamp": "1700021675",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x61E44dC0dae6888B5a301887732217d5725B0bFf",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x35d5D43271548c984662d4879FBc8e041Bc1Ff93"],
                "implementations": [
                  "0xff7E236F171131cCB7a5149cE4645aBc92E0D8fb"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x7E1d17b580dD4F89037DB331430eAEe8B8e50c91",
            "sinceTimestamp": "1724140259",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["DAI"],
            "chain": "ethereum"
          },
          {
            "address": "0x613e87BE1cd75dEBC5e6e56a2AF2fED84162C142",
            "sinceTimestamp": "1724140379",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sDAI"],
            "chain": "ethereum"
          },
          {
            "address": "0x6D303CEE7959f814042D31E0624fB88Ec6fbcC1d",
            "sinceTimestamp": "1700227943",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "ethereum"
          },
          {
            "address": "0xD4efe33C66B8CdE33B8896a2126E41e5dB571b7e",
            "sinceTimestamp": "1705069895",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x3Eec7c855aF33280F1eD38b93059F5aa5862E3ab",
            "sinceTimestamp": "1705069499",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WBTC"],
            "chain": "ethereum"
          },
          {
            "address": "0x5e98A25d8d6FF69A8992d6Aa57948dFB77D4ECBa",
            "sinceTimestamp": "1705566299",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDT"],
            "chain": "ethereum"
          },
          {
            "address": "0x7D7aC8d55A9bD4152b703011f3E61AB3bB0A5592",
            "sinceTimestamp": "1708294763",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["SNX"],
            "chain": "ethereum"
          },
          {
            "address": "0xeBB5D642aA8ccDeE98373D6aC3ee0602b63824b3",
            "sinceTimestamp": "1709517155",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wstETH"],
            "chain": "ethereum"
          },
          {
            "address": "0xDEf0bfBdf7530C75AB3C73f8d2F64d9eaA7aA98e",
            "sinceTimestamp": "1704715451",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "optimism"
          },
          {
            "address": "0xBb9CF28Bc1B41c5c7c76Ee1B2722C33eBB8fbD8C",
            "sinceTimestamp": "1704715597",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC.e"],
            "chain": "optimism"
          },
          {
            "address": "0xdD4c717a69763176d8B7A687728e228597eAB86d",
            "sinceTimestamp": "1704715809",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WETH"],
            "chain": "optimism"
          },
          {
            "address": "0xE5967877065f111a556850d8f05b8DaD88edCEc9",
            "sinceTimestamp": "1704715873",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wBTC"],
            "chain": "optimism"
          },
          {
            "address": "0x44343AE5e9319b61c9DaD7876919eFdB03241b02",
            "sinceTimestamp": "1705566299",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDT"],
            "chain": "optimism"
          },
          {
            "address": "0x8574CBC539c26Df9ec11bA283218268101ff10e1",
            "sinceTimestamp": "1708294759",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["SNX"],
            "chain": "optimism"
          },
          {
            "address": "0xAA8f9D05599F1a5d5929c40342c06a5Da063a4dE",
            "sinceTimestamp": "1709502863",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wstETH"],
            "chain": "optimism"
          },
          {
            "address": "0x5e027ad442e031424b5a2C0ad6f656662Be32882",
            "sinceTimestamp": "1704715450",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "arbitrum"
          },
          {
            "address": "0xFB7B06538d837e4212D72E2A38e6c074F9076E0B",
            "sinceTimestamp": "1704715596",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC.e"],
            "chain": "arbitrum"
          },
          {
            "address": "0x8e9f58E6c206CB9C98aBb9F235E0f02D65dFc922",
            "sinceTimestamp": "1704715806",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WETH"],
            "chain": "arbitrum"
          },
          {
            "address": "0x3D20c6A2b719129af175E0ff7B1875DEb360896f",
            "sinceTimestamp": "1704715871",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wBTC"],
            "chain": "arbitrum"
          },
          {
            "address": "0xb2Cb9aDA6e00118dA8E83a6A53dF1EC6331A60a6",
            "sinceTimestamp": "1705566298",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDT"],
            "chain": "arbitrum"
          },
          {
            "address": "0x8574CBC539c26Df9ec11bA283218268101ff10e1",
            "sinceTimestamp": "1709502860",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wstETH"],
            "chain": "arbitrum"
          },
          {
            "address": "0x8180EcCC825b692ef65FF099a0A387743788bf78",
            "sinceTimestamp": "1715846411",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["weETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x4BB4C3CDc7562f08e9910A0C7D8bB7e108861eB4",
            "sinceTimestamp": "1715855051",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["rswETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x35d4D9bc79B0a543934b1769304B90d752691caD",
            "sinceTimestamp": "1717724723",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["rsETH"],
            "chain": "ethereum"
          },
          {
            "address": "0xE3E96892D30E0ee1a8131BAf87c891201F7137bf",
            "sinceTimestamp": "1719833675",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sUSDe"],
            "chain": "ethereum"
          },
          {
            "address": "0x5324c6d731a3d9D740e880929E2c952bA27408De",
            "sinceTimestamp": "1719833737",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sUSDe"],
            "chain": "optimism"
          },
          {
            "address": "0x8574CBC539c26Df9ec11bA283218268101ff10e1",
            "sinceTimestamp": "1717674857",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["weETH.mode"],
            "chain": "mode"
          },
          {
            "address": "0xAA8f9D05599F1a5d5929c40342c06a5Da063a4dE",
            "sinceTimestamp": "1717724847",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["rsETH"],
            "chain": "mode"
          },
          {
            "address": "0xdE45E2bCCb99E0ed1a2876cFC51a71ca5e822641",
            "sinceTimestamp": "1719833783",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sUSDe"],
            "chain": "mode"
          },
          {
            "address": "0x3FBFD80EF7591658d1D7DdEC067F413eFd6f985c",
            "sinceTimestamp": "1715846405",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["weETH"],
            "chain": "arbitrum"
          },
          {
            "address": "0x486936FB1CE805e8C46E71C69256e72f3f550d38",
            "sinceTimestamp": "1717724755",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["rsETH"],
            "chain": "arbitrum"
          },
          {
            "address": "0x3c143EA5eBaB50ad6D2B2d14FA719234d1d38F1b",
            "sinceTimestamp": "1719833706",
            "includeInTotal": false,
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sUSDe"],
            "chain": "arbitrum"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.lyra.finance",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUnderReview": true,
      "type": "layer2",
      "id": "race",
      "createdAt": "1726563843",
      "display": {
        "name": "Race Network",
        "slug": "race",
        "description": "Race Network is a Layer-2 designed for the tokenization and distribution of real-world assets (RWA).",
        "purposes": ["RWA"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://raceecosystem.com/"],
          "apps": [
            "https://bridge.race.foundation/",
            "https://raceecosystem.com/onboarding"
          ],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://x.com/RACEecosystem",
            "https://facebook.com/RACEecosystem/",
            "https://linkedin.com/company/raceecosystem"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "stage": { "stage": "UnderReview" },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "chain": "ethereum",
            "address": "0x680969A6c58183987c8126ca4DE6b59C6540Cd2a",
            "sinceTimestamp": "1720427195",
            "tokens": "*"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://racemainnet.io",
          "startBlock": 1,
          "defaultCallsPerMinute": 1500
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": ["OPStack", "EVM", "EthereumCalldata", "Superchain"]
    },
    {
      "isUnderReview": true,
      "type": "layer2",
      "id": "ebichain",
      "createdAt": "1726563843",
      "display": {
        "name": "Ebi Chain",
        "slug": "ebichain",
        "description": "Ebi Chain is a Layer-2 hosting the Ebi.xyz platform, a limit order book decentralised platform for trading perpetual futures.",
        "purposes": ["Exchange"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://ebi.xyz/en/home/"],
          "apps": ["https://ebi.xyz/en/trade/contract/"],
          "documentation": ["https://docs.ebi.xyz/ebi.xyz-overview"],
          "explorers": ["https://explorer.ebi.xyz/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/ebixyzdex",
            "https://t.me/ebixyzofficial",
            "https://discord.com/invite/ebixyz"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "chain": "ethereum",
            "address": "0x73CF739b0233027cd516998e177d473D0a45E037",
            "sinceTimestamp": "1713462371",
            "tokens": "*"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.ebi.xyz",
          "startBlock": 1,
          "defaultCallsPerMinute": 1500
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": ["Orbit", "EVM", "DAC", "Conduit"]
    },
    {
      "type": "layer2",
      "id": "mantapacific",
      "createdAt": "1693907285",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x1E5e634981564fc645dcbC6546aE618d7870B30a#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xAEbA8e2307A22B6824a9a7a39f8b016C357Cd1Fe"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x445c62F4948f3B08a6bB1DbC51Ef985b3Eb199F1#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x1E5e634981564fc645dcbC6546aE618d7870B30a#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x1E5e634981564fc645dcbC6546aE618d7870B30a#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x445c62F4948f3B08a6bB1DbC51Ef985b3Eb199F1#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 3d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x445c62F4948f3B08a6bB1DbC51Ef985b3Eb199F1#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x445c62F4948f3B08a6bB1DbC51Ef985b3Eb199F1#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x1E5e634981564fc645dcbC6546aE618d7870B30a#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x4b1A788B20bb85eb19f8e9B69B8a584e7fA29fe5",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x4b1A788B20bb85eb19f8e9B69B8a584e7fA29fe5",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x853bDfF715eFeDc280C16241dD30A6d651f90aCa",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xA76E31D8471D569EfDd3D95d1b11Ce6710f4533F",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "MantaMultisig",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L2OutputOracle, SystemConfig, OptimismPortal (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x3c46C05c2eba8eDd0B0f0C8B1D2fBf9fc53ea01E",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x4b1A788B20bb85eb19f8e9B69B8a584e7fA29fe5",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0xB44948Ff3E8a4d3Ac32A376B4b3209AdC7620770",
              "type": "EOA"
            },
            {
              "address": "0xDC80503b718Ff3B2e43db42460A718c119e75cdd",
              "type": "EOA"
            },
            {
              "address": "0x92124ee0e7238992E5E7F34f9FBBCD71931ABC6D",
              "type": "EOA"
            },
            {
              "address": "0x35Aee2b2aa6ACB13C3a38a58AEb069C163734FaD",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x4b1A788B20bb85eb19f8e9B69B8a584e7fA29fe5",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "* Member of MantaMultisig.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n"
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x853bDfF715eFeDc280C16241dD30A6d651f90aCa",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0xA76E31D8471D569EfDd3D95d1b11Ce6710f4533F",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x30c789674ad3B458886BBC9abf42EEe19EA05C1D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa2DCa85BB892De55D8B262d1806114733106e8D1"],
              "implementations": ["0x1E5e634981564fc645dcbC6546aE618d7870B30a"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["MantaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x3Ad319BB4872F8cB75a26Ac30CC4bD2d56b67b05",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "L1StandardBridge",
            "address": "0x3B95bC951EE0f553ba487327278cAc44f29715E5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa2DCa85BB892De55D8B262d1806114733106e8D1"],
              "implementations": ["0x62b257A1b1fC81c4e6E5Dc5b47F1E6184341Cd58"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["MantaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x635ba609680c55C3bDd0B3627b4c5dB21b13c310",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x9cDDc6F65eD67Ef19743fFDFD53501457ce8B51f"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "SystemConfig",
            "address": "0x895E00269A05848F3c9889EfA677D02fF7351a5D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa2DCa85BB892De55D8B262d1806114733106e8D1"],
              "implementations": ["0xeF01a6aE995791FfFcA3d70bDA7B91E5Fa1aD0aE"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["MantaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x9168765EE952de7C6f8fC6FaD5Ec209B960b7622",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa2DCa85BB892De55D8B262d1806114733106e8D1"],
              "implementations": ["0x445c62F4948f3B08a6bB1DbC51Ef985b3Eb199F1"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["MantaMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xa2DCa85BB892De55D8B262d1806114733106e8D1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, SystemConfig, OptimismPortal.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Manta Pacific Network Launch",
          "link": "https://mantanetwork.medium.com/manta-pacific-mainnet-alpha-launch-743c6bc2b95e",
          "date": "2023-09-12T00:00:00Z",
          "description": "Manta Pacific is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Blobstream and Celestia Architecture",
          "url": "https://www.youtube.com/watch?v=cn_fN6pkakQ",
          "thumbnail": "modular-rollup.jpg"
        },
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "Caldera", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "mantapacific",
        "name": "Manta Pacific",
        "slug": "mantapacific",
        "description": "Manta Pacific is an Optimium empowering EVM-native zero-knowledge (ZK) applications and general dapps.",
        "links": {
          "websites": ["https://pacific.manta.network/"],
          "apps": ["https://pacific-bridge.manta.network/"],
          "documentation": ["https://docs.manta.network/"],
          "explorers": [
            "https://pacific-explorer.manta.network/",
            "https://169.routescan.io/"
          ],
          "repositories": ["https://github.com/Manta-Network"],
          "socialMedia": [
            "https://discord.gg/mantanetwork",
            "https://twitter.com/MantaNetwork",
            "https://medium.com/@mantanetwork"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": {
        "name": "mantapacific",
        "chainId": 169,
        "explorerUrl": "https://pacific-explorer.manta.network",
        "explorerApi": {
          "url": "https://pacific-explorer.manta.network/api",
          "type": "blockscout"
        },
        "minTimestampForTvl": "1694223959",
        "multicallContracts": [
          {
            "sinceBlock": 332890,
            "batchSize": 150,
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "version": "3"
          },
          {
            "sinceBlock": 54816,
            "batchSize": 150,
            "address": "0x9731502B98F65BBb573D0106ECd9E4097dbcCD30",
            "version": "2"
          }
        ],
        "coingeckoPlatform": "manta-pacific"
      },
      "config": {
        "associatedTokens": ["MANTA"],
        "escrows": [
          {
            "address": "0x9168765EE952de7C6f8fC6FaD5Ec209B960b7622",
            "newVersion": true,
            "sinceTimestamp": "1694224871",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x9168765EE952de7C6f8fC6FaD5Ec209B960b7622",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xa2DCa85BB892De55D8B262d1806114733106e8D1"],
                "implementations": [
                  "0x445c62F4948f3B08a6bB1DbC51Ef985b3Eb199F1"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x3B95bC951EE0f553ba487327278cAc44f29715E5",
            "newVersion": true,
            "sinceTimestamp": "1694224907",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x3B95bC951EE0f553ba487327278cAc44f29715E5",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xa2DCa85BB892De55D8B262d1806114733106e8D1"],
                "implementations": [
                  "0x62b257A1b1fC81c4e6E5Dc5b47F1E6184341Cd58"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://pacific-rpc.manta.network/http",
          "defaultCallsPerMinute": 1500,
          "startBlock": 1
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "3d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -259200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "mantle",
      "createdAt": "1680782525",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xD1230865641561653406906Fb08873F011c19080#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain. The sequencer posts the transactions data batch root, and then propagates the data to off-chain permissioned nodes to sign. It subsequently posts the nodes signatures on chain to verify they belong to the specified members of the quorum, and that the minimum stake threshold is met.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "DataLayrServiceManager.sol#L389 - Etherscan source code, confirmDataStore function",
              "href": "https://etherscan.io/address/0xab42127980a3bff124e6465e097a5fc97228827e#code#F1#L389"
            },
            {
              "text": "DataLayrServiceManager.sol#L404 - Etherscan source code, signature verification check ",
              "href": "https://etherscan.io/address/0xab42127980a3bff124e6465e097a5fc97228827e#code#F1#L404"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x5BD63a7ECc13b955C4F57e3F12A64c10263C14c1"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xe1399f54ba2597b4EaDA9E3450c34D393fb131A7#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xD1230865641561653406906Fb08873F011c19080#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xD1230865641561653406906Fb08873F011c19080#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xe1399f54ba2597b4EaDA9E3450c34D393fb131A7#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xe1399f54ba2597b4EaDA9E3450c34D393fb131A7#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xe1399f54ba2597b4EaDA9E3450c34D393fb131A7#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xD1230865641561653406906Fb08873F011c19080#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x2F44BD2a54aC3fB20cd7783cF94334069641daC9",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x2F44BD2a54aC3fB20cd7783cF94334069641daC9",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x6667961f5e9C98A76a48767522150889703Ed77D",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x2f40D796917ffB642bD2e2bdD2C762A5e40fd749",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "MantleEngineeringMultisig",
          "description": "* This is a Gnosis Safe with 3 / 7 threshold. \n* Is a Challenger.\n* Is a Guardian.\n",
          "accounts": [
            {
              "address": "0x2F44BD2a54aC3fB20cd7783cF94334069641daC9",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xC37642355c18ec9c3b3268AAC67e33516aa115eb",
              "type": "EOA"
            },
            {
              "address": "0x207E804758e28F2b3fD6E4219671B327100b82f8",
              "type": "EOA"
            },
            {
              "address": "0x5a021DC06A9630bb56099b8aEdfaDC2dEa7eB317",
              "type": "EOA"
            },
            {
              "address": "0x00da2F87c56C3a19BD863613995705095F55b524",
              "type": "EOA"
            },
            {
              "address": "0xbE73dea9c8DcDdB6b03F7e5797b85982065fe34e",
              "type": "EOA"
            },
            {
              "address": "0x3Dc5FcB0Ad5835C6059112e51A75b57DBA668eB8",
              "type": "EOA"
            },
            {
              "address": "0x915dc866e2e5E64f912A5ac1D40E3be4597F172a",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "MantleSecurityMultisig",
          "description": "* This is a Gnosis Safe with 6 / 13 threshold. \n* Can act on behalf of MantleTokenProxyAdmin, ProxyAdmin, ProxyAdmin, ProxyAdmin.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of Lib_AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of BLSRegistry, InvestmentManager, L2OutputOracle, SystemConfig, DataLayrServiceManager, PubkeyCompendium, MantleSecondStrat, RegistryPermission, OptimismPortal, DataLayrChallenge, MantleFirstStrat, DataLayrChallengeUtils, Delegation (acting via ProxyAdmin).\n* Can upgrade implementation of L1MantleToken (acting via MantleTokenProxyAdmin).\n* Can upgrade implementation of EigenDataLayerChain.\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x4e59e778a0fb77fBb305637435C62FaeD9aED40f",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xf73546Da2F971bD0Ed1b3c5F9C01092180Db5089",
              "type": "EOA"
            },
            {
              "address": "0x61Af7a48B0EeA8481E5A055A35f829d0e8505fE3",
              "type": "EOA"
            },
            {
              "address": "0x422f2df38B96395A7E61d4C02aDd4413bb79A9FC",
              "type": "EOA"
            },
            {
              "address": "0x207E804758e28F2b3fD6E4219671B327100b82f8",
              "type": "EOA"
            },
            {
              "address": "0xbE73dea9c8DcDdB6b03F7e5797b85982065fe34e",
              "type": "EOA"
            },
            {
              "address": "0x5a021DC06A9630bb56099b8aEdfaDC2dEa7eB317",
              "type": "EOA"
            },
            {
              "address": "0x7735cDcc85E63A7684C29652DbE8B845e0b4635A",
              "type": "MultiSig"
            },
            {
              "address": "0x3Dc5FcB0Ad5835C6059112e51A75b57DBA668eB8",
              "type": "EOA"
            },
            {
              "address": "0xf5b16239f88B54894e03e0293d3d7FDdEb9f9070",
              "type": "EOA"
            },
            {
              "address": "0xe75D7324d6BC4E70A200c5E268160332F43b2d2B",
              "type": "EOA"
            },
            {
              "address": "0x3000BE80ad204D327990eB403654aCd1Eaa8eCeb",
              "type": "EOA"
            },
            {
              "address": "0xc4143711aA5bd6d37F1b0A690120AA5859e32A93",
              "type": "EOA"
            },
            {
              "address": "0x915dc866e2e5E64f912A5ac1D40E3be4597F172a",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "GnosisSafe",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Member of MantleSecurityMultisig.\n",
          "accounts": [
            {
              "address": "0x7735cDcc85E63A7684C29652DbE8B845e0b4635A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x5881541E79f5D9d5d72c87E8Ea6F681CAb289B12",
              "type": "EOA"
            },
            {
              "address": "0x2288226d687c01B7332c2A99A0C5A4a112c63f1e",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x2f40D796917ffB642bD2e2bdD2C762A5e40fd749",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x6667961f5e9C98A76a48767522150889703Ed77D",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "PauserRegistry",
            "address": "0x075a48633dc6845f92339741E9c96b88f1b2A86f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": ""
          },
          {
            "name": "MantleTokenProxyAdmin",
            "address": "0x0cac2B1a172ac24012621101634DD5ABD6399ADd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Can be used to upgrade implementation of L1MantleToken."
          },
          {
            "name": "BLSRegistry",
            "address": "0x1eD35B793d887e028493dAC4a11AA5Feb811dd67",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x47D58744D8515d9aaEAf961bc03625118bd91EBb"],
              "implementations": ["0x64F4244eEA17a361bb919A28F614C3ad1aC565ad"]
            },
            "chain": "ethereum",
            "description": "This contract stores the number of Mantle DA operators and their public keys. It also store the quorum threshold and the minimum stake required to be part of the quorum.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "InvestmentManager",
            "address": "0x23754725a49c0f003C349A6C7869fF8609a7CEfd",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x2Cd33d3DC4d6Ea24B6941e4741F4Bf4772929e83"],
              "implementations": ["0x7C4813A9AF2FEA4ca765a26b05d128926E94e72E"]
            },
            "chain": "ethereum",
            "description": "Contract managing different investment strategies, forked from EigenLayer StrategyManager.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x2Cd33d3DC4d6Ea24B6941e4741F4Bf4772929e83",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Can be used to upgrade implementation of InvestmentManager, MantleSecondStrat, RegistryPermission, MantleFirstStrat, Delegation."
          },
          {
            "name": "L2OutputOracle",
            "address": "0x31d543e7BE1dA6eFDc2206Ef7822879045B9f481",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xca35F8338054739D138884685e08b39EE2217794"],
              "implementations": ["0xD1230865641561653406906Fb08873F011c19080"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1MantleToken",
            "address": "0x3c3a81e81dc49A522A592e7622A7E711c06bf354",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0cac2B1a172ac24012621101634DD5ABD6399ADd"],
              "implementations": ["0xCd368c1d80120b0Dd92447c87eB570154f8e685c"]
            },
            "chain": "ethereum",
            "description": "MNT token contract: Mantle uses Mantle (MNT) as the designated gas token, allowing users pay for gas in MNT.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x427Ea0710FA5252057F0D88274f7aeb308386cAf",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xca35F8338054739D138884685e08b39EE2217794"],
              "implementations": ["0x6Dbb7D9C5dC60844B8CF442ddC6Be081c060B2E3"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x47D58744D8515d9aaEAf961bc03625118bd91EBb",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Can be used to upgrade implementation of BLSRegistry, DataLayrServiceManager, PubkeyCompendium, DataLayrChallenge, DataLayrChallengeUtils."
          },
          {
            "name": "PauserRegistry2",
            "address": "0x4ca725D446EcE6e3fFd3E072A6f2A6a16Ca492D0",
            "upgradeability": null,
            "chain": "ethereum",
            "description": ""
          },
          {
            "name": "EigenDataLayerChain",
            "address": "0x50Fa427235C7C8cAA4A0C21b5009f5a0d015B23A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x4e59e778a0fb77fBb305637435C62FaeD9aED40f"],
              "implementations": ["0xDF401d4229Fc6cA52238f7e55A04FA8EBc24C55a"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DataLayrServiceManager",
            "address": "0x5BD63a7ECc13b955C4F57e3F12A64c10263C14c1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x47D58744D8515d9aaEAf961bc03625118bd91EBb"],
              "implementations": ["0xAB42127980a3bff124E6465e097a5fC97228827e"]
            },
            "chain": "ethereum",
            "description": "This contract is the main entry point for data availability. It is responsible for storing transaction data headers and confirming the data store by verifying operators signatures.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x676A795fe6E43C17c668de16730c3F690FEB7120",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xb8DE82551fA4BA3bE4B3d9097763EDBeED541308"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "Lib_AddressManager",
            "address": "0x6968f3F16C3e64003F02E121cf0D5CCBf5625a42",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "PubkeyCompendium",
            "address": "0x92986cd63C3409b7dA2882624B6d6E7Cf660707a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x47D58744D8515d9aaEAf961bc03625118bd91EBb"],
              "implementations": ["0x18Dd3cBE484f955217165FEaC6fe928D04a56a72"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x95fC37A27a2f68e3A647CDc081F0A89bb47c3012",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xca35F8338054739D138884685e08b39EE2217794"],
              "implementations": ["0xb4133552BA49dFb60DA6eb5cA0102d0f94ce071f"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "MantleSecondStrat",
            "address": "0xA937660031787C4408587D2c6A67Ec4B260630F5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x2Cd33d3DC4d6Ea24B6941e4741F4Bf4772929e83"],
              "implementations": ["0x9FEcF38689349a5CFf97526610CdB27618edc6b9"]
            },
            "chain": "ethereum",
            "description": "Basic do-nothing investment strategy.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "RegistryPermission",
            "address": "0xBcF6d8273DAF842b6Fc288b08E48C438Fa911D01",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x2Cd33d3DC4d6Ea24B6941e4741F4Bf4772929e83"],
              "implementations": ["0xAb00B934DE01c1b4931047125C2ba5B3d6186b85"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0xc54cb22944F2bE476E02dECfCD7e3E7d3e15A8Fb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xca35F8338054739D138884685e08b39EE2217794"],
              "implementations": ["0xe1399f54ba2597b4EaDA9E3450c34D393fb131A7"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DataLayrChallenge",
            "address": "0xc9C24f1aaD2614E81f033746292F5Dc5d7Ccad94",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x47D58744D8515d9aaEAf961bc03625118bd91EBb"],
              "implementations": ["0x6EE53D3d6e622Ac0296369445AFB3CBBDc57C066"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xca35F8338054739D138884685e08b39EE2217794",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure Lib_AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, SystemConfig, OptimismPortal.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "MantleFirstStrat",
            "address": "0xCAD08A7B9eF6ADeFAef08d0d85a577a288F93Ee1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x2Cd33d3DC4d6Ea24B6941e4741F4Bf4772929e83"],
              "implementations": ["0x9FEcF38689349a5CFf97526610CdB27618edc6b9"]
            },
            "chain": "ethereum",
            "description": "Basic do-nothing investment strategy.",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DataLayrChallengeUtils",
            "address": "0xCDC78c5eaea2dE33B00a9200Ee1700937fb0f55D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x47D58744D8515d9aaEAf961bc03625118bd91EBb"],
              "implementations": ["0xd8d731624d97a66e012E62208cFc921d7033c564"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "Delegation",
            "address": "0xeA4F1fE4928f1f83a450899C068bcd455BaF4798",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x2Cd33d3DC4d6Ea24B6941e4741F4Bf4772929e83"],
              "implementations": ["0xAdA69A18B30B3B9235AB2748116bB9195e16aDba"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["MantleSecurityMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Mainnet launch",
          "link": "https://www.mantle.xyz/blog/announcements/mantle-network-mainnet-alpha",
          "date": "2023-07-14T00:00:00.00Z",
          "description": "Mantle is live on mainnet.",
          "type": "general"
        },
        {
          "name": "Mainnet v2 Tectonic Upgrade",
          "link": "https://www.mantle.xyz/blog/announcements/mantle-completes-mainnet-v2-tectonic-upgrade",
          "date": "2024-03-15T00:00:00.00Z",
          "description": "Mantle completes Mainnet v2 Tectonic Upgrade.",
          "type": "general"
        },
        {
          "name": "MNT token migration begins",
          "link": "https://www.mantle.xyz/blog/announcements/bit-to-mnt-user-guide",
          "date": "2023-07-11T00:00:00.00Z",
          "description": "User can exchange their BIT tokens to MNT tokens.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["CustomDA", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "mantle",
        "name": "Mantle",
        "slug": "mantle",
        "description": "Mantle is an under development EVM compatible Optimium, based on the OP Stack.",
        "links": {
          "websites": ["https://mantle.xyz/"],
          "apps": ["https://bridge.mantle.xyz"],
          "documentation": ["https://docs-v2.mantle.xyz/"],
          "explorers": [
            "https://explorer.mantle.xyz/",
            "https://mantlescan.info"
          ],
          "repositories": ["https://github.com/mantlenetworkio"],
          "socialMedia": [
            "https://discord.gg/0xMantle",
            "https://twitter.com/0xMantle",
            "https://medium.com/0xmantle",
            "https://t.me/mantlenetwork"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": {
        "name": "mantle",
        "chainId": 5000,
        "explorerUrl": "https://explorer.mantle.xyz/",
        "explorerApi": {
          "url": "https://api.routescan.io/v2/network/mainnet/evm/5000/etherscan/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1688314886",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 304717,
            "version": "3"
          }
        ],
        "coingeckoPlatform": "mantle"
      },
      "config": {
        "associatedTokens": ["MNT"],
        "escrows": [
          {
            "address": "0xc54cb22944F2bE476E02dECfCD7e3E7d3e15A8Fb",
            "newVersion": true,
            "sinceTimestamp": "1710439967",
            "tokens": ["ETH", "MNT"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xc54cb22944F2bE476E02dECfCD7e3E7d3e15A8Fb",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xca35F8338054739D138884685e08b39EE2217794"],
                "implementations": [
                  "0xe1399f54ba2597b4EaDA9E3450c34D393fb131A7"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH, MNT.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x95fC37A27a2f68e3A647CDc081F0A89bb47c3012",
            "newVersion": true,
            "sinceTimestamp": "1687954103",
            "tokens": "*",
            "excludedTokens": ["SolvBTC", "SolvBTC.BBN"],
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x95fC37A27a2f68e3A647CDc081F0A89bb47c3012",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xca35F8338054739D138884685e08b39EE2217794"],
                "implementations": [
                  "0xb4133552BA49dFb60DA6eb5cA0102d0f94ce071f"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.mantle.xyz",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Mantle DA",
          "sentiment": "warning",
          "description": "The data is posted to Mantle DA (contracts are forked from EigenDA with significant modifications, most importantly removal of slashing conditions)."
        },
        "bridge": {
          "value": "9/10 Staked Operators",
          "sentiment": "warning",
          "description": "There is a threshold of 9/10 of staked operators that must sign and attest that the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely fully on data that is NOT published on chain. Mantle DA contracts are forked from EigenDA with significant modifications, most importantly removal of slashing conditions. DA fraud proof mechanism is not live yet.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "metal",
      "createdAt": "1695904849",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xc83f7D9F2D4A76E81145849381ABA02602373723"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
              "type": "Contract"
            },
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0xC8187d40AD440328104A52BBed2D8Efc5ab1F1F6",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xC94C243f8fb37223F3EB2f7961F7072602A51B8B",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "LivenessModule",
          "accounts": [
            {
              "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "* Can act on behalf of SecurityCouncilMultisig.\n* Is a Guardian  (acting via SuperchainGuardianMultisig, SecurityCouncilMultisig).\n* used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig\n"
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SuperchainProxyAdminOwner",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Can act on behalf of ProxyAdmin, SuperchainProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change configuration of Lib_AddressManager (acting via SuperchainProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of OptimismMintableERC20Factory, L2OutputOracle, OptimismPortal, L1ERC721Bridge, SystemConfig (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n* Can upgrade implementation of SuperchainConfig (acting via SuperchainProxyAdmin).\n",
          "accounts": [
            {
              "address": "0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "FoundationMultisig_2",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Can act on behalf of DeputyGuardianModule.\n* Is a Guardian  (acting via SuperchainGuardianMultisig, DeputyGuardianModule).\n",
          "accounts": [
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SecurityCouncilMultisig",
          "description": "* This is a Gnosis Safe with 10 / 13 threshold. It uses the following modules: LivenessModule (used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig).\n* Member of SuperchainGuardianMultisig, SuperchainProxyAdminOwner.\n* Is a Guardian  (acting via SuperchainGuardianMultisig).\n",
          "accounts": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x07dC0893cAfbF810e3E72505041f2865726Fd073",
              "type": "EOA"
            },
            {
              "address": "0x0a122d8aA40758FBAFf0360BFB391EdFfD9758b8",
              "type": "EOA"
            },
            {
              "address": "0x1822b35B09f5ce1C78ecbC06AC0A4e17885b925e",
              "type": "EOA"
            },
            {
              "address": "0x4A7322258c9E690e4CB8Cea6e5251443E956e61E",
              "type": "EOA"
            },
            {
              "address": "0x51aCb8e1205De850D1b512584FeE9C29C3813dDa",
              "type": "EOA"
            },
            {
              "address": "0x5C0F529d5B025540c54f71d2BcbB4c78F368C47e",
              "type": "EOA"
            },
            {
              "address": "0x6323ef2b80030f3fBc508bFc321Fc71fDB95c865",
              "type": "EOA"
            },
            {
              "address": "0x74FAE9a9fbe31d1F69b95f59CaF12736a8b6B310",
              "type": "EOA"
            },
            {
              "address": "0x7ed8d9Af9eaA194D1A75C67c1475579E42289E39",
              "type": "EOA"
            },
            {
              "address": "0x8Afe777B5A4D1e156435ab44Ad4b73A318cE0EA4",
              "type": "EOA"
            },
            {
              "address": "0x9Eb11A55132c851b9991F148b3Af791ca498fD7A",
              "type": "EOA"
            },
            {
              "address": "0xbfA046B0bc5cEa1596be62B8b3f79f9f41f1E0d9",
              "type": "EOA"
            },
            {
              "address": "0xE895076cD050F1f042d1040E47b5929bE989E514",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SuperchainGuardianMultisig",
          "description": "* This is a Gnosis Safe with 1 / 1 threshold. It uses the following modules: DeputyGuardianModule (allows the FoundationMultisig_2, called the deputy guardian, to act on behalf of the Gnosis Safe).\n* Can act as a Guardian.\n",
          "accounts": [
            {
              "address": "0x09f7150D8c019BeF34450d6920f6B3608ceFdAf2",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "GnosisSafe",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Member of FoundationMultisig_1, FoundationMultisig_2.\n",
          "accounts": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xb23794fd6BA1CEAd01Cf54D772b8341F2F0197A5",
              "type": "EOA"
            },
            {
              "address": "0x4665374939642965EfD8357D4568D2A77f677429",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FoundationMultisig_1",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Member of SuperchainProxyAdminOwner.\n",
          "accounts": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0xC8187d40AD440328104A52BBed2D8Efc5ab1F1F6",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xC94C243f8fb37223F3EB2f7961F7072602A51B8B",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x0a47A44f1B2bb753474f8c830322554A96C9934D",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x1aaab4E20d2e4Bb992b5BCA2125e8bd3588c8730",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99"],
              "implementations": ["0xE01efbeb1089D1d1dB9c6c8b135C934C0734c846"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "LivenessGuard",
            "address": "0x24424336F04440b1c28685a38303aC33C9D14a25",
            "upgradeability": null,
            "chain": "ethereum",
            "description": ""
          },
          {
            "name": "ProxyAdmin",
            "address": "0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of OptimismMintableERC20Factory, L2OutputOracle, OptimismPortal, L1ERC721Bridge, SystemConfig.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x3B1F7aDa0Fcc26B13515af752Dd07fB1CAc11426",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99"],
              "implementations": ["0xF243BEd163251380e78068d317ae10f26042B292"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x3F37aBdE2C6b5B2ed6F8045787Df1ED1E3753956",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99"],
              "implementations": ["0x2D778797049FE9259d947D1ED8e5442226dFB589"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x50D700e97967F9115e3f999bDB263d69F6704680",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99"],
              "implementations": ["0xAE2AF01232a6c4a4d3012C5eC5b1b35059caF10d"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainProxyAdmin",
            "address": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure Lib_AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SuperchainConfig.\n"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x6d0f65D59b55B0FEC5d2d15365154DcADC140BF3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99"],
              "implementations": ["0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x7BD909970B0EEdcF078De6Aeff23ce571663b8aA",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99"],
              "implementations": ["0xba2492e52F45651B60B8B38d4Ea5E2390C64Ffb1"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x53c165169401764778F780a69701385eb0FF19B7"]
            },
            "chain": "ethereum",
            "description": "Used to manage global configuration values for multiple OP Chains within a single Superchain network. The SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the Superchain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0xd4b1EC0DEc3C7F12abD3ec27B7514880ae1C3a37",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "Lib_AddressManager",
            "address": "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Superchain", "Conduit", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "bedrock-superchain",
        "name": "Metal",
        "slug": "metal",
        "description": "Metal L2 is a general-purpose OP stack rollup by Metallicus focused on banking and compliance.",
        "links": {
          "websites": ["https://metall2.com/"],
          "apps": [
            "https://bridge.metall2.com/",
            "https://dollar.metalx.com/",
            "https://metalpay.com/"
          ],
          "documentation": ["https://docs.metall2.com"],
          "explorers": ["https://explorer.metall2.com"],
          "repositories": ["https://github.com/MetalPay"],
          "socialMedia": [
            "https://twitter.com/metalpaysme",
            "https://reddit.com/r/metalpay/",
            "https://facebook.com/metalpaysme",
            "https://t.me/metalpaysme",
            "https://linkedin.com/company/metallicus"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Metal is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": ["MTL"],
        "escrows": [
          {
            "address": "0x3F37aBdE2C6b5B2ed6F8045787Df1ED1E3753956",
            "newVersion": true,
            "sinceTimestamp": "1711563611",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x3F37aBdE2C6b5B2ed6F8045787Df1ED1E3753956",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99"],
                "implementations": [
                  "0x2D778797049FE9259d947D1ED8e5442226dFB589"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x6d0f65D59b55B0FEC5d2d15365154DcADC140BF3",
            "newVersion": true,
            "sinceTimestamp": "1711563659",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x6d0f65D59b55B0FEC5d2d15365154DcADC140BF3",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x37Ff0ae34dadA1A95A4251d10ef7Caa868c7AC99"],
                "implementations": [
                  "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.metall2.com",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0xC94C243f8fb37223F3EB2f7961F7072602A51B8B",
              "to": "0xc83f7D9F2D4A76E81145849381ABA02602373723",
              "sinceTimestamp": "1711567115"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x3B1F7aDa0Fcc26B13515af752Dd07fB1CAc11426",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1711563635"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "metis",
      "createdAt": "1637945259",
      "badges": ["EVM", "CustomDA", "OVM"],
      "display": {
        "name": "Metis Andromeda",
        "shortName": "Metis",
        "slug": "metis",
        "description": "Metis Andromeda is an EVM-equivalent solution originally forked from Optimism OVM. Since April 2024 hashes of data blobs are posted to EOA similarly to OPStack chains. It uses a decentralized Sequencer pool running Tendermint consensus and MPC module to sign transaction batches.",
        "purposes": ["Universal"],
        "provider": "OVM",
        "category": "Optimium",
        "links": {
          "websites": ["https://metis.io"],
          "apps": ["https://bridge.metis.io"],
          "documentation": ["https://docs.metis.io"],
          "explorers": [
            "https://andromeda-explorer.metis.io",
            "https://explorer.metis.io"
          ],
          "repositories": ["https://github.com/MetisProtocol"],
          "socialMedia": [
            "https://metisl2.medium.com/",
            "https://twitter.com/MetisL2",
            "https://discord.com/invite/metis",
            "https://youtube.com/@Metis_L2",
            "https://t.me/MetisL2",
            "https://instagram.com/metisl2/"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "stage": { "stage": "NotApplicable" },
      "chainConfig": {
        "name": "metis",
        "chainId": 1088,
        "explorerUrl": "https://explorer.metis.io",
        "explorerApi": {
          "url": "https://api.routescan.io/v2/network/mainnet/evm/1088/etherscan/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1637270379",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 2338552,
            "version": "3",
            "isNativeBalanceSupported": false
          }
        ],
        "coingeckoPlatform": "metis"
      },
      "config": {
        "associatedTokens": ["Metis"],
        "escrows": [
          {
            "address": "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b",
            "sinceTimestamp": "1637077208",
            "tokens": "*",
            "chain": "ethereum",
            "premintedTokens": ["Metis"]
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://andromeda.metis.io/",
          "defaultCallsPerMinute": 1500,
          "startBlock": 1
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "MEMO",
          "sentiment": "warning",
          "description": "The data is posted to MEMO (a decentralized storage)."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External (MEMO)",
          "description": "Transaction data is kept in MEMO decentralized storage.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "Enqueue via L1",
          "description": "Users can submit transactions to an L1 queue, but can't force them. The sequencer cannot selectively skip transactions but can stop processing the queue entirely. In other words, if the sequencer censors or is down, it is so for everyone.",
          "sentiment": "warning",
          "sources": [
            {
              "contract": "CanonicalTransactionChain",
              "references": [
                "https://etherscan.io/address/0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9#code#F1#L212"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "METIS transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "No automatic on-chain fraud proof system",
          "description": "For additional security, any staked Validator can challenge invalid state root submitted by the Sequencer. Other Validators will then act as referees in an interactive challenge game. Dishonest Validator majority can push invalid state root on-chain, and potentially slash honest Sequencer.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "MVM_Verifier.sol#L133 - Metis source code",
              "href": "https://github.com/MetisProtocol/mvm/blob/develop/packages/contracts/contracts/MVM/MVM_Verifier.sol#L133"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is recorded off-chain in MEMO",
          "description": "Transaction data is not stored on-chain, rather it is recorded in off-chain decentralized storage         MEMO from MemoLabs. Data hashes are posted to an EOA address.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "sequencer withholds data for more than seven days while at the same time submits fraudulent state root.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "The Tech Journey: Lower Gas Costs & Storage Layer on Metis",
              "href": "https://metisdao.medium.com/the-tech-journey-lower-gas-costs-storage-layer-on-metis-867ddcf6d381"
            }
          ]
        },
        "operator": {
          "name": "The system has a decentralized sequencer set",
          "description": "As of April 2024 Metis uses a permissioned sequencer pool running a Tendermint consensus. Once consensus is reached on a block, an MPC address is used to submit a block hash to Ethereum. The infrastructure to manage the MPC is offchain and not trustless because Ethereum does not verify the validity of MPC address.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Decentralized Sequencer - Metis documentation",
              "href": "https://docs.metis.io/dev/decentralized-sequencer/overview"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can enqueue transactions",
          "description": "Users can submit transactions to an L1 queue, but can't force them. The sequencer cannot selectively skip transactions but can stop processing the queue entirely. In other words, if the sequencer censors or is down, it is so for everyone.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator is offline or refuses to process the queue."
            }
          ],
          "references": [
            {
              "text": "CanonicalTransactionChain - Etherscan source code",
              "href": "https://etherscan.io/address/0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "Withdrawing from Metis - Metis documentation",
                "href": "https://docs.metis.io/building-on-metis/metis-bridge#withdrawing-from-metis"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all messages from L1, including all forced withdrawals and deposits. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Metis uses the Optimistic Virtual Machine (OVM) 2.0 to execute transactions.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex OVM implementation."
              }
            ],
            "references": [
              {
                "text": "MVM repository - Metis source code",
                "href": "https://github.com/MetisProtocol/mvm"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x1A9da0aedA630dDf2748a453BF6d92560762D914",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to commit transactions to L1."
        },
        {
          "name": "Metis Multisig",
          "description": "This is a Gnosis Safe with 4 / 9 threshold.  This address is the owner of all the upgradable contracts of the system. This allows it to censor messages or pause message bridge altogether, upgrade bridge implementation potentially gaining access to all funds stored in a bridge and change the sequencer, state root proposer or any other system component (unlimited upgrade power).",
          "accounts": [
            {
              "address": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x1577D2b835f561BD021E3219Cd786181D0e17ff5",
              "type": "EOA"
            },
            {
              "address": "0x36B892a31b311E5e9960739A69D2dF0aa0F81A01",
              "type": "EOA"
            },
            {
              "address": "0x001088E383A00ff4ab36F37f7021Cb6d7B415751",
              "type": "EOA"
            },
            {
              "address": "0x217fD54d336f710F8aee19572dBfBf0B2297ed69",
              "type": "EOA"
            },
            {
              "address": "0xB383E1331dEE29864b68f7D84b0dC289F770d846",
              "type": "EOA"
            },
            {
              "address": "0x7a9059F4A6e50090e4f55994d465918200AB4454",
              "type": "EOA"
            },
            {
              "address": "0x02058Bb1d98D88087008F2ac1273584591380e3F",
              "type": "EOA"
            },
            {
              "address": "0xB961047013F974C5b6B6F8dA4402379525316550",
              "type": "EOA"
            },
            {
              "address": "0xa6D8941F935932a531A856C2e48046DA73a1098E",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "State Root Proposer",
          "accounts": [
            {
              "address": "0xf3CEB4C2ef996CdBc95C4E18c6D0CA988CC09040",
              "type": "EOA"
            }
          ],
          "description": "Central actor to post new state roots to L1."
        },
        {
          "name": "Execution Verifiers",
          "accounts": [
            {
              "address": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
              "type": "EOA"
            }
          ],
          "description": "Those addresses can challenge the state roots submitted by the state root proposer."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "MVM_Verifier",
            "address": "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"],
              "implementations": ["0x47b5A78E127Dfd521532Fdca89651c832Acb7e0E"]
            },
            "chain": "ethereum",
            "description": "This contract implements a voting scheme with which the majority of Verifiers can challenge malicious state roots proposed. There are no whitelisted verifiers, hence this contract is not used in practice."
          },
          {
            "name": "CanonicalTransactionChain",
            "address": "0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The Canonical Transaction Chain (CTC) contract is an append-only log of transactions which must be applied to the OVM state. Given that transactions batch hashes are sent to an EOA address, it allows any account to enqueue() a transaction, which the Sequencer must eventually append to the rollup state."
          },
          {
            "name": "StateCommitmentChain",
            "address": "0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"],
              "implementations": ["0x6b1Cd90796Dc97C859734dDA4fF7816f703DDb48"]
            },
            "chain": "ethereum",
            "description": "The State Commitment Chain (SCC) stores a list of proposed state roots in a linked ChainStorageContainer contract. Only a permissioned state root proposer (MVM_Proposer) can submit new state roots."
          },
          {
            "name": "ChainStorageContainer-CTC-batches",
            "address": "0x38473Feb3A6366757A249dB2cA4fBB2C663416B7"
          },
          {
            "name": "ChainStorageContainer-CTC-queue",
            "address": "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57"
          },
          {
            "name": "ChainStorageContainer-SCC-batches",
            "address": "0x10739F09f6e62689c0aA8A1878816de9e166d6f9"
          },
          {
            "name": "BondManager",
            "address": "0x595801b85628ec6979C420988b8843A40F850528",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The Bond Manager contract will handle deposits in the form of an ERC20 token from bonded Proposers. It will also handle the accounting of gas costs spent by a Verifier during the course of a challenge. In the event of a successful challenge, the faulty Proposer's bond will be slashed, and the Verifier's gas costs will be refunded. Current mock implementation allows only OVM_Proposer to propose new state roots. No slashing is implemented."
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x081D1101855bD523bA69A9794e0217F0DB6323ff",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x8bF439ef7167023F009E24b21719Ca5f768Ecb36"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "The L1 Cross Domain Messenger (L1xDM) contract sends messages from L1 to Metis, and relays messages from Metis onto L1. In the event that a message sent from L1 to Metis is rejected for exceeding the Metis epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "MVM_DiscountOracle",
            "address": "0x7f6B0b7589febc40419a8646EFf9801b87397063",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Oracle specifying user fees for sending L1 -> Metis messages and other parameters for cross-chain communication."
          },
          {
            "name": "Lib_AddressManager",
            "address": "0x918778e825747a892b17C66fe7D24C618262867d",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "This is a library that stores the mappings between names such as OVM_Sequencer, OVM_Proposer and other contracts and their addresses."
          },
          {
            "name": "MVM_L2ChainManagerOnL1",
            "address": "0xf3d58D1794f2634d6649a978f2dc093898FEEBc0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"],
              "implementations": ["0x7b5AFdA01ef32d95858A22E5fc0a6821A12CDAe5"]
            },
            "chain": "ethereum",
            "description": "Contract that allows METIS_MANAGER to switch Sequencer."
          },
          {
            "name": "L1StandardBridge",
            "address": "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"],
              "implementations": ["0xa0cfE8Af2AB5C9232714647702DbACf862EA4798"]
            },
            "chain": "ethereum",
            "description": "Main entry point for users depositing ERC20 tokens and ETH that do not require custom gateway."
          },
          {
            "name": "LockingPool",
            "address": "0xD54c868362C2098E0E46F12E7D924C6A332952Dd",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8"],
              "implementations": ["0xD8f38c831E5032d23065Eaaee8c0620e17c04D60"]
            },
            "chain": "ethereum",
            "description": "Contract allowing users to lock tokens to apply to become a sequencer, receive rewards, unlock tokens to exit the sequencer, reward distribution."
          },
          {
            "name": "LockingInfo",
            "address": "0x0fe382b74C3894B65c10E5C12ae60Bbd8FAf5b48",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8"],
              "implementations": ["0x0D30F0d7934f53aaF6a1630A4c109AF4513a65cC"]
            },
            "chain": "ethereum",
            "description": "Contract acting as an escrow for METIS tokens managed by LockingPool."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "milestones": [
        {
          "name": "Mainnet launch",
          "link": "https://metisdao.medium.com/metis-to-launch-andromeda-honoring-our-commitment-to-decentralization-fa2d03394398",
          "date": "2021-11-19T00:00:00Z",
          "description": "Public launch of Metis Layer 2 Andromeda, based on the Optimism codebase.",
          "type": "general"
        },
        {
          "name": "Data availability change",
          "link": "https://metisdao.medium.com/decentralized-storage-goes-live-da876dc6eb70",
          "date": "2022-04-12T00:00:00Z",
          "description": "Update moving data to an off-chain committee.",
          "type": "general"
        },
        {
          "name": "Data hashes posted to EOA",
          "link": "https://etherscan.io/address/0xFf00000000000000000000000000000000001088",
          "date": "2023-03-15T00:00:00Z",
          "description": "Hashes to data blobs are now posted to EOA address instead of CanonicalTransactionChain contract.",
          "type": "general"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "mint",
      "createdAt": "1695904849",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xaBA3C0FCe72122750D71d4739D7E5Fc7c8a355d4#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x4e31448a098393727b786e25B54E59DcA1b77FE1"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x9Cb8F5CBD26d7843a6043EcaB3C12246F8F47FBA#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xaBA3C0FCe72122750D71d4739D7E5Fc7c8a355d4#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xaBA3C0FCe72122750D71d4739D7E5Fc7c8a355d4#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x9Cb8F5CBD26d7843a6043EcaB3C12246F8F47FBA#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x9Cb8F5CBD26d7843a6043EcaB3C12246F8F47FBA#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x9Cb8F5CBD26d7843a6043EcaB3C12246F8F47FBA#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xaBA3C0FCe72122750D71d4739D7E5Fc7c8a355d4#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x3d53Df1e69A32F98dFCcf23CCB689763E21A78bA",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x68bdFecE01535090c8f3C27ec3b1AE97E83fA4aA",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Is a Guardian.\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n* Can upgrade implementation of OptimismPortal, L2OutputOracle, SystemConfig (acting via ProxyAdmin).\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x3d53Df1e69A32F98dFCcf23CCB689763E21A78bA",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x68bdFecE01535090c8f3C27ec3b1AE97E83fA4aA",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1StandardBridge",
            "address": "0x2b3F201543adF73160bA42E1a5b7750024F30420",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xc684075a7Cc997Aa2e72152c330BDAc73FeacbDF"],
              "implementations": ["0xCf95526b7a5DCc029e2f45bB3B4625e36cc7371b"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x59625d1FE0Eeb8114a4d13c863978F39b3471781",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xc684075a7Cc997Aa2e72152c330BDAc73FeacbDF"],
              "implementations": ["0x9Cb8F5CBD26d7843a6043EcaB3C12246F8F47FBA"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0xB751A613f2Db932c6cdeF5048E6D2af05F9B98ED",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xc684075a7Cc997Aa2e72152c330BDAc73FeacbDF"],
              "implementations": ["0xaBA3C0FCe72122750D71d4739D7E5Fc7c8a355d4"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xc684075a7Cc997Aa2e72152c330BDAc73FeacbDF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n* Can be used to upgrade implementation of OptimismPortal, L2OutputOracle, SystemConfig.\n"
          },
          {
            "name": "SystemConfig",
            "address": "0xC975862927797812371A9Fb631f83F8f5e2240D5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xc684075a7Cc997Aa2e72152c330BDAc73FeacbDF"],
              "implementations": ["0x08C033C6859093b2803e54DE715077bd400D5f6a"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0xEa4165C5CDCA155779803A113d8391b741bA5228",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0xf80be9f7a74ab776b69d3F0dC5C08c39b3A0bA19",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x958487e21ba9E073836d598E31f749726f23413f"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Mint Mainnet Launch",
          "link": "https://mirror.xyz/mintchain.eth/HYbutKDjAKkphS_3_93AFh93JGWDUKtrz1lH6NpUybM",
          "date": "2024-05-14T00:00:00Z",
          "description": "Mint Mainnet is now live.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Conduit", "Superchain", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "NFT"],
        "architectureImage": "opstack",
        "name": "Mint",
        "slug": "mint",
        "description": "Mint Blockchain is a Layer 2 network for NFTs.",
        "links": {
          "websites": ["https://mintchain.io/"],
          "apps": [
            "https://bridge.mintchain.io/",
            "https://mintchain.io/faucet"
          ],
          "documentation": ["https://docs.mintchain.io/"],
          "explorers": ["https://explorer.mintchain.io"],
          "repositories": ["https://github.com/Mint-Blockchain"],
          "socialMedia": [
            "https://twitter.com/Mint_Blockchain",
            "https://discord.gg/mint-blockchain",
            "https://t.me/MintBlockchain",
            "https://mirror.xyz/mintchain.eth",
            "https://community.mintchain.io"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Mint is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": {
        "name": "mint",
        "chainId": 185,
        "explorerUrl": "https://explorer.mintchain.io",
        "explorerApi": {
          "url": "https://explorer.mintchain.io/api",
          "type": "blockscout"
        },
        "multicallContracts": [
          {
            "sinceBlock": 19861572,
            "batchSize": 150,
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "version": "3"
          }
        ],
        "minTimestampForTvl": "1715608931"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x59625d1FE0Eeb8114a4d13c863978F39b3471781",
            "newVersion": true,
            "sinceTimestamp": "1715609063",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x59625d1FE0Eeb8114a4d13c863978F39b3471781",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xc684075a7Cc997Aa2e72152c330BDAc73FeacbDF"],
                "implementations": [
                  "0x9Cb8F5CBD26d7843a6043EcaB3C12246F8F47FBA"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x2b3F201543adF73160bA42E1a5b7750024F30420",
            "newVersion": true,
            "sinceTimestamp": "1715609063",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2b3F201543adF73160bA42E1a5b7750024F30420",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xc684075a7Cc997Aa2e72152c330BDAc73FeacbDF"],
                "implementations": [
                  "0xCf95526b7a5DCc029e2f45bB3B4625e36cc7371b"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.mintchain.io",
          "startBlock": 1,
          "defaultCallsPerMinute": 800
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x68bdFecE01535090c8f3C27ec3b1AE97E83fA4aA",
              "to": "0x4e31448a098393727b786e25B54E59DcA1b77FE1",
              "sinceTimestamp": "1715608931"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xB751A613f2Db932c6cdeF5048E6D2af05F9B98ED",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1715609063"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "millicent",
      "createdAt": "1720191862",
      "display": {
        "name": "Millicent One",
        "slug": "millicent",
        "description": "Millicent is an upcoming Layer 2 on Ethereum, built on the Orbit stack. It is focused on tokenized Real World Assets (RWAs) and digital currencies like tokenized bank deposits, stablecoins, and central bank assets.",
        "purposes": ["RWA"],
        "category": "Optimistic Rollup",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://millicent.io/"],
          "apps": [],
          "documentation": ["https://docs.millicent.io"],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/MillicentLabs"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "mode",
      "createdAt": "1695904849",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x24E59d9d3Bd73ccC28Dc54062AF7EF7bFF58Bd67"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x309Fe2536d01867018D120b40e4676723C53A14C",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
              "type": "Contract"
            },
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x674F64D64Ddc198db83cd9047dF54BF89cCD0ddB",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x99199a22125034c808ff20f377d91187E8050F2E",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "LivenessModule",
          "accounts": [
            {
              "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "* Can act on behalf of SecurityCouncilMultisig.\n* Is a Guardian  (acting via SuperchainGuardianMultisig, SecurityCouncilMultisig).\n* used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig\n"
        },
        {
          "name": "ModeMultisig",
          "description": "* This is a Gnosis Safe with 4 / 6 threshold. \n* Is a Challenger.\n",
          "accounts": [
            {
              "address": "0x309Fe2536d01867018D120b40e4676723C53A14C",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x8DF5F3E4a0688595b02768c37F32424365F36f26",
              "type": "EOA"
            },
            {
              "address": "0x0825BdB1A5868682B1F880CF1E743e0bA4634ceC",
              "type": "EOA"
            },
            {
              "address": "0xa85EF4aEDf7B395cDbb894DF8F017E8A73f4a6fB",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SuperchainProxyAdminOwner",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Can act on behalf of ProxyAdmin, SuperchainProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change configuration of Lib_AddressManager (acting via SuperchainProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L1ERC721Bridge, L2OutputOracle, SystemConfig, OptimismMintableERC20Factory, OptimismPortal (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n* Can upgrade implementation of SuperchainConfig (acting via SuperchainProxyAdmin).\n",
          "accounts": [
            {
              "address": "0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "FoundationMultisig_2",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Can act on behalf of DeputyGuardianModule.\n* Is a Guardian  (acting via SuperchainGuardianMultisig, DeputyGuardianModule).\n",
          "accounts": [
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SecurityCouncilMultisig",
          "description": "* This is a Gnosis Safe with 10 / 13 threshold. It uses the following modules: LivenessModule (used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig).\n* Member of SuperchainGuardianMultisig, SuperchainProxyAdminOwner.\n* Is a Guardian  (acting via SuperchainGuardianMultisig).\n",
          "accounts": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x07dC0893cAfbF810e3E72505041f2865726Fd073",
              "type": "EOA"
            },
            {
              "address": "0x0a122d8aA40758FBAFf0360BFB391EdFfD9758b8",
              "type": "EOA"
            },
            {
              "address": "0x1822b35B09f5ce1C78ecbC06AC0A4e17885b925e",
              "type": "EOA"
            },
            {
              "address": "0x4A7322258c9E690e4CB8Cea6e5251443E956e61E",
              "type": "EOA"
            },
            {
              "address": "0x51aCb8e1205De850D1b512584FeE9C29C3813dDa",
              "type": "EOA"
            },
            {
              "address": "0x5C0F529d5B025540c54f71d2BcbB4c78F368C47e",
              "type": "EOA"
            },
            {
              "address": "0x6323ef2b80030f3fBc508bFc321Fc71fDB95c865",
              "type": "EOA"
            },
            {
              "address": "0x74FAE9a9fbe31d1F69b95f59CaF12736a8b6B310",
              "type": "EOA"
            },
            {
              "address": "0x7ed8d9Af9eaA194D1A75C67c1475579E42289E39",
              "type": "EOA"
            },
            {
              "address": "0x8Afe777B5A4D1e156435ab44Ad4b73A318cE0EA4",
              "type": "EOA"
            },
            {
              "address": "0x9Eb11A55132c851b9991F148b3Af791ca498fD7A",
              "type": "EOA"
            },
            {
              "address": "0xbfA046B0bc5cEa1596be62B8b3f79f9f41f1E0d9",
              "type": "EOA"
            },
            {
              "address": "0xE895076cD050F1f042d1040E47b5929bE989E514",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SuperchainGuardianMultisig",
          "description": "* This is a Gnosis Safe with 1 / 1 threshold. It uses the following modules: DeputyGuardianModule (allows the FoundationMultisig_2, called the deputy guardian, to act on behalf of the Gnosis Safe).\n* Can act as a Guardian.\n",
          "accounts": [
            {
              "address": "0x09f7150D8c019BeF34450d6920f6B3608ceFdAf2",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "GnosisSafe",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Member of FoundationMultisig_1, FoundationMultisig_2.\n",
          "accounts": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xb23794fd6BA1CEAd01Cf54D772b8341F2F0197A5",
              "type": "EOA"
            },
            {
              "address": "0x4665374939642965EfD8357D4568D2A77f677429",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FoundationMultisig_1",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Member of SuperchainProxyAdminOwner.\n",
          "accounts": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x674F64D64Ddc198db83cd9047dF54BF89cCD0ddB",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x99199a22125034c808ff20f377d91187E8050F2E",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "LivenessGuard",
            "address": "0x24424336F04440b1c28685a38303aC33C9D14a25",
            "upgradeability": null,
            "chain": "ethereum",
            "description": ""
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x2901dA832a4D0297FF0691100A8E496626cc626D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x470d87b1dae09a454A43D1fD772A561a03276aB7"],
              "implementations": ["0xAE2AF01232a6c4a4d3012C5eC5b1b35059caF10d"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x4317ba146D4933D889518a3e5E11Fe7a53199b04",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x470d87b1dae09a454A43D1fD772A561a03276aB7"],
              "implementations": ["0xF243BEd163251380e78068d317ae10f26042B292"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x470d87b1dae09a454A43D1fD772A561a03276aB7",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L1ERC721Bridge, L2OutputOracle, SystemConfig, OptimismMintableERC20Factory, OptimismPortal.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "AddressManager",
            "address": "0x50eF494573f28Cad6B64C31b7a00Cdaa48306e15",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SuperchainProxyAdmin",
            "address": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure Lib_AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SuperchainConfig.\n"
          },
          {
            "name": "SystemConfig",
            "address": "0x5e6432F18Bc5d497B1Ab2288a025Fbf9D69E2221",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x470d87b1dae09a454A43D1fD772A561a03276aB7"],
              "implementations": ["0xba2492e52F45651B60B8B38d4Ea5E2390C64Ffb1"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x69216395A62dFb243C05EF4F1C27AF8655096a95",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x470d87b1dae09a454A43D1fD772A561a03276aB7"],
              "implementations": ["0xE01efbeb1089D1d1dB9c6c8b135C934C0734c846"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x735aDBbE72226BD52e818E7181953f42E3b0FF21",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x470d87b1dae09a454A43D1fD772A561a03276aB7"],
              "implementations": ["0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x8B34b14c7c7123459Cf3076b8Cb929BE097d0C07",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x470d87b1dae09a454A43D1fD772A561a03276aB7"],
              "implementations": ["0x2D778797049FE9259d947D1ED8e5442226dFB589"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x53c165169401764778F780a69701385eb0FF19B7"]
            },
            "chain": "ethereum",
            "description": "Used to manage global configuration values for multiple OP Chains within a single Superchain network. The SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the Superchain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "Lib_AddressManager",
            "address": "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Mode extracts 4800 ETH from the bridge",
          "link": "https://github.com/etherfi-protocol/postmortems",
          "date": "2024-08-01T00:00:00Z",
          "description": "Mode rescues Etherfi's lost funds on L2 by extracting them from the L1 bridge via an upgrade.",
          "type": "incident"
        },
        {
          "name": "Mode starts using blobs",
          "link": "https://twitter.com/Optimism/status/1768235284494450922",
          "date": "2024-03-14T00:00:00Z",
          "description": "Mode starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "Mode Network Mainnet Launch",
          "link": "https://twitter.com/modenetwork/status/1752760726907760933",
          "date": "2024-01-31T00:00:00Z",
          "description": "Mode Network is live on mainnet.",
          "type": "general"
        },
        {
          "name": "MODE token airdrop",
          "link": "https://mode.mirror.xyz/2Aom53lrot8KQ143u8lCfyYvTOkR7LJcIChoyP1Q4wI",
          "date": "2024-05-07T00:00:00Z",
          "description": "MODE token launched.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Superchain", "Conduit", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "bedrock-superchain",
        "name": "Mode Network",
        "shortName": "Mode",
        "slug": "mode",
        "description": "Mode is an OP stack Optimistic Rollup building the AIFi economy. Their mission is to scale DeFi to billions of users through onchain agents and AI powered financial applications to build a more open, efficient, and inclusive financial future.",
        "links": {
          "websites": ["https://mode.network/"],
          "apps": ["https://app.mode.network/"],
          "documentation": ["https://docs.mode.network/"],
          "explorers": ["https://modescan.io"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/modenetwork",
            "https://discord.gg/modenetworkofficial",
            "https://mode.mirror.xyz/",
            "https://t.me/ModeNetworkOfficial"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Mode Network is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": {
        "name": "mode",
        "chainId": 34443,
        "explorerUrl": "https://explorer.mode.network",
        "explorerApi": {
          "url": "https://api.routescan.io/v2/network/mainnet/evm/34443/etherscan/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1700174783",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 5022,
            "version": "3"
          }
        ],
        "coingeckoPlatform": "mode"
      },
      "config": {
        "associatedTokens": ["MODE"],
        "escrows": [
          {
            "address": "0x8B34b14c7c7123459Cf3076b8Cb929BE097d0C07",
            "newVersion": true,
            "sinceTimestamp": "1700167631",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x8B34b14c7c7123459Cf3076b8Cb929BE097d0C07",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x470d87b1dae09a454A43D1fD772A561a03276aB7"],
                "implementations": [
                  "0x2D778797049FE9259d947D1ED8e5442226dFB589"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x735aDBbE72226BD52e818E7181953f42E3b0FF21",
            "newVersion": true,
            "sinceTimestamp": "1700167631",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x735aDBbE72226BD52e818E7181953f42E3b0FF21",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x470d87b1dae09a454A43D1fD772A561a03276aB7"],
                "implementations": [
                  "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://mainnet.mode.network/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x99199a22125034c808ff20f377d91187E8050F2E",
              "to": "0x24E59d9d3Bd73ccC28Dc54062AF7EF7bFF58Bd67",
              "sinceTimestamp": "1700125343"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x4317ba146D4933D889518a3e5E11Fe7a53199b04",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1700167631"
            }
          }
        ],
        "finality": {
          "type": "OPStack-blob",
          "l2BlockTimeSeconds": 2,
          "minTimestamp": "1710386375",
          "genesisTimestamp": "1700167583",
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": {
        "nodeSoftware": "The rollup node is composed of two software components: [op-node](https://github.com/ethereum-optimism/optimism/tree/develop/op-node), implementing consensus related logic, and [op-geth](https://github.com/ethereum-optimism/op-geth), implementing execution logic. The configuration file can be found [here](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/configs/mainnet/mode.toml).",
        "compressionScheme": "Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.",
        "genesisState": "The genesis file can be found [here](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/extra/genesis/mainnet/mode.json.gz).",
        "dataFormat": "The format specification of Sequencer's data batches can be found [here](https://blog.oplabs.co/reproduce-bedrock-migration/)."
      },
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "morph",
      "createdAt": "1702295992",
      "display": {
        "name": "Morph",
        "slug": "morph",
        "description": "Morph is an EVM compatible rollup. It operates as an optimistic rollup with ZK fault proofs.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://morphl2.io"],
          "apps": ["https://bridge-holesky.morphl2.io"],
          "documentation": ["https://docs.morphl2.io"],
          "explorers": ["https://explorer-holesky.morphl2.io"],
          "repositories": ["https://github.com/morph-l2"],
          "socialMedia": [
            "https://twitter.com/MorphL2",
            "https://t.me/MorphL2official",
            "https://medium.com/@morphlayer2",
            "https://discord.com/invite/L2Morph",
            "https://youtube.com/@morphofficiall2"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "move",
      "createdAt": "1717924525",
      "display": {
        "name": "M2",
        "slug": "move",
        "description": "M2 is an upcoming L2 featuring a VM compatible with Move and the EVM (MEVM), using Celestia for data availability.",
        "purposes": ["Universal"],
        "category": "Validium",
        "links": {
          "websites": ["https://movementlabs.xyz"],
          "apps": [],
          "documentation": ["https://docs.movementlabs.xyz/"],
          "explorers": ["https://explorer.movementlabs.xyz/#/?network=local"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/movementlabsxyz",
            "https://t.me/movementlabsxyz",
            "https://discord.com/invite/movementlabsxyz"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "myria",
      "createdAt": "1623153328",
      "badges": ["AppChain", "DAC", "StarkEx", "SHARP"],
      "display": {
        "name": "Myria",
        "slug": "myria",
        "description": "Myria is an expansive blockchain gaming ecosystem, comprised of a blockchain gaming hub and Myriaverse metaverse.",
        "purposes": ["NFT", "Exchange", "Gaming"],
        "provider": "StarkEx",
        "category": "Validium",
        "links": {
          "websites": ["https://myria.com/"],
          "apps": ["https://hub.immutable.com/"],
          "documentation": ["https://docs.starkware.co/starkex/index.html"],
          "explorers": [],
          "repositories": [
            "https://github.com/starkware-libs/starkex-contracts"
          ],
          "socialMedia": [
            "https://medium.com/@myriagames",
            "https://twitter.com/myria",
            "https://discord.gg/myria",
            "https://t.me/myriaofficialgroup",
            "https://instagram.com/myriagames"
          ]
        },
        "activityDataSource": "Closed API"
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": ["MYRIA"],
        "escrows": [
          {
            "address": "0x3071BE11F9e92A9eb28F305e1Fa033cD102714e7",
            "newVersion": true,
            "sinceTimestamp": "1659542607",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x3071BE11F9e92A9eb28F305e1Fa033cD102714e7",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": ["0xc49Ec6Bb817E17a9Ca5B738ca330db403cc74245"],
                "implementations": [
                  "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                  "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                  "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                  "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                  "0x613ee54C54D5548627064B4D648942bF3648f376",
                  "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                  "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "starkex",
          "product": ["myria"],
          "sinceTimestamp": "1659542607",
          "resyncLastDays": 7
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "2/5 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 2/5 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 2/5 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.4,
          "sources": [
            {
              "contract": "StarkExchange",
              "references": [
                "https://etherscan.io/address/0x67e198743BC19fa4757720eDd0e769f8291e1F1D#code#F14#L188"
              ]
            },
            {
              "contract": "Committee",
              "references": [
                "https://etherscan.io/address/0x1e601435E181423e7A8430813d7500012a6169cB#code#F1#L60"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 7d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 604800
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds. NFTs will be minted on L1 to exit.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. When withdrawing NFTs they are minted on L1.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/withdrawal.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchange",
            "address": "0x3071BE11F9e92A9eb28F305e1Fa033cD102714e7",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": ["0xc49Ec6Bb817E17a9Ca5B738ca330db403cc74245"],
              "implementations": [
                "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                "0x613ee54C54D5548627064B4D648942bF3648f376",
                "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
              ],
              "immutable": false
            },
            "chain": "ethereum"
          },
          {
            "name": "Committee",
            "address": "0x1e601435E181423e7A8430813d7500012a6169cB",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governors",
          "accounts": [
            {
              "address": "0xc49Ec6Bb817E17a9Ca5B738ca330db403cc74245",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge. Currently there is 14d delay before the upgrade."
        },
        {
          "name": "Data Availability Committee",
          "accounts": [
            {
              "address": "0x30cF77FC391B4Feba1AB31B01fEd442Bc759c0a8",
              "type": "EOA"
            },
            {
              "address": "0x52E6ECB50D8C89fE9CBad2ef44Ce962A430D8714",
              "type": "EOA"
            },
            {
              "address": "0xC7544ad893710Bd0bf780bf78dE5547706da75c5",
              "type": "EOA"
            },
            {
              "address": "0xf365CDB8C33849d3684AcFf5475E7B6F075F9F0F",
              "type": "EOA"
            },
            {
              "address": "0xfBA93b5f744c853648d62C1357532582f77ed394",
              "type": "EOA"
            }
          ],
          "minSigners": 2,
          "minAssumedHonestMembers": 4,
          "description": "Validity proof must be signed by at least 2 of these addresses to approve state update."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0xe997ece81cb8A686206ea6042886B594Ecf6DdED",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update the state. When the Operator is down the state cannot be updated."
        }
      ],
      "milestones": [
        {
          "name": "Mainnet Launch",
          "date": "2022-08-26T00:00:00Z",
          "link": "https://medium.com/myria-official/myrias-layer-2-launch-has-arrived-6a3c3da9561f",
          "description": "Layer 2 scaling solution powered by Starware is live on Ethereum.",
          "type": "general"
        },
        {
          "name": "MYRIA Token Airdrop",
          "date": "2023-04-06T00:00:00Z",
          "link": "https://medium.com/myria-official/the-myria-token-is-live-c8dd92b876cc",
          "description": "MYRIA token launches.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "myshell",
      "createdAt": "1716981396",
      "display": {
        "name": "MyShell L2",
        "slug": "myshell",
        "description": "MyShell announced new L2 aimed to connect users, creators, and open-source AI model researchers, powered by EigenDA and OP Stack.",
        "purposes": ["AI"],
        "category": "Optimium",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://myshell.ai/"],
          "apps": [],
          "documentation": ["https://docs.myshell.ai/"],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/myshell_ai",
            "https://discord.com/invite/myshell"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUnderReview": true,
      "type": "layer2",
      "id": "nal",
      "createdAt": "1726499832",
      "display": {
        "name": "Nal",
        "slug": "nal",
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "description": "Nal is a general-purpose OP stack chain. It aims to facilitate the creation and trading of new assets, including AIGC and physical-to-digital transformations.",
        "purposes": ["Universal"],
        "links": {
          "websites": ["https://nal.network/#/home"],
          "apps": [],
          "documentation": ["https://docs.nal.network/chain/Overview.html"],
          "explorers": ["https://scan.nal.network/"],
          "repositories": [],
          "socialMedia": ["https://x.com/nal_network"]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "stage": { "stage": "UnderReview" },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x8a471dF117E2fEA79DACE93cF5f6dd4217931Db7",
            "sinceTimestamp": "1719457200",
            "tokens": "*",
            "chain": "ethereum"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.nal.network/",
          "defaultCallsPerMinute": 1500
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "=nil;",
      "createdAt": "1708529553",
      "display": {
        "name": "=nil;",
        "slug": "nil",
        "description": "=nil; is a zkRollup that securely scales Ethereum through zkSharding, empowering web3 developers to build scalable and composable applications.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://nil.foundation/"],
          "apps": [],
          "documentation": ["https://docs.nil.foundation/"],
          "explorers": ["https://explore.nil.foundation"],
          "repositories": ["https://github.com/nilfoundation"],
          "socialMedia": ["https://twitter.com/nil_foundation"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "network3",
      "createdAt": "1721807029",
      "display": {
        "name": "Network3",
        "slug": "network3",
        "description": "An AIoT Layer2 Empowering Efficient Model Training & Validation.",
        "purposes": ["AI", "Privacy"],
        "category": "Validium",
        "links": {
          "websites": ["https://network3.io/"],
          "apps": [],
          "documentation": [
            "https://litepaper.network3.ai/~/changes/0jJxEcDKtGZ0s8Ew29KS"
          ],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://x.com/network3_ai",
            "https://discord.gg/q4cHgxZUCH",
            "https://t.me/network3official"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "neva",
      "createdAt": "1727445360",
      "display": {
        "name": "Neva",
        "slug": "neva",
        "description": "Neva is an EVM-equivalent ZK-application network that provides scalability through Celestia DA and Polygon zkEVM, transforming GameFi and streamlining DeFi.",
        "purposes": ["Universal", "Gaming"],
        "category": "Validium",
        "links": {
          "websites": ["https://neva.network/"],
          "apps": [],
          "documentation": ["https://docs.neva.network/"],
          "explorers": [],
          "repositories": ["https://github.com/NevaNetwork"],
          "socialMedia": [
            "https://x.com/NevaNetwork",
            "https://t.me/NevaPortal"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "nova",
      "createdAt": "1623153328",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0xFb209827c58283535b744575e11953DCC4bEAD88",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"],
              "implementations": [
                "0x72f193d0F305F532C87a4B9D0A2F407a3F4f585f",
                "0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "Bridge",
            "address": "0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],
              "implementations": ["0x1066CEcC8880948FE55e427E94F1FF221d626591"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "SequencerInbox",
            "address": "0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],
              "implementations": ["0x31DA64D19Cd31A19CD09F4070366Fe2144792cf7"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches to a Rollup. Sequencers can be changed here through the UpgradeExecutor or the BatchPosterManager.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "Inbox",
            "address": "0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],
              "implementations": ["0x1b2676D32E2f7430a564DD4560641F990dFE3D6a"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 --> L2 messages. Deposited ETH is escrowed in a Bridge contract.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "address": "0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58",
            "name": "Outbox",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],
              "implementations": ["0x7439d8d4F3b9d9B6222f3E9760c75a47e08a7b3f"]
            },
            "chain": "ethereum",
            "description": "Arbitrum's Outbox system allows for arbitrary L2 to L1 contract calls; i.e., messages initiated from L2 which eventually resolve in execution on L1.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],
              "implementations": ["0x86f0cf42Ad673B3D666d103E009EC142D1298a17"]
            },
            "chain": "ethereum",
            "description": "This contract can upgrade the system's contracts. The upgrades can be done either by the Security Council or by the L1Timelock.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "L1Timelock",
            "address": "0xE6841D92B0C345144506576eC13ECf5103aC7f49",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],
              "implementations": ["0x61dC65001A8De4138DAD5167e43FF0FB0AB8D3B3"]
            },
            "chain": "ethereum",
            "description": "Timelock contract for Arbitrum Governance transactions. Scheduled transactions from Arbitrum One L2 (by the DAO or the Security Council) are delayed here and can be canceled by the Security Council or executed to upgrade and change system contracts on Ethereum, Arbitrum One and -Nova.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "L1GatewayRouter",
            "address": "0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],
              "implementations": ["0x52595021fA01B3E14EC6C88953AFc8E35dFf423c"]
            },
            "chain": "ethereum",
            "description": "Router managing token <--> gateway mapping.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "ChallengeManager",
            "address": "0xA59075221b50C598aED0Eae0bB9869639513af0D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],
              "implementations": ["0x914B7b3053B35B84A24df08D7c9ceBCaEA4E2948"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy by Validators or the UpgradeExecutor.",
            "upgradableBy": ["SecurityCouncil", "L1Timelock"],
            "upgradeDelay": "12d 8h or 0 if overridden by Security Council",
            "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xa328BAF257A937b7934429a5d8458d98693C6FC7",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x5C9F8663583Ad0A1c0009c871f8253DBF4767A18",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x2c785E954c376be0CEfF4a7Db92E053B0830F7c9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x8D78382913467Cd25374C75BA918b0A723Bc2544",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xD0465e3356213869f1Fae38b3E67CBF4E873c5B6",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": {
          "nova": [
            {
              "name": "L2UpgradeExecutor",
              "address": "0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9"],
                "implementations": [
                  "0x3096EAEdcb3A3B665552660F4d921E565D0073cB"
                ]
              },
              "chain": "nova",
              "description": "This contract can upgrade the L2 system's contracts through the L2ProxyAdmin. The upgrades can be done either by the Security Council or by the L1Timelock (via its alias on L2).",
              "upgradableBy": ["SecurityCouncilEmergency", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2ProxyAdmin",
              "address": "0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9",
              "upgradeability": null,
              "chain": "nova",
              "description": "The owner (UpgradeExecutor) can upgrade proxies' implementations of all L2 system contracts through this contract."
            },
            {
              "name": "L2GatewaysProxyAdmin",
              "address": "0xada790b026097BfB36a5ed696859b97a96CEd92C",
              "upgradeability": null,
              "chain": "nova",
              "description": "The owner (UpgradeExecutor) can upgrade proxies' implementations of all L2 bridging gateway contracts through this contract."
            },
            {
              "name": "L2BaseFee",
              "address": "0x9fCB6F75D99029f28F6F4a1d277bae49c5CAC79f",
              "upgradeability": null,
              "chain": "nova",
              "description": "This contract receives all BaseFees: The transaction fee component that covers the minimum cost of Arbitrum transaction execution. They are withdrawable to a configurable set of recipients."
            },
            {
              "name": "L2SurplusFee",
              "address": "0x509386DbF5C0BE6fd68Df97A05fdB375136c32De",
              "upgradeability": null,
              "chain": "nova",
              "description": "This contract receives all SurplusFees: Transaction fee component that covers the cost beyond that covered by the L2 Base Fee during chain congestion. They are withdrawable to a configurable set of recipients."
            },
            {
              "name": "ArbChildToParentRewardRouter",
              "address": "0x36D0170D92F66e8949eB276C3AC4FEA64f83704d",
              "upgradeability": null,
              "chain": "nova",
              "description": "Is used as the main recipient for the ETH from L2SurplusFee and L2BaseFee contracts. Forwards the ETH via L1 to the Arbitrum treasury on Arbitrum One."
            },
            {
              "name": "L2ArbitrumToken",
              "address": "0xf823C3cD3CeBE0a1fA952ba88Dc9EEf8e0Bf46AD",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9"],
                "implementations": [
                  "0x099bC495EA4Fd828FEe7C636F0Ab84d0f501B96d"
                ]
              },
              "chain": "nova",
              "description": "The ARB token contract. Supply can be increased by the owner once per year by a maximum of 2%.",
              "upgradableBy": ["SecurityCouncilEmergency", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2GatewayRouter",
              "address": "0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xada790b026097BfB36a5ed696859b97a96CEd92C"],
                "implementations": [
                  "0x8f377770289863DF73Fe665B74460579F82321fb"
                ]
              },
              "chain": "nova",
              "description": "Router managing token <--> gateway mapping on L2.",
              "upgradableBy": ["SecurityCouncilEmergency", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2ERC20Gateway",
              "address": "0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xada790b026097BfB36a5ed696859b97a96CEd92C"],
                "implementations": [
                  "0x466155FD6d8BbF1c0d5ca32818814cB28b6884d8"
                ]
              },
              "chain": "nova",
              "description": "Counterpart to the L1ERC20Gateway. Can mint (deposit to L2) and burn (withdraw to L1) ERC20 tokens on L2.",
              "upgradableBy": ["SecurityCouncilEmergency", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2WethGateway",
              "address": "0x7626841cB6113412F9c88D3ADC720C9FAC88D9eD",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xada790b026097BfB36a5ed696859b97a96CEd92C"],
                "implementations": [
                  "0xbe04Ab2728c924D678f9FC833E379688c6eFA317"
                ]
              },
              "chain": "nova",
              "description": "Counterpart to the Bridge on L1. Mints and burns WETH on L2.",
              "upgradableBy": ["SecurityCouncilEmergency", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            },
            {
              "name": "L2ARBGateway",
              "address": "0xbf544970E6BD77b21C6492C281AB60d0770451F4",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xada790b026097BfB36a5ed696859b97a96CEd92C"],
                "implementations": [
                  "0x554e12DBAa0fBeB8A35583a6Fd9D04BaA4ff597f"
                ]
              },
              "chain": "nova",
              "description": "ARB sent from L2 to L1 is escrowed in this contract and minted on L1.",
              "upgradableBy": ["SecurityCouncilEmergency", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by the Security Council",
              "upgradeConsiderations": "An upgrade initiated by the DAO can be vetoed by the Security Council."
            }
          ]
        },
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "nova",
        "chainId": 42170,
        "explorerUrl": "https://nova.arbiscan.io",
        "explorerApi": {
          "url": "https://api-nova.arbiscan.io/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1656122488",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 1746963,
            "version": "3"
          }
        ],
        "coingeckoPlatform": "arbitrum-nova"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 5 out of 6.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x31DA64D19Cd31A19CD09F4070366Fe2144792cf7#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible and Stylus smart contracts are supported",
            "description": "Arbitrum One supports smart contracts written in Solidity and other programming languages (Rust, C++) that compile to WASM. Such smart contracts are executed by nodes using either a geth fork or [a fork of wasmer](https://github.com/OffchainLabs/wasmer) inside the Nitro node, and can be proven with the onchain WASM VM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              },
              {
                "text": "A gentle introduction: Stylus",
                "href": "https://docs.arbitrum.io/stylus/stylus-gentle-introduction"
              }
            ]
          },
          {
            "name": "Arbitrum DAO is in charge of upgrades",
            "description": "Arbitrum DAO allows $ARB token holders to propose and vote on changes to the organization and the technologies it governs. The governance smart contracts are implemented on Arbitrum One rollup chain. The DAO can upgrade the Arbitrum One contracts on L2 with 3d delay and - using L2 --> L1 Governance Relay, update contracts on L1 with additional 3d delay + 6d 8h delay for all L2 --> L1 messages (in total a delay of 12d 8h). The Security Council can upgrade the contracts without any delay. It can also cancel any upgrades initiated by the DAO.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "a contract receives a malicious code upgrade. There is a 12d 8h delay on code upgrades."
              }
            ],
            "references": [
              {
                "text": "Arbitrum DAO",
                "href": "https://docs.arbitrum.foundation/concepts/arbitrum-dao"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D",
              "type": "EOA"
            },
            {
              "address": "0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x1732BE6738117e9d22A84181AF68C8d09Cd4FF23",
              "type": "Contract"
            },
            {
              "address": "0x24Ca61c31C7f9Af3ab104dB6B9A444F28e9071e3",
              "type": "Contract"
            },
            {
              "address": "0x3B0369CAD35d257793F51c28213a4Cf4001397AC",
              "type": "Contract"
            },
            {
              "address": "0x57004b440Cc4eb2FEd8c4d1865FaC907F9150C76",
              "type": "Contract"
            },
            {
              "address": "0x658e8123722462F888b6fa01a7dbcEFe1D6DD709",
              "type": "Contract"
            },
            {
              "address": "0xE27d4Ed355e5273A3D4855c8e11BC4a8d3e39b87",
              "type": "Contract"
            },
            {
              "address": "0x0fF813f6BD577c3D1cDbE435baC0621BE6aE34B4",
              "type": "EOA"
            },
            {
              "address": "0x54c0D3d6C101580dB3be8763A2aE2c6bb9dc840c",
              "type": "EOA"
            },
            {
              "address": "0x610Aa279989F440820e14248BD3879B148717974",
              "type": "EOA"
            },
            {
              "address": "0xAB1A39332e934300eBCc57B5f95cA90631a347FF",
              "type": "EOA"
            },
            {
              "address": "0xB51EDdfc9A945e2B909905e4F242C4796Ac0C61d",
              "type": "EOA"
            },
            {
              "address": "0xdDf2F71Ab206C0138A8eceEb54386567D5abF01E",
              "type": "EOA"
            },
            {
              "address": "0xDfB23DFE9De7dcC974467195C8B7D5cd21C9d7cB",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 9 / 12 threshold. It uses the following modules: UpgradeExecutor. The admin of all contracts in the system, capable of issuing upgrades without notice and delay. This allows it to censor transactions, upgrade bridge implementation potentially gaining access to all funds stored in a bridge and change the sequencer or any other system component (unlimited upgrade power). It is also the admin of the special purpose smart contracts used by validators.",
          "accounts": [
            {
              "address": "0xF06E95eF589D9c38af242a8AAee8375f14023F85",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": [
            {
              "text": "Security Council members - Arbitrum DAO Governance Docs",
              "href": "https://docs.arbitrum.foundation/foundational-documents/transparency-report-initial-foundation-setup"
            }
          ],
          "participants": [
            {
              "address": "0x70C006fC86A392c16D7E085cefc0Ad1FF7de6C75",
              "type": "EOA"
            },
            {
              "address": "0xA821c8c245d1F3A257e3B0DEC99268cA05144422",
              "type": "EOA"
            },
            {
              "address": "0x5a09A94eE8198D3c474d723337aa58023810022C",
              "type": "EOA"
            },
            {
              "address": "0x5DD2205C3aac13E592F0a3D85188c948D1781df1",
              "type": "EOA"
            },
            {
              "address": "0x8F10e3413586c4a8DCfcE19D009872b19e9cd8E3",
              "type": "EOA"
            },
            {
              "address": "0xb71ca4FFbB7b58d75Ba29891ab45e9Dc12B444Ed",
              "type": "EOA"
            },
            {
              "address": "0x3E286452b1C66abB08Eb5494c3894F40aB5a59AF",
              "type": "EOA"
            },
            {
              "address": "0xb07dc9103328A51128bC6Cc1049d1137035f5E28",
              "type": "EOA"
            },
            {
              "address": "0x3Bd8e2AC65ad6f0F094BA6766cBd9484AB49eF23",
              "type": "EOA"
            },
            {
              "address": "0xf8e1492255d9428c2Fc20A98A1DeB1215C8ffEfd",
              "type": "EOA"
            },
            {
              "address": "0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae",
              "type": "EOA"
            },
            {
              "address": "0x475816ca2a31D601B4e336f5c2418A67978aBf09",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "L1Timelock",
          "accounts": [
            {
              "address": "0xE6841D92B0C345144506576eC13ECf5103aC7f49",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Timelock contract for Arbitrum Governance transactions. Scheduled transactions from Arbitrum One L2 (by the DAO or the Security Council) are delayed here and can be canceled by the Security Council or executed to upgrade and change system contracts on Ethereum, Arbitrum One and -Nova."
        },
        {
          "name": "BatchPosterManagerMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  It can update whether an address is authorized to be a batch poster at the sequencer inbox. The UpgradeExecutor retains the ability to update the batch poster manager (along with any batch posters).",
          "accounts": [
            {
              "address": "0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x375906ADFD34D93236084F462BB2dB0D92129Fe1",
              "type": "EOA"
            },
            {
              "address": "0xfE2bf40f2A9183774BF8E871d634A4E50255158B",
              "type": "EOA"
            },
            {
              "address": "0x64379Dee676ab442B48925Ed603771f386510Ee7",
              "type": "EOA"
            },
            {
              "address": "0x290Aa3E7533c873B3326DabFe7579e86ed951428",
              "type": "EOA"
            },
            {
              "address": "0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C",
              "type": "EOA"
            },
            {
              "address": "0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": {
        "nova": [
          {
            "name": "L2SecurityCouncilEmergency",
            "description": "This is a Gnosis Safe with 9 / 12 threshold. It uses the following modules: L2UpgradeExecutor. The elected signers for the Arbitrum SecurityCouncil can act through this multisig on Layer2, permissioned to upgrade all system contracts without delay.",
            "accounts": [
              {
                "address": "0xc232ee726E3C51B86778BB4dBe61C52cC07A60F3",
                "type": "MultiSig"
              }
            ],
            "chain": "nova",
            "references": null,
            "participants": [
              {
                "address": "0x70C006fC86A392c16D7E085cefc0Ad1FF7de6C75",
                "type": "EOA"
              },
              {
                "address": "0xA821c8c245d1F3A257e3B0DEC99268cA05144422",
                "type": "EOA"
              },
              {
                "address": "0x5a09A94eE8198D3c474d723337aa58023810022C",
                "type": "EOA"
              },
              {
                "address": "0x5DD2205C3aac13E592F0a3D85188c948D1781df1",
                "type": "EOA"
              },
              {
                "address": "0x8F10e3413586c4a8DCfcE19D009872b19e9cd8E3",
                "type": "EOA"
              },
              {
                "address": "0xb71ca4FFbB7b58d75Ba29891ab45e9Dc12B444Ed",
                "type": "EOA"
              },
              {
                "address": "0x3E286452b1C66abB08Eb5494c3894F40aB5a59AF",
                "type": "EOA"
              },
              {
                "address": "0xb07dc9103328A51128bC6Cc1049d1137035f5E28",
                "type": "EOA"
              },
              {
                "address": "0x3Bd8e2AC65ad6f0F094BA6766cBd9484AB49eF23",
                "type": "EOA"
              },
              {
                "address": "0xf8e1492255d9428c2Fc20A98A1DeB1215C8ffEfd",
                "type": "EOA"
              },
              {
                "address": "0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae",
                "type": "EOA"
              },
              {
                "address": "0x475816ca2a31D601B4e336f5c2418A67978aBf09",
                "type": "EOA"
              }
            ]
          }
        ]
      },
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 1.0 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": "\n  All critical system smart contracts are upgradeable (can be arbitrarily changed). This permission is governed by the Arbitrum Decentralized Autonomous Organization (DAO) \n  and their elected Security Council. The Arbitrum DAO controls Arbitrum One and Arbitrum Nova through upgrades and modifications to their smart contracts on Layer 1 Ethereum and the Layer 2s. \n  While the DAO governs through token-weighted governance in their associated ARB token, the Security Council can directly act through \n  the Security Council smart contracts on all three chains. Although these multisigs are technically separate and connect to different target permissions, \n  their member- and threshold configuration is kept in sync by a manager contract on Arbitrum One and crosschain transactions.\n  \n  \n  Regular upgrades, Admin- and Owner actions originate from either the Arbitrum DAO or the non-emergency (proposer-) Security Council on Arbitrum One \n  and pass through multiple delays and timelocks before being executed at their destination. Contrarily, the three Emergency Security Council multisigs \n  (one on each chain: Arbitrum One, Ethereum, Arbitrum Nova) can skip delays and directly access all admin- and upgrade functions of all smart contracts. \n  These two general paths have the same destination: the respective UpgradeExecutor smart contract.\n  \n  \n  Regular upgrades are scheduled in the L2 Timelock. The proposer Security Council can do this directly and the Arbitrum DAO (ARB token holders and delegates) must meet a \n  CoreGovernor-enforced 5% threshold of the votable tokens. The L2 Timelock queues the transaction for a 3d delay and then sends it to the Outbox contract on Ethereum. This incurs another delay (the challenge period) of 6d 8h.\n  When that has passed, the L1 Timelock delays for additional 3d. Both timelocks serve as delays during which the transparent transaction contents can be audited, \n  and even cancelled by the Emergency Security Council. Finally, the transaction can be executed, calling Admin- or Owner functions of the respective destination smart contracts \n  through the UpgradeExecutor on Ethereum. If the predefined  transaction destination is Arbitrum One or -Nova, this last call is executed on L2 through the canonical bridge and the aliased address of the L1 Timelock.\n  \n  \n  Operator roles like the Sequencers and Validators are managed using the same paths. \n  Sequencer changes can be delegated to a Batch Poster Manager.\n  \n  \n  Transactions targeting the Arbitrum DAO Treasury can be scheduled in the 3d \n  Treasury Timelock by meeting a TreasuryGovernor-enforced 3% threshold of votable ARB tokens. The Security Council cannot regularly cancel \n  these transactions or schedule different ones but can overwrite them anyway by having full admin upgrade permissions for all the underlying smart contracts.",
      "milestones": [
        {
          "name": "ArbOS 32 Emergency upgrade",
          "link": "https://github.com/OffchainLabs/nitro/releases/tag/v3.2.0",
          "date": "2024-09-25T00:00:00Z",
          "description": "SecurityCouncil emergency upgrades to fix attack vectors related to Stylus resource pricing.",
          "type": "incident"
        },
        {
          "name": "ArbOS 31 Bianca upgrade",
          "link": "https://www.tally.xyz/gov/arbitrum/proposal/108288822474129076868455956066667369439381709547570289793612729242368710728616",
          "date": "2024-09-03T00:00:00Z",
          "description": "Nova upgrades to ArbOS 31 activating Stylus (new languages for smart contracts).",
          "type": "general"
        },
        {
          "name": "Mainnet for everyone",
          "description": "Whitelist got removed, there are no restrictions on who can transact with the network.",
          "date": "2022-08-09T00:00:00Z",
          "link": "https://medium.com/offchainlabs/its-time-for-a-new-dawn-nova-is-open-to-the-public-a081df1e4ad2",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Data availability on Arbitrum Nova",
          "url": "https://twitter.com/bkiepuszewski/status/1555180043525128200",
          "thumbnail": "l2beat-03.jpg"
        }
      ],
      "badges": ["DAC", "Nitro", "WasmVM", "Governance", "L3HostChain", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Arbitrum Nova",
        "slug": "nova",
        "description": "Arbitrum Nova is an AnyTrust Optimium, differing from Arbitrum One by not posting transaction data onchain.",
        "links": {
          "websites": [
            "https://nova.arbitrum.io/",
            "https://arbitrum.io/",
            "https://arbitrum.foundation/"
          ],
          "apps": [
            "https://bridge.arbitrum.io/?destinationChain=arbitrum-nova&sourceChain=ethereum"
          ],
          "documentation": [
            "https://developer.arbitrum.io/",
            "https://developer.arbitrum.io/inside-arbitrum-nitro/#inside-anytrust"
          ],
          "explorers": [
            "https://nova.arbiscan.io/",
            "https://nova-explorer.arbitrum.io/"
          ],
          "repositories": [
            "https://github.com/ArbitrumFoundation/docs",
            "https://github.com/ArbitrumFoundation/governance",
            "https://github.com/OffchainLabs/nitro"
          ],
          "socialMedia": [
            "https://twitter.com/arbitrum",
            "https://arbitrumfoundation.medium.com/",
            "https://discord.gg/Arbitrum"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "5/6 DAC Members",
          "sentiment": "warning",
          "description": "There is a threshold of 5/6 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "Fraud proofs allow 13 WHITELISTED actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. There is a 6d 8h challenge period.",
          "sentiment": "warning",
          "definingMetric": 13,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 5/6 that is tasked with protecting and supplying the data.",
          "sentiment": "warning",
          "definingMetric": 0.8333333333333334
        },
        "exitWindow": {
          "value": "2d",
          "description": "Non-emergency upgrades are initiated on L2 and go through a 3d delay. Since there is a 1d delay to force a tx (forcing the inclusion in the following state update), users have only 2d to exit. \n    \n  If users post a tx after that time, they would only be able to self propose a state root 12d 17h after the last state root was proposed and then wait for the 6d 8h challenge window, while the upgrade would be confirmed just after the 6d 8h challenge window and the 3d L1 timelock.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 172800,
          "warning": {
            "value": "The Security Council can upgrade with no delay.",
            "sentiment": "bad"
          },
          "sources": [
            {
              "contract": "RollupProxy",
              "references": [
                "https://etherscan.io/address/0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff#code#F1#L43"
              ]
            },
            {
              "contract": "Outbox",
              "references": [
                "https://etherscan.io/address/0x7439d8d4F3b9d9B6222f3E9760c75a47e08a7b3f#code"
              ]
            }
          ]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["ARB"],
        "escrows": [
          {
            "address": "0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
            "newVersion": true,
            "sinceTimestamp": "1656050353",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],
                "implementations": [
                  "0x1066CEcC8880948FE55e427E94F1FF221d626591"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3",
            "newVersion": true,
            "sinceTimestamp": "1659620187",
            "tokens": ["DAI"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "DAI Vault for custom DAI Gateway. Fully controlled by MakerDAO governance.",
              "upgradableBy": ["SecurityCouncil", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by Security Council"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf",
            "newVersion": true,
            "sinceTimestamp": "1656305583",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],
                "implementations": [
                  "0xb4299A1F5f26fF6a98B7BA35572290C359fde900"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, “wrapped” token will be minted.",
              "upgradableBy": ["SecurityCouncil", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by Security Council"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x23122da8C581AA7E0d07A36Ff1f16F799650232f",
            "newVersion": true,
            "sinceTimestamp": "1659620187",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x23122da8C581AA7E0d07A36Ff1f16F799650232f",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],
                "implementations": [
                  "0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 tokens that require minting a custom token on the L2.",
              "upgradableBy": ["SecurityCouncil", "L1Timelock"],
              "upgradeDelay": "12d 8h or 0 if overridden by Security Council"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://nova.arbitrum.io/rpc",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "isUnderReview": true,
      "type": "layer2",
      "id": "odyssey",
      "createdAt": "1728909101",
      "display": {
        "name": "Odyssey",
        "slug": "odyssey",
        "description": "Odyssey is a OP Stack rollup aimed at enabling experimentation of bleeding edge Ethereum Research.",
        "purposes": ["Universal"],
        "category": "Optimium",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://ithaca.xyz/updates/odyssey"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": ["https://github.com/ithacaxyz"],
          "socialMedia": [
            "https://x.com/ithacaxyz",
            "https://warpcast.com/~/channel/ithaca"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": null,
        "escrows": [],
        "transactionApi": null
      },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "oev",
      "createdAt": "1707313169",
      "display": {
        "name": "OEV Network",
        "slug": "oev",
        "description": "OEV is an upcoming Optimium by API3, built with Arbitrum orbit stack. It is designed to capture oracle extractable value and return it to the dApps and their users that generated it.",
        "purposes": ["Oracles"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://api3.org/oev/"],
          "apps": [],
          "documentation": [
            "https://medium.com/api3/api3-builds-oev-network-on-arbitrum-orbit-b29f8f5d7dcf"
          ],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://x.com/OEVNetwork",
            "https://discord.com/invite/api3dao",
            "https://medium.com/api3"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "ola",
      "createdAt": "1705060311",
      "display": {
        "name": "Ola",
        "slug": "ola",
        "description": "Ola is an open source hybrid ZK Rollup that delivers programmable scalability and data ownership to blockchain ecosystems.",
        "purposes": ["Privacy"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://olavm.org/"],
          "apps": [],
          "documentation": [
            "https://ola-2.gitbook.io/ola-developer-documents/"
          ],
          "explorers": [],
          "repositories": ["https://github.com/Sin7Y"],
          "socialMedia": [
            "https://twitter.com/ola_zkzkvm",
            "https://discord.com/invite/vDFy7YEG6j",
            "https://linkedin.com/company/olavm-technology-ltd/",
            "https://hackmd.io/@sin7y",
            "https://medium.com/@ola_zkzkvm",
            "https://youtube.com/@Ola_Sin7y"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "omgnetwork",
      "createdAt": "1623332638",
      "isArchived": true,
      "display": {
        "name": "OMG Network",
        "slug": "omgnetwork",
        "description": "OMG Network claims to be the leading value transfer network for ETH and ERC20 tokens. The Network scales by centralizing transaction processing and remains safe by decentralizing security.",
        "purposes": ["Payments"],
        "category": "Plasma",
        "links": {
          "websites": ["https://omg.network"],
          "apps": [],
          "documentation": ["https://docs.omg.network/"],
          "explorers": ["https://blockexplorer.mainnet.v1.omg.network/"],
          "repositories": ["https://github.com/omgnetwork/plasma-contracts"],
          "socialMedia": [
            "https://twitter.com/omgnetworkhq",
            "https://discord.gg/m7NysJjKhm",
            "https://t.me/omgnetwork"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": ["OMG"],
        "escrows": [
          {
            "address": "0x3Eed23eA148D356a72CA695DBCe2fceb40a32ce0",
            "sinceTimestamp": "1584424507",
            "tokens": ["ETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x070cB1270A4B2bA53c81CeF89d0FD584Ed4F430B",
            "sinceTimestamp": "1584424719",
            "tokens": "*",
            "chain": "ethereum"
          }
        ]
      },
      "riskView": {
        "stateValidation": {
          "value": "Exits only",
          "description": "Exits from the network are subject to a period when they can be challenged. The internal network state is left unchecked.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely fully on data that is NOT published onchain.",
          "sentiment": "bad"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for , users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": null
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds. The details are unknown.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "OMG transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs apply to exits only",
          "description": "The internal system state is not subject to any checks. Only exits from the system can be challenged. This places a much higher burden on potential validators, as they have to monitor all user activity and not only the single state.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "there are fraudulent exits which nobody reported. Fraud proofs assume that every exit is checked by at least one honest and able party.",
              "isCritical": true
            }
          ],
          "references": [],
          "isIncomplete": true
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is stored on a plasma chain and is not recorded on the Ethereum main chain.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [],
          "isIncomplete": true
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [],
          "isIncomplete": true
        },
        "forceTransactions": {
          "name": "Users can independently exit the system",
          "description": "Independent exit allows the users to escape censorship by withdrawing their funds. The system allows users to  withdraw their funds by submitting a transaction directly to the contract on-chain.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [],
          "isIncomplete": true
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user executes the withdrawal by submitting a transaction on L1 that requires a merkle proof of funds.",
            "risks": [],
            "references": [],
            "isIncomplete": true
          }
        ],
        "massExit": {
          "name": "The mass exit problem is unsolved",
          "description": "In case the operator is malicious all users need to exit within a predetermined time frame. Users that do not manage to do this will lose their funds.",
          "references": [],
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "users are unable to withdraw in a mass exit event."
            }
          ],
          "isIncomplete": true
        }
      },
      "contracts": {
        "addresses": [
          {
            "name": "EthVault",
            "address": "0x3Eed23eA148D356a72CA695DBCe2fceb40a32ce0",
            "upgradeability": null,
            "chain": "ethereum"
          },
          {
            "name": "Erc20Vault",
            "address": "0x070cB1270A4B2bA53c81CeF89d0FD584Ed4F430B",
            "upgradeability": null,
            "chain": "ethereum"
          },
          {
            "name": "ETHDepositVerifier",
            "address": "0x649f37203c365DE759c8fc8CA35beBF5448F70Be",
            "upgradeability": null,
            "chain": "ethereum"
          },
          {
            "name": "ERC20DepositVerifier",
            "address": "0xD876aeb3a443FBC03B7349AAc115E9054563CD82",
            "upgradeability": null,
            "chain": "ethereum"
          },
          {
            "name": "PlasmaFramework",
            "address": "0x0D4C1222f5e839a911e2053860e45F18921D72ac",
            "upgradeability": null,
            "chain": "ethereum"
          },
          {
            "name": "PaymentExitGame",
            "address": "0x48d7A6bbc428bca019A560cF3e8EA5364395Aad3",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The source code of the PaymentStartStandardExit library used by this contract is not verified on Etherscan."
          }
        ],
        "risks": []
      }
    },
    {
      "type": "layer2",
      "id": "optimism",
      "createdAt": "1623153328",
      "badges": [
        "EVM",
        "EthereumBlobs",
        "OPStack",
        "Superchain",
        "L3HostChain",
        "Governance"
      ],
      "display": {
        "name": "OP Mainnet",
        "slug": "optimism",
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "description": "OP Mainnet is an EVM-equivalent Optimistic Rollup. It aims to be fast, simple, and secure.",
        "purposes": ["Universal"],
        "links": {
          "websites": ["https://optimism.io/"],
          "apps": ["https://app.optimism.io"],
          "documentation": ["https://community.optimism.io"],
          "explorers": [
            "https://optimistic.etherscan.io",
            "https://optimism.blockscout.com/",
            "https://mainnet.superscan.network"
          ],
          "repositories": ["https://github.com/ethereum-optimism/optimism"],
          "socialMedia": [
            "https://x.com/Optimism",
            "https://optimism.mirror.xyz/",
            "https://twitter.com/OPLabsPBC",
            "https://youtube.com/playlist?list=PLX_rXoLYCf5HqTWygUfoMfzRirGz5lekH",
            "https://twitch.tv/optimismpbc",
            "https://discord.gg/optimism"
          ],
          "rollupCodes": "https://rollup.codes/optimism"
        },
        "activityDataSource": "Blockchain RPC",
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "OP Mainnet is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets confirmed 3d 12h after it has been posted."
        },
        "finality": { "finalizationPeriod": 302400 }
      },
      "config": {
        "associatedTokens": ["OP"],
        "escrows": [
          {
            "address": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
            "newVersion": true,
            "sinceTimestamp": "1685377379",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
                "implementations": [
                  "0xe2F826324b2faf99E513D16D266c3F80aE87832B"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
            "newVersion": true,
            "sinceTimestamp": "1624401464",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
                "implementations": [
                  "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65",
            "newVersion": true,
            "sinceTimestamp": "1625675779",
            "tokens": ["DAI"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "DAI Vault for custom DAI Gateway managed by MakerDAO.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f",
            "newVersion": true,
            "sinceTimestamp": "1620680982",
            "tokens": ["SNX"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "SNX Vault for custom SNX Gateway managed by Synthetix.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x045e507925d2e05D114534D0810a1abD94aca8d6",
            "sinceTimestamp": "1610668212",
            "tokens": ["SNX"],
            "isHistorical": true,
            "chain": "ethereum"
          },
          {
            "address": "0xCd9D4988C0AE61887B075bA77f08cbFAd2b65068",
            "sinceTimestamp": "1620680934",
            "tokens": ["SNX"],
            "isHistorical": true,
            "chain": "ethereum"
          },
          {
            "address": "0x76943C0D61395d8F2edF9060e1533529cAe05dE6",
            "newVersion": true,
            "sinceTimestamp": "1659687799",
            "tokens": ["wstETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x76943C0D61395d8F2edF9060e1533529cAe05dE6",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],
                "implementations": [
                  "0x168Cfea1Ad879d7032B3936eF3b0E90790b6B6D4"
                ]
              },
              "chain": "ethereum",
              "description": "wstETH Vault for custom wstETH Gateway. Fully controlled by Lido governance.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://mainnet.optimism.io/",
          "startBlock": 1
        },
        "finality": {
          "type": "OPStack-blob",
          "minTimestamp": "1710375155",
          "l2BlockTimeSeconds": 2,
          "genesisTimestamp": "1686068903",
          "lag": 0,
          "stateUpdate": "disabled"
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x6887246668a3b87F54DeB3b94Ba47a6f63F32985",
              "to": "0xFF00000000000000000000000000000000000010",
              "sinceTimestamp": "1686074603"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xdfe97868233d1aa22e815a266982f2cf17685a27",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1660662182",
              "untilTimestamp": "1718039363"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xe5965Ab5962eDc7477C8520243A95517CD252fA9",
              "selector": "0x82ecf2f6",
              "functionSignature": "function create(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) payable returns (address proxy_)",
              "sinceTimestamp": "1718039363"
            }
          }
        ]
      },
      "chainConfig": {
        "name": "optimism",
        "chainId": 10,
        "explorerUrl": "https://optimistic.etherscan.io",
        "explorerApi": {
          "url": "https://api-optimistic.etherscan.io/api",
          "type": "etherscan"
        },
        "blockscoutV2ApiUrl": "https://optimism.blockscout.com/api/v2",
        "minTimestampForTvl": "1636668000",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 4286263,
            "version": "3"
          },
          {
            "sinceBlock": 0,
            "batchSize": 150,
            "address": "0xE295aD71242373C37C5FdA7B57F26f9eA1088AFe",
            "version": "optimism"
          }
        ],
        "coingeckoPlatform": "optimistic-ethereum"
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "Fraud proofs allow actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "DisputeGameFactory",
              "references": [
                "https://etherscan.io/address/0xc641a33cab81c559f2bd4b21ea34c290e2440c2b#code"
              ]
            }
          ],
          "secondLine": "3d 12h challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no exit window for users to exit in case of unwanted regular upgrades as they are initiated by the Security Council with instant upgrade power and without proper notice.",
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can be a Proposer and propose new roots to the L1 bridge.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs ensure state correctness",
          "description": "After some period of time, the published state root is assumed to be correct. For a certain time period, one of the whitelisted actors can submit a fraud proof that shows that the state was incorrect.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "no validator checks the published state. Fraud proofs assume at least one honest and able validator."
            }
          ],
          "references": [
            {
              "text": "DisputeGameFactory.sol - Etherscan source code, create() function",
              "href": "https://etherscan.io/address/0xc641a33cab81c559f2bd4b21ea34c290e2440c2b#code"
            },
            {
              "text": "FaultDisputeGame.sol - Etherscan source code, attack() function",
              "href": "https://etherscan.io/address/0xA6f3DFdbf4855a43c529bc42EDE96797252879af#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xFF00000000000000000000000000000000000010"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exits",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When a state root containing such transaction is settled, the funds become available for withdrawal on L1 after 3d 12h. Withdrawal inclusion can be proven before state root settlement, but a 7d period has to pass before it becomes actionable. The process of state root settlement takes a challenge period of at least 3d 12h to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xe2F826324b2faf99E513D16D266c3F80aE87832B#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "The rollup node is composed of two software components: [op-node](https://github.com/ethereum-optimism/optimism/tree/develop/op-node), implementing consensus related logic, and [op-geth](https://github.com/ethereum-optimism/op-geth), implementing execution logic. The configuration file can be found [here](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/configs/mainnet/op.toml).",
        "compressionScheme": "Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.",
        "genesisState": "Since OP Mainnet has migrated from the OVM to Bedrock, a node must be synced using a data directory that can be found [here](https://docs.optimism.io/builders/node-operators/management/snapshots). To reproduce the migration itself, see this [guide](https://blog.oplabs.co/reproduce-bedrock-migration/).",
        "dataFormat": "The format specification of Sequencer's data batches can be found [here](https://blog.oplabs.co/reproduce-bedrock-migration/)."
      },
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by anyone who has sufficient funds. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Proposers submit state roots as children of the latest confirmed state root (called anchor state), by calling the `create` function in the DisputeGameFactory. A state root can have multiple conflicting children. Each proposal requires a stake, currently set to 0.08 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be withdrawn only after the proposal has been confirmed. A state root gets confirmed if the challenge period has passed and it is not countered.",
            "references": [
              {
                "text": "OP stack specification: Fault Dispute Game",
                "href": "https://specs.optimism.io/fault-proof/stage-one/fault-dispute-game.html#fault-dispute-game"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "Challenges are opened to disprove invalid state roots using bisection games. Each bisection move requires a stake that increases expontentially with the depth of the bisection, with a factor of 1.09493. The maximum depth is 73, and reaching it therefore requires a cumulative stake of 691.43 ETH from depth 0. Actors can participate in any challenge by calling the `defend` or `attack` functions, depending whether they agree or disagree with the latest claim and want to move the bisection game forward. Actors that disagree with the top-level claim are called challengers, and actors that agree are called defenders. Each actor might be involved in multiple (sub-)challenges at the same time, meaning that the protocol operates with [full concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Challengers and defenders alternate in the bisection game, and they pass each other a clock that starts with 3d 12h. If a clock expires, the claim is considered defeated if it was countered, or it gets confirmed if uncountered. Since honest parties can inherit clocks from malicious parties that play both as challengers and defenders (see [freeloader claims](https://specs.optimism.io/fault-proof/stage-one/fault-dispute-game.html#freeloader-claims)), if a clock gets inherited with less than 3h, it generally gets extended by 3h with the exception of 6h right before depth 30, and 1d right before the last depth. The maximum clock extension that a top level claim can get is therefore 10d. Since unconfirmed state roots are independent of one another, users can decide to exit with a subsequent confirmed state root if the previous one is delayed. Winners get the entire losers' stake, meaning that sybils can potentially play against each other at no cost. The final instruction found via the bisection game is then executed onchain in the MIPS one step prover contract who determines the winner. The protocol does not enforce valid bisections, meaning that actors can propose correct initial claims and then provide incorrect midpoints. The protocol can be subject to resource exhaustion attacks ([Spearbit 5.1.3](https://github.com/ethereum-optimism/optimism/blob/develop/docs/security-reviews/2024_08_report-cb-fault-proofs-non-mips.pdf)).",
            "references": [
              {
                "text": "Fraud Proof Wars: OPFP",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "stage": {
        "stage": "Stage 1",
        "missing": {
          "nextStage": "Stage 2",
          "requirements": [
            "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit.",
            "The Security Council's actions are not confined to on-chain provable bugs."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "There are at least 5 external actors who can submit fraud proofs."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": true,
                "description": "In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."
              },
              {
                "satisfied": true,
                "description": "The Security Council is properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": true,
                "description": "Fraud proof submission is open to everyone."
              },
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": null
      },
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x6887246668a3b87F54DeB3b94Ba47a6f63F32985",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to submit transaction batches to L1."
        },
        {
          "name": "SuperchainProxyAdmin",
          "accounts": [
            {
              "address": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Admin of OptimismPortal, L1StandardBridge, L1ERC721Bridge, OptimismMintableERC20Factory, SuperchainConfig, DelayedWETH, DisputeGameFactory, AnchorStateRegistry and SystemConfig contracts."
        },
        {
          "name": "SuperchainProxyAdminOwner",
          "description": "This is a Gnosis Safe with 2 / 2 threshold.  Owner of the SuperchainProxyAdmin. It can upgrade the bridge implementation potentially gaining access to all funds, and change any system component. It also controls the L2ProxyAdmin, meaning it can upgrade L2 system components.",
          "accounts": [
            {
              "address": "0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "GuardianMultisig",
          "description": "This is a Gnosis Safe with 1 / 1 threshold. It uses the following modules: DeputyGuardianModule (allows the FoundationMultisig_2, called the deputy guardian, to act on behalf of the Gnosis Safe). Address allowed to pause withdrawals or blacklist dispute games in case of an emergency. It is controlled by the Security Council multisig, but a module allows the Foundation to act through it. The Security Council can disable the module if the Foundation acts maliciously.",
          "accounts": [
            {
              "address": "0x09f7150D8c019BeF34450d6920f6B3608ceFdAf2",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "FoundationMultisig_1",
          "description": "This is a Gnosis Safe with 5 / 7 threshold.  Member of the SuperchainProxyAdminOwner.",
          "accounts": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SecurityCouncilMultisig",
          "description": "This is a Gnosis Safe with 10 / 13 threshold. It uses the following modules: LivenessModule (used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig). Member of the SuperchainProxyAdminOwner. It implements a LivenessModule used to remove inactive (98d) members while making sure that the threshold remains above 75%. If the number of members falls below 8, the Foundation takes ownership of the Security Council.",
          "accounts": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": [
            {
              "text": "Security Council members - Optimism Collective forum",
              "href": "https://gov.optimism.io/t/security-council-vote-2-initial-member-ratification/7118"
            }
          ],
          "participants": [
            {
              "address": "0x07dC0893cAfbF810e3E72505041f2865726Fd073",
              "type": "EOA"
            },
            {
              "address": "0x0a122d8aA40758FBAFf0360BFB391EdFfD9758b8",
              "type": "EOA"
            },
            {
              "address": "0x1822b35B09f5ce1C78ecbC06AC0A4e17885b925e",
              "type": "EOA"
            },
            {
              "address": "0x4A7322258c9E690e4CB8Cea6e5251443E956e61E",
              "type": "EOA"
            },
            {
              "address": "0x51aCb8e1205De850D1b512584FeE9C29C3813dDa",
              "type": "EOA"
            },
            {
              "address": "0x5C0F529d5B025540c54f71d2BcbB4c78F368C47e",
              "type": "EOA"
            },
            {
              "address": "0x6323ef2b80030f3fBc508bFc321Fc71fDB95c865",
              "type": "EOA"
            },
            {
              "address": "0x74FAE9a9fbe31d1F69b95f59CaF12736a8b6B310",
              "type": "EOA"
            },
            {
              "address": "0x7ed8d9Af9eaA194D1A75C67c1475579E42289E39",
              "type": "EOA"
            },
            {
              "address": "0x8Afe777B5A4D1e156435ab44Ad4b73A318cE0EA4",
              "type": "EOA"
            },
            {
              "address": "0x9Eb11A55132c851b9991F148b3Af791ca498fD7A",
              "type": "EOA"
            },
            {
              "address": "0xbfA046B0bc5cEa1596be62B8b3f79f9f41f1E0d9",
              "type": "EOA"
            },
            {
              "address": "0xE895076cD050F1f042d1040E47b5929bE989E514",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FoundationMultisig_2",
          "description": "This is a Gnosis Safe with 5 / 7 threshold.  This address is the owner of the following contracts: SystemConfig.",
          "accounts": [
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FeesCollector",
          "accounts": [
            {
              "address": "0xa3d596EAfaB6B13Ab18D40FaE1A962700C84ADEa",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Address collecting sequencer, base and L1 fees from L2."
        }
      ],
      "nativePermissions": {
        "optimism": [
          {
            "name": "L2ProxyAdmin",
            "accounts": [
              {
                "address": "0x4200000000000000000000000000000000000018",
                "type": "Contract"
              }
            ],
            "chain": "optimism",
            "description": "Admin of L2CrossDomainMessenger, GasPriceOracle, L2StandardBridge, SequencerFeeVault, OptimismMintableERC20Factory, L1BlockNumber, L2ERC721Bridge, L1Block, L1ToL2MessagePasser, OptimismMintableERC721Factory, BaseFeeVault, L1FeeVault, SchemaRegistry and EAS contracts."
          },
          {
            "name": "L2ProxyAdminOwner",
            "chain": "optimism",
            "description": "Owner of the L2ProxyAdmin. It can update the L2 bridge implementation potentially gaining access to all funds, and change any L2 system component. Assigned as the (aliased) L1 ProxyAdminOwner, meaning that upgrades has to be done through the L1 -> L2 bridge.",
            "accounts": [
              {
                "address": "0x6B1BAE59D09fCcbdDB6C6cceb07B7279367C4E3b",
                "type": "EOA"
              }
            ]
          },
          {
            "name": "MintManagerOwner",
            "description": "This is a Gnosis Safe with 3 / 5 threshold.  Owner of the MintManager. It can change the OP token owner to a different MintManager and therefore change the inflation policy.",
            "accounts": [
              {
                "address": "0x2A82Ae142b2e62Cb7D10b55E323ACB1Cab663a26",
                "type": "MultiSig"
              }
            ],
            "chain": "optimism",
            "references": null,
            "participants": [
              {
                "address": "0x3041BA32f451F5850c147805F5521AC206421623",
                "type": "EOA"
              },
              {
                "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
                "type": "EOA"
              },
              {
                "address": "0xdb203D7f00fF435dA107543B33495f9cA2c484C6",
                "type": "EOA"
              },
              {
                "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
                "type": "EOA"
              },
              {
                "address": "0xA902A27a7631D502E3Ec17fc5d4c3e0861752c94",
                "type": "EOA"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "OptimismPortal",
            "address": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0xe2F826324b2faf99E513D16D266c3F80aE87832B"]
            },
            "chain": "ethereum",
            "description": "The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals. It specifies which game type can be used for withdrawals. The current game type is FaultDisputeGame.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "The L1CrossDomainMessenger (L1xDM) contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract’s replay function.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"]
            },
            "chain": "ethereum",
            "description": "The L1StandardBridge contract is the main entry point to deposit ERC20 tokens from L1 to L2. This contract can store any token.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x5a7749f83b81B301cAb5f48EB8516B986DAef23D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0xAE2AF01232a6c4a4d3012C5eC5b1b35059caF10d"]
            },
            "chain": "ethereum",
            "description": "The L1ERC721Bridge contract is used to bridge ERC-721 tokens from L1 to L2.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x229047fed2591dbec1eF1118d64F7aF3dB9EB290",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0xF56D96B2535B932656d3c04Ebf51baBff241D886"]
            },
            "chain": "ethereum",
            "description": "It contains configuration parameters such as the Sequencer address, the L2 gas limit and the unsafe block signer address.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DisputeGameFactory",
            "address": "0xe5965Ab5962eDc7477C8520243A95517CD252fA9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0xc641A33cab81C559F2bd4b21EA34C290E2440C2B"]
            },
            "chain": "ethereum",
            "description": "The dispute game factory allows the creation of dispute games, used to propose state roots and eventually challenge them.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "FaultDisputeGame",
            "address": "0xA6f3DFdbf4855a43c529bc42EDE96797252879af",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Logic of the dispute game. When a state root is proposed, a dispute game contract is deployed. Challengers can use such contracts to challenge the proposed state root."
          },
          {
            "name": "PermissionedDisputeGame",
            "address": "0x050ed6F6273c7D836a111E42153BC00D0380b87d",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as FaultDisputeGame, but only two permissioned addresses are designated as proposer and challenger."
          },
          {
            "name": "MIPS",
            "address": "0x16e83cE5Ce29BF90AD9Da06D2fE6a15d5f344ce4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The MIPS contract is used to execute the final step of the dispute game which objectively determines the winner of the dispute."
          },
          {
            "name": "AnchorStateRegistry",
            "address": "0x18DAc71c228D1C32c99489B7323d441E1175e443",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x1B5CC028A4276597C607907F24E1AC05d3852cFC"]
            },
            "chain": "ethereum",
            "description": "Contains the latest confirmed state root that can be used as a starting point in a dispute game.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "PreimageOracle",
            "address": "0x9c065e11870B891D214Bc2Da7EF1f9DDFA1BE277",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The PreimageOracle contract is used to load the required data from L1 for a dispute game."
          },
          {
            "name": "DelayedWETH_PermissionlessGames",
            "address": "0x82511d494B5C942BE57498a70Fdd7184Ee33B975",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x71e966Ae981d1ce531a7b6d23DC0f27B38409087"]
            },
            "chain": "ethereum",
            "description": "Contract designed to hold the bonded ETH for each permissionless dispute game. It is designed as a wrapper around WETH to allow an owner to function as a backstop if a game would incorrectly distribute funds. It is owned by the SuperchainProxyAdminOwner multisig.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DelayedWETH_PermissionedGames",
            "address": "0x9F9b897e37de5052cD70Db6D08474550DDb07f39",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x71e966Ae981d1ce531a7b6d23DC0f27B38409087"]
            },
            "chain": "ethereum",
            "description": "Contract designed to hold the bonded ETH for each permissioned dispute game. It is designed as a wrapper around WETH to allow an owner to function as a backstop if a game would incorrectly distribute funds. It is owned by the SuperchainProxyAdminOwner multisig.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x53c165169401764778F780a69701385eb0FF19B7"]
            },
            "chain": "ethereum",
            "description": "The SuperchainConfig contract is used to manage global configuration values for multiple OP Chains within a single Superchain network. The SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the Superchain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DeputyGuardianModule",
            "address": "0xc6901F65369FC59fC1B4D6D6bE7A2318Ff38dB5B",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The DeputyGuardianModule is a Gnosis Safe module that allows the OP Foundation to act through the GuardianMultisig, which is owned by the Security Council. It is used to pause withdrawals in case of an emergency, blacklist games, disable the proof system, and update the anchor state. The Security Council can disable the module if the Foundation acts maliciously.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "LivenessModule",
            "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The LivenessModule is a Gnosis Safe nodule used to remove Security Council members that have been inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig.",
            "upgradableBy": ["SuperchainProxyAdmin"],
            "upgradeDelay": "No delay"
          }
        ],
        "nativeAddresses": {
          "optimism": [
            {
              "name": "OPToken",
              "address": "0x4200000000000000000000000000000000000042",
              "upgradeability": null,
              "chain": "optimism",
              "description": "The OP token contract. It is owned by the MintManager and can inflate the token supply by 2% annually."
            },
            {
              "name": "MintManager",
              "address": "0x5C4e7Ba1E219E47948e6e3F55019A647bA501005",
              "upgradeability": null,
              "chain": "optimism",
              "description": "Controls the OP inflation rate, which is currently hardcoded to 2% annually. It is controlled by the MintManagerOwner multisig, which can also change the OP token owner and therefore the inflation rate."
            },
            {
              "name": "L2CrossDomainMessenger",
              "address": "0x4200000000000000000000000000000000000007",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xC0d3c0d3c0D3c0D3C0d3C0D3C0D3c0d3c0d30007"
                ]
              },
              "chain": "optimism",
              "description": "The L2CrossDomainMessenger (L2xDM) contract sends messages from L2 to L1, and relays messages from L1 onto L2 with a system tx. In the event that a message sent from L2 to L1 is rejected for exceeding the L1 gas limit, it can be resubmitted via this contract’s replay function.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "GasPriceOracle",
              "address": "0x420000000000000000000000000000000000000F",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xa919894851548179A0750865e7974DA599C0Fac7"
                ]
              },
              "chain": "optimism",
              "description": "Contracts that provide L1 and L2 gas price information, which is derived permissionlessly from the L1 chain.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "L2StandardBridge",
              "address": "0x4200000000000000000000000000000000000010",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xC0d3c0d3c0D3c0d3C0D3c0D3C0d3C0D3C0D30010"
                ]
              },
              "chain": "optimism",
              "description": "The L2StandardBridge contract is the main entry point to deposit or withdraw ERC20 tokens from L2 to L1. This contract can store any token.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "OptimismMintableERC20Factory",
              "address": "0x4200000000000000000000000000000000000012",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xc0D3c0d3C0d3c0d3c0D3c0d3c0D3c0D3c0D30012"
                ]
              },
              "chain": "optimism",
              "description": "Factory contract to create bridge compliant ERC20 IOU token representations of bridged L1 ERC20 tokens.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "OptimismMintableERC721Factory",
              "address": "0x4200000000000000000000000000000000000017",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xc0d3C0d3C0d3C0d3C0d3c0d3C0D3C0d3C0D30017"
                ]
              },
              "chain": "optimism",
              "description": "Factory contract to create bridge compliant ERC721 IOU token representations of bridged L1 ERC721 tokens.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "L1BlockNumber",
              "address": "0x4200000000000000000000000000000000000013",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xC0D3C0d3C0D3c0D3C0d3c0D3C0d3c0d3C0d30013"
                ]
              },
              "chain": "optimism",
              "description": "Simple contract that returns the latest L1 block number.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "L2ERC721Bridge",
              "address": "0x4200000000000000000000000000000000000014",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xC0D3c0d3c0d3c0d3c0D3C0d3C0D3C0D3c0d30014"
                ]
              },
              "chain": "optimism",
              "description": "The L2ERC721Bridge contract is the main entry point to deposit or withdraw ERC721 tokens from L2 to L1. This contract can store any token.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "L1Block",
              "address": "0x4200000000000000000000000000000000000015",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0x07dbe8500fc591d1852B76feE44d5a05e13097Ff"
                ]
              },
              "chain": "optimism",
              "description": "Simple contract that returns information about the latest L1 block, which is derived permissionlessly from the L1 chain.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "L2ToL1MessagePasser",
              "address": "0x4200000000000000000000000000000000000016",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xC0D3C0d3C0d3c0d3C0d3C0D3c0D3c0d3c0D30016"
                ]
              },
              "chain": "optimism",
              "description": "Contract used internally by the L2CrossDomainMessenger to send messages to L1, including withdrawals. It can also be used directly as a low-level interface.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "BaseFeeVault",
              "address": "0x4200000000000000000000000000000000000019",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xC0d3c0D3c0d3C0D3C0D3C0d3c0D3C0D3c0d30019"
                ]
              },
              "chain": "optimism",
              "description": "Contract collecting base fees, which are withdrawable to the FeesCollector on L1.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "L1FeeVault",
              "address": "0x420000000000000000000000000000000000001A",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xc0D3c0D3C0d3c0d3c0d3C0d3c0d3C0d3C0D3001A"
                ]
              },
              "chain": "optimism",
              "description": "Contract collecting L1 fees, which are withdrawable to the FeesCollector on L1.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "SequencerFeeVault",
              "address": "0x4200000000000000000000000000000000000011",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0xC0D3C0d3c0d3c0d3C0D3c0d3C0D3c0d3c0D30011"
                ]
              },
              "chain": "optimism",
              "description": "Contract collecting sequencer fees, which are withdrawable to the FeesCollector on L1.",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "SchemaRegistry",
              "address": "0x4200000000000000000000000000000000000020",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0x6232208d66bAc2305b46b4Cb6BCB3857B298DF13"
                ]
              },
              "chain": "optimism",
              "description": "Contracts to register schemas for the Ethereum Attestation Service (EAS).",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "EAS",
              "address": "0x4200000000000000000000000000000000000021",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x4200000000000000000000000000000000000018"],
                "implementations": [
                  "0x4E0275Ea5a89e7a3c1B58411379D1a0eDdc5b088"
                ]
              },
              "chain": "optimism",
              "description": "Contract containing the main logic for the Ethereum Attestation Service (EAS).",
              "upgradableBy": ["L2ProxyAdmin"],
              "upgradeDelay": "No delay"
            }
          ]
        },
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. Both regular and emergency upgrades must be approved by both the Security Council and the Foundation. There is no delay on regular upgrades."
          }
        ]
      },
      "upgradesAndGovernance": "All contracts are upgradable by the `SuperchainProxyAdmin` which is controlled by a 2/2 multisig composed by the Optimism Foundation and a Security Council. The Guardian role is assigned to the Security Council multisig, with a Safe Module that allows the Foundation to act through it to stop withdrawals in the whole Superchain, blacklist dispute games, or deactivate the fault proof system entirely in case of emergencies. The Security Council can remove the module if the Foundation becomes malicious. The single Sequencer actor can be modified by the `FoundationMultisig_2` via the `SystemConfig` contract. The SuperchainProxyAdminOwner can recover dispute bonds in case of bugs that would distribute them incorrectly. \n\nAt the moment, for regular upgrades, the DAO signals its intent by voting on upgrade proposals, but has no direct control over the upgrade process.",
      "milestones": [
        {
          "name": "Fallback to permissioned proposals for 26 days.",
          "link": "https://x.com/Optimism/status/1824560759747256596",
          "date": "2024-08-16T00:00:00Z",
          "description": "OP Mainnet preventively disables the fraud proof system due to a bug for 26 days.",
          "type": "incident"
        },
        {
          "name": "OP Mainnet becomes Stage 1",
          "link": "https://x.com/Optimism/status/1800256837088145799",
          "date": "2024-06-10T00:00:00Z",
          "description": "OP Mainnet introduces fraud proofs and updates permissions.",
          "type": "general"
        },
        {
          "name": "OP Mainnet starts using blobs",
          "link": "https://twitter.com/Optimism/status/1768235284494450922",
          "date": "2024-03-14T00:00:00Z",
          "description": "OP Mainnet starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "Network Upgrade #5: Ecotone",
          "link": "https://vote.optimism.io/proposals/95119698597711750186734377984697814101707190887694311194110013874163880701970",
          "date": "2024-03-14T00:00:00Z",
          "description": "Optimism adopts EIP-4844.",
          "type": "general"
        },
        {
          "name": "Fault Proof System is live on OP Goerli",
          "link": "https://blog.oplabs.co/op-stack-fault-proof-alpha/",
          "date": "2023-10-03T00:00:00Z",
          "description": "Fraud Proof system is live on Goerli.",
          "type": "general"
        },
        {
          "name": "Mainnet migration to Bedrock",
          "link": "https://oplabs.notion.site/Bedrock-Mission-Control-EXTERNAL-fca344b1f799447cb1bcf3aae62157c5",
          "date": "2023-06-06T00:00:00Z",
          "description": "OP Mainnet, since Jun 2023 is running Bedrock.",
          "type": "general"
        },
        {
          "name": "OP Stack Introduced",
          "link": "https://optimism.mirror.xyz/fLk5UGjZDiXFuvQh6R_HscMQuuY9ABYNF7PI76-qJYs",
          "date": "2022-10-17T00:00:00Z",
          "description": "OP Stack, modular, open-sourced blueprint on how to build scalable blockchains.",
          "type": "general"
        },
        {
          "name": "Mainnet for everyone",
          "description": "Whitelist got removed, there are no restrictions on who can transact with the network.",
          "link": "https://medium.com/ethereum-optimism/all-gas-no-brakes-8b0f32afd466",
          "date": "2021-12-16T00:00:00Z",
          "type": "general"
        },
        {
          "name": "OP token airdrop",
          "link": "https://optimism.mirror.xyz/qvd0WfuLKnePm1Gxb9dpGchPf5uDz5NSMEFdgirDS4c",
          "date": "2022-05-31T00:00:00Z",
          "description": "The first round of OP token airdrop.",
          "type": "general"
        },
        {
          "name": "Optimism removes OVM fraud proofs",
          "link": "https://twitter.com/optimismfnd/status/1458953238867165192?s=21&t=cQ0NPREYt-u1rP7OiPFKUg",
          "date": "2021-11-12T00:00:00Z",
          "description": "Network upgrade to OVM 2.0 and removal of fraud-proof system.",
          "type": "incident"
        },
        {
          "name": "Mainnet Soft Launch",
          "link": "https://medium.com/ethereum-optimism/mainnet-soft-launch-7cacc0143cd5",
          "date": "2021-01-16T00:00:00Z",
          "description": "Only selected contracts like Synthetix and Uniswap are available.",
          "type": "general"
        },
        {
          "name": "Community Launch",
          "link": "https://medium.com/ethereum-optimism/community-launch-7c9a2a9d3e84",
          "date": "2021-08-19T00:00:00Z",
          "description": "All smart contracts allowed after prior approval.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "The Optimistic Vision",
          "url": "https://www.optimism.io/vision",
          "thumbnail": "optimism-vision.png"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "optopia",
      "createdAt": "1722451042",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x38f2D861b23866b92188155C4876F0879cA706Ec#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xfF00000000000000000000000000000000062050"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xFe9B3d40DB0ec8f97D9ea638e926b3aEED8cF29B#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x38f2D861b23866b92188155C4876F0879cA706Ec#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x38f2D861b23866b92188155C4876F0879cA706Ec#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xFe9B3d40DB0ec8f97D9ea638e926b3aEED8cF29B#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xFe9B3d40DB0ec8f97D9ea638e926b3aEED8cF29B#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xFe9B3d40DB0ec8f97D9ea638e926b3aEED8cF29B#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x38f2D861b23866b92188155C4876F0879cA706Ec#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xd01De08Cc118Cc1a1b39c54c8b4ff02A8ADE63eE",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xd01De08Cc118Cc1a1b39c54c8b4ff02A8ADE63eE",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x33397410000A219fa5a476c5B51032B367C77e78",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x3D0Bf26E60a689a7Da5EA3ddAD7371F27f7671a5",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Optopia Multisig",
          "description": "* This is a Gnosis Safe with 2 / 3 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n* Can upgrade implementation of OptimismPortal, SuperchainConfig, SystemConfig, L1ERC721Bridge, , L2OutputOracle (acting via ProxyAdmin).\n",
          "accounts": [
            {
              "address": "0x2C73A1610EE822a8C2C21eddd455e725A3334c8C",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xb6130283Ed292E3f42465617d6d8FFd61F615462",
              "type": "EOA"
            },
            {
              "address": "0xe30FD2f41326d500f5071440546643d9A7926e63",
              "type": "EOA"
            },
            {
              "address": "0xd01De08Cc118Cc1a1b39c54c8b4ff02A8ADE63eE",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x33397410000A219fa5a476c5B51032B367C77e78",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x3D0Bf26E60a689a7Da5EA3ddAD7371F27f7671a5",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0xd01De08Cc118Cc1a1b39c54c8b4ff02A8ADE63eE",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "* Member of Optopia Multisig.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n"
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "AddressManager",
            "address": "0x039A3B4AF85A91626f428b8B881603b6DD1f6C4C",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x03D5bc58E7b7E13ba785F67AFA2d2fC49cB2BdF3",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xD09C8E2C6D124bCE71235046B95ab676bE1d5601"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "ProxyAdmin",
            "address": "0x161aF05fA6BdA1c6E7Ee12839d470931bA796948",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n* Can be used to upgrade implementation of OptimismPortal, SuperchainConfig, SystemConfig, L1ERC721Bridge, , L2OutputOracle.\n"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x1adE86B9cc8a50Db747b7aaC32E8527d42c71fC1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
              "implementations": ["0x4f30C8A322ab6f84F15B8955B58D295E138B14Ca"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["Optopia Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x39A90926306E11497EC5FE1C459910258B620edD",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
              "implementations": ["0xFe9B3d40DB0ec8f97D9ea638e926b3aEED8cF29B"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["Optopia Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0x5e8d351FD046Aa0b3DDA24096751996C0c397C61",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
              "implementations": ["0xF3E372Ec07a9Bf0C94ff21ceBe02952F2164996F"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["Optopia Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x94118F86eE37Fa4Fdb266CDab1e55B8F0D6959D9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
              "implementations": ["0xa65DE544846795C7eeAd60790197B0EB755547ee"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["Optopia Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0xAFc9946b25e3e93208b7E2D477680C5B6e2952be",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
              "implementations": ["0xe04D088840aE793afd0970fE97FEC6Ac7BaF4AAC"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["Optopia Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "",
            "address": "0xB77d3ea899ef38c464e19F5A6CBc5a37187DC43c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
              "implementations": ["0xAd8890C1DF1f29f6a26B6eCcc73c299599c40F3d"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["Optopia Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0xdd80E05004f40815EaEf12ffeE69c2a8A5112aA5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
              "implementations": ["0x38f2D861b23866b92188155C4876F0879cA706Ec"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["Optopia Multisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Optopia Mainnet Launch",
          "link": "https://mirror.xyz/0x384F32e132501C9C3361C0495841715585164d33/t66jmeXb8sKTFoxFViXUeCQdhSZ_8CN12i13-ySNAUs",
          "date": "2024-05-21T00:00:00.00Z",
          "description": "Optopia is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "AI"],
        "architectureImage": "bedrock-superchain",
        "name": "Optopia",
        "slug": "optopia",
        "description": "Optopia is an OP stack Rollup on Ethereum focusing on the intersection of AI, Intents and DeFi.",
        "links": {
          "websites": ["https://optopia.ai/"],
          "apps": ["https://bridge.optopia.ai/"],
          "documentation": [
            "https://docs.optopia.ai/",
            "https://stack.optimism.io/"
          ],
          "explorers": ["https://scan.optopia.ai/"],
          "repositories": ["https://github.com/OptopiaLabs"],
          "socialMedia": [
            "https://x.com/Optopia_AI",
            "https://discord.com/invite/BFr9hXPDY6",
            "https://mirror.xyz/0x384F32e132501C9C3361C0495841715585164d33"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Optopia is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": ["OPAI"],
        "escrows": [
          {
            "address": "0x39A90926306E11497EC5FE1C459910258B620edD",
            "newVersion": true,
            "sinceTimestamp": "1715334971",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x39A90926306E11497EC5FE1C459910258B620edD",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
                "implementations": [
                  "0xFe9B3d40DB0ec8f97D9ea638e926b3aEED8cF29B"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x1adE86B9cc8a50Db747b7aaC32E8527d42c71fC1",
            "newVersion": true,
            "sinceTimestamp": "1715334971",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x1adE86B9cc8a50Db747b7aaC32E8527d42c71fC1",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x161aF05fA6BdA1c6E7Ee12839d470931bA796948"],
                "implementations": [
                  "0x4f30C8A322ab6f84F15B8955B58D295E138B14Ca"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc-mainnet-2.optopia.ai",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x3D0Bf26E60a689a7Da5EA3ddAD7371F27f7671a5",
              "to": "0xfF00000000000000000000000000000000062050",
              "sinceTimestamp": "1715333977"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xdd80E05004f40815EaEf12ffeE69c2a8A5112aA5",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1715334983"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "orderly",
      "createdAt": "1707309065",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x334251f91a3795c043663172CB59a963a9029aed#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x08aA34cC843CeEBcC88A627F18430294aA9780be"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x7A163eb6Df3EEBbf817A7A9769F53FB2a441D47E#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x334251f91a3795c043663172CB59a963a9029aed#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x334251f91a3795c043663172CB59a963a9029aed#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x7A163eb6Df3EEBbf817A7A9769F53FB2a441D47E#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x7A163eb6Df3EEBbf817A7A9769F53FB2a441D47E#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x7A163eb6Df3EEBbf817A7A9769F53FB2a441D47E#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x334251f91a3795c043663172CB59a963a9029aed#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xcE10372313Ca39Fbf75A09e7f4c0E57F070259f4",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xcE10372313Ca39Fbf75A09e7f4c0E57F070259f4",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x74BaD482a7f73C8286F50D8Aa03e53b7d24A5f3B",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xf8dB8Aba597fF36cCD16fECfbb1B816B3236E9b8",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can upgrade implementation of L2OutputOracle, SystemConfig, OptimismPortal, L1ERC721Bridge (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "OrderlyMultisig",
          "description": "* This is a Gnosis Safe with 4 / 6 threshold. \n* Is a Challenger.\n* Is a Guardian.\n",
          "accounts": [
            {
              "address": "0xcE10372313Ca39Fbf75A09e7f4c0E57F070259f4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0x71884086Cfacc370cf5EC34363Bf3938C6c6d888",
              "type": "EOA"
            },
            {
              "address": "0xC11D658978FF288da8bda4004CB93C6C99D791b1",
              "type": "EOA"
            },
            {
              "address": "0x985Fa8958Aa3dcE89a83E519e6FAAeCAa4930b32",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x74BaD482a7f73C8286F50D8Aa03e53b7d24A5f3B",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xf8dB8Aba597fF36cCD16fECfbb1B816B3236E9b8",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x5e76821C3c1AbB9fD6E310224804556C61D860e0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb570F4aD27e7De879A2E4F2F3DE27dBaBc20E9B9"],
              "implementations": ["0x334251f91a3795c043663172CB59a963a9029aed"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x87630a802a3789463eC4b00f89b27b1e9f6b92e9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SystemConfig",
            "address": "0x886B187C3D293B1449A3A0F23Ca9e2269E0f2664",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb570F4aD27e7De879A2E4F2F3DE27dBaBc20E9B9"],
              "implementations": ["0x240B3bd6b95cE40497Aafd71aD4705d0345A33CD"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x91493a61ab83b62943E6dCAa5475Dd330704Cc84",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb570F4aD27e7De879A2E4F2F3DE27dBaBc20E9B9"],
              "implementations": ["0x7A163eb6Df3EEBbf817A7A9769F53FB2a441D47E"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x934Ab59Ef14b638653b1C0FEf7aB9a72186393DC",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb570F4aD27e7De879A2E4F2F3DE27dBaBc20E9B9"],
              "implementations": ["0x701E95156dfD378d1985C6CC405D0Ee3d2af8503"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xb570F4aD27e7De879A2E4F2F3DE27dBaBc20E9B9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, SystemConfig, OptimismPortal, L1ERC721Bridge.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0xc76543A64666d9a073FaEF4e75F651c88e7DBC08",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xB6767fA038e8fbe3B60d42866dbeF0fca3B1a7d6"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L1StandardBridge",
            "address": "0xe07eA0436100918F157DF35D01dCE5c11b16D1F1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb570F4aD27e7De879A2E4F2F3DE27dBaBc20E9B9"],
              "implementations": ["0xc1D40DbA2505E43c5834DA7Ec03953397C2f3087"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Orderly Network Mainnet Launch",
          "link": "https://twitter.com/OrderlyNetwork/status/1749419001913237526",
          "date": "2024-01-22T00:00:00Z",
          "description": "Orderly Network is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Blobstream and Celestia Architecture",
          "url": "https://www.youtube.com/watch?v=cn_fN6pkakQ",
          "thumbnail": "modular-rollup.jpg"
        },
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "Superchain", "Conduit", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "Exchange"],
        "architectureImage": "opstack",
        "name": "Orderly Network",
        "shortName": "Orderly",
        "slug": "orderly",
        "description": "Orderly is an OP stack Optimium on Ethereum using Celestia for data availability. It has a unified ledger for assets from multiple chains and an orderbook that can be used by apps that build on top of it.",
        "detailedDescription": "While ETH deposited to Orderly is using an OP Stack canonical bridge, the multichain USDC escrows are sending / receiving their deposit / withdrawal messages through the external LayerZero v1 AMB.",
        "links": {
          "websites": ["https://orderly.network/"],
          "apps": ["https://app.orderly.network/"],
          "documentation": [
            "https://orderly.network/docs/build-on-evm/building-on-evm"
          ],
          "explorers": ["https://explorer.orderly.network/"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/OrderlyNetwork",
            "https://discord.gg/orderlynetwork",
            "https://medium.com/@orderlynetwork",
            "https://t.me/OrderlyNetworkAnnouncements"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x91493a61ab83b62943E6dCAa5475Dd330704Cc84",
            "newVersion": true,
            "sinceTimestamp": "1696608311",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x91493a61ab83b62943E6dCAa5475Dd330704Cc84",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xb570F4aD27e7De879A2E4F2F3DE27dBaBc20E9B9"],
                "implementations": [
                  "0x7A163eb6Df3EEBbf817A7A9769F53FB2a441D47E"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xe07eA0436100918F157DF35D01dCE5c11b16D1F1",
            "newVersion": true,
            "sinceTimestamp": "1696608347",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xe07eA0436100918F157DF35D01dCE5c11b16D1F1",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xb570F4aD27e7De879A2E4F2F3DE27dBaBc20E9B9"],
                "implementations": [
                  "0xc1D40DbA2505E43c5834DA7Ec03953397C2f3087"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "chain": "arbitrum",
            "includeInTotal": false,
            "address": "0x816f722424B49Cf1275cc86DA9840Fbd5a6167e9",
            "sinceTimestamp": "1697682598",
            "tokens": ["USDC"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Arbitrum escrow -> LayerZero AMB" }]
            }
          },
          {
            "chain": "optimism",
            "includeInTotal": false,
            "address": "0x816f722424B49Cf1275cc86DA9840Fbd5a6167e9",
            "sinceTimestamp": "1701153879",
            "tokens": ["USDC"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Optimism escrow -> LayerZero AMB" }]
            }
          },
          {
            "chain": "base",
            "includeInTotal": false,
            "address": "0x816f722424B49Cf1275cc86DA9840Fbd5a6167e9",
            "sinceTimestamp": "1712584295",
            "tokens": ["USDC"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Base escrow -> LayerZero AMB" }]
            }
          },
          {
            "chain": "mantle",
            "includeInTotal": false,
            "address": "0x816f722424B49Cf1275cc86DA9840Fbd5a6167e9",
            "sinceTimestamp": "1705831672",
            "tokens": ["USDC"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Mantle escrow -> LayerZero AMB" }]
            }
          },
          {
            "chain": "ethereum",
            "address": "0x816f722424B49Cf1275cc86DA9840Fbd5a6167e9",
            "sinceTimestamp": "1705702751",
            "tokens": ["USDC"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Ethereum escrow -> LayerZero AMB" }]
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.orderly.network",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "palm",
      "createdAt": "1692958606",
      "display": {
        "name": "Palm",
        "slug": "palm",
        "description": "The Palm network is a sidechain focused on NFTs that will transition from a Proof of Authority network to a ZK Rollup in 2024.",
        "purposes": ["NFT"],
        "category": "Validium",
        "provider": "Polygon",
        "links": {
          "websites": ["https://palm.network/"],
          "apps": [
            "https://app.palm.io/bridge",
            "https://uniswap-v3.scroll.io"
          ],
          "documentation": ["https://docs.palm.io/"],
          "explorers": ["https://explorer.palm.io/"],
          "repositories": [],
          "socialMedia": ["https://twitter.com/palmnetwork3"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "paradex",
      "createdAt": "1698756386",
      "badges": ["CairoVM", "EthereumBlobs", "StarknetFork", "SHARP"],
      "display": {
        "name": "Paradex",
        "slug": "paradex",
        "provider": "Starknet",
        "description": "Paradex is a high-performance crypto-derivatives exchange built on a Starknet Appchain.",
        "purposes": ["Universal", "Exchange"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://paradex.trade/"],
          "apps": ["https://app.paradex.trade", "https://paradex.trade/stats"],
          "documentation": ["https://docs.paradex.trade/"],
          "explorers": [],
          "repositories": ["https://github.com/tradeparadex"],
          "socialMedia": [
            "https://twitter.com/tradeparadex",
            "https://discord.com/invite/paradex"
          ]
        },
        "liveness": {
          "explanation": "Paradex is a ZK rollup that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. Proofs are aggregated with other projects using SHARP and state updates have to refer to proved claims."
        },
        "finality": { "finalizationPeriod": 0 }
      },
      "config": {
        "escrows": [
          {
            "address": "0xE3cbE3A636AB6A754e9e41B12b09d09Ce9E53Db3",
            "newVersion": true,
            "sinceTimestamp": "1692341159",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xE3cbE3A636AB6A754e9e41B12b09d09Ce9E53Db3",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0xa1F2ecaC6E3E593ED58B9ac5fa4B97962892E77c"],
                "implementations": [
                  "0x8A4e51ff0F2a45899519e6049FB2D1F038Be1e77"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "Paradex USDC Escrow. The current bridge cap is 30.00 M USDC.",
              "upgradableBy": ["USDC Escrow owner"],
              "upgradeDelay": "0s"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "trackedTxs": [
          {
            "uses": [{ "type": "liveness", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1636978914",
              "untilTimestamp": "1704729971",
              "programHashes": [
                "3258367057337572248818716706664617507069572185152472699066582725377748079373"
              ]
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1704729971",
              "untilTimestamp": "1706626427",
              "programHashes": [
                "54878256403880350656938046611252303365750679698042371543935159963667935317"
              ]
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1706626427",
              "untilTimestamp": "1710346919",
              "programHashes": [
                "2479841346739966073527450029179698923866252973805981504232089731754042431018"
              ]
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1710346919",
              "untilTimestamp": "1710764843",
              "programHashes": [
                "109586309220455887239200613090920758778188956576212125550190099009305121410"
              ]
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1710764843",
              "untilTimestamp": "1725811535",
              "programHashes": [
                "3383082961563516565935611087683915026448707331436034043529592588079494402084"
              ]
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1725811535",
              "programHashes": [
                "853638403225561750106379562222782223909906501242604214771127703946595519856"
              ]
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1725811535",
              "programHashes": [
                "1161178844461337253856226043908368523817098764221830529880464854589141231910"
              ]
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "stateUpdates" }],
            "query": {
              "formula": "functionCall",
              "address": "0xF338cad020D506e8e3d9B4854986E0EcE6C23640",
              "selector": "0x77552641",
              "functionSignature": "function updateState(uint256[] programOutput, uint256 onchainDataHash, uint256 onchainDataSize)",
              "sinceTimestamp": "1689850631"
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "stateUpdates" }],
            "query": {
              "formula": "functionCall",
              "address": "0xF338cad020D506e8e3d9B4854986E0EcE6C23640",
              "selector": "0xb72d42a1",
              "functionSignature": "function updateStateKzgDA(uint256[] programOutput, bytes kzgProof)",
              "sinceTimestamp": "1710346919",
              "untilTimestamp": "1725811535"
            }
          },
          {
            "uses": [{ "type": "liveness", "subtype": "stateUpdates" }],
            "query": {
              "formula": "functionCall",
              "address": "0xF338cad020D506e8e3d9B4854986E0EcE6C23640",
              "selector": "0x507ee528",
              "functionSignature": "function updateStateKzgDA(uint256[] programOutput, bytes[] kzgProofs)",
              "sinceTimestamp": "1725811667"
            }
          }
        ],
        "finality": {
          "lag": 0,
          "type": "Starknet",
          "minTimestamp": "1725811667",
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "Paradex",
              "references": [
                "https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain (SD)",
          "description": "All of the data (SD = state diffs) needed for proof construction is published onchain.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "Paradex",
              "references": [
                "https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring.",
          "sentiment": "bad",
          "sources": [
            {
              "contract": "Paradex",
              "references": [
                "https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code#F1#L253"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "USDC transferred is considered canonical as it is the basis of the perpetual protocol on the chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": false,
                "description": "No source-available node exists that can recreate the state from L1 data."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "warning",
          "text": "There is no available node software that can reconstruct the state from L1 data, hence there is no way to verify that this system is a rollup."
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": []
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required to reconstruct rollup state is published on chain",
          "description": "State diffs are publish on-chain as blob or calldata on every state update. The state diffs contain information on every contact whose storage was updated, and additional information on contract deployments. From diffs full system state can be recovered. Contracts' code is not published on L1, but can be trustlessly verified if available elsewhere.",
          "risks": [],
          "references": [
            {
              "text": "On-Chain Data - Starknet documentation",
              "href": "https://docs.starknet.io/documentation/architecture_and_concepts/Network_Architecture/on-chain-data/"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "There is no general mechanism to force the sequencer to include the transaction.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "Censorship resistance of Starknet - Forum Discussion",
              "href": "https://community.starknet.io/t/censorship-resistance/196"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. Note that the withdrawal request can be censored by the Sequencer.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the operator censors withdrawal transaction."
              }
            ],
            "references": [
              {
                "text": "Withdrawing is based on l2 to l1 messages - Starknet documentation",
                "href": "https://book.cairo-lang.org/ch16-04-L1-L2-messaging.html#sending-messages-from-starknet-to-ethereum"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "risks": [],
            "description": "There is no generic escape hatch mechanism as Starknet cannot be forced by users into a frozen state. Note that a freezing mechanism on L2, to be secure, requires anti-censorship protection.",
            "references": []
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "Paradex",
            "address": "0xF338cad020D506e8e3d9B4854986E0EcE6C23640",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x2E6fe05FE3f9a6622092Fd75439D53f01eb8A74f",
                "0x0a64d3D7747549aF6d65C225D56ac8f71e436B93"
              ],
              "implementations": ["0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Paradex contract received verified state roots from the Sequencer, allows users to read L2 -> L1 messages and send L1 -> L2 messages.",
            "upgradeDelay": "No delay",
            "upgradableBy": ["Paradex owner"]
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Paradex owner",
          "accounts": [
            {
              "address": "0x2E6fe05FE3f9a6622092Fd75439D53f01eb8A74f",
              "type": "EOA"
            },
            {
              "address": "0x0a64d3D7747549aF6d65C225D56ac8f71e436B93",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge and potentially allowing fraudulent state to be posted. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "Paradex Implementation Governors",
          "accounts": [
            {
              "address": "0x8Cef438c3e363e15F9619e32D9b5D04ff777D670",
              "type": "EOA"
            },
            {
              "address": "0x0a64d3D7747549aF6d65C225D56ac8f71e436B93",
              "type": "MultiSig"
            }
          ],
          "description": "The governors are responsible for: appointing operators, changing program hash, changing config hash, changing message cancellation delay. There is no delay on governor actions."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0xC70ae19B5FeAA5c19f576e621d2bad9771864fe2",
              "type": "EOA"
            }
          ],
          "description": "Allowed to post state updates. When the operator is down the state cannot be updated."
        },
        {
          "name": "USDC Escrow owner",
          "accounts": [
            {
              "address": "0xa1F2ecaC6E3E593ED58B9ac5fa4B97962892E77c",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the USDC Escrow, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        }
      ],
      "milestones": [
        {
          "name": "Paradex starts using blobs",
          "link": "https://twitter.com/tradeparadex/status/1768306190596153799",
          "date": "2024-03-26T00:00:00Z",
          "description": "Paradex starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "Open Beta Mainnet Launch",
          "link": "https://twitter.com/tradeparadex",
          "date": "2023-10-01T00:00:00.00Z",
          "description": "Paradex launches Open Beta on Mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "parallel",
      "createdAt": "1704289654",
      "contracts": {
        "addresses": [
          {
            "name": "L1GatewayRouter",
            "address": "0x5D657b905275F36AD62C3d5C36966975613aFB96",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
              "implementations": ["0x6525137BfF366fbc0A89E3e5A4d244B5A0090a6D"]
            },
            "chain": "ethereum",
            "description": "Router managing token <--> gateway mapping."
          },
          {
            "name": "RollupProxy",
            "address": "0x6594085ca55a2B3a5fAD1C57A270D060eEa99877",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xD368b8dC5cB6fA26A53b7588db9A87E509A72d89"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x5a961c7D162195a9Dc5a357Cc168b0694283382E",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xb4795A0edae98d7820C37F06f6b858e7acb51DF8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
              "implementations": ["0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x12485B9d469c1D51d05b5C39e009D50eF0170cF7",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
              "implementations": ["0x1162084C3C6575121146582Db5BE43189e8CEe6b"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xB6e0586616ebE79b2F86dDB32048c500D23b3AC3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xD368b8dC5cB6fA26A53b7588db9A87E509A72d89",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x28c32059d7e6147cf5257DFC127f7258beA1cdf4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
              "implementations": ["0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x57EA090Ac0554d174AE0e2855B460e84A1A7C221",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x17e7F68ce50A77e55C7834ddF31AEf86403B8010",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x72B166070781a552D7b95a907eF59ca05d3D5a62",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "All transaction data is recorded on chain",
          "description": "All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing followed by deterministic execution - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/#sequencing-followed-by-deterministic-execution"
            },
            {
              "text": "SequencerInbox.sol - Etherscan source code, addSequencerL2BatchFromOrigin function",
              "href": "https://etherscan.io/address/0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 2d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x958985cf2c54f99ba4a599221A8090C1F9Cee9A5#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x40acDc94a00b33151B40763b3Fed7C46fF639Df4",
              "type": "EOA"
            },
            {
              "address": "0x7a6BD06483710252d807bE205255E69490efca3A",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xcCE420Beb5a68091572A1cd860e10aE3Ce286FeA",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "RollupOwner",
          "accounts": [
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x19293FBec52F94165f903708a74513Dd6dFedd0a",
              "type": "MultiSig"
            }
          ],
          "description": "Can execute upgrades via the UpgradeExecutor, potentially stealing all funds."
        },
        {
          "name": "ParallelMultisig",
          "description": "This is a Gnosis Safe with 3 / 5 threshold.  Multisig that can execute upgrades via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0x19293FBec52F94165f903708a74513Dd6dFedd0a",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xb6559478b59836376dA9937c4C697dDb21779E49",
              "type": "EOA"
            },
            {
              "address": "0x9EBe5cabad9748263DbE1304064AdAb285c0f515",
              "type": "EOA"
            },
            {
              "address": "0x17816E9A858b161c3E37016D139cf618056CaCD4",
              "type": "EOA"
            },
            {
              "address": "0x0049FAB7f5dD1F26F057BD5d972Ffc6ba3c349Dd",
              "type": "EOA"
            },
            {
              "address": "0x909e36B512Ed45250fdff513523119d825647695",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "ArbOS v20 upgrade",
          "link": "https://forum.arbitrum.foundation/t/aip-arbos-version-20-atlas/20957",
          "date": "2024-04-10T00:00:00.00Z",
          "description": "Introduces EIP-4844 data blobs for L1 data availability and Dencun-related opcodes on L2.",
          "type": "general"
        },
        {
          "name": "Parallel Mainnet closed launch",
          "link": "https://twitter.com/ParallelFi/status/1743048283684237574",
          "date": "2024-01-05T00:00:00Z",
          "description": "Parallel Mainnet is open for developers.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": null,
      "badges": ["Orbit", "EthereumCalldata", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Parallel",
        "slug": "parallel",
        "redWarning": "Critical contracts can be upgraded by an EOA which could result in the loss of all funds.",
        "description": "Parallel is an Ethereum L2 solution utilizing Arbitrum Nitro technology.",
        "links": {
          "websites": ["https://parallel.fi"],
          "apps": ["https://parallel.fi/airdrop"],
          "documentation": ["https://docs.parallel.fi/parallel-chain/overview"],
          "explorers": [
            "https://explorerl2new-surprised-harlequin-bonobo-fvcy2k9oqh.t.conduit.xyz/"
          ],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/ParallelFi",
            "https://discord.gg/rdjVz8zavF",
            "https://t.me/parallelfi_community"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimistic Rollup",
        "finality": { "finalizationPeriod": 518400 },
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Parallel is an Optimistic Rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted to the L1. Forced txs can be delayed up to 2d. The state root gets finalized 6d after it has been posted."
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Fraud proof submission is not sufficiently decentralized.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.",
            "The Security Council is not properly set up."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Fraud proof submission is not sufficiently decentralized."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": false,
                "description": "The Security Council is not properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Fraud proof submission is open only to whitelisted actors."
              },
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -172800
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 8h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1068216
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x5a961c7D162195a9Dc5a357Cc168b0694283382E",
            "newVersion": true,
            "sinceTimestamp": "1704125939",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x5a961c7D162195a9Dc5a357Cc168b0694283382E",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
                "implementations": [
                  "0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x6Eb9240d4add111D5Fc81b10Ff12eECabcf9752d",
            "newVersion": true,
            "sinceTimestamp": "1704126935",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x6Eb9240d4add111D5Fc81b10Ff12eECabcf9752d",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
                "implementations": [
                  "0xf43bce5D32742FFC862eA182b0b5544CbDBB0F02"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xa1c86E2362dba0525075622af6d5f739B1304D45",
            "newVersion": true,
            "sinceTimestamp": "1704126935",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xa1c86E2362dba0525075622af6d5f739B1304D45",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
                "implementations": [
                  "0xedB05ED1a37750833fBE85b808c872D841d00859"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 tokens that require minting custom token on L2.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x150286BdbE7C8Cd23D41a8e1e64438e0dc04dc3d",
            "newVersion": true,
            "sinceTimestamp": "1704126935",
            "tokens": ["WETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x150286BdbE7C8Cd23D41a8e1e64438e0dc04dc3d",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d"],
                "implementations": [
                  "0xa86996bED19547f7dEf22a087dD61b5F9Fb6C684"
                ]
              },
              "chain": "ethereum",
              "description": "Escrow for WETH sent to L2.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.parallel.fi",
          "defaultCallsPerMinute": 120,
          "startBlock": 1
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xb4795A0edae98d7820C37F06f6b858e7acb51DF8",
              "selector": "0x8f111f3c",
              "functionSignature": "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1704125939"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xb4795A0edae98d7820C37F06f6b858e7acb51DF8",
              "selector": "0x6f12b0c9",
              "functionSignature": "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder)",
              "sinceTimestamp": "1704125939"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xb4795A0edae98d7820C37F06f6b858e7acb51DF8",
              "selector": "0xe0bc9729",
              "functionSignature": "function addSequencerL2Batch(uint256 sequenceNumber,bytes calldata data,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1704125939"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xb4795A0edae98d7820C37F06f6b858e7acb51DF8",
              "selector": "0x3e5aa082",
              "functionSignature": "function addSequencerL2BatchFromBlobs(uint256 sequenceNumber,uint256 afterDelayedMessagesRead,address gasRefunder,uint256 prevMessageCount,uint256 newMessageCount)",
              "sinceTimestamp": "1712861435"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xB6e0586616ebE79b2F86dDB32048c500D23b3AC3",
              "selector": "0xa04cee60",
              "functionSignature": "function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external",
              "sinceTimestamp": "1704125939"
            }
          }
        ],
        "finality": "coming soon"
      }
    },
    {
      "isUnderReview": true,
      "type": "layer2",
      "id": "patex",
      "createdAt": "1722264698",
      "display": {
        "category": "Optimistic Rollup",
        "name": "Patex Network",
        "slug": "patex",
        "description": "Patex Network is an L2 focusing on Real World Assets, forked from the OP stack codebase.",
        "purposes": ["RWA"],
        "links": {
          "websites": ["https://patex.io/network"],
          "apps": ["https://patex.io/cabinet/converter"],
          "documentation": ["https://docs.patex.io/tech/patex-network"],
          "explorers": ["https://patexscan.io/"],
          "repositories": ["https://github.com/patex-ecosystem/patex-network"],
          "socialMedia": [
            "https://x.com/patex_ecosystem",
            "https://t.me/cpatexeng",
            "https://discord.gg/ntjQYv9VAA",
            "https://youtube.com/channel/UCLmHyM6kZ5bViyh7my6ZkpA"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "stage": { "stage": "UnderReview" },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "chain": "ethereum",
            "address": "0x0d6e11E2A3B2B3a245bf839c07D775983aCB787d",
            "sinceTimestamp": "1686211235",
            "tokens": ["ETH"]
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.patex.io/",
          "defaultCallsPerMinute": 1500
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "payy",
      "createdAt": "1718719211",
      "display": {
        "name": "Payy",
        "slug": "payy",
        "description": "Payy is an app-specific zk-rollup enabling privacy and scalability for payments and DeFi.",
        "purposes": ["Payments"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://payy.network/"],
          "apps": ["https://payy.link/download"],
          "documentation": ["https://payy.network/docs"],
          "explorers": ["https://payy.network/explorer"],
          "repositories": ["https://github.com/polybase/payy"],
          "socialMedia": ["https://x.com/payy_link"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "playchain",
      "createdAt": "1715161986",
      "display": {
        "name": "PlayChain",
        "slug": "playchain",
        "description": "PlayChain is a Layer 2 solution built on the ZK Stack leveraging zkEVM in Validium mode. It serves as a Hyperchain allowing anyone to build gaming apps (gApps) on top of their favourite AAA games.",
        "purposes": ["Gaming", "Universal"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://playfi.ai/"],
          "apps": [],
          "documentation": ["https://docs.playfi.ai/"],
          "explorers": ["https://albireo-explorer.playfi.ai/"],
          "repositories": ["https://github.com/playFi-Labs"],
          "socialMedia": [
            "https://twitter.com/PlayFiGaming",
            "https://warpcast.com/playfi"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "plumenetwork",
      "createdAt": "1719224239",
      "display": {
        "name": "Plume Network",
        "slug": "plumenetwork",
        "description": "Plume is a modular L2 blockchain dedicated for all real-world assets (RWAs) that integrates asset tokenization and compliance providers directly into the chain.",
        "purposes": ["RWA"],
        "category": "Optimistic Rollup",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://plumenetwork.xyz/"],
          "apps": ["https://miles.plumenetwork.xyz"],
          "documentation": ["https://docs.plumenetwork.xyz/plume"],
          "explorers": ["https://test-explorer.plumenetwork.xyz"],
          "repositories": ["https://github.com/plumenetwork"],
          "socialMedia": [
            "https://twitter.com/plumenetwork",
            "https://discord.gg/plume",
            "https://t.me/plumenetwork_community"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "polygon-miden",
      "createdAt": "1690896554",
      "display": {
        "name": "Polygon Miden",
        "slug": "polygon-miden",
        "description": "Polygon Miden is a ZK rollup built on top of Ethereum running on the Miden VM. It will allow you to build high-throughput & private applications using smart contract languages like Rust that offer greater safety and lower fees while still benefiting from Ethereum's security.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "provider": "Polygon",
        "links": {
          "websites": ["https://polygon.technology/polygon-miden"],
          "apps": [],
          "documentation": ["https://docs.polygon.technology/miden/"],
          "explorers": [],
          "repositories": ["https://github.com/0xPolygonMiden"],
          "socialMedia": [
            "https://twitter.com/0xPolygonLabs",
            "https://discord.gg/0xPolygon",
            "https://t.me/polygonofficial"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "createdAt": "1679651674",
      "id": "polygonzkevm",
      "display": {
        "name": "Polygon zkEVM",
        "slug": "polygonzkevm",
        "warning": "The forced transaction mechanism is currently disabled.",
        "description": "Polygon zkEVM is a EVM-compatible ZK Rollup built by Polygon Labs.",
        "links": {
          "websites": ["https://polygon.technology/polygon-zkevm"],
          "apps": ["https://bridge.zkevm-rpc.com"],
          "documentation": [
            "https://wiki.polygon.technology/docs/zkEVM/introduction"
          ],
          "explorers": [
            "https://zkevm.polygonscan.com/",
            "https://explorer.mainnet.zkevm-test.net/"
          ],
          "repositories": ["https://github.com/0xPolygonHermez"],
          "socialMedia": [
            "https://twitter.com/0xPolygon",
            "https://discord.gg/XvpHAxZ",
            "https://polygon.technology/blog-tags/polygon-zk"
          ],
          "rollupCodes": "https://rollup.codes/polygon-zkevm"
        },
        "activityDataSource": "Blockchain RPC",
        "liveness": {
          "explanation": "Polygon zkEVM is a ZK rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted on L1. State updates are a three step process: first blocks are committed to L1, then they are proved, and then it is possible to execute them."
        },
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "provider": "Polygon",
        "tvlWarning": null,
        "finality": {
          "finalizationPeriod": 0,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "Uniform block distribution is assumed for calculations."
            }
          }
        }
      },
      "config": {
        "associatedTokens": ["POL", "MATIC"],
        "escrows": [
          {
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "newVersion": true,
            "sinceTimestamp": "1679653127",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
                "implementations": [
                  "0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "AggLayer",
              "nativeAsset": "etherPreminted",
              "premintedAmount": "200000000000000000000000000"
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://polygon-rpc.com/zkevm",
          "defaultCallsPerMinute": 500,
          "startBlock": 1
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x519E42c24163192Dca44CD3fBDCEBF6be9130987",
              "selector": "0xecef3f99",
              "functionSignature": "function sequenceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, address l2Coinbase)",
              "sinceTimestamp": "1707824735",
              "untilTimestamp": "1710419699"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x519E42c24163192Dca44CD3fBDCEBF6be9130987",
              "selector": "0xdef57e54",
              "functionSignature": "function sequenceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, uint64 maxSequenceTimestamp, uint64 initSequencedBatch, address l2Coinbase)",
              "sinceTimestamp": "1710419699"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
              "selector": "0x5e9145c9",
              "functionSignature": "function sequenceBatches((bytes,bytes32,uint64,uint64)[] batches,address l2Coinbase)",
              "sinceTimestamp": "1679653163",
              "untilTimestamp": "1707824735"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
              "selector": "0x2b0006fa",
              "functionSignature": "function verifyBatchesTrustedAggregator(uint64 pendingStateNum,uint64 initNumBatch,uint64 finalNewBatch,bytes32 newLocalExitRoot,bytes32 newStateRoot,bytes32[24] proof)",
              "sinceTimestamp": "1679653163",
              "untilTimestamp": "1707822059"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
              "selector": "0x621dd411",
              "functionSignature": "function verifyBatches(uint64 pendingStateNum,uint64 initNumBatch,uint64 finalNewBatch,bytes32 newLocalExitRoot,bytes32 newStateRoot,bytes32[24] calldata proof) ",
              "sinceTimestamp": "1679653163",
              "untilTimestamp": "1707822059"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
              "selector": "0x1489ed10",
              "functionSignature": "function verifyBatchesTrustedAggregator(uint32,uint64,uint64,uint64,bytes32,bytes32,address,bytes32[24])",
              "sinceTimestamp": "1707822059"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
              "selector": "0x87c20c01",
              "functionSignature": "function verifyBatches(uint32,uint64,uint64,uint64,bytes32,bytes32,address,bytes32[24])",
              "sinceTimestamp": "1707822059"
            }
          }
        ],
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": {
          "type": "PolygonZkEvm",
          "minTimestamp": "1679653163",
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "chainConfig": {
        "name": "polygonzkevm",
        "chainId": 1101,
        "explorerUrl": "https://zkevm.polygonscan.com",
        "explorerApi": {
          "url": "https://api-zkevm.polygonscan.com/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1679679015",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 57746,
            "version": "3"
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1. Unlike most ZK rollups transactions are posted instead of state diffs.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "PolygonZkEVMEtrog", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -432000,
          "warning": {
            "value": "The Security Council can remove the delay on upgrades.",
            "sentiment": "bad"
          }
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.",
          "sentiment": "bad",
          "sources": [{ "contract": "PolygonZkEVMEtrog", "references": [] }]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b",
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.",
            "Security Council members are not publicly known."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/0xPolygonHermez/zkevm-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": false,
                "description": "Security Council members are not publicly known."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "PolygonZkEVMEtrog.sol - Etherscan source code, verifyBatches function",
              "href": "https://etherscan.io/address/0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"
            }
          ]
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "PolygonRollupManager.sol - Etherscan source code, _verifyAndRewardBatches function",
              "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
            }
          ]
        },
        "dataAvailability": {
          "name": "All transaction data is recorded on chain",
          "description": "All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.",
          "risks": [],
          "references": [
            {
              "text": "PolygonZkEVMEtrog.sol - Etherscan source code, sequenceBatches function",
              "href": "https://etherscan.io/address/0x519E42c24163192Dca44CD3fBDCEBF6be9130987"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "PolygonZkEVMEtrog.sol - Etherscan source code, onlyTrustedSequencer modifier",
              "href": "https://etherscan.io/address/0x2650a9a4fC64f63F573EF0F405064EF54BC46f71"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "The mechanism for allowing users to submit their own transactions is currently disabled.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "PolygonZkEVMEtrog.sol - Etherscan source code, forceBatchAddress address",
              "href": "https://etherscan.io/address/0x2650a9a4fC64f63F573EF0F405064EF54BC46f71"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "PolygonZkEvmBridgeV2.sol - Etherscan source code, claimAsset function",
                "href": "https://etherscan.io/address/0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "Node software can be found [here](https://github.com/0xPolygonHermez/zkevm-node).",
        "compressionScheme": "No compression scheme yet.",
        "genesisState": "The genesis state, whose corresponding root is accessible as Batch 0 root in the [`_legacyBatchNumToStateRoot`](https://evm.storage/eth/19489007/0x5132a183e9f3cb7c848b0aac5ae0c4f0491b7ab2/_legacyBatchNumToStateRoot#map) variable of PolygonRollupManager, is available [here](https://github.com/0xPolygonHermez/zkevm-contracts/blob/0d0e69a6f299e273343461f6350343cf4b048269/deployment/genesis.json).",
        "dataFormat": "The trusted sequencer batches transactions according to the specifications documented [here](https://docs.polygon.technology/zkEVM/architecture/protocol/transaction-life-cycle/transaction-batching/)."
      },
      "stateValidation": {
        "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
        "categories": [
          {
            "title": "Prover Architecture",
            "description": "Polygon zkEVM proof system PIL-STARK can be found [here](https://github.com/0xPolygonHermez/pil-stark)."
          },
          {
            "title": "ZK Circuits",
            "description": "Polygon zkEVM circuits are built from PIL and are designed to replicate the behavior of the EVM. The source code can be found [here](https://github.com/0xPolygonHermez/zkevm-rom).",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the proof system is implemented incorrectly."
              }
            ]
          },
          {
            "title": "Verification Keys Generation",
            "description": "SNARK verification keys can be generated and checked against the Ethereum verifier contract using [this guide](https://github.com/0xPolygonHermez/zkevm-contracts/blob/main/verifyMainnetDeployment/verifyMainnetProofVerifier.md). The system requires a trusted setup."
          }
        ],
        "proofVerification": {
          "shortDescription": "Polygon zkEVM is a ZK-EVM rollup on Ethereum.",
          "aggregation": true,
          "requiredTools": [
            {
              "name": "circom",
              "version": "v2.1.8",
              "link": "https://github.com/iden3/circom/releases/tag/v2.1.8"
            }
          ],
          "verifiers": [
            {
              "name": "PolygonZkEvmVerifier (current RollupType 5)",
              "description": "Polygon zkEVM utilizes [PIL-STARK](https://github.com/0xPolygonHermez/pil-stark) as the main proving stack for their system. PIL-STARK is an implementation of the [eSTARK](https://eprint.iacr.org/2023/474) protocol. The circuits and the computations are represented using the PIL and zkASM custom languages. The protocol makes use of recursive proof aggregation. The final eSTARK proof is wrapped in a fflonk proof.",
              "verified": "no",
              "contractAddress": "0xc521580cd8586Cc688A7430F9DcE0f6A803F2883",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Final wrap",
                  "proofSystem": "fflonk",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG-fflonk",
                  "trustedSetup": "Powers of Tau 28"
                },
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "eSTARK",
                  "mainArithmetization": "eAIR",
                  "mainPCS": "FRI",
                  "trustedSetup": "None"
                },
                {
                  "name": "Polygon zkEVM ROM",
                  "proofSystem": "eSTARK",
                  "mainArithmetization": "eAIR",
                  "mainPCS": "FRI",
                  "trustedSetup": "None",
                  "link": "https://github.com/0xPolygonHermez/zkevm-rom"
                }
              ]
            },
            {
              "name": "PolygonZkEvmVerifier (old RollupType 3)",
              "description": "Polygon zkEVM utilizes [PIL-STARK](https://github.com/0xPolygonHermez/pil-stark) as the main proving stack for their system. PIL-STARK is an implementation of the [eSTARK](https://eprint.iacr.org/2023/474) protocol. The circuits and the computations are represented using the PIL and zkASM custom languages. The protocol makes use of recursive proof aggregation. The final eSTARK proof is wrapped in a fflonk proof.",
              "verified": "no",
              "contractAddress": "0x0775e11309d75aA6b0967917fB0213C5673eDf81",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Final wrap",
                  "proofSystem": "fflonk",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG-fflonk",
                  "trustedSetup": "Powers of Tau 28"
                },
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "eSTARK",
                  "mainArithmetization": "eAIR",
                  "mainPCS": "FRI",
                  "trustedSetup": "None"
                },
                {
                  "name": "Polygon zkEVM ROM",
                  "proofSystem": "eSTARK",
                  "mainArithmetization": "eAIR",
                  "mainPCS": "FRI",
                  "trustedSetup": "None",
                  "link": "https://github.com/0xPolygonHermez/zkevm-rom"
                }
              ]
            }
          ]
        }
      },
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x148Ee7dAF16574cD020aFa34CC658f8F3fbd2800",
              "type": "EOA"
            }
          ],
          "description": "Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."
        },
        {
          "name": "Proposer (Trusted Aggregator)",
          "accounts": [
            {
              "address": "0x6329Fe417621925C81c16F9F9a18c203C21Af7ab",
              "type": "EOA"
            },
            {
              "address": "0x20A53dCb196cD2bcc14Ece01F358f1C849aA51dE",
              "type": "EOA"
            }
          ],
          "description": "The trusted proposer (called Aggregator) provides ZK proofs for all the supported systems. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 6 / 8 threshold.  The Security Council is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.",
          "accounts": [
            {
              "address": "0x37c58Dfa7BF0A165C5AAEdDf3e2EdB475ac6Dcb6",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
              "type": "EOA"
            },
            {
              "address": "0xaF46a0ddf80DFFB49C87656625E65A37499B261D",
              "type": "EOA"
            },
            {
              "address": "0xBDc235cC9d6Baa641c5ae306bc83962475A5FEFf",
              "type": "EOA"
            },
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0x3ab9f4b964eE665F7CDf1d65f1cEEc6196B0D622",
              "type": "EOA"
            },
            {
              "address": "0x49c15936864690bCd6af0ecaca8E874adFF30E86",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0x21887c89368bf918346c62460e0c339113801C28",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Forced Batcher",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "description": "Sole account allowed to submit forced transactions. If this address is the zero address, anyone can submit forced transactions."
        },
        {
          "name": "RollupManagerAdminMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Admin of the PolygonRollupManager contract, can set core system parameters like timeouts and aggregator as well as deactivate emergency state. They can also upgrade the PolygonZkEVMEtrog contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0xA0B02B28920812324f1cC3255bd8840867d3f227",
              "type": "EOA"
            },
            {
              "address": "0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EscrowsAdmin",
          "description": "This is a Gnosis Safe with 5 / 10 threshold.  Escrows Admin can instantly upgrade wstETH, DAI and USDC bridges.",
          "accounts": [
            {
              "address": "0xf694C9e3a34f5Fa48b6f3a0Ff186C1c6c4FcE904",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x099198353446A9E3a20672eDC1Bd461E978842c3",
              "type": "EOA"
            },
            {
              "address": "0xb771380f912E4b5F6beDdf81314C383c13F16ab5",
              "type": "EOA"
            },
            {
              "address": "0xD09971D8ed6C6a5e57581e90d593ee5B94e348D4",
              "type": "EOA"
            },
            {
              "address": "0xc4591c41e01a7a654B5427f39Bbd1dEe5bD45D1D",
              "type": "EOA"
            },
            {
              "address": "0xE6Ee0F8D81170160d50ed77b9C91E6219473d43a",
              "type": "EOA"
            },
            {
              "address": "0xd1B856ee12Bd00922cae8DD86ab068f8c0F95224",
              "type": "EOA"
            },
            {
              "address": "0xF53D1fB2EeD22Cf1E8f7E90Da7f1CAe88344065F",
              "type": "EOA"
            },
            {
              "address": "0xf56AE6520776934127AB68438d1b4652BCe07F8f",
              "type": "EOA"
            },
            {
              "address": "0x4DE44Aa0Ef9DB64DF3eB3465d35D73d0409d44ed",
              "type": "EOA"
            },
            {
              "address": "0x4E83124eD15b13265240B61EC9627797CCE1032E",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LocalAdmin",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "description": "Admin of the PolygonZkEVMEtrog contract, can set core system parameters like timeouts, sequencer, activate forced transactions and update the DA mode. In the case on Polygon zkEVM, this is also the RollupManagerAdminMultisig."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "PolygonZkEVMEtrog",
            "address": "0x519E42c24163192Dca44CD3fBDCEBF6be9130987",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"],
              "implementations": ["0x2650a9a4fC64f63F573EF0F405064EF54BC46f71"]
            },
            "chain": "ethereum",
            "description": "The main contract of the Polygon zkEVM. Contains sequenced transaction batch hashes and forced transaction logic.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "PolygonzkEVMVerifier",
            "address": "0xc521580cd8586Cc688A7430F9DcE0f6A803F2883",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "An autogenerated contract that verifies ZK proofs in the PolygonRollupManager system."
          },
          {
            "name": "PolygonRollupManager",
            "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]
            },
            "chain": "ethereum",
            "description": "It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the Security Council, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives L2 state roots as well as ZK proofs.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Bridge",
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]
            },
            "chain": "ethereum",
            "description": "The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer both ERC20 assets and arbitrary messages. To transfer funds a user initiated transaction on both sides is required.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "GlobalExitRootV2",
            "address": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x2E38cD55163137483E30580Cb468C2dFf1d85077"]
            },
            "chain": "ethereum",
            "description": "Synchronizes deposit and withdraw merkle trees across L1 and the L2s. The global root from this contract is injected into the L2 contracts.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Timelock",
            "address": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract upgrades have to go through a 10d timelock unless the Emergency State is activated. It can also add rollup types that can be used to upgrade verifier contracts of existing systems. It is controlled by the ProxyAdminOwner."
          }
        ],
        "references": [
          {
            "text": "State injections - stateRoot and exitRoot are part of the validity proof input.",
            "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 10d delay on code upgrades."
          }
        ]
      },
      "upgradesAndGovernance": "All main contracts and the verifier are upgradable by the 2 / 3 `ProxyAdminOwner` through a timelock that owns `SharedProxyAdmin`. Addresses of trusted sequencer, aggregator and operational parameters (like fees) on the `PolygonRollupManager` can be instantly set by the `ProxyAdminOwner`. Escrow contracts are upgradable by the `EscrowsAdmin` 5 / 10 multisig.\n\n`PolygonZkEVMTimelock` is a modified version of TimelockController that disables delay in case of a manually enabled or triggered emergency state in the `PolygonRollupManager`. It otherwise has a 10d delay.\n\nThe process to upgrade the `PolygonRollupManager`-implementation and / or the verifier has two steps: 1) A newRollupType-transaction is added by the `ProxyAdminOwner` to the timelock, which in turn can call the `addNewRollupType()` function in the `PolygonRollupManager`. In a non-emergency state, this allows potential reviews of the new rollup type while it sits in the timelock. 2) After the delay period, the rollup implementation can be upgraded to the new rollup type by the `ProxyAdminOwner` calling the `updateRollup()`-function in the `PolygonRollupManager` directly.\n\nThe critical roles in the `PolygonRollupManager` can be changed through the timelock, while the trusted Aggregator role can be granted by the `ProxyAdminOwner` directly.\n\nThe 6 / 8 `SecurityCouncil` multisig can manually enable the emergency state in the `PolygonRollupManager`.",
      "milestones": [
        {
          "name": "Polygon zkEVM Etrog upgrade",
          "link": "https://docs.polygon.technology/zkEVM/architecture/protocol/etrog-upgrade/#etrog-upgrade",
          "date": "2024-02-13",
          "description": "Polygon zkEVM is upgraded to the Polygon Etrog version.",
          "type": "general"
        },
        {
          "name": "Polygon zkEVM Mainnet Beta is Live",
          "link": "https://polygon.technology/blog/polygon-zkevm-mainnet-beta-is-live?utm_source=twitter&utm_medium=social&utm_campaign=zkevm-launch&utm_term=mainnet-beta-live&utm_content=blog",
          "date": "2023-03-27T00:00:00Z",
          "description": "Polygon zkEVM public beta launched.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "State diffs vs raw tx data",
          "url": "https://twitter.com/krzKaczor/status/1641505354600046594",
          "thumbnail": "l2beat-03.jpg"
        }
      ],
      "badges": ["PolygonCDK", "EthereumCalldata", "AggLayer", "EVM"]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "polygon-pos-2",
      "createdAt": "1690896554",
      "display": {
        "name": "Polygon PoS 2.0",
        "slug": "polygon-pos-2",
        "description": "Polygon PoS 2.0 leverages ZK technology, ideally without changing anything for users or developers. All applications should continue working and fees should stay just as low. The only difference should be higher security and seamless interoperability with other chains in the Polygon 2.0 ecosystem.",
        "purposes": ["Universal"],
        "category": "Validium",
        "provider": "Polygon",
        "links": {
          "websites": ["https://polygon.technology"],
          "apps": ["https://wallet.polygon.technology/"],
          "documentation": ["https://wiki.polygon.technology/"],
          "explorers": ["https://polygonscan.com/"],
          "repositories": ["https://github.com/maticnetwork/"],
          "socialMedia": [
            "https://twitter.com/0xPolygonLabs",
            "https://discord.gg/0xPolygon",
            "https://t.me/polygonofficial"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "polynomial",
      "createdAt": "1726570826",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xc2341b9265f7bDa95dc5c04cCB6A9801da7cBF75#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x0bd57e83B5E0f9eCD84d559bB58e1EcFEEdD2565"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xCd0A8dc59685AF52cb706d73ab455FcA18eDC1D5#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xc2341b9265f7bDa95dc5c04cCB6A9801da7cBF75#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xc2341b9265f7bDa95dc5c04cCB6A9801da7cBF75#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xCd0A8dc59685AF52cb706d73ab455FcA18eDC1D5#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xCd0A8dc59685AF52cb706d73ab455FcA18eDC1D5#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xCd0A8dc59685AF52cb706d73ab455FcA18eDC1D5#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xc2341b9265f7bDa95dc5c04cCB6A9801da7cBF75#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x5DA28F0186051a9F7b9eE2553FFdc165EB0A6714",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x67a44CE38627F46F20b1293960559eD85Dd194F1",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n* Can upgrade implementation of OptimismPortal, SystemConfig, OptimismMintableERC20Factory, L1ERC721Bridge, L2OutputOracle (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x5DA28F0186051a9F7b9eE2553FFdc165EB0A6714",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x67a44CE38627F46F20b1293960559eD85Dd194F1",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "OptimismPortal",
            "address": "0x034cbb620d1e0e4C2E29845229bEAc57083b04eC",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f"],
              "implementations": ["0xCd0A8dc59685AF52cb706d73ab455FcA18eDC1D5"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x287bBa8116F2fc5a642bfD6027EBf5AD6522655C",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x36725a5e0040deB7C697d46C0e24390702b202e0",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xEC097D3f3319F2A23aa82ee2e28d30FdCBe0d753"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L1StandardBridge",
            "address": "0x3Be64BF2b9C2dE637067C7AAb6baE5EDf9fEBA55",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f"],
              "implementations": ["0x082AAd9468e3A4b430bA7851a36367D6B471F9B8"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of OptimismPortal, SystemConfig, OptimismMintableERC20Factory, L1ERC721Bridge, L2OutputOracle.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "SystemConfig",
            "address": "0x58b51fb9FeeD00DD846f91D265Eba3cdd855A413",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f"],
              "implementations": ["0x69762714C496f76756D7aEbf8b4225F458cDf853"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x994233366C8E11da5c525AB903c04e7AFB2915bD",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f"],
              "implementations": ["0xCfB1b01c002Ab32859Dac851e7928B405dF8adE4"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0xD5890BBAFaFdce942597757385E55174569e8d1A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f"],
              "implementations": ["0x8D703A1eE5925D783aAbaFe2FC551A1cC62Bc5F7"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0xe512D477Cc89196AF2cE837f6AB8EA30e199f757",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f"],
              "implementations": ["0xc2341b9265f7bDa95dc5c04cCB6A9801da7cBF75"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Polynomial Chain announced",
          "date": "2024-07-16T00:00:00.000Z",
          "description": "Polynomial Chain announced on X.",
          "link": "https://x.com/PolynomialFi/status/1813259120629457403",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Conduit", "Superchain", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "Exchange"],
        "architectureImage": "opstack",
        "name": "Polynomial",
        "slug": "polynomial",
        "description": "Polynomial Chain is a derivatives chain that addresses liquidity fragmentation with a unified liquidity layer, enabling innovative derivatives.",
        "links": {
          "websites": ["https://polynomial.fi/"],
          "apps": [],
          "documentation": ["https://docs.polynomial.fi/"],
          "explorers": ["https://polynomialscan.io/"],
          "repositories": ["https://github.com/Polynomial-Protocol"],
          "socialMedia": [
            "https://x.com/PolynomialFi",
            "https://discord.gg/Mr9XKU5W"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Polynomial is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x034cbb620d1e0e4C2E29845229bEAc57083b04eC",
            "newVersion": true,
            "sinceTimestamp": "1718038307",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x034cbb620d1e0e4C2E29845229bEAc57083b04eC",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f"],
                "implementations": [
                  "0xCd0A8dc59685AF52cb706d73ab455FcA18eDC1D5"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x3Be64BF2b9C2dE637067C7AAb6baE5EDf9fEBA55",
            "newVersion": true,
            "sinceTimestamp": "1718038307",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x3Be64BF2b9C2dE637067C7AAb6baE5EDf9fEBA55",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x3c68b1d45f4faa4F028c3DC8910fA3247c7f0a1f"],
                "implementations": [
                  "0x082AAd9468e3A4b430bA7851a36367D6B471F9B8"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x615172e47c0C5A6dA8ea959632Ac0166f7a59eDc",
            "sinceTimestamp": "1721219231",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sDAI"],
            "chain": "ethereum"
          },
          {
            "address": "0xDE1617Ddb7C8A250A409D986930001985cfad76F",
            "sinceTimestamp": "1721277431",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "ethereum"
          },
          {
            "address": "0xC6cfb996A7CFEB89813A68CD13942CD75553032b",
            "sinceTimestamp": "1721382935",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["sUSDe"],
            "chain": "ethereum"
          },
          {
            "address": "0xc374967634133F5Ed1DF5050276e5B33986625D3",
            "sinceTimestamp": "1721232015",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "optimism",
            "includeInTotal": false
          },
          {
            "address": "0x038bc0f438C6b46FaCc5C83475925F4Dc111d79F",
            "sinceTimestamp": "1721231761",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "base",
            "includeInTotal": false
          },
          {
            "address": "0x615172e47c0C5A6dA8ea959632Ac0166f7a59eDc",
            "sinceTimestamp": "1721230760",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "arbitrum",
            "includeInTotal": false
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.polynomial.fi",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x67a44CE38627F46F20b1293960559eD85Dd194F1",
              "to": "0x0bd57e83B5E0f9eCD84d559bB58e1EcFEEdD2565",
              "sinceTimestamp": "1718038307"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xe512D477Cc89196AF2cE837f6AB8EA30e199f757",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1718038307"
            }
          }
        ],
        "finality": {
          "type": "OPStack-blob",
          "genesisTimestamp": "1718038307",
          "minTimestamp": "1718049059",
          "l2BlockTimeSeconds": 2,
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "publicgoodsnetwork",
      "createdAt": "1690446197",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x76983dfED43C7ae7ebB592A92Be2BE972cAE4348#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xC1B90E1e459aBBDcEc4DCF90dA45ba077d83BFc5"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x436e9FC7894e26718637f086d42B4a06439C8ae0#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x76983dfED43C7ae7ebB592A92Be2BE972cAE4348#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x76983dfED43C7ae7ebB592A92Be2BE972cAE4348#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x436e9FC7894e26718637f086d42B4a06439C8ae0#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x436e9FC7894e26718637f086d42B4a06439C8ae0#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x436e9FC7894e26718637f086d42B4a06439C8ae0#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x76983dfED43C7ae7ebB592A92Be2BE972cAE4348#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x39E13D1AB040F6EA58CE19998edCe01B3C365f84",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x39E13D1AB040F6EA58CE19998edCe01B3C365f84",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x69968Ce0E92d9c101BAd81de55EFbcb69603cFe3",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x99526b0e49A95833E734EB556A6aBaFFAb0Ee167",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "PgnMultisig",
          "description": "* This is a Gnosis Safe with 3 / 6 threshold. \n* Is a Challenger.\n* Is a Guardian.\n",
          "accounts": [
            {
              "address": "0x39E13D1AB040F6EA58CE19998edCe01B3C365f84",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0x5553a23a71Bc7985c8E58Ca08072D2Fa9D1D1F4c",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            },
            {
              "address": "0xc2E2B715d9e302947Ec7e312fd2384b5a1296099",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Can upgrade implementation of SystemConfig, L2OutputOracle, OptimismPortal (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x69968Ce0E92d9c101BAd81de55EFbcb69603cFe3",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x99526b0e49A95833E734EB556A6aBaFFAb0Ee167",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "AddressManager",
            "address": "0x09d5DbA52F0ee2C4A5E94FD5C802bD74Ca9cAD3e",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SystemConfig",
            "address": "0x7Df716EAD1d83a2BF35B416B7BC84bd0700357C9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xc6A8d2c5d0F068BE745f6A770378F01ca1714cc4"],
              "implementations": ["0x463B3777d3DD6a90234b594D1f94002267CE7948"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x97BAf688E5d0465E149d1d5B497Ca99392a6760e",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x1d8180D739D01dC97e837478af8d494215C5EF5e"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L2OutputOracle",
            "address": "0xA38d0c4E6319F9045F20318BA5f04CDe94208608",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xc6A8d2c5d0F068BE745f6A770378F01ca1714cc4"],
              "implementations": ["0x76983dfED43C7ae7ebB592A92Be2BE972cAE4348"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0xb26Fd985c5959bBB382BAFdD0b879E149e48116c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xc6A8d2c5d0F068BE745f6A770378F01ca1714cc4"],
              "implementations": ["0x436e9FC7894e26718637f086d42B4a06439C8ae0"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xc6A8d2c5d0F068BE745f6A770378F01ca1714cc4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SystemConfig, L2OutputOracle, OptimismPortal.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xD0204B9527C1bA7bD765Fa5CCD9355d38338272b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xc6A8d2c5d0F068BE745f6A770378F01ca1714cc4"],
              "implementations": ["0x459bA3BD8fb18CCBf557Ae9Fab13ceD2542B0d8E"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Public Goods Network Launch",
          "link": "https://twitter.com/pgn_eth/status/1676972199423668228",
          "date": "2023-07-06T00:00:00.00Z",
          "description": "The Public Goods Network is live on mainnet.",
          "type": "general"
        },
        {
          "name": "PGN switches to Celestia",
          "link": "https://x.com/conduitxyz/status/1750596065609572398",
          "date": "2024-01-26T00:00:00.00Z",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "Superchain", "Conduit", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "publicgoodsnetwork",
        "name": "Public Goods Network",
        "shortName": "PGN",
        "slug": "publicgoodsnetwork",
        "description": "Public Goods Network is an OP stack chain focused on funding public goods.",
        "links": {
          "websites": ["https://publicgoods.network/"],
          "apps": ["https://bridge.publicgoods.network/"],
          "documentation": ["https://docs.publicgoods.network/"],
          "explorers": [
            "https://explorer.publicgoods.network",
            "https://pgn.superscan.network"
          ],
          "repositories": [
            "https://github.com/supermodularxyz/pgn-monorepo",
            "https://github.com/supermodularxyz/pgn-docs"
          ],
          "socialMedia": ["https://twitter.com/pgn_eth"]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xb26Fd985c5959bBB382BAFdD0b879E149e48116c",
            "newVersion": true,
            "sinceTimestamp": "1689106847",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xb26Fd985c5959bBB382BAFdD0b879E149e48116c",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xc6A8d2c5d0F068BE745f6A770378F01ca1714cc4"],
                "implementations": [
                  "0x436e9FC7894e26718637f086d42B4a06439C8ae0"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xD0204B9527C1bA7bD765Fa5CCD9355d38338272b",
            "newVersion": true,
            "sinceTimestamp": "1689106811",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xD0204B9527C1bA7bD765Fa5CCD9355d38338272b",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xc6A8d2c5d0F068BE745f6A770378F01ca1714cc4"],
                "implementations": [
                  "0x459bA3BD8fb18CCBf557Ae9Fab13ceD2542B0d8E"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.publicgoods.network",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": {
        "nodeSoftware": "The rollup node is composed of two software components: [op-node](https://github.com/ethereum-optimism/optimism/tree/develop/op-node), implementing consensus related logic, and [op-geth](https://github.com/ethereum-optimism/op-geth), implementing execution logic. The configuration file can be found [here](https://github.com/ethereum-optimism/superchain-registry/blob/v0.1.1/superchain/configs/mainnet/pgn.yaml).",
        "compressionScheme": "Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.",
        "genesisState": "The genesis file can be found [here](https://github.com/ethereum-optimism/superchain-registry/tree/main/superchain/extra/genesis/mainnet).",
        "dataFormat": "The format specification of Sequencer's data batches can be found [here](https://blog.oplabs.co/reproduce-bedrock-migration/)."
      },
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "puffer",
      "createdAt": "1729172001",
      "display": {
        "name": "Puffer UniFi",
        "slug": "puffer",
        "description": "UniFi by the Puffer team is their planned flagship based rollup using the Puffer AVS for preconfirmations to explore better UX, security and native yield for users.",
        "purposes": ["Universal", "Restaking"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://puffer.fi/"],
          "apps": ["https://quest.puffer.fi/unifi"],
          "documentation": ["https://docs.puffer.fi/unifi-based-rollup/"],
          "explorers": [],
          "repositories": ["https://github.com/PufferFinance"],
          "socialMedia": [
            "https://x.com/puffer_unifi",
            "https://discord.com/invite/pufferfi",
            "https://medium.com/puffer-fi"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isArchived": true,
      "type": "layer2",
      "id": "reddioex",
      "createdAt": "1623153328",
      "badges": ["AppChain", "DAC", "StarkEx", "SHARP"],
      "display": {
        "name": "RedSonic",
        "slug": "redsonic",
        "headerWarning": "This project was sunset on 2024-09-20 and deposits after that time may not be recoverable.",
        "description": "RedSonic is a Validium based on the StarkEx technology. Its goal is to power the next generation Web3 apps and games by providing developers with the APIs and SDKs to create digital assets and easily integrate them in-app and in-game.",
        "purposes": ["Exchange", "NFT", "Gaming"],
        "provider": "StarkEx",
        "category": "Validium",
        "links": {
          "websites": ["https://reddio.com/"],
          "apps": [
            "https://reddio.com/explore",
            "https://dashboard.reddio.com",
            "https://bridge.reddio.com",
            "https://reddio.com/redSonic",
            "https://points.reddio.com"
          ],
          "documentation": ["https://docs.reddio.com/"],
          "explorers": ["https://explorer.reddio.com/"],
          "repositories": [
            "https://github.com/reddio-com/starkex-contracts-source"
          ],
          "socialMedia": [
            "https://twitter.com/reddio_com",
            "https://facebook.com/reddiocom",
            "https://linkedin.com/company/reddio",
            "https://discord.com/invite/SjNAJ4qkK3"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "escrows": [
          {
            "address": "0xB62BcD40A24985f560b5a9745d478791d8F1945C",
            "newVersion": true,
            "sinceTimestamp": "1663498763",
            "tokens": ["ETH", "USDC", "USDT"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xB62BcD40A24985f560b5a9745d478791d8F1945C",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": ["0x6b7763b749073e892c83E674c1EC4799D6f339Ef"],
                "implementations": [
                  "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                  "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                  "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                  "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                  "0x613ee54C54D5548627064B4D648942bF3648f376",
                  "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                  "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "Main StarkEx contract, used also as an escrow.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "2/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 2/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 2/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1,
          "sources": [
            {
              "contract": "StarkExchange",
              "references": [
                "https://etherscan.io/address/0x67e198743BC19fa4757720eDd0e769f8291e1F1D#code#F14#L188"
              ]
            },
            {
              "contract": "Committee",
              "references": [
                "https://etherscan.io/address/0x4b2Bf1Cb06CB636e8A14540F76c477E61d8B6669#code#F2#L61"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 7d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 604800
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds. NFTs will be minted on L1 to exit.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. When withdrawing NFTs they are minted on L1.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/withdrawal.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchange",
            "address": "0xB62BcD40A24985f560b5a9745d478791d8F1945C",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": ["0x6b7763b749073e892c83E674c1EC4799D6f339Ef"],
              "implementations": [
                "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                "0x613ee54C54D5548627064B4D648942bF3648f376",
                "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
              ],
              "immutable": false
            },
            "chain": "ethereum"
          },
          {
            "name": "Committee",
            "address": "0x4b2Bf1Cb06CB636e8A14540F76c477E61d8B6669",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governor",
          "accounts": [
            {
              "address": "0x6b7763b749073e892c83E674c1EC4799D6f339Ef",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "Data Availability Committee",
          "accounts": [
            {
              "address": "0x81165b6504520416487E5b4935865b4D3eeaa6e5",
              "type": "EOA"
            },
            {
              "address": "0x9eA52Cf33f7e52D24E205EF5fc5Fc425e9BeB8a0",
              "type": "EOA"
            }
          ],
          "minSigners": 2,
          "minAssumedHonestMembers": 1,
          "description": "Validity proof must be signed by at least 2 of these addresses to approve state update."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
              "type": "EOA"
            },
            {
              "address": "0x2e1c08E457F0E0F462Ef99eC9271dc5BfAd88b2a",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update the state. When the Operator is down the state cannot be updated."
        }
      ],
      "milestones": [
        {
          "name": "Reddio Announces Mainnet Launch",
          "link": "https://blog.reddio.com/announces-layer2-zkrollup-mainnet-launch/",
          "date": "2022-09-29T00:00:00Z",
          "description": "Reddio announces its Validium Mainnet launch.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "reddiozkvm",
      "createdAt": "1704460390",
      "display": {
        "name": "Reddio zkVM",
        "slug": "reddiozkvm",
        "description": "Reddio zkVM is an upcoming ZK Rollup focused on general use cases like Games and Apps, powered by Starknet Stack.",
        "purposes": ["Universal", "Gaming"],
        "category": "ZK Rollup",
        "provider": "Starknet",
        "links": {
          "websites": ["https://reddio.com"],
          "apps": [],
          "documentation": [
            "https://docs.reddio.com/guide/starknet/smart-contracts/overview.html"
          ],
          "explorers": [],
          "repositories": [
            "https://github.com/reddio-com/starknet-appchain-utils"
          ],
          "socialMedia": [
            "https://twitter.com/reddio_com",
            "https://facebook.com/reddiocom",
            "https://linkedin.com/company/reddio"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] }
    },
    {
      "type": "layer2",
      "id": "redstone",
      "createdAt": "1714996778",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xB78071f03F4D7601129773070F2Dde6184e1BD87#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data required to compute fraud proof is published offchain without onchain attestations",
          "description": "Redstone relies on DA challenges for data availability. If a DA challenger finds that the data behind a tx data commitment is not available, they can submit a challenge which requires locking a bond within 12h. A challenge can be resolved by publishing the preimage data within an additional 12h. In such case, a portion of the challenger bond is burned, with the exact amount estimated as the cost incurred by the resolver to publish the full data, meaning that the resolver and challenger will approximately lose the same amount of funds. The system is not secure if the malicious sequencer is able to outspend the altruistic challengers. If instead, after a challenge, the preimage data is not published, the chain reorgs to the last fully derivable state.",
          "references": [
            {
              "text": "OP Plasma specification",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/experimental/alt-da.md"
            },
            {
              "text": "Universal Plasma and DA Challenges - Ethresear.ch",
              "href": "https://ethresear.ch/t/universal-plasma-and-da-challenges/18629"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xff00000000000000000000000000000000000690"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xD0e1065F2A941Dd723F800C34D2D4282C3158A00#code"
            }
          ],
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the sequencer is malicious and is able to economically outspend the altruistic challengers."
            },
            {
              "category": "Funds can be stolen if",
              "text": "there is no challenger willing to challenge unavailable data commitments."
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xB78071f03F4D7601129773070F2Dde6184e1BD87#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xB78071f03F4D7601129773070F2Dde6184e1BD87#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xD0e1065F2A941Dd723F800C34D2D4282C3158A00#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xD0e1065F2A941Dd723F800C34D2D4282C3158A00#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xD0e1065F2A941Dd723F800C34D2D4282C3158A00#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xB78071f03F4D7601129773070F2Dde6184e1BD87#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "ProxyAdmin",
          "accounts": [
            {
              "address": "0xCC53b447aFe07926423aB96D5496b1af30485ED2",
              "type": "Contract"
            }
          ],
          "description": "Owner of AddressManager. Admin of OptimismPortal, SystemConfig, L2OutputOracle, L1ERC721Bridge, OptimismMintableERC20Factory, L1StandardBridge.",
          "chain": "ethereum"
        },
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0xA31cb9Bc414601171D4537580f98F66C03aECd43",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to commit L2 transactions to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Proposer",
          "accounts": [
            {
              "address": "0x4c465E58946145bb2BFC38833154f5A3B5728CF7",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to post new L2 state roots to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Challenger",
          "accounts": [
            {
              "address": "0xb356B146F1629c49C44344464F69BCDAfb4bb664",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to delete L2 state roots proposed by a Proposer.",
          "chain": "ethereum"
        },
        {
          "name": "Guardian",
          "accounts": [
            {
              "address": "0xb356B146F1629c49C44344464F69BCDAfb4bb664",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to pause deposits and withdrawals.",
          "chain": "ethereum"
        },
        {
          "name": "ProxyAdminOwner",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Owner of the ProxyAdmin and the rollup system. It can upgrade the bridge implementation potentially gaining access to all funds, and change any system component.",
          "accounts": [
            {
              "address": "0x70FdbCb066eD3621647Ddf61A1f40aaC6058Bc89",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x5DeB7dD12ccF0BFb3b2D26D0A4f302Fb6ACBdcA8",
              "type": "EOA"
            },
            {
              "address": "0x61fB1FDA30c900404CDfa22D3eAdCA86FdB95450",
              "type": "EOA"
            },
            {
              "address": "0x7211399b320a0417286897fCeD1ee4ba1C1771d4",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "DataAvailabilityChallenge owner",
          "accounts": [
            {
              "address": "0xb356B146F1629c49C44344464F69BCDAfb4bb664",
              "type": "EOA"
            }
          ],
          "description": "Owner of the DataAvailabilityChallenge contract. It can upgrade the contract params, potentially making the system insecure."
        },
        {
          "name": "SystemConfig owner",
          "description": "Account privileged to change System Config parameters such as Sequencer Address and gas limit.",
          "accounts": [
            {
              "address": "0xb356B146F1629c49C44344464F69BCDAfb4bb664",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0xa426A052f657AEEefc298b3B5c35a470e4739d69",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
              "implementations": ["0xB78071f03F4D7601129773070F2Dde6184e1BD87"]
            },
            "chain": "ethereum",
            "description": "The L2OutputOracle contract contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0xC7bCb0e8839a28A1cFadd1CF716de9016CdA51ae",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
              "implementations": ["0xD0e1065F2A941Dd723F800C34D2D4282C3158A00"]
            },
            "chain": "ethereum",
            "description": "The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x8f2428F7189c0d92D1c4a5358903A8c80Ec6a69D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
              "implementations": ["0xd20eF07Ca38301735782e3B89c0E192fD8Ec002d"]
            },
            "chain": "ethereum",
            "description": "It contains configuration parameters such as the Sequencer address, the L2 gas limit and the unsafe block signer address.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x592C1299e0F8331D81A28C0FC7352Da24eDB444a",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x17AaA27ecEc9a0c530e6Dbd086b6049DCF6D9382"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "The L1CrossDomainMessenger (L1xDM) contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xc473ca7E02af24c129c2eEf51F2aDf0411c1Df69",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
              "implementations": ["0x49b20cBfA1d582475b2466A784B91dEe4549C737"]
            },
            "chain": "ethereum",
            "description": "The L1StandardBridge contract is the main entry point to deposit ERC20 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x4FFB98dBC3086bA85d5E626a6EbC3D0d08533fF4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
              "implementations": ["0x91Cb4eb84F7117196B1c117C7705F2eAF55AfA16"]
            },
            "chain": "ethereum",
            "description": "The L1ERC721Bridge contract is used to bridge ERC-721 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DataAvailabilityChallenge",
            "address": "0x97A2dA87d3439b172e6DD027220e01c9Cb565B80",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
              "implementations": ["0xba2507dbC415e0D0fa3AA10C2D4559049A93d946"]
            },
            "chain": "ethereum",
            "description": "The DataAvailabilityChallenge contract is used to challenge the data availability of tx data hashes. See the technology section for more details."
          },
          {
            "name": "SuperchainConfig",
            "address": "0x4b5b41c240173191425F5928bc6bdd0d439331BB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
              "implementations": ["0x45920c2242a7F2121716431Dd7c2d68740726934"]
            },
            "chain": "ethereum",
            "description": "Upgradable contract that manages the PAUSED_SLOT, a boolean value indicating whether the Superchain is paused, and GUARDIAN_SLOT, the address of the guardian which can pause and unpause the system. The address of the guardian can only be modified by the ProxyAdmin by upgrading the SuperchainConfig contract. This contract is a fork of Optimism's superchainConfig contract and it's unrelated to the one used by the Superchain."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["CustomDA", "Superchain", "OPStack", "EVM"],
      "discoveryDrivenData": null,
      "display": {
        "purposes": ["Universal", "Gaming"],
        "architectureImage": "redstone",
        "name": "Redstone",
        "slug": "redstone",
        "description": "Redstone is a chain built for onchain games and autonomous worlds running MUD. It's an implementation of OP Plasma with DA challenges.",
        "links": {
          "websites": ["https://redstone.xyz/"],
          "apps": ["https://redstone.xyz/deposit"],
          "documentation": ["https://redstone.xyz/docs"],
          "explorers": ["https://explorer.redstone.xyz/"],
          "repositories": ["https://github.com/latticexyz/redstone"],
          "socialMedia": [
            "https://twitter.com/redstonexyz",
            "https://discord.com/invite/latticexyz"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xC7bCb0e8839a28A1cFadd1CF716de9016CdA51ae",
            "newVersion": true,
            "sinceTimestamp": "1712184551",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xC7bCb0e8839a28A1cFadd1CF716de9016CdA51ae",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
                "implementations": [
                  "0xD0e1065F2A941Dd723F800C34D2D4282C3158A00"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xc473ca7E02af24c129c2eEf51F2aDf0411c1Df69",
            "newVersion": true,
            "sinceTimestamp": "1712184575",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xc473ca7E02af24c129c2eEf51F2aDf0411c1Df69",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xCC53b447aFe07926423aB96D5496b1af30485ED2"],
                "implementations": [
                  "0x49b20cBfA1d582475b2466A784B91dEe4549C737"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.redstonechain.com",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "RedstoneDA",
          "sentiment": "warning",
          "description": "The data is posted to RedstoneDA which is a separate data availability module developed by the Redstone team. Data is posted off chain, and only hashes of data are published on an on chain inbox."
        },
        "bridge": {
          "value": "None + DA challenges",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available. However, there is a mechanism that allows users to challenge unavailability of data."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely on data that is NOT published onchain. Redstone uses a custom data availability provider without attestations, relying though on DA challenges.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "real",
      "createdAt": "1717598702",
      "contracts": {
        "addresses": [
          {
            "name": "StrategyManager",
            "address": "0x5Cba18d504D4158dC1A18C5Dc6BB2a30B230DdD8",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "A gateway contract that manages strategies for assets that are deposited to the AssetsVault. From a user PoV this happens when bridging to the L2."
          },
          {
            "name": "SwapManager",
            "address": "0x4AC36E1Fa7daBeFEc885f30B163c571080b2c335",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Performs swaps via Curve or UniswapV3 to serve instant withdrawals from the reETH RealVault."
          },
          {
            "name": "RealVault",
            "address": "0xFC1db08622e81b2AFd643318f6B8B79E9980A5e1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "This contract is responsible for managing deposit, withdrawal, and settlement processes for the assets backing reETH using the ERC4626 (tokenized vault) standard."
          },
          {
            "name": "AssetsVault",
            "address": "0xf985E2c73d74BefF3C8c16EFC4fa5ab4cfb62294",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "This escrow contract receives ETH that users bridge to Re.al L2. This ETH is then converted to yielding assets using the StrategyManager."
          },
          {
            "name": "Bridger",
            "address": "0xbf2F26cadbC10C4d61ac7e424D514d79a12126f8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeB658c4Ea908aC4dAF9c309D8f883d6aD758b3A3"],
              "implementations": ["0x977cA9732E618D32552BA16a52f258cEFadf970a"]
            },
            "chain": "ethereum",
            "description": "A Routing contract to the standard orbit stack bridge of the L2.",
            "upgradableBy": ["Bridger Owner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "RollupProxy",
            "address": "0xc4F7B37bE2bBbcF07373F28c61b1A259dfe49d2a",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xD6A4868a15d98b0BF4E9063BE707B4b89D067C3a"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x39D2EEcC8B55f46aE64789E2494dE777cDDeED03",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB032ff02cd6425e4b816137207AA8560932180f1"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x51C4a227D59E49E26Ea07D8e4E9Af163da4c87A0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB032ff02cd6425e4b816137207AA8560932180f1"],
              "implementations": ["0x873484Ba63353C8b71210ce123B465512d408B27"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xf538671ddd60eE54BdD6FBb0E309c491A7A2df11",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB032ff02cd6425e4b816137207AA8560932180f1"],
              "implementations": ["0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x8592Ca44dE1D354A20F75160F5602E5933D33761",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB032ff02cd6425e4b816137207AA8560932180f1"],
              "implementations": ["0x19431dc37098877486532250FB3158140717C00C"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xD6A4868a15d98b0BF4E9063BE707B4b89D067C3a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB032ff02cd6425e4b816137207AA8560932180f1"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x369001149fe80892665a7b0c17fe8Db6BeFC7F5d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB032ff02cd6425e4b816137207AA8560932180f1"],
              "implementations": ["0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x09824fe72BFF474d16D9c2774432E381BBD60662",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xDf94F0474F205D086dbc2e66D69a856FCf520622",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "real",
        "chainId": 111188,
        "explorerUrl": "https://explorer.re.al",
        "explorerApi": {
          "url": "https://explorer.re.al/api",
          "type": "blockscout"
        },
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 695,
            "version": "3"
          }
        ],
        "minTimestampForTvl": "1710580715",
        "coingeckoPlatform": "re-al"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 2.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x873484Ba63353C8b71210ce123B465512d408B27#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x0e00df1afC8574762Ac4C4D8E5D1a19bD6A8Fa2E",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x4b8Fbc3006F256dd470B070d6c70fAb413Fceb62",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "GelatoMultisig",
          "description": "This is a Gnosis Safe with 6 / 9 threshold.  Multisig that can execute upgrades of the L2 system contracts via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xB0C2CBFfCd4C31AFFEe14993b6d48f99D285f621",
              "type": "EOA"
            },
            {
              "address": "0x28bB9385A588EF4747264D19B9A9F1603591680c",
              "type": "EOA"
            },
            {
              "address": "0x691C2EF68e25E620fa6cAdE2728f6aE34F37aAD2",
              "type": "EOA"
            },
            {
              "address": "0x5bE3E96Cdc3A97628bD7308d3588B9a474F4A54d",
              "type": "EOA"
            },
            {
              "address": "0xBc0ca6865d6883a83D4aDDD6b862aE042d855E0d",
              "type": "EOA"
            },
            {
              "address": "0xc85aC6d2fdC376F335455D4cCA30c45ED1080849",
              "type": "EOA"
            },
            {
              "address": "0x01a0A7BaAAca31AFB5b770FeFD69CE4917D9c32e",
              "type": "EOA"
            },
            {
              "address": "0xf83bC4688979b13Da02CB94c76cEB169540760b5",
              "type": "EOA"
            },
            {
              "address": "0x547D0F472309e4239b296D01e03bEDc101241a26",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EscrowMultisig",
          "description": "This is a Gnosis Safe with 4 / 5 threshold.  Multisig that owns reETH-strategy and escrow-related contracts and can move deposited funds. Also governs the reETH token as a minter.",
          "accounts": [
            {
              "address": "0xD47E2043C1eCbeF215D89EE667D09A7aA56823d4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x240B5E0746eda8cBc137Fc67210532a1D2B5b82A",
              "type": "EOA"
            },
            {
              "address": "0xf16Df80dBA33bB54018F99A3679801Bc9cA14Fe0",
              "type": "EOA"
            },
            {
              "address": "0x6bD40C6f7849160FE217D07a73E15f4ef8222283",
              "type": "EOA"
            },
            {
              "address": "0xFbce8758DBF56d574A80fa3A6AB27275a8F1EF6A",
              "type": "EOA"
            },
            {
              "address": "0x7cFaD85633CD000c83Fcf99a678044dDC14125bD",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Bridger Owner",
          "accounts": [
            {
              "address": "0xeB658c4Ea908aC4dAF9c309D8f883d6aD758b3A3",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade the Bridger contract."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Re.al Mainnet Launch",
          "link": "https://mirror.xyz/0xBE105a62f39a2E0b09772C49E3EcF6ef21BEd85C/FL4Ewx3CKsFEfMFsU7DZ-cIdhZc05aChfASQ1t-SQ-A",
          "date": "2024-05-15T00:00:00Z",
          "description": "Re.al launches its mainnet with some initial dapps deployed.",
          "type": "general"
        },
        {
          "name": "Arcana Launch",
          "link": "https://mirror.xyz/0xBE105a62f39a2E0b09772C49E3EcF6ef21BEd85C/t3MsS-cCeJJD4ljXgQef3U01t564VL2h_au6iM6rBk4",
          "date": "2024-05-15T00:00:00Z",
          "description": "Arcana launches their platform for rebasing, delta-neutral yields on re.al.",
          "type": "general"
        },
        {
          "name": "RWA Token Launch",
          "link": "https://mirror.xyz/0xBE105a62f39a2E0b09772C49E3EcF6ef21BEd85C/eUmaidSfGSsjKKzepfyus6YSMog_FRdAQ6q5bsRoF7Y",
          "date": "2024-05-15T00:00:00Z",
          "description": "Re.al launches the RWA token and its governance protocol.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": null,
      "badges": ["DAC", "Gelato", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "RWA"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Re.al",
        "slug": "real",
        "description": "Re.al is an Arbitrum Orbit stack L2 with AnyTrust data availability, focusing on Real World Assets.",
        "links": {
          "websites": ["https://re.al"],
          "apps": ["https://re.al/bridge/", "https://re.al/app/bridge/"],
          "documentation": ["https://docs.re.al/"],
          "explorers": ["https://explorer.re.al"],
          "repositories": ["https://github.com/re-al-Foundation"],
          "socialMedia": [
            "https://x.com/real_rwa",
            "https://discord.gg/cKCCCFXvWj",
            "https://mirror.xyz/0xBE105a62f39a2E0b09772C49E3EcF6ef21BEd85C"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["RWA"],
        "escrows": [
          {
            "address": "0x39D2EEcC8B55f46aE64789E2494dE777cDDeED03",
            "newVersion": true,
            "sinceTimestamp": "1710580715",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x39D2EEcC8B55f46aE64789E2494dE777cDDeED03",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xB032ff02cd6425e4b816137207AA8560932180f1"],
                "implementations": [
                  "0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xfC89B875970122E24C6C5ADd4Dea139443943ea7",
            "newVersion": true,
            "sinceTimestamp": "1710845159",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xfC89B875970122E24C6C5ADd4Dea139443943ea7",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xB032ff02cd6425e4b816137207AA8560932180f1"],
                "implementations": [
                  "0xe80b4E0ed5e92d865F4708eeE0E1564287a7D848"
                ]
              },
              "chain": "ethereum",
              "description": "Default Gateway for non-native tokens. On depositing, a generic 'wrapped' version of the escrowed token is minted on the L2.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x679D4C1cC6855C57726BEA1784F578315d6431f6",
            "newVersion": true,
            "sinceTimestamp": "1715706239",
            "tokens": ["stETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x679D4C1cC6855C57726BEA1784F578315d6431f6",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "This contract escrows the stETH that was deposited to mint reETH.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://real.drpc.org",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "type": "layer2",
      "id": "reya",
      "createdAt": "1715019483",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x448Bbd134dE1B23976073aB4F2915849b2dcD73A",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x07390626b8Bc2C04b1D93c7D246A0629198D7868"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x383c03c4EfF819E73409DbC690755a9992393814",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74627dd54FA6E94c87F12DBAdAEc275758f51dF9"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x6CA2A628fb690Bd431F4aA608655ce37c66aff9d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74627dd54FA6E94c87F12DBAdAEc275758f51dF9"],
              "implementations": ["0x873484Ba63353C8b71210ce123B465512d408B27"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x672109752635177ebcb17F2C7e04575A709014BD",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74627dd54FA6E94c87F12DBAdAEc275758f51dF9"],
              "implementations": ["0x1162084C3C6575121146582Db5BE43189e8CEe6b"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x3f373b0A7DcEe7b7bCfC16DF85CfAE18388542c9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74627dd54FA6E94c87F12DBAdAEc275758f51dF9"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x07390626b8Bc2C04b1D93c7D246A0629198D7868",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74627dd54FA6E94c87F12DBAdAEc275758f51dF9"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x728B406A4809118533D96bB3b5C50712C99d8Fa5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x74627dd54FA6E94c87F12DBAdAEc275758f51dF9"],
              "implementations": ["0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x09824fe72BFF474d16D9c2774432E381BBD60662",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xDf94F0474F205D086dbc2e66D69a856FCf520622",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "reya",
        "chainId": 1729,
        "explorerUrl": "https://explorer.reya.network",
        "explorerApi": {
          "url": "https://explorer.reya.network/api",
          "type": "blockscout"
        },
        "multicallContracts": [],
        "minTimestampForTvl": "1713830400"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 2.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x873484Ba63353C8b71210ce123B465512d408B27#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xf5636Df6f86f31668aeAe9bB8a1C4F0ED147926a",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x6106B6480DE82E3eC2680d7c61A9D18d71Bf9122",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "GelatoMultisig",
          "description": "This is a Gnosis Safe with 6 / 9 threshold.  Multisig that can execute upgrades via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0xBeA2Bc852a160B8547273660E22F4F08C2fa9Bbb",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xB0C2CBFfCd4C31AFFEe14993b6d48f99D285f621",
              "type": "EOA"
            },
            {
              "address": "0x28bB9385A588EF4747264D19B9A9F1603591680c",
              "type": "EOA"
            },
            {
              "address": "0x691C2EF68e25E620fa6cAdE2728f6aE34F37aAD2",
              "type": "EOA"
            },
            {
              "address": "0x5bE3E96Cdc3A97628bD7308d3588B9a474F4A54d",
              "type": "EOA"
            },
            {
              "address": "0xBc0ca6865d6883a83D4aDDD6b862aE042d855E0d",
              "type": "EOA"
            },
            {
              "address": "0xc85aC6d2fdC376F335455D4cCA30c45ED1080849",
              "type": "EOA"
            },
            {
              "address": "0x01a0A7BaAAca31AFB5b770FeFD69CE4917D9c32e",
              "type": "EOA"
            },
            {
              "address": "0xf83bC4688979b13Da02CB94c76cEB169540760b5",
              "type": "EOA"
            },
            {
              "address": "0x547D0F472309e4239b296D01e03bEDc101241a26",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Reya DEX launch",
          "link": "https://x.com/reya_xyz/status/1793296498727485712",
          "date": "2024-05-21T00:00:00Z",
          "description": "Reya DEX launches with Perpetual trading available for ETH and BTC.",
          "type": "general"
        },
        {
          "name": "Reya LGE",
          "link": "https://medium.com/@reyalabs123/reya-network-the-first-trading-optimised-l2-liquidity-generation-event-launch-f3cd958302ec",
          "date": "2024-04-22T00:00:00Z",
          "description": "Reya launches with a Liquidity Generation Event (LGE) where users can provide USDC to the network.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": null,
      "badges": ["DAC", "Gelato", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "Reya",
        "slug": "reya",
        "description": "Reya is an Arbitrum Orbit stack L2 with AnyTrust data availability, optimizing for trading and liquidity provision.",
        "links": {
          "websites": ["https://reya.network/"],
          "apps": [
            "https://reya.network/lge",
            "https://bridge.gelato.network/bridge/reya-network"
          ],
          "documentation": ["https://docs.reya.network/"],
          "explorers": ["https://explorer.reya.network/"],
          "repositories": ["https://github.com/Reya-Labs"],
          "socialMedia": [
            "https://twitter.com/Reya_xyz",
            "https://discord.gg/reyaxyz",
            "https://medium.com/@reyalabs123"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x383c03c4EfF819E73409DbC690755a9992393814",
            "newVersion": true,
            "sinceTimestamp": "1709380607",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x383c03c4EfF819E73409DbC690755a9992393814",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x74627dd54FA6E94c87F12DBAdAEc275758f51dF9"],
                "implementations": [
                  "0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.reya.network",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "type": "layer2",
      "id": "deversifi",
      "createdAt": "1623153328",
      "badges": ["AppChain", "DAC", "StarkEx", "SHARP"],
      "display": {
        "name": "rhino.fi",
        "slug": "rhinofi",
        "description": "rhino.fi is a Validium based on the StarkEx technology.",
        "purposes": ["Exchange"],
        "provider": "StarkEx",
        "category": "Validium",
        "links": {
          "websites": ["https://rhino.fi/"],
          "apps": ["https://app.rhino.fi/"],
          "documentation": [
            "https://docs.rhino.fi/",
            "https://support.rhino.fi/en/",
            "https://docs.starkware.co/starkex/index.html"
          ],
          "explorers": [],
          "repositories": [
            "https://github.com/starkware-libs/starkex-contracts",
            "https://github.com/rhinofi"
          ],
          "socialMedia": [
            "https://rhino.fi/blog",
            "https://twitter.com/rhinofi",
            "https://linkedin.com/company/rhinofi/",
            "https://youtube.com/c/rhinofi",
            "https://discord.com/invite/26sXx2KAhy"
          ]
        },
        "activityDataSource": "Closed API"
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": ["DVF"],
        "escrows": [
          {
            "address": "0x5d22045DAcEAB03B158031eCB7D9d06Fad24609b",
            "sinceTimestamp": "1590491810",
            "tokens": "*",
            "chain": "ethereum"
          }
        ],
        "transactionApi": {
          "type": "starkex",
          "product": ["rhinofi"],
          "sinceTimestamp": "1590491810",
          "resyncLastDays": 7
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "4/7 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 4/7 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 4/7 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5714285714285714,
          "sources": [
            {
              "contract": "StarkExchange",
              "references": [
                "https://etherscan.io/address/0x67e198743BC19fa4757720eDd0e769f8291e1F1D#code#F34#L183"
              ]
            },
            {
              "contract": "Committee",
              "references": [
                "https://etherscan.io/address/0x28780349A33eEE56bb92241bAAB8095449e24306#code#F1#L63"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable. Users can be explicitly censored from withdrawing (Blocklist on L1).",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 7d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 604800
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/withdrawal-perpetual.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"
              },
              {
                "text": "Forced Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"
              },
              {
                "text": "Forced Trade - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"
              },
              {
                "text": "Forced Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"
              },
              {
                "text": "Forced Trade - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"
              }
            ]
          },
          {
            "name": "Blocklist",
            "description": "The BlockAdmin (see Permissions section) can add addresses to a Blocklist, preventing the finalization of their withdrawal on L1. This effectively locks the blocked party's funds in the bridge escrow on L1 if the withdrawal had already been initiated on L2. The Blocklist is also effective on forced withdrawals.",
            "risks": [
              {
                "category": "Users can be censored if",
                "text": "their address gets added to the Blocklist by the BlockAdmin."
              }
            ],
            "references": [
              {
                "text": "Blocklist - Implementation on etherscan",
                "href": "https://etherscan.io/address/0x5524cB52490e01CBa4EB64F230CC661780cB6298#code#F4#L33"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchange",
            "address": "0x5d22045DAcEAB03B158031eCB7D9d06Fad24609b",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": ["0xCCa5De1e10c05c50C51ac551D9182cd31aca1889"],
              "implementations": [
                "0x29Db022dbc824b78A0dA699a77E3d177f08A1191",
                "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                "0x5524cB52490e01CBa4EB64F230CC661780cB6298",
                "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                "0x613ee54C54D5548627064B4D648942bF3648f376",
                "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
              ],
              "immutable": false
            },
            "chain": "ethereum"
          },
          {
            "name": "Committee",
            "address": "0x28780349A33eEE56bb92241bAAB8095449e24306",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governors",
          "accounts": [
            {
              "address": "0xCCa5De1e10c05c50C51ac551D9182cd31aca1889",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade the implementation of the system, potentially gaining access to all funds stored in the bridge. Currently there is 3d delay before the upgrade."
        },
        {
          "name": "GovernanceMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  Has full power to upgrade the bridge implementation as a Governor.",
          "accounts": [
            {
              "address": "0xCCa5De1e10c05c50C51ac551D9182cd31aca1889",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6Db55792263D558d9c98B740f8cB5E8a2e02Ec05",
              "type": "EOA"
            },
            {
              "address": "0x478615F37FcCB0DF69C191a8674233f6899D092e",
              "type": "EOA"
            },
            {
              "address": "0x0fa6bf3377Cfa276d9d7122c09C187e5e8ef1C59",
              "type": "EOA"
            },
            {
              "address": "0x611F96c83fE0A30B504Ee2C6a2Cae890e620bA35",
              "type": "EOA"
            },
            {
              "address": "0x445EEDE2681116Dd94C8D5Bfab73283B3ef1f6f3",
              "type": "EOA"
            },
            {
              "address": "0x8501cFEE1715F5BC771cC65997F2A655f234e9Ef",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Data Availability Committee",
          "accounts": [
            {
              "address": "0x6A8EA587133c1aA4b3bA0417b6d8AE38E61fd1E4",
              "type": "EOA"
            },
            {
              "address": "0x3Bf2562178eA0CeF6B3F66D971494d65561EFD36",
              "type": "EOA"
            },
            {
              "address": "0xf872Cf881873029B8955b582c29b66347f3f1326",
              "type": "EOA"
            },
            {
              "address": "0x70EEAA8b7CbF7124e349e94EaDE6188DDd2d6178",
              "type": "EOA"
            },
            {
              "address": "0x51AbdE72a4542500a7b1Cb32B18b13fbe1F9ff2E",
              "type": "EOA"
            },
            {
              "address": "0x2b6593FcFbfdeD663D7a6448d45b12C16DF6B648",
              "type": "EOA"
            },
            {
              "address": "0xFBD7599fe0C3735b94c369aDF0F0045D8D4f6cB9",
              "type": "EOA"
            }
          ],
          "minSigners": 4,
          "minAssumedHonestMembers": 4,
          "description": "Validity proof must be signed by at least 4 of these addresses to approve state update."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0x8A6c80Aab6497E2DB35817817b593b79D78f6ae5",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update the state of the system. When the Operator is down the state cannot be updated."
        },
        {
          "name": "DeversiFiTreasuryMultisig",
          "accounts": [
            {
              "address": "0x520Cf70a2D0B3dfB7386A2Bc9F800321F62a5c3a",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Is the BlockAdmin: Can add owner keys to a blocklist in the bridge, blocking their withdrawals on L1. After 2 weeks, this multisig can manually withdraw even for blocked actors."
        }
      ],
      "milestones": [
        {
          "name": "Rebranding",
          "date": "2022-07-13T00:00:00Z",
          "link": "https://rhino.fi/blog/introducing-rhino-fi-the-first-frictionless-gateway-to-multi-chain-defi/",
          "description": "DeversiFi becomes rhino.fi: multi-chain platform gathering DeFi in one place.",
          "type": "general"
        },
        {
          "name": "DeversiFi Relaunched using Starkware",
          "date": "2020-06-03T00:00:00Z",
          "link": "https://rhino.fi/blog/introducing-rhino-fi-the-first-frictionless-gateway-to-multi-chain-defi/",
          "description": "DeversiFi is live, bringing first STARKex Validium for spot trading.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "rise",
      "createdAt": "1713776957",
      "display": {
        "name": "RISE",
        "slug": "rise",
        "description": "RISE is a Parallel EVM Rollup that intends to unlock a new era of performance for Ethereum.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://riselabs.xyz/"],
          "apps": [],
          "documentation": ["https://docs.riselabs.xyz/"],
          "explorers": [],
          "repositories": ["https://github.com/risechain"],
          "socialMedia": [
            "https://discord.com/invite/4yWVabz63y",
            "https://medium.com/@rise_chain",
            "https://x.com/rise_chain"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "rss3",
      "createdAt": "1705391231",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x5Fe6BFbb2C2c78c0baF0bFbb86420903E2E9f8a5#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data required to compute fraud proof is not published on chain, and currently not publicly accessible",
          "description": "Transaction data is submitted to a blob store contract on NearDA. Only hashes of blob data is published on an onchain inbox.",
          "references": [
            {
              "text": "REP-20 - Data Availability Layer Integration",
              "href": "https://github.com/RSS3-Network/REPs/blob/main/REPs/REP-20.md"
            },
            {
              "text": "RSS3 NearDA blob store contract",
              "href": "https://nearblocks.io/address/vsl-da.near"
            },
            {
              "text": "On-Chain Inbox",
              "href": "https://etherscan.io/address/0xfFFF000000000000000000000000000000012553"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xfFFF000000000000000000000000000000012553"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xc5b17F1DF579D033DB17174B837fe4D2dF05b050#code"
            }
          ],
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the data is not made available on the external provider.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable or malicious transaction root.",
              "isCritical": true
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x5Fe6BFbb2C2c78c0baF0bFbb86420903E2E9f8a5#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x5Fe6BFbb2C2c78c0baF0bFbb86420903E2E9f8a5#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xc5b17F1DF579D033DB17174B837fe4D2dF05b050#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xc5b17F1DF579D033DB17174B837fe4D2dF05b050#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xc5b17F1DF579D033DB17174B837fe4D2dF05b050#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x5Fe6BFbb2C2c78c0baF0bFbb86420903E2E9f8a5#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xB5C248B428f9b2D8E8a03eE016760145b84098a9",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x7ef00577fAAa44D0491970D6516eB7b90EC3c80E",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x0016b6bacD56a0D1DaFdA52d06B7eFe65AA0816a",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x0244f7204b9c554306053Cc557e14D6Cbd40a33C",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "RSS3Multisig",
          "description": "* This is a Gnosis Safe with 3 / 5 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of OptimismMintableERC20Factory, SuperchainConfig, OptimismPortal, SystemConfig, L1ERC721Bridge, L2OutputOracle (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x8AC80fa0993D95C9d6B8Cb494E561E6731038941",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xc06d32F7C20f100C7b8657dE2b24f201A46BC3DD",
              "type": "EOA"
            },
            {
              "address": "0xEE52b76e6A9F6eA669F8A99bb63b113819cDCbEF",
              "type": "EOA"
            },
            {
              "address": "0x70f8b7f14eA00209A70a926134B86E5eb9f4317f",
              "type": "EOA"
            },
            {
              "address": "0xf877475092Dc23AD9d367B27D48645d56564D310",
              "type": "EOA"
            },
            {
              "address": "0xF209b7Bbadf8d9518a822aEaa7119B38b17377A7",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x0016b6bacD56a0D1DaFdA52d06B7eFe65AA0816a",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x0244f7204b9c554306053Cc557e14D6Cbd40a33C",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0x7ef00577fAAa44D0491970D6516eB7b90EC3c80E",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Guardian."
        },
        {
          "name": "EOA 4",
          "accounts": [
            {
              "address": "0xB5C248B428f9b2D8E8a03eE016760145b84098a9",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Challenger."
        },
        {
          "name": "EOA 5",
          "accounts": [
            {
              "address": "0xC4878516C198a919566773797e24af20DfdE6272",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "ProxyAdmin",
            "address": "0x1075B29e5F7a911128C77F3989702E150C988904",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of OptimismMintableERC20Factory, SuperchainConfig, OptimismPortal, SystemConfig, L1ERC721Bridge, L2OutputOracle.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x1D89222C28C3ba471be822203998f27Df4727C0b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
              "implementations": ["0xa5a46DAaDAF1b2ae96F6FE85Ae81470126967A0E"]
            },
            "chain": "ethereum",
            "description": "",
            "upgradableBy": ["RSS3Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0x3e5FaB39eD4eFB4fc29A5201059AE819f2f0418A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
              "implementations": ["0x314774a6Cfc3838E5a5a1DE3723EEa995aAD4e8f"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["RSS3Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x4cbab69108Aa72151EDa5A3c164eA86845f18438",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
              "implementations": ["0xE27083804bFf17Ec05f4300a43b7c40F3E01e486"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["RSS3Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x6A12432491bbbE8d3babf75F759766774C778Db4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
              "implementations": ["0xc5b17F1DF579D033DB17174B837fe4D2dF05b050"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["RSS3Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x75D340E5BF2eAbC39A04AF4229Ce7875B4A73B03",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SystemConfig",
            "address": "0x80e73D6BfC73c567032304C3891a06c2d9954d09",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
              "implementations": ["0x164883d49DaEe18b3D621A24560D9bcD19Ad5407"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["RSS3Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x892CAa506c86C5101f5eC11C6f09589c9dC8A85C",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x4795EaC1a2581F2Db6419203D063711C5a90aD50"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x938D0Bb4B584d4F6f793fCB7808cA2Eea15B69A8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
              "implementations": ["0xf3EF9B6eE32366A625d84910c53eB20024043A70"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["RSS3Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0xE6f24d2C32B3109B18ed33cF08eFb490b1e09C10",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
              "implementations": ["0x5Fe6BFbb2C2c78c0baF0bFbb86420903E2E9f8a5"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["RSS3Multisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "RSS3 Mainnet Alpha Launch",
          "link": "https://x.com/rss3_/status/1767370007275851789",
          "date": "2024-03-12T00:00:00Z",
          "description": "RSS3 Network Mainnet Alpha is live.",
          "type": "general"
        },
        {
          "name": "RSS3 starts using NearDA",
          "link": "https://x.com/rss3_/status/1788183577219436985",
          "date": "2024-05-07T00:00:00Z",
          "description": "RSS3 Network starts publishing data to NearDA.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["NearDA", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "AI", "Information"],
        "architectureImage": "bedrock-superchain",
        "shortName": "RSS3 VSL",
        "name": "RSS3 Value Sublayer",
        "slug": "rss3",
        "description": "The RSS3 Value Sublayer (VSL) as part of the RSS3 Network, is an Ethereum Layer2 built with OP Stack, handling the value and ownership of AI and Open Information.",
        "links": {
          "websites": ["https://rss3.io"],
          "apps": [
            "https://explorer.rss3.io/bridge",
            "https://explorer.rss3.io/nodes",
            "https://explorer.rss3.io/epochs",
            "https://explorer.rss3.io/dsl-scan"
          ],
          "documentation": ["https://docs.rss3.io"],
          "explorers": ["https://explorer.rss3.io", "https://scan.rss3.io"],
          "repositories": ["https://github.com/rss3-network"],
          "socialMedia": [
            "https://twitter.com/rss3_",
            "https://discord.com/invite/rss3-network",
            "https://t.me/rss3_en"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": {
        "name": "rss3",
        "chainId": 12553,
        "explorerUrl": "https://scan.rss3.io/",
        "explorerApi": {
          "url": "https://scan.rss3.io/api",
          "type": "blockscout"
        },
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 14193,
            "version": "3"
          }
        ]
      },
      "config": {
        "associatedTokens": ["RSS3"],
        "escrows": [
          {
            "address": "0x6A12432491bbbE8d3babf75F759766774C778Db4",
            "newVersion": true,
            "sinceTimestamp": "1709859947",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x6A12432491bbbE8d3babf75F759766774C778Db4",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
                "implementations": [
                  "0xc5b17F1DF579D033DB17174B837fe4D2dF05b050"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x4cbab69108Aa72151EDa5A3c164eA86845f18438",
            "newVersion": true,
            "sinceTimestamp": "1709859947",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x4cbab69108Aa72151EDa5A3c164eA86845f18438",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x1075B29e5F7a911128C77F3989702E150C988904"],
                "implementations": [
                  "0xE27083804bFf17Ec05f4300a43b7c40F3E01e486"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.rss3.io/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "NearDA",
          "sentiment": "warning",
          "description": "The data is posted to NearDA which is a separate data availability layer on the Near protocol. Only hashes of data are published on an on chain inbox."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely fully on data that is NOT published on chain.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "scroll",
      "createdAt": "1679651674",
      "badges": ["EVM", "EthereumBlobs"],
      "display": {
        "name": "Scroll",
        "slug": "scroll",
        "description": "Scroll is ZK Rollup that extends Ethereum’s capabilities through ZK tech and EVM compatibility.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://scroll.io"],
          "apps": ["https://scroll.io/bridge"],
          "documentation": ["https://docs.scroll.io/en/home/"],
          "explorers": [
            "https://scrollscan.com/",
            "https://ondora.xyz/network/scroll",
            "https://scroll.l2scan.co/",
            "https://okx.com/web3/explorer/scroll",
            "https://scroll.nftscan.com/"
          ],
          "repositories": [
            "https://github.com/scroll-tech/scroll",
            "https://github.com/scroll-tech/scroll-prover",
            "https://github.com/scroll-tech/zkevm-circuits",
            "https://github.com/scroll-tech/zkevm-specs",
            "https://github.com/scroll-tech/scroll-zkevm",
            "https://github.com/scroll-tech/go-ethereum",
            "https://github.com/scroll-tech/frontends",
            "https://github.com/scroll-tech/scroll-contract-deploy-demo",
            "https://github.com/scroll-tech"
          ],
          "socialMedia": [
            "https://discord.gg/scroll",
            "https://twitter.com/Scroll_ZKP",
            "https://youtube.com/@Scroll_ZKP"
          ],
          "rollupCodes": "https://rollup.codes/scroll"
        },
        "activityDataSource": "Blockchain RPC",
        "liveness": {
          "warnings": {
            "batchSubmissions": "Transaction data batches that have not yet been proven can be reverted."
          },
          "explanation": "Scroll is a ZK rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted on L1, but the owner can revert them if the corresponding root has not yet be confirmed."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "warning",
              "value": "Transaction data batches that have not yet been proven can be reverted."
            }
          },
          "finalizationPeriod": 0
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.",
            "The Security Council is not properly set up."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": false,
                "description": "No source-available node exists that can recreate the state from L1 data."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": false,
                "description": "The Security Council is not properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": {
          "type": "warning",
          "text": "There is no available node software that can reconstruct the state from L1 data, hence there is no way to verify that this system is a rollup."
        }
      },
      "chainConfig": {
        "name": "scroll",
        "chainId": 534352,
        "explorerUrl": "https://scrollscan.com/",
        "explorerApi": {
          "url": "https://api.scrollscan.com/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1696917600",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 14,
            "version": "3"
          }
        ],
        "coingeckoPlatform": "scroll"
      },
      "config": {
        "escrows": [
          {
            "address": "0xD8A791fE2bE73eb6E6cF1eb0cb3F36adC9B3F8f9",
            "newVersion": true,
            "sinceTimestamp": "1696782323",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xD8A791fE2bE73eb6E6cF1eb0cb3F36adC9B3F8f9",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
                "implementations": [
                  "0x4015Fc868C06689ABEba4a9dC8FA43B804F6239c"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": ["ScrollMultisig"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367",
            "newVersion": true,
            "sinceTimestamp": "1696782323",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
                "implementations": [
                  "0x72981fD00087fF4F60aBFdE9f353cB1912A37fb6"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": ["ScrollMultisig"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xb2b10a289A229415a124EFDeF310C10cb004B6ff",
            "newVersion": true,
            "sinceTimestamp": "1696782323",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xb2b10a289A229415a124EFDeF310C10cb004B6ff",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
                "implementations": [
                  "0x7F512E2E9dfC4552941D99A5b2405BBcF5781C2c"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": ["ScrollMultisig"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xf1AF3b23DE0A5Ca3CAb7261cb0061C0D779A5c7B",
            "newVersion": true,
            "sinceTimestamp": "1696919351",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xf1AF3b23DE0A5Ca3CAb7261cb0061C0D779A5c7B",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
                "implementations": [
                  "0x56ce8A8E8399f6cD5e7e4f549E8BfD673f2AfF5e"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": ["ScrollMultisig"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x67260A8B73C5B77B55c1805218A42A7A6F98F515",
            "newVersion": true,
            "sinceTimestamp": "1696920095",
            "tokens": ["DAI"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x67260A8B73C5B77B55c1805218A42A7A6F98F515",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
                "implementations": [
                  "0xBAd002fB13adFfcbCba57a4d4a43886f3F4C56cb"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": ["ScrollMultisig"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x6625C6332c9F91F2D27c304E729B86db87A3f504",
            "newVersion": true,
            "sinceTimestamp": "1696920503",
            "tokens": ["wstETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x6625C6332c9F91F2D27c304E729B86db87A3f504",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xCC2C53556Bc75217cf698721b29071d6f12628A9"],
                "implementations": [
                  "0xF4f2066EE72D62e3caF9678459149BA7FCf2262F"
                ]
              },
              "chain": "ethereum",
              "description": "Custom token escrow with third-party governance, using the canonical bridge only for messaging.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xA033Ff09f2da45f0e9ae495f525363722Df42b2a",
            "newVersion": true,
            "sinceTimestamp": "1713173507",
            "tokens": ["pufETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xA033Ff09f2da45f0e9ae495f525363722Df42b2a",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x9eBf2f33526CD571f8b2ad312492cb650870CFd6"],
                "implementations": [
                  "0x08D77Ea90DB9BF6c0d3f66E6b8394DA2E81B9a03"
                ]
              },
              "chain": "ethereum",
              "description": "Custom token escrow with third-party governance, using the canonical bridge only for messaging.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.scroll.io",
          "defaultCallsPerMinute": 120,
          "startBlock": 1
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa13BAF47339d63B743e7Da8741db5456DAc1E556",
              "selector": "0x31fa742d",
              "functionSignature": "function finalizeBatchWithProof(bytes _batchHeader,bytes32 _prevStateRoot,bytes32 _postStateRoot,bytes32 _withdrawRoot,bytes _aggrProof)",
              "sinceTimestamp": "1696782323",
              "untilTimestamp": "1724227415"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa13BAF47339d63B743e7Da8741db5456DAc1E556",
              "selector": "0x00b0f4d7",
              "functionSignature": "function finalizeBatchWithProof4844(bytes _batchHeader, bytes32 _prevStateRoot, bytes32 _postStateRoot, bytes32 _withdrawRoot, bytes _blobDataProof, bytes _aggrProof)",
              "sinceTimestamp": "1714362335"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa13BAF47339d63B743e7Da8741db5456DAc1E556",
              "selector": "0x4f099e3d",
              "functionSignature": "function finalizeBundleWithProof(bytes,bytes32,bytes32,bytes)",
              "sinceTimestamp": "1724227415"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa13BAF47339d63B743e7Da8741db5456DAc1E556",
              "selector": "0x1325aca0",
              "functionSignature": "function commitBatch(uint8 _version,bytes _parentBatchHeader,bytes[] _chunks,bytes _skippedL1MessageBitmap)",
              "sinceTimestamp": "1696782323",
              "untilTimestamp": "1724227247"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa13BAF47339d63B743e7Da8741db5456DAc1E556",
              "selector": "0x86b053a9",
              "functionSignature": "function commitBatchWithBlobProof(uint8,bytes,bytes[],bytes,bytes)",
              "sinceTimestamp": "1724227415"
            }
          }
        ],
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": {
          "lag": 0,
          "type": "Scroll",
          "minTimestamp": "1696775129",
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ScrollChain",
              "references": [
                "https://etherscan.io/address/0x9bB163401E8C72573854c4Cd968aFA7A7b02D25f#code"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ScrollChain",
              "references": [
                "https://etherscan.io/address/0x9bB163401E8C72573854c4Cd968aFA7A7b02D25f#code"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0,
          "sources": [
            {
              "contract": "ScrollChain",
              "references": [
                "https://etherscan.io/address/0xa13BAF47339d63B743e7Da8741db5456DAc1E556#code#F1#L154"
              ]
            }
          ]
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring.",
          "sentiment": "bad",
          "sources": [
            {
              "contract": "L1MessageQueue",
              "references": [
                "https://etherscan.io/address/0x137CC585F607EDeBBc3CA6360AffCFeab507B374#code"
              ]
            },
            {
              "contract": "EnforcedTxGateway",
              "references": [
                "https://etherscan.io/address/0x642af405bF64660665B37977449C9C536B806318#code"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [
            {
              "contract": "ScrollChain",
              "references": [
                "https://etherscan.io/address/0x9bB163401E8C72573854c4Cd968aFA7A7b02D25f#code"
              ]
            }
          ]
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": []
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "ScrollChain.sol - Etherscan source code, verifyAggregateProof() and verifyBundleProof() calls",
              "href": "https://etherscan.io/address/0x9bB163401E8C72573854c4Cd968aFA7A7b02D25f#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "ScrollChain.sol - Etherscan source code commitBatch() and commitBatchWithBlobProof() functions",
              "href": "https://etherscan.io/address/0x9bB163401E8C72573854c4Cd968aFA7A7b02D25f#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "ScrollChain.sol - Etherscan source code, finalizeBundleWithProof() function modifier",
              "href": "https://etherscan.io/address/0x9bB163401E8C72573854c4Cd968aFA7A7b02D25f#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "There is no general mechanism to force the sequencer to include the transaction.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "EnforcedTxGateway.sol - Etherscan source code",
              "href": "https://etherscan.io/address/0x642af405bF64660665B37977449C9C536B806318#code"
            },
            {
              "text": "EnforcedTxGateway is paused - Etherscan proxy contract",
              "href": "https://etherscan.io/address/0x72CAcBcfDe2d1e19122F8A36a4d6676cd39d7A5d#readProxyContract#F7"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the operator censors withdrawal transaction."
              }
            ],
            "references": [
              {
                "text": "L1ETHGateway.sol - Etherscan source code, finalizeWithdrawETH function",
                "href": "https://etherscan.io/address/0x546E0bF31FB6e7babD493452e4e6999191367B42#code"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "The node software to reconstruct the state is available [here](https://github.com/scroll-tech/go-ethereum). Note that it uses the L2 p2p network to fetch blocks, and not the L1 network. The consistency with L1 data can be checked by running the [scroll-geth node](https://github.com/scroll-tech/go-ethereum) with the `--rollup.verify` flag.",
        "compressionScheme": "Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.",
        "genesisState": "The genesis file can be found [here](https://scrollzkp.notion.site/genesis-json-f89ca24b123f462f98c8844d17bdbb74), which contains two prefunded addresses and five predeployed contracts.",
        "dataFormat": "Blocks are grouped into chunks and chunks are grouped into batches. Chunk encoding format can be found [here](https://github.com/scroll-tech/scroll-contracts/blob/main/src/libraries/codec/ChunkCodecV0.sol#L5), and batch encoding format can be found [here](https://github.com/scroll-tech/scroll-contracts/blob/main/src/libraries/codec/BatchHeaderV0Codec.sol#L7)."
      },
      "stateValidation": {
        "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
        "categories": [
          {
            "title": "Prover Architecture",
            "description": "The prover code can be found [here](https://github.com/scroll-tech/zkevm-circuits/tree/develop/prover)."
          },
          {
            "title": "ZK Circuits",
            "description": "Scroll circuits are based on the Halo2 proof system and are designed to replicate the behavior of the EVM. The source code of the base circuits can be found [here](https://github.com/scroll-tech/zkevm-circuits/tree/v0.10.5/zkevm-circuits) while the code for the aggregation circuits can be found [here](https://github.com/scroll-tech/zkevm-circuits/tree/v0.10.5/aggregator)."
          },
          {
            "title": "Verification Keys Generation",
            "description": "SNARK verification keys can be generated and checked against Ethereum verifier contract using [this guide](https://github.com/scroll-tech/scroll-prover#verifier-contract). The system requires a trusted setup."
          }
        ],
        "proofVerification": {
          "shortDescription": "Scroll is a ZK-EVM rollup on Ethereum.",
          "aggregation": true,
          "requiredTools": [
            {
              "name": "Custom tool",
              "version": "v0.10.3",
              "link": "https://github.com/scroll-tech/scroll-prover/tree/v0.10.3?tab=readme-ov-file#verifier-contract"
            }
          ],
          "verifiers": [
            {
              "name": "PlonkVerifierV0",
              "description": "Scroll verifier using calldata for DA. Corresponds to version v0.9.5 of the circuits.",
              "verified": "no",
              "contractAddress": "0x4B8Aa8A96078689384DAb49691E9bA51F9d2F9E1",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.9.5/aggregator"
                },
                {
                  "name": "Main circuit",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.9.5/zkevm-circuits"
                }
              ]
            },
            {
              "name": "PlonkVerifierV1",
              "description": "Scroll verifier using blobs for DA. Corresponds to version v0.10.3 of the circuits.",
              "verified": "no",
              "contractAddress": "0x2293cd12e8564e8219d314b075867c2f66ac6941",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.10.3/aggregator"
                },
                {
                  "name": "Main circuit",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.10.3/zkevm-circuits"
                }
              ]
            },
            {
              "name": "PlonkVerifierV1-1",
              "description": "Scroll verifier using blobs for DA. Corresponds to version v0.11.4 of the circuits (Curie upgrade).",
              "verified": "no",
              "contractAddress": "0x03a72B00D036C479105fF98A1953b15d9c510110",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.11.4/aggregator"
                },
                {
                  "name": "Main verifier",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.11.4/zkevm-circuits"
                }
              ]
            },
            {
              "name": "PlonkVerifierV2",
              "description": "Scroll verifier proving bundles (group of batches). Corresponds to version v0.12.0 of the circuits (Darwin upgrade).",
              "verified": "no",
              "contractAddress": "0x8759E83b6570A0bA46c3CE7eB359F354F816c9a9",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.12.0/aggregator"
                },
                {
                  "name": "Main verifier",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.12.0/zkevm-circuits"
                }
              ]
            },
            {
              "name": "PlonkVerifierV2-1",
              "description": "Scroll verifier proving bundles (group of batches). Corresponds to version v0.13.0 of the circuits (Darwin v2 upgrade).",
              "verified": "no",
              "contractAddress": "0x8c1b52757b5c571ADcB5572E992679d4D48e30f7",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.13.0/aggregator"
                },
                {
                  "name": "Main verifier",
                  "proofSystem": "Halo2",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Powers of Tau 26",
                  "link": "https://github.com/scroll-tech/zkevm-circuits/tree/v0.13.0/zkevm-circuits"
                }
              ]
            }
          ]
        }
      },
      "contracts": {
        "addresses": [
          {
            "name": "ScrollChain",
            "address": "0xa13BAF47339d63B743e7Da8741db5456DAc1E556",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x9bB163401E8C72573854c4Cd968aFA7A7b02D25f"]
            },
            "chain": "ethereum",
            "description": "The main contract of the Scroll chain. Allows to post transaction data and state roots, along with proofs. Sequencing and proposing are behind a whitelist. L1 -> L2 message processing on L2 is not enforced.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ScrollMessenger",
            "address": "0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x72981fD00087fF4F60aBFdE9f353cB1912A37fb6"]
            },
            "chain": "ethereum",
            "description": "Contract used to send L1 -> L2 and relay messages from L2. It allows to replay failed messages and to drop skipped messages. L1 -> L2 messages sent using this contract pay for L2 gas on L1 and will have the aliased address of this contract as the sender.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1MessageQueue",
            "address": "0x0d7E906BD9cAFa154b048cFa766Cc1E54E39AF9B",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x137CC585F607EDeBBc3CA6360AffCFeab507B374"]
            },
            "chain": "ethereum",
            "description": "Contains the array of queued L1 -> L2 messages, either appended using the L1ScrollMessenger or the EnforcedTxGateway. The latter contract, which would allow users to send L2 messages from L1 with their own address as the sender, is not enabled yet."
          },
          {
            "name": "Whitelist",
            "address": "0x259204DDd2bA29bD9b1B9A5c9B093f73d7EAcf37",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract implementing a generic whitelist. Currently used to define the actor that can relay the L2 basefee on L1."
          },
          {
            "name": "ScrollOwner",
            "address": "0x798576400F7D662961BA15C6b3F3d813447a26a6",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Owner of all contracts in the system. It implements an extension of AccessControl that manages roles and functions allowed to be called by each role."
          },
          {
            "name": "TimelockSlow",
            "address": "0x1A658B88fD0a3c82fa1a0609fCDbD32e7dd4aB9C",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "14d timelock. Admin of the ScrollOwner contract, meaning it can assign and revoke roles. The ScrollMultisig can propose and cancel transactions, and the ExecutorMultisig can execute them."
          },
          {
            "name": "TimelockMid",
            "address": "0xDC1d1189Da69Ae2016E4976A43De20972D349B1b",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "7d timelock. Can manage the USDC gateway bridge. The ScrollMultisig can propose and cancel transactions, and the ExecutorMultisig can execute them."
          },
          {
            "name": "TimelockFast",
            "address": "0x0e58939204eEDa84F796FBc86840A50af10eC4F4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "1d timelock. Can add new sequencers and provers, update the gas oracle and permissions to update its values, the max gas limit, and gateways token mappings. The ScrollMultisig can propose and cancel transactions, and the ExecutorMultisig can execute them."
          },
          {
            "name": "MultipleVersionRollupVerifier",
            "address": "0x4CEA3E866e7c57fD75CB0CA3E9F5f1151D4Ead3F",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to update the verifier and keep track of current and old versions."
          },
          {
            "name": "ZkEvmVerifierV0",
            "address": "0x585DfaD7bF4099E011D185E266907A8ab60DAD2D",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Current verifier using calldata for DA, used to prepare data for the PlonkVerifierV0."
          },
          {
            "name": "PlonkVerifierV0",
            "address": "0x4B8Aa8A96078689384DAb49691E9bA51F9d2F9E1",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Plonk verifier used to verify ZK proofs using calldata for DA."
          },
          {
            "name": "ZkEvmVerifierV1",
            "address": "0x4b289E4A5331bAFBc6cCb2F10C39B8EDceCDb247",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Verifier using blobs for DA, used to prepare data for the PlonkVerifierV1."
          },
          {
            "name": "PlonkVerifierV1",
            "address": "0x2293cd12e8564e8219d314b075867c2f66ac6941",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Plonk verifier used to verify ZK proofs using blobs for DA."
          },
          {
            "name": "ZkEvmVerifierV1-1",
            "address": "0x63FB51C55d9605a75F8872C80De260a00fACfaA2",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Verifier using blobs for DA, used to prepare data for the PlonkVerifierV1-1. Added in the Curie upgrade."
          },
          {
            "name": "PlonkVerifierV1-1",
            "address": "0x03a72B00D036C479105fF98A1953b15d9c510110",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Plonk verifier used to verify ZK proofs using blobs for DA."
          },
          {
            "name": "ZkEvmVerifierV2",
            "address": "0x2d6e16d8e8a0C3Bc7750E774B108Ec39Ab0C18fB",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Verifier proving bundles (group of batches), used to prepare data for the PlonkVerifierV2. Added in the Darwin upgrade."
          },
          {
            "name": "PlonkVerifierV2",
            "address": "0x8759E83b6570A0bA46c3CE7eB359F354F816c9a9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Plonk verifier used to verify ZK proofs for bundles."
          },
          {
            "name": "ZkEvmVerifierV2-1",
            "address": "0xCAECeE2E815e7f758c2477f900AFA14bDDce54B3",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Verifier proving bundles (group of batches), used to prepare data for the PlonkVerifierV2-1. Added in the Darwin v2 upgrade."
          },
          {
            "name": "PlonkVerifierV2-1",
            "address": "0x8c1b52757b5c571ADcB5572E992679d4D48e30f7",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Plonk verifier used to verify ZK proofs for bundles."
          },
          {
            "name": "L1ETHGateway",
            "address": "0x7F2b8C31F88B6006c382775eea88297Ec1e3E905",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x546E0bF31FB6e7babD493452e4e6999191367B42"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge ETH from L1 to L2.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1WETHGateway",
            "address": "0x7AC440cAe8EB6328de4fA621163a792c1EA9D4fE",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0xa4F400593DFfc0ae02F940ab58f6e3Cc6fb9FB49"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge WETH from L1 to L2.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1BatchBridgeGateway",
            "address": "0x5Bcfd99c34cf7E06fc756f6f5aE7400504852bc4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x7999cdD5E2893475D89211A2E3FdA67a841E3233"]
            },
            "chain": "ethereum",
            "description": "Contract used to efficiently bridge ETH (in batches) from L1 to L2.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardERC20Gateway",
            "address": "0xD8A791fE2bE73eb6E6cF1eb0cb3F36adC9B3F8f9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x4015Fc868C06689ABEba4a9dC8FA43B804F6239c"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge ERC20 tokens from L1 to L2. It uses a fixed token list.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CustomERC20Gateway",
            "address": "0xb2b10a289A229415a124EFDeF310C10cb004B6ff",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x7F512E2E9dfC4552941D99A5b2405BBcF5781C2c"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge ERC20 tokens from L1 to L2. It allows to change the token mappings.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1USDCGateway",
            "address": "0xf1AF3b23DE0A5Ca3CAb7261cb0061C0D779A5c7B",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x56ce8A8E8399f6cD5e7e4f549E8BfD673f2AfF5e"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge USDC tokens from L1 to L2.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Gateway",
            "address": "0x6260aF48e8948617b8FA17F4e5CEa2d21D21554B",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0xd1841c5756428812233eEA78afC17cb2D3e392bb"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge ERC721 tokens from L1 to L2.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC1155Gateway",
            "address": "0xb94f7F6ABcb811c5Ac709dE14E37590fcCd975B6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x244BF7aEf29F03916569470a51fA0794B62F8cd7"]
            },
            "chain": "ethereum",
            "description": "Contract used to bridge ERC1155 tokens from L1 to L2.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1GatewayRouter",
            "address": "0xF8B1378579659D8F7EE5f3C929c2f3E332E41Fd6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0xb93Ac04010Bd61F45BF492022A5b49a902F798F3"]
            },
            "chain": "ethereum",
            "description": "Main entry point for depositing ETH and ERC20 tokens, which are then forwarded to the correct gateway.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "FeeVaultMultisig",
            "address": "0x8FA3b4570B4C96f8036C13b64971BA65867eEB48",
            "upgradeability": {
              "proxyType": "gnosis safe",
              "admins": [],
              "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Multisig used to store fees collected from gateways to pay for L1 -> L2 message execution."
          },
          {
            "name": "EnforcedTxGateway",
            "address": "0x72CAcBcfDe2d1e19122F8A36a4d6676cd39d7A5d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0x642af405bF64660665B37977449C9C536B806318"]
            },
            "chain": "ethereum",
            "description": "Contracts to force L1 -> L2 messages with the proper sender. The contract is pausable by ScrollOwner. The contract is currently paused.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay",
            "pausable": { "paused": true, "pausableBy": ["ScrollOwner"] }
          },
          {
            "name": "OLD_L2GasPriceOracle",
            "address": "0x987e300fDfb06093859358522a79098848C33852",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xEB803eb3F501998126bf37bB823646Ed3D59d072"],
              "implementations": ["0xfDF1eE0098168eaa61BF87Db68C39c85151a4E9E"]
            },
            "chain": "ethereum",
            "description": "Deprecated: the functionality of this contract has been moved to the L1MessageQueue contract. It was used to relay the L2 basefee on L1 in a trusted way using a whitelist. It was also used to store and update values related to intrinsic gas cost calculations.",
            "upgradableBy": ["ScrollMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": []
      },
      "permissions": [
        {
          "name": "ScrollMultisig",
          "description": "This is a Gnosis Safe with 4 / 5 threshold.  Currently also designated as the Security Council. Can upgrade proxies and the verifier without delay and propose transactions within Timelocks. It can also revert non finalized batches, remove sequencers and provers and pause contracts.",
          "accounts": [
            {
              "address": "0xEfc9D1096fb65c832207E5e7F13C2D1102244dbe",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xFCf6364F5157901f533DD3615A5d8c375F13c072",
              "type": "EOA"
            },
            {
              "address": "0xE2e6345baAD18f779167443Dc4886495507b3249",
              "type": "EOA"
            },
            {
              "address": "0xEbbeeAA424AE904508465a41c927Be594C43Dc68",
              "type": "EOA"
            },
            {
              "address": "0xfc31892C5500AbE00974280b28907BaA9190E384",
              "type": "EOA"
            },
            {
              "address": "0x9337B41709c1C2B938Cb460ea3fA9DB586B172E0",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ExecutorMultisig",
          "description": "This is a Gnosis Safe with 1 / 5 threshold.  Can execute timelock transactions.",
          "accounts": [
            {
              "address": "0x1FF1fc1BB4d1f081f6E0a7E7E3240F3ECC5B236f",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xEe9bb388d320F4305af6a4a1a70c862D3F4d0D5B",
              "type": "EOA"
            },
            {
              "address": "0xFcf1f182FC79047d99e5db0d7113c0EfE2EC9402",
              "type": "EOA"
            },
            {
              "address": "0x0c5cc5155b346453154059aD9d2Ff695dB92f774",
              "type": "EOA"
            },
            {
              "address": "0xd7bC70ecf344C279eB78C8899Ba5538e2e3A0632",
              "type": "EOA"
            },
            {
              "address": "0x568993632c34604098e35a184C52aD390c70f754",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EmergencyMultisig",
          "description": "This is a Gnosis Safe with 2 / 5 threshold.  Can revert batches, remove sequencers and provers, and pause contracts.",
          "accounts": [
            {
              "address": "0xbdA143d49da40C2cDA27c40edfBbe8A0D4AE0cBc",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0c5cc5155b346453154059aD9d2Ff695dB92f774",
              "type": "EOA"
            },
            {
              "address": "0xEe9bb388d320F4305af6a4a1a70c862D3F4d0D5B",
              "type": "EOA"
            },
            {
              "address": "0xFcf1f182FC79047d99e5db0d7113c0EfE2EC9402",
              "type": "EOA"
            },
            {
              "address": "0xd7bC70ecf344C279eB78C8899Ba5538e2e3A0632",
              "type": "EOA"
            },
            {
              "address": "0x568993632c34604098e35a184C52aD390c70f754",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xcF2898225ED05Be911D3709d9417e86E0b4Cfc8f",
              "type": "EOA"
            },
            {
              "address": "0x2ce8B4A516ebBc8B425764a867B742F76C2244c7",
              "type": "EOA"
            }
          ],
          "description": "Actors allowed to commit transaction batches."
        },
        {
          "name": "Proposers",
          "accounts": [
            {
              "address": "0x356483dC32B004f32Ea0Ce58F7F88879886e9074",
              "type": "EOA"
            },
            {
              "address": "0x69d79Fc4Ae89E4DA80D719e26a435621F75B7f06",
              "type": "EOA"
            }
          ],
          "description": "Actors allowed to prove transaction batches and publish state root updates."
        }
      ],
      "milestones": [
        {
          "name": "Batches reverted",
          "link": "https://status.scroll.io/incidents/44k6s4qg6kcs",
          "date": "2024-07-05T00:00:00Z",
          "description": "To fix a bug in the compression for batches 55 previously committed batches are reverted.",
          "type": "incident"
        },
        {
          "name": "Darwin upgrade",
          "link": "https://scroll.io/blog/proof-recursion-scrolls-darwin-upgrade",
          "date": "2024-08-21T00:00:00.00Z",
          "description": "Introduces a reduction in gas fees through bundling multiple batches into a single validity proof.",
          "type": "general"
        },
        {
          "name": "Curie upgrade",
          "link": "https://scroll.io/blog/compressing-the-gas-scrolls-curie-upgrade",
          "date": "2024-07-03T00:00:00.00Z",
          "description": "Introduces data compression, new opcodes, dynamic block time, and new transaction types.",
          "type": "general"
        },
        {
          "name": "Bernoulli upgrade",
          "link": "https://scroll.io/blog/blobs-are-here-scrolls-bernoulli-upgrade",
          "date": "2024-04-29T00:00:00.00Z",
          "description": "Introduces EIP-4844 data blobs for L1 data availability, and the SHA2-256 precompile on L2.",
          "type": "general"
        },
        {
          "name": "Scroll official launch",
          "link": "https://x.com/Scroll_ZKP/status/1714286874020528554",
          "date": "2023-10-17T00:00:00.00Z",
          "description": "Scroll announces its official launch.",
          "type": "general"
        },
        {
          "name": "Scroll Alpha testnet launch",
          "link": "https://scroll.io/blog/alphaTestnet",
          "date": "2023-02-27T00:00:00.00Z",
          "description": "Scroll launches its Alpha testnet on Goerli.",
          "type": "general"
        }
      ]
    },
    {
      "type": "layer2",
      "createdAt": "1725027256",
      "id": "silicon",
      "display": {
        "name": "Silicon",
        "slug": "silicon",
        "description": "Silicon is a Validium built on the Polygon CDK Stack, aiming to become the social network of the future.",
        "links": {
          "websites": ["https://silicon.network/"],
          "apps": ["https://bridge.silicon.network/"],
          "documentation": ["https://docs.silicon.network/"],
          "explorers": ["https://scope.silicon.network"],
          "repositories": [],
          "socialMedia": ["https://x.com/0xSilicon"]
        },
        "activityDataSource": "Blockchain RPC",
        "purposes": ["Universal"],
        "category": "Validium",
        "provider": "Polygon",
        "tvlWarning": null,
        "finality": {
          "finalizationPeriod": 0,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "Uniform block distribution is assumed for calculations."
            }
          }
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "newVersion": true,
            "sinceTimestamp": "1679653127",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
                "implementations": [
                  "0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "AggLayer",
              "nativeAsset": "etherPreminted",
              "premintedAmount": "340282366920938463463374607431768211455"
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.silicon.network",
          "defaultCallsPerMinute": 500
        },
        "trackedTxs": null,
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": null
      },
      "chainConfig": {
        "name": "silicon",
        "chainId": 2355,
        "explorerUrl": "https://scope.silicon.network/",
        "minTimestampForTvl": "1724183531"
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "2/3 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 2/3 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 2/3 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.6666666666666666,
          "sources": [{ "contract": "SiliconValidium", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -432000,
          "warning": {
            "value": "The Security Council can remove the delay on upgrades.",
            "sentiment": "bad"
          }
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.",
          "sentiment": "bad",
          "sources": [{ "contract": "SiliconValidium", "references": [] }]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b",
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "PolygonRollupManager.sol - Etherscan source code, _verifyAndRewardBatches function",
              "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain. Transaction data is stored off-chain and only the hashes are posted on-chain by the Sequencer, after being signed by the DAC members.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "PolygonValidiumStorageMigration.sol - Etherscan source code, sequenceBatchesValidium function",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C#code#F1#L126"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "SiliconValidium.sol - Etherscan source code, onlyTrustedSequencer modifier",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "The mechanism for allowing users to submit their own transactions is currently disabled.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "SiliconValidium.sol - Etherscan source code, forceBatchAddress address",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "PolygonZkEvmBridgeV2.sol - Etherscan source code, claimAsset function",
                "href": "https://etherscan.io/address/0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "Node software can be found [here](https://github.com/0xPolygon/cdk-validium-node).",
        "compressionScheme": "No compression scheme yet.",
        "genesisState": "The genesis state, whose corresponding root is accessible as Batch 0 root in the `getRollupBatchNumToStateRoot(5,0)` method of PolygonRollupManager, is available [here](https://github.com/0xPolygonHermez/zkevm-contracts/blob/1ad7089d04910c319a257ff4f3674ffd6fc6e64e/tools/addRollupType/genesis.json).",
        "dataFormat": "The trusted sequencer request signatures from DAC members off-chain, and posts hashed batches with signatures to the SiliconValidium contract."
      },
      "stateValidation": null,
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x47ed9538faA1522be7abD8a8BCAEc8d9C04Ed60D",
              "type": "EOA"
            }
          ],
          "description": "Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."
        },
        {
          "name": "Proposer (Trusted Aggregator)",
          "accounts": [
            {
              "address": "0x6329Fe417621925C81c16F9F9a18c203C21Af7ab",
              "type": "EOA"
            },
            {
              "address": "0x20A53dCb196cD2bcc14Ece01F358f1C849aA51dE",
              "type": "EOA"
            }
          ],
          "description": "The trusted proposer (called Aggregator) provides ZK proofs for all the supported systems. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 6 / 8 threshold.  The Security Council is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.",
          "accounts": [
            {
              "address": "0x37c58Dfa7BF0A165C5AAEdDf3e2EdB475ac6Dcb6",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
              "type": "EOA"
            },
            {
              "address": "0xaF46a0ddf80DFFB49C87656625E65A37499B261D",
              "type": "EOA"
            },
            {
              "address": "0xBDc235cC9d6Baa641c5ae306bc83962475A5FEFf",
              "type": "EOA"
            },
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0x3ab9f4b964eE665F7CDf1d65f1cEEc6196B0D622",
              "type": "EOA"
            },
            {
              "address": "0x49c15936864690bCd6af0ecaca8E874adFF30E86",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0x21887c89368bf918346c62460e0c339113801C28",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Forced Batcher",
          "accounts": [
            {
              "address": "0x121EA966b6AA6A361CD4c0b01cb39C6dc65e1b71",
              "type": "EOA"
            }
          ],
          "description": "Sole account allowed to submit forced transactions. If this address is the zero address, anyone can submit forced transactions."
        },
        {
          "name": "RollupManagerAdminMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Admin of the PolygonRollupManager contract, can set core system parameters like timeouts and aggregator as well as deactivate emergency state. They can also upgrade the SiliconValidium contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0xA0B02B28920812324f1cC3255bd8840867d3f227",
              "type": "EOA"
            },
            {
              "address": "0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LocalAdmin",
          "accounts": [
            {
              "address": "0xef5D7af5dbBeE845860E75cE8f8e8fE7F6e8dBF7",
              "type": "EOA"
            }
          ],
          "description": "Admin and ForceBatcher of the SiliconValidium contract, can set core system parameters like timeouts, sequencer, activate forced transactions, and set the DA committee members in the SiliconDAC contract."
        },
        {
          "name": "SiliconDAC Upgrader",
          "accounts": [
            {
              "address": "0xef5D7af5dbBeE845860E75cE8f8e8fE7F6e8dBF7",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade the SiliconDAC contract and thus change the data availability rules any time."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "SiliconDAC",
            "address": "0x24e09Ef4F69B6058E047EE5E709B345F3cA47F3A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x3F74698A4ADb075c0501DF739745ACA55Ae543a1"],
              "implementations": ["0xa2F7e6Dfd6f43976ee1E2e8A122984ECa8e38608"]
            },
            "chain": "ethereum",
            "description": "Validium committee contract that allows the owner to setup the members of the committee and stores the required amount of signatures threshold.",
            "upgradableBy": ["SiliconDAC Upgrader"],
            "upgradeDelay": "None"
          },
          {
            "name": "SiliconValidium",
            "address": "0x419dcD0f72ebAFd3524b65a97ac96699C7fBebdB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"],
              "implementations": ["0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"]
            },
            "chain": "ethereum",
            "description": "The main contract of the Silicon. Contains sequenced transaction batch hashes and forced transaction logic.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Verifier",
            "address": "0x0775e11309d75aA6b0967917fB0213C5673eDf81",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "An autogenerated contract that verifies ZK proofs in the PolygonRollupManager system."
          },
          {
            "name": "PolygonRollupManager",
            "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]
            },
            "chain": "ethereum",
            "description": "It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the Security Council, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives L2 state roots as well as ZK proofs.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Bridge",
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]
            },
            "chain": "ethereum",
            "description": "The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer both ERC20 assets and arbitrary messages. To transfer funds a user initiated transaction on both sides is required.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "GlobalExitRootV2",
            "address": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x2E38cD55163137483E30580Cb468C2dFf1d85077"]
            },
            "chain": "ethereum",
            "description": "Synchronizes deposit and withdraw merkle trees across L1 and the L2s. The global root from this contract is injected into the L2 contracts.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Timelock",
            "address": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract upgrades have to go through a 10d timelock unless the Emergency State is activated. It can also add rollup types that can be used to upgrade verifier contracts of existing systems. It is controlled by the ProxyAdminOwner."
          }
        ],
        "references": [
          {
            "text": "State injections - stateRoot and exitRoot are part of the validity proof input.",
            "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 10d delay on code upgrades."
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Silicon Mainnet Launch",
          "link": "https://x.com/0xSilicon/status/1828704079687917908",
          "date": "2024-08-28",
          "description": "Silicon Mainnet launches officially, integrated with Polygon AggLayer.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [],
      "badges": ["DAC", "PolygonCDK", "AggLayer", "EVM"]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "sophon",
      "createdAt": "1716536140",
      "display": {
        "name": "Sophon",
        "slug": "sophon",
        "description": "Sophon is a community-driven and entertainment-focused ecosystem built on top of a modular rollup stack leveraging ZKsync's ZK Stack technology.",
        "purposes": ["Universal"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://sophon.xyz/"],
          "apps": ["https://farm.sophon.xyz/"],
          "documentation": ["https://docs.sophon.xyz/"],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/sophon"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "soneium",
      "createdAt": "1724842746",
      "display": {
        "name": "Soneium",
        "slug": "soneium",
        "description": "Soneium is an upcoming Optimistic rollup based on the OP Stack. It is built by Sony Block Solutions Labs and planned to stand as a versatile, general-purpose blockchain.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://soneium.org/en/"],
          "apps": ["https://bridge.soneium.org/en/testnet"],
          "documentation": ["https://soneium.org/en/docs/"],
          "explorers": [],
          "repositories": ["https://github.com/Soneium"],
          "socialMedia": [
            "https://x.com/soneium",
            "https://t.me/SoneiumOfficial",
            "https://discord.gg/rWWPBHug9w"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "socialnetwork",
      "createdAt": "1720191862",
      "display": {
        "name": "Social Network",
        "slug": "social-network",
        "description": "Social Network is an upcoming Layer 2 on Ethereum, built on the Orbit stack. It is the first Layer 2 scaling and staking solution for Bitcoin, aiming to reduce transaction fees, finality, and energy consumption of the Bitcoin Network by connecting it to Ethereum via Arbitrum.",
        "purposes": ["Bitcoin DApps"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://social.network/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://twitter.com/socialnetworkL2"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "soon",
      "createdAt": "1726836904",
      "display": {
        "name": "Soon Mainet",
        "slug": "soon",
        "description": "SOON is a Layer 2 chain built on top of the SOON Stack, which itself is based on the OP Stack, but introduces the Decoupled Solana Virtual Machine (SVM).",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://soo.network/"],
          "apps": [],
          "documentation": ["https://soon-2.gitbook.io/home"],
          "explorers": ["https://explorer.devnet.soo.network"],
          "repositories": ["https://github.com/soonlabs"],
          "socialMedia": [
            "https://x.com/soon_svm",
            "https://discord.gg/soon-svm"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "sorare",
      "createdAt": "1623153328",
      "badges": ["AppChain", "DAC", "StarkEx", "SHARP"],
      "display": {
        "name": "Sorare",
        "slug": "sorare",
        "description": "Sorare is a global fantasy football game where you can play with officially licensed digital cards.",
        "purposes": ["NFT", "Exchange"],
        "provider": "StarkEx",
        "category": "Validium",
        "links": {
          "websites": ["https://sorare.com/"],
          "apps": [],
          "documentation": ["https://docs.starkware.co/starkex/index.html"],
          "explorers": [],
          "repositories": [
            "https://github.com/starkware-libs/starkex-contracts"
          ],
          "socialMedia": [
            "https://discord.gg/TSjtHaM",
            "https://reddit.com/r/Sorare/",
            "https://twitter.com/Sorare",
            "https://instagram.com/sorare_official/"
          ]
        },
        "activityDataSource": "Closed API"
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "escrows": [
          {
            "address": "0xF5C9F957705bea56a7e806943f98F7777B995826",
            "newVersion": true,
            "sinceTimestamp": "1626352527",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xF5C9F957705bea56a7e806943f98F7777B995826",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": [
                  "0x5918481F777dBe437De249492B90AffB4e655de4",
                  "0xCc928977e4a75d25099e7DA7B6Fd79Dac2f9fD2B"
                ],
                "implementations": [
                  "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                  "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                  "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                  "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                  "0x613ee54C54D5548627064B4D648942bF3648f376",
                  "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                  "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "starkex",
          "product": ["sorare"],
          "sinceTimestamp": "1626352527",
          "resyncLastDays": 7
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "2/4 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 2/4 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 2/4 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5,
          "sources": [
            {
              "contract": "StarkExchange",
              "references": [
                "https://etherscan.io/address/0x67e198743BC19fa4757720eDd0e769f8291e1F1D#code#F14#L188"
              ]
            },
            {
              "contract": "Committee",
              "references": [
                "https://etherscan.io/address/0x879cD57975d596004863D30c59d579ef78BBbe32#code#F1#L65"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 7d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 604800
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds. NFTs will be minted on L1 to exit.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. When withdrawing NFTs they are minted on L1.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/withdrawal.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchange",
            "address": "0xF5C9F957705bea56a7e806943f98F7777B995826",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": [
                "0x5918481F777dBe437De249492B90AffB4e655de4",
                "0xCc928977e4a75d25099e7DA7B6Fd79Dac2f9fD2B"
              ],
              "implementations": [
                "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                "0x613ee54C54D5548627064B4D648942bF3648f376",
                "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
              ],
              "immutable": false
            },
            "chain": "ethereum"
          },
          {
            "name": "Committee",
            "address": "0x879cD57975d596004863D30c59d579ef78BBbe32",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governors",
          "accounts": [
            {
              "address": "0x5918481F777dBe437De249492B90AffB4e655de4",
              "type": "EOA"
            },
            {
              "address": "0xCc928977e4a75d25099e7DA7B6Fd79Dac2f9fD2B",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge. Currently there is 14d delay before the upgrade."
        },
        {
          "name": "Data Availability Committee",
          "accounts": [
            {
              "address": "0x6EBCb783E53C072e9b1C8786942aefc145C6Df75",
              "type": "EOA"
            },
            {
              "address": "0x9bC546c5741d31b3510D3B240bDB4c517030E318",
              "type": "EOA"
            },
            {
              "address": "0xA70A45E56c087A34991A712d437fcFfd79D3a8Ec",
              "type": "EOA"
            },
            {
              "address": "0xefaaf3A5D0D795C7c1f92cBeDE868C273790026e",
              "type": "EOA"
            }
          ],
          "minSigners": 2,
          "minAssumedHonestMembers": 3,
          "description": "Validity proof must be signed by at least 2 of these addresses to approve state update."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x63881ac44293E22F3c3183a0C4113586ABb3e653",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update state of the system. When Operator is down the state cannot be updated."
        }
      ],
      "milestones": [
        {
          "name": "Mainnet launch",
          "date": "2021-07-26T00:00:00Z",
          "link": "https://medium.com/sorare/were-live-on-our-scaling-solution-starkware-62438abee9a8",
          "description": "Layer 2 scaling solution powered by Starkware, is live on Ethereum.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "specular",
      "createdAt": "1704292936",
      "display": {
        "name": "Specular",
        "slug": "specular",
        "description": "Specular is an EVM-native optimistic rollup designed to scale Ethereum securely, with minimal additional trust assumptions.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://specular.network/"],
          "apps": [],
          "documentation": ["https://docs.specular.network/overview/welcome"],
          "explorers": ["https://explorer.specular.network/"],
          "repositories": ["https://github.com/fabriqnetwork/specular"],
          "socialMedia": ["https://twitter.com/SpecularL2"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "starknet",
      "createdAt": "1642687633",
      "display": {
        "name": "Starknet",
        "slug": "starknet",
        "provider": "Starknet",
        "description": "Starknet is a general purpose ZK Rollup based on STARKs and the Cairo VM.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "links": {
          "apps": ["https://starkgate.starknet.io/"],
          "websites": [
            "https://starknet.io/",
            "https://starkware.co/starknet/",
            "https://starkware.co/ecosystem/",
            "https://community.starknet.io/"
          ],
          "documentation": ["https://starknet.io/learn/what-is-starknet"],
          "explorers": ["https://voyager.online/", "https://starkscan.co/"],
          "repositories": ["https://github.com/starkware-libs"],
          "socialMedia": [
            "https://discord.com/invite/qypnmzkhbc",
            "https://twitter.com/StarkWareLtd",
            "https://medium.com/starkware",
            "https://starkware.co/",
            "https://youtube.com/channel/UCnDWguR8mE2oDBsjhQkgbvg"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "liveness": {
          "explanation": "Starknet is a ZK rollup that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. Proofs are aggregated with other projects using SHARP and state updates have to refer to proved claims."
        },
        "finality": { "finalizationPeriod": 0 },
        "costsWarning": {
          "sentiment": "warning",
          "content": "The proof verification costs are shared among all projects that use the Starkware SHARP verifier. Therefore, Starknet’s costs represent a rough estimate, and we are working to provide more accurate values."
        }
      },
      "config": {
        "associatedTokens": ["STRK"],
        "escrows": [
          {
            "address": "0xae0Ee0A63A2cE6BaeEFFE56e7714FB4EFE48D419",
            "newVersion": true,
            "sinceTimestamp": "1647857148",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xae0Ee0A63A2cE6BaeEFFE56e7714FB4EFE48D419",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": [
                  "0xC91EC49Ad0843E5Cca55b4c4e5f68de54F6cB2Ae",
                  "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"
                ],
                "implementations": [
                  "0x95ff25A59Dc9c5A41cF0709dc916041E5dC7fd95"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for ETH. There is no bridge cap.",
              "upgradableBy": ["StarkGate ETH owner", "BridgeMultisig"],
              "upgradeDelay": "3d"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x0437465dfb5B79726e35F08559B0cBea55bb585C",
            "newVersion": true,
            "sinceTimestamp": "1652101033",
            "tokens": ["DAI"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x0437465dfb5B79726e35F08559B0cBea55bb585C",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "DAI Vault for custom DAI Gateway managed by MakerDAO. The current bridge cap is 5.00 M DAI.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x283751A21eafBFcD52297820D27C1f1963D9b5b4",
            "newVersion": true,
            "sinceTimestamp": "1657137600",
            "tokens": ["WBTC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x283751A21eafBFcD52297820D27C1f1963D9b5b4",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for WBTC. There is no bridge cap.",
              "upgradableBy": ["BridgeMultisig"],
              "upgradeDelay": "3d"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xF6080D9fbEEbcd44D89aFfBFd42F098cbFf92816",
            "newVersion": true,
            "sinceTimestamp": "1657137639",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xF6080D9fbEEbcd44D89aFfBFd42F098cbFf92816",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for USDC. There is no bridge cap.",
              "upgradableBy": ["BridgeMultisig"],
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xbb3400F107804DFB482565FF1Ec8D8aE66747605",
            "newVersion": true,
            "sinceTimestamp": "1657137615",
            "tokens": ["USDT"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xbb3400F107804DFB482565FF1Ec8D8aE66747605",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for USDT. There is no bridge cap.",
              "upgradableBy": ["BridgeMultisig"],
              "upgradeDelay": "3d"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xBf67F59D2988A46FBFF7ed79A621778a3Cd3985B",
            "newVersion": true,
            "sinceTimestamp": "1657137623",
            "tokens": ["wstETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xBf67F59D2988A46FBFF7ed79A621778a3Cd3985B",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for wstETH. There is no bridge cap.",
              "upgradableBy": ["BridgeMultisig"],
              "upgradeDelay": "3d"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xcf58536D6Fab5E59B654228a5a4ed89b13A876C2",
            "newVersion": true,
            "sinceTimestamp": "1657137623",
            "tokens": ["rETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xcf58536D6Fab5E59B654228a5a4ed89b13A876C2",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for rETH. There is no bridge cap.",
              "upgradableBy": ["BridgeMultisig"],
              "upgradeDelay": "3d"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xf76e6bF9e2df09D0f854F045A3B724074dA1236B",
            "newVersion": true,
            "sinceTimestamp": "1698061847",
            "tokens": ["UNI"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xf76e6bF9e2df09D0f854F045A3B724074dA1236B",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0xF689688640E88160c07C6FC5cc63039F29EDe86b"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for UNI. There is no bridge cap.",
              "upgradableBy": ["StarkGate UNI owner"],
              "upgradeDelay": "0s"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xDc687e1E0B85CB589b2da3C47c933De9Db3d1ebb",
            "newVersion": true,
            "sinceTimestamp": "1692689255",
            "tokens": ["FRAX"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xDc687e1E0B85CB589b2da3C47c933De9Db3d1ebb",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for FRAX. There is no bridge cap.",
              "upgradableBy": ["StarkGate FRAX owner"],
              "upgradeDelay": "0s"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x66ba83ba3D3AD296424a2258145d9910E9E40B7C",
            "newVersion": true,
            "sinceTimestamp": "1692689267",
            "tokens": ["FXS"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x66ba83ba3D3AD296424a2258145d9910E9E40B7C",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for FXS. There is no bridge cap.",
              "upgradableBy": ["StarkGate FXS owner"],
              "upgradeDelay": "0s"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xd8E8531fdD446DF5298819d3Bc9189a5D8948Ee8",
            "newVersion": true,
            "sinceTimestamp": "1692689279",
            "tokens": ["sfrxETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xd8E8531fdD446DF5298819d3Bc9189a5D8948Ee8",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for sfrxETH. There is no bridge cap.",
              "upgradableBy": ["StarkGate sfrxETH owner"],
              "upgradeDelay": "0s"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xF3F62F23dF9C1D2C7C63D9ea6B90E8d24c7E3DF5",
            "newVersion": true,
            "sinceTimestamp": "1688046071",
            "tokens": ["LUSD"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xF3F62F23dF9C1D2C7C63D9ea6B90E8d24c7E3DF5",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x5751a83170BeA11fE7CdA5D599B04153C021f21A"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for LUSD. There is no bridge cap.",
              "upgradableBy": ["StarkGate LUSD owner"],
              "upgradeDelay": "0s"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x023A2aAc5d0fa69E3243994672822BA43E34E5C9",
            "newVersion": true,
            "sinceTimestamp": "1687524587",
            "tokens": ["LORDS"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x023A2aAc5d0fa69E3243994672822BA43E34E5C9",
              "upgradeability": null,
              "chain": "ethereum",
              "description": "StarkGate bridge for LORDS.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xcE5485Cfb26914C5dcE00B9BAF0580364daFC7a4",
            "newVersion": true,
            "sinceTimestamp": "1704905879",
            "tokens": ["STRK"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xcE5485Cfb26914C5dcE00B9BAF0580364daFC7a4",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec"],
                "implementations": [
                  "0x6ad74D4B79A06A492C288eF66Ef868Dd981fdC85"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for STRK. There is no bridge cap.",
              "upgradableBy": ["BridgeMultisig"],
              "upgradeDelay": "3d"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xF5b6Ee2CAEb6769659f6C091D209DfdCaF3F69Eb",
            "newVersion": true,
            "sinceTimestamp": "1707322643",
            "tokens": ["EKUBO", "ZEND", "NSTR"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xF5b6Ee2CAEb6769659f6C091D209DfdCaF3F69Eb",
              "upgradeability": {
                "proxyType": "StarkWare proxy",
                "admins": ["0x5751a83170BeA11fE7CdA5D599B04153C021f21A"],
                "implementations": [
                  "0x594cCaDF93F860dc42Cf9fd7bCea47Ff4d135D7A"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "StarkGate bridge for EKUBO, ZEND, NSTR (and potentially other tokens listed via StarkgateManager). There is no bridge cap.",
              "upgradableBy": ["StarkGate MultiBridge Admin"],
              "upgradeDelay": "0s"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "starknet",
          "defaultUrl": "https://starknet-mainnet.public.blastapi.io",
          "defaultCallsPerMinute": 120
        },
        "finality": {
          "lag": 0,
          "type": "Starknet",
          "minTimestamp": "1724856347",
          "stateUpdate": "disabled"
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1636978914",
              "untilTimestamp": "1702921247",
              "programHashes": [
                "1865367024509426979036104162713508294334262484507712987283009063059134893433"
              ]
            },
            "_hackCostMultiplier": 0.7
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1702921247",
              "untilTimestamp": "1704855731",
              "programHashes": [
                "54878256403880350656938046611252303365750679698042371543935159963667935317"
              ]
            },
            "_hackCostMultiplier": 0.7
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1704855731",
              "untilTimestamp": "1710252995",
              "programHashes": [
                "2479841346739966073527450029179698923866252973805981504232089731754042431018"
              ]
            },
            "_hackCostMultiplier": 0.7
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1710252995",
              "untilTimestamp": "1710625271",
              "programHashes": [
                "109586309220455887239200613090920758778188956576212125550190099009305121410"
              ]
            },
            "_hackCostMultiplier": 0.65
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1710625271",
              "untilTimestamp": "1724856227",
              "programHashes": [
                "3383082961563516565935611087683915026448707331436034043529592588079494402084"
              ]
            },
            "_hackCostMultiplier": 0.65
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1724856227",
              "programHashes": [
                "853638403225561750106379562222782223909906501242604214771127703946595519856"
              ]
            },
            "_hackCostMultiplier": 0.65
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "sharpSubmission",
              "sinceTimestamp": "1724856227",
              "programHashes": [
                "1161178844461337253856226043908368523817098764221830529880464854589141231910"
              ]
            },
            "_hackCostMultiplier": 0.65
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xc662c410C0ECf747543f5bA90660f6ABeBD9C8c4",
              "selector": "0x77552641",
              "functionSignature": "function updateState(uint256[] programOutput, uint256 onchainDataHash, uint256 onchainDataSize)",
              "sinceTimestamp": "1636978914"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xc662c410C0ECf747543f5bA90660f6ABeBD9C8c4",
              "selector": "0xb72d42a1",
              "functionSignature": "function updateStateKzgDA(uint256[] programOutput, bytes kzgProof)",
              "sinceTimestamp": "1710252995",
              "untilTimestamp": "1724856227"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xc662c410C0ECf747543f5bA90660f6ABeBD9C8c4",
              "selector": "0x507ee528",
              "functionSignature": "function updateStateKzgDA(uint256[] programOutput, bytes[] kzgProofs)",
              "sinceTimestamp": "1724856227"
            }
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
              "selector": "0x5578ceae",
              "functionSignature": "function registerContinuousMemoryPage(uint256 startAddr,uint256[] values,uint256 z,uint256 alpha,uint256 prime)",
              "sinceTimestamp": "1678095635",
              "untilTimestamp": "1706789063"
            },
            "_hackCostMultiplier": 0.9
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0x40864568f679c10aC9e72211500096a5130770fA",
              "selector": "0x5578ceae",
              "functionSignature": "function registerContinuousMemoryPage(uint256 startAddr,uint256[] values,uint256 z,uint256 alpha,uint256 prime)",
              "sinceTimestamp": "1706789063",
              "untilTimestamp": "1710342000"
            },
            "_hackCostMultiplier": 0.9
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0x40864568f679c10aC9e72211500096a5130770fA",
              "selector": "0x5578ceae",
              "functionSignature": "function registerContinuousMemoryPage(uint256 startAddr,uint256[] values,uint256 z,uint256 alpha,uint256 prime)",
              "sinceTimestamp": "1710342000",
              "untilTimestamp": "1722197315"
            },
            "_hackCostMultiplier": 0.5
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
              "selector": "0x5578ceae",
              "functionSignature": "function registerContinuousMemoryPage(uint256 startAddr,uint256[] values,uint256 z,uint256 alpha,uint256 prime)",
              "sinceTimestamp": "1722197315"
            },
            "_hackCostMultiplier": 0.5
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
              "selector": "0x739ef303",
              "functionSignature": "function registerContinuousPageBatch((uint256 startAddr, uint256[] values, uint256 z, uint256 alpha, uint256 prime)[] memoryPageEntries)",
              "sinceTimestamp": "1722197315"
            },
            "_hackCostMultiplier": 0.5
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0xDEf8A3b280A54eE7Ed4f72E1c7d6098ad8df44fb",
              "selector": "0xe85a6a28",
              "functionSignature": "function verifyFRI(uint256[] proof,uint256[] friQueue,uint256 evaluationPoint,uint256 friStepSize,uint256 expectedRoot)",
              "sinceTimestamp": "1706772791",
              "untilTimestamp": "1710342000"
            },
            "_hackCostMultiplier": 0.7
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0xDEf8A3b280A54eE7Ed4f72E1c7d6098ad8df44fb",
              "selector": "0xe85a6a28",
              "functionSignature": "function verifyFRI(uint256[] proof,uint256[] friQueue,uint256 evaluationPoint,uint256 friStepSize,uint256 expectedRoot)",
              "sinceTimestamp": "1710342000",
              "untilTimestamp": "1722197315"
            },
            "_hackCostMultiplier": 0.65
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
              "selector": "0xe85a6a28",
              "functionSignature": "function verifyFRI(uint256[] proof,uint256[] friQueue,uint256 evaluationPoint,uint256 friStepSize,uint256 expectedRoot)",
              "sinceTimestamp": "1722197315"
            },
            "_hackCostMultiplier": 0.65
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0x634DCf4f1421Fc4D95A968A559a450ad0245804c",
              "selector": "0x3fe317a6",
              "functionSignature": "function verifyMerkle(uint256[] merkleView,uint256[] initialMerkleQueue,uint256 height,uint256 expectedRoot)",
              "sinceTimestamp": "1706767355",
              "untilTimestamp": "1710342000"
            },
            "_hackCostMultiplier": 0.7
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0x634DCf4f1421Fc4D95A968A559a450ad0245804c",
              "selector": "0x3fe317a6",
              "functionSignature": "function verifyMerkle(uint256[] merkleView,uint256[] initialMerkleQueue,uint256 height,uint256 expectedRoot)",
              "sinceTimestamp": "1710342000",
              "untilTimestamp": "1722197315"
            },
            "_hackCostMultiplier": 0.65
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "proofSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
              "selector": "0x3fe317a6",
              "functionSignature": "function verifyMerkle(uint256[] merkleView,uint256[] initialMerkleQueue,uint256 height,uint256 expectedRoot)",
              "sinceTimestamp": "1722197315"
            },
            "_hackCostMultiplier": 0.65
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "Starknet",
              "references": [
                "https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain (SD)",
          "description": "All of the data (SD = state diffs) needed for proof construction is published onchain.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "Starknet",
              "references": [
                "https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring.",
          "sentiment": "bad",
          "sources": [
            {
              "contract": "Starknet",
              "references": [
                "https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/NethermindEth/juno)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "What is Starknet",
              "href": "https://starkware.co/starknet/"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge STARK cryptography is used",
          "description": "Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "STARK Core Engine Deep Dive",
              "href": "https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required to reconstruct rollup state is published on chain",
          "description": "State diffs are publish on-chain as blob or calldata on every state update. The state diffs contain information on every contact whose storage was updated, and additional information on contract deployments. From diffs full system state can be recovered. Contracts' code is not published on L1, but can be trustlessly verified if available elsewhere.",
          "risks": [],
          "references": [
            {
              "text": "On-Chain Data - Starknet documentation",
              "href": "https://docs.starknet.io/documentation/architecture_and_concepts/Network_Architecture/on-chain-data/"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the Starknet service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "There is no general mechanism to force the sequencer to include the transaction.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "Censorship resistance of Starknet - Forum Discussion",
              "href": "https://community.starknet.io/t/censorship-resistance/196"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. Note that the withdrawal request can be censored by the Sequencer.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the operator censors withdrawal transaction."
              }
            ],
            "references": [
              {
                "text": "Withdrawing is based on l2 to l1 messages - Starknet documentation",
                "href": "https://book.cairo-lang.org/ch16-04-L1-L2-messaging.html#sending-messages-from-starknet-to-ethereum"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "risks": [],
            "description": "There is no generic escape hatch mechanism as Starknet cannot be forced by users into a frozen state. Note that a freezing mechanism on L2, to be secure, requires anti-censorship protection.",
            "references": []
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "The [Juno](https://github.com/NethermindEth/juno) node software can be used to reconstruct the L2 state entirely from L1. The feature has not been released yet, but can be found in this [PR](https://github.com/NethermindEth/juno/pull/1335).",
        "compressionScheme": "Starknet doesn't use any compression scheme.",
        "genesisState": "There is no non-empty genesis state.",
        "dataFormat": "The data format has been updated with different versions, and the full specification can be found [here](https://docs.starknet.io/documentation/architecture_and_concepts/Network_Architecture/on-chain-data/)."
      },
      "stateValidation": {
        "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
        "categories": [
          {
            "title": "Proven Program",
            "description": "The source code of the Starknet OS can be found [here](https://github.com/starkware-libs/cairo-lang/tree/v0.13.1/src/starkware/starknet/core/os). The source code of the bootloader can be found [here](https://github.com/starkware-libs/cairo-lang/blob/v0.13.1/src/starkware/cairo/bootloaders/bootloader/bootloader.cairo).",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the proof system is implemented incorrectly."
              }
            ]
          }
        ],
        "proofVerification": {
          "shortDescription": "Starknet is a ZK-CairoVM rollup on Ethereum.",
          "aggregation": true,
          "requiredTools": [],
          "verifiers": [
            {
              "name": "SHARPVerifier",
              "description": "Starknet utilizes STARKs for their system. The protocol makes use of recursive aggregation across multiple projects that share the same onchain verifier. SHARP stands for SHARed Prover. Different programs are represented onchain with different program hashes.",
              "verified": "no",
              "contractAddress": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Main bootloader",
                  "proofSystem": "-",
                  "mainArithmetization": "-",
                  "mainPCS": "-",
                  "trustedSetup": "-",
                  "link": "https://github.com/starkware-libs/cairo-lang/blob/v0.13.1/src/starkware/cairo/bootloaders/bootloader/bootloader.cairo"
                },
                {
                  "name": "Simple bootloader",
                  "proofSystem": "-",
                  "mainArithmetization": "-",
                  "mainPCS": "-",
                  "trustedSetup": "-",
                  "link": "https://github.com/starkware-libs/cairo-lang/blob/v0.13.1/src/starkware/cairo/bootloaders/simple_bootloader/simple_bootloader.cairo"
                },
                {
                  "name": "Applicative bootloader",
                  "proofSystem": "-",
                  "mainArithmetization": "-",
                  "mainPCS": "-",
                  "trustedSetup": "-",
                  "link": "https://github.com/starkware-libs/cairo-lang/blob/v0.13.2a0/src/starkware/cairo/bootloaders/applicative_bootloader/applicative_bootloader.cairo"
                },
                {
                  "name": "Recursive Cairo verifier",
                  "proofSystem": "STARK",
                  "mainArithmetization": "AIR",
                  "mainPCS": "FRI",
                  "trustedSetup": "None",
                  "link": "https://github.com/starkware-libs/cairo-lang/tree/v0.13.1/src/starkware/cairo/cairo_verifier/layouts/all_cairo"
                },
                {
                  "name": "StarknetOS",
                  "proofSystem": "-",
                  "mainArithmetization": "-",
                  "mainPCS": "-",
                  "trustedSetup": "-",
                  "link": "https://github.com/starkware-libs/cairo-lang/tree/v0.13.1/src/starkware/starknet/core/os"
                }
              ]
            }
          ]
        }
      },
      "contracts": {
        "addresses": [
          {
            "name": "Starknet",
            "address": "0xc662c410C0ECf747543f5bA90660f6ABeBD9C8c4",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0xD5fB66CaEE881367Df4409B17Fd53a2Ef0D9B263",
                "0x83C0A700114101D1283D1405E2c8f21D3F03e988"
              ],
              "implementations": ["0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Starknet contract receives (verified) state roots from the Sequencer, allows users to read L2 -> L1 messages and send L1 -> L2 message.",
            "upgradeDelay": "No delay",
            "upgradableBy": ["Starknet Proxy Governors"]
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          },
          {
            "name": "L1DaiGateway",
            "address": "0x9F96fE0633eE838D0298E8b8980E6716bE81388d",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Custom DAI Gateway, main entry point for users depositing DAI to L2 where \"canonical\" L2 DAI token managed by MakerDAO will be minted. Managed by MakerDAO."
          },
          {
            "name": "StarkgateManager",
            "address": "0x0c5aE94f8939182F2D06097025324D1E537d5B60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": ["0x5751a83170BeA11fE7CdA5D599B04153C021f21A"],
              "implementations": ["0x64608BDF1867110f622391196989bF4cE37BBb33"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "This contract allows the permissionless creation and configuration of StarkGate token escrows. Tokens can also be blacklisted for creation, and already actively bridged tokens can be deactivated from depositing by a designated TokenAdmin.",
            "upgradableBy": ["StarkGate MultiBridge Admin"],
            "upgradeDelay": "0s"
          },
          {
            "name": "StarkgateRegistry",
            "address": "0x1268cc171c54F2000402DfF20E93E60DF4c96812",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": ["0x5751a83170BeA11fE7CdA5D599B04153C021f21A"],
              "implementations": ["0x642F04899B6cA155c2a5eAdD4e4ed634f1B07Dd7"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "A central registry contract to map token addresses to their StarkGate bridge contract.",
            "upgradableBy": ["StarkGate MultiBridge Admin"],
            "upgradeDelay": "0s"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "upgradesAndGovernance": "\nThe Upgrading mechanism of Starknet follows a similar scheme for all of their smart contracts. A contract initializes with the creator of the contract as a Governor, who can then nominate or remove other Governors allowing them to call restricted governor functions.\n\nThe Starknet core contract is upgradable by 2 appointed `Starknet Proxy Governors`: A Proxy multisig with a 2 / 5 threshold and an EOA. Implementations can be upgraded without delay, thus users are not provided with an exit window in case of unwanted upgrades.\n\n`Starknet Implementation Governors` have the authority to execute governed functions that modify contract parameters without delay. These actions encompass registering/removing Operators, specifying the program and config hash, or setting the Message Cancellation Delay between L1 and L2. Currently it is governed by a Multisig with a 2 / 5 threshold and an EOA. The verifier address is set upon initialization of the Starknet Implementation contract.\n\nVia the proxy contracts, the `SHARP Verifier Governors` can upgrade the GPSStatement Verifier implementation. It is important to note that the state is also maintained in the implementation contract, rather than in the proxy itself. An upgrade to the Verifier could potentially introduce code that approves fraudulent states. Currently, there is no delay before any upgrade takes effect.\n\nThe StarkGate bridge escrows are mostly governed and upgraded by a Bridge Multisig, others by different owners. (see Permissions section)\n\nAt present, the StarkNet Foundation hosts voting for STRK token holders (or their delegates) regarding protocol updates to reflect community intent, however, there is no direct authority to implement the execution of these upgrades.\n",
      "permissions": [
        {
          "name": "Starknet Proxy Governors",
          "accounts": [
            {
              "address": "0xD5fB66CaEE881367Df4409B17Fd53a2Ef0D9B263",
              "type": "EOA"
            },
            {
              "address": "0x83C0A700114101D1283D1405E2c8f21D3F03e988",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge. Can also upgrade implementation of the StarknetCore contract, potentially allowing fraudulent state to be posted. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "ProxyMultisig",
          "description": "This is a Gnosis Safe with 2 / 5 threshold.  One of Proxy Governors.",
          "accounts": [
            {
              "address": "0x83C0A700114101D1283D1405E2c8f21D3F03e988",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x804d60CB1ade94511f7915A2062948685Ca8C81f",
              "type": "EOA"
            },
            {
              "address": "0x2871B956bC19D25961E9a7519f32D7fDaA21B403",
              "type": "EOA"
            },
            {
              "address": "0x64F4396bb0669C72858Cc50C779b48EB25F45770",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xCe958D997F4a5824D4d503A128216322C6C223a0",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Starknet Implementation Governors",
          "accounts": [
            {
              "address": "0x16C8B90390468c1AA81f68B2Fb9fcc3d46e0eA3E",
              "type": "EOA"
            },
            {
              "address": "0x86fD9cA64014b465d17f1bFBBBCFBEC7ebD8b1Bd",
              "type": "MultiSig"
            }
          ],
          "description": "The governors are responsible for: appointing operators, changing program hash, changing config hash, changing message cancellation delay. There is no delay on governor actions."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0xFf6B2185E357b6e9136A1b2ca5d7C45765D5c591",
              "type": "EOA"
            },
            {
              "address": "0x2C169DFe5fBbA12957Bdd0Ba47d9CEDbFE260CA7",
              "type": "EOA"
            }
          ],
          "description": "Allowed to post state updates. When the operator is down the state cannot be updated."
        },
        {
          "name": "MakerDAO Governance",
          "accounts": [
            {
              "address": "0x0a3f6849f78076aefaDf113F5BED87720274dDC0",
              "type": "Contract"
            }
          ],
          "description": "In DAI bridge it can set max deposit per bridge and per user. In DAI escrow it can approve token transfers."
        },
        {
          "name": "StarkGate ETH owner",
          "accounts": [
            {
              "address": "0xC91EC49Ad0843E5Cca55b4c4e5f68de54F6cB2Ae",
              "type": "EOA"
            },
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the ETH escrow, potentially gaining access to all funds stored in the bridge. Currently there is 3d delay before the upgrade."
        },
        {
          "name": "StarkgateETHSecurityAgentMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Can enable the token withdrawal limit of the Starkgate escrow for ETH.",
          "accounts": [
            {
              "address": "0x77Dd0cf03e1cCbDC750c9E5FDc34b8A3671f88c5",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x030ceEE5D4CBc304287234720B11E00f47695755",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0x35FD2dD14D96Ed455356B892cd4b2fCdc7F44a7b",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "StarkGate WBTC owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the WBTC escrow, potentially gaining access to all funds stored in the bridge. Currently there is 3d delay before the upgrade."
        },
        {
          "name": "StarkGate USDC owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the USDC escrow, potentially gaining access to all funds stored in the bridge. Currently there is 3d delay before the upgrade."
        },
        {
          "name": "StarkGate USDT owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the USDT escrow, potentially gaining access to all funds stored in the bridge. Currently there is 3d delay before the upgrade."
        },
        {
          "name": "StarkGate wstETH owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the wstETH escrow, potentially gaining access to all funds stored in the bridge. Currently there is 3d delay before the upgrade."
        },
        {
          "name": "StarkGate rETH owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the rETH escrow, potentially gaining access to all funds stored in the bridge. Currently there is 3d delay before the upgrade."
        },
        {
          "name": "StarkGate UNI owner",
          "accounts": [
            {
              "address": "0xF689688640E88160c07C6FC5cc63039F29EDe86b",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the UNI escrow, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "StarkGate FRAX owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the FRAX escrow, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "StarkGate FXS owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the FXS escrow, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "StarkGate sfrxETH owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the sfrxETH escrow, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "StarkGate LUSD owner",
          "accounts": [
            {
              "address": "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the LUSD escrow, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "StarkGate MultiBridge Admin",
          "accounts": [
            {
              "address": "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the StarkGate MultiBridge escrow, potentially gaining access to all funds stored in the bridge. Is also the TokenAdmin of the StarkgateManager contract, permissioned to blacklist tokens from enrollment, pause deposits on the MultiBridge, and add existing bridges to the Registry contract. Additionally, the StarkgateManager and StarkgateRegistry contracts can be upgraded by this address."
        },
        {
          "name": "BridgeMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  Can upgrade the following bridges: FRAX, FXS, sfrxETH, USDT, WBTC, ETH, USDT, and additional permissions on other bridges, like setting the max total balance or activate withdrawal limits.",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xd38831Bcb40bdEE0577Ee064112Fa77a38cAd3F8",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xCe958D997F4a5824D4d503A128216322C6C223a0",
              "type": "EOA"
            },
            {
              "address": "0x64F4396bb0669C72858Cc50C779b48EB25F45770",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "StarkGate STRK owner",
          "accounts": [
            {
              "address": "0x015277f49d5dD035A5F3Ce34aD5eBfDBaCA0C6Ec",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of the STRK escrow, potentially gaining access to all funds stored in the bridge. Currently there is 3d delay before the upgrade."
        }
      ],
      "milestones": [
        {
          "name": "Starknet starts using blobs",
          "link": "https://twitter.com/Starknet/status/1767915153700290839",
          "date": "2024-03-13T00:00:00Z",
          "description": "Starknet starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "Starknet Provisions",
          "link": "https://www.starknet.io/en/content/starknet-provisions-program",
          "date": "2024-02-14T00:00:00Z",
          "description": "Starknet begins allocating $STRK to early contributors and users.",
          "type": "general"
        },
        {
          "name": "Starknet Alpha",
          "link": "https://medium.com/starkware/starknet-alpha-now-on-mainnet-4cf35efd1669",
          "date": "2021-11-29T00:00:00Z",
          "description": "Rollup is live on mainnet, enabling general computation using ZK Rollup technology.",
          "type": "general"
        },
        {
          "name": "StarkGate Alpha",
          "link": "https://medium.com/starkware/starkgate-alpha-35d01d21e3af",
          "date": "2022-05-09T00:00:00Z",
          "description": "Bridge is live on mainnet, serving as gateway between Ethereum and Starknet.",
          "type": "general"
        }
      ],
      "badges": ["CairoVM", "EthereumBlobs", "SHARP", "Governance"],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "stealthchain",
      "createdAt": "1694778975",
      "display": {
        "name": "StealthChain",
        "slug": "stealthchain",
        "description": "Degen Stealth Launchpad, Cross Chain Token Bridge & LP Pool.",
        "purposes": ["Launchpad"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://stealthchain.org"],
          "apps": [],
          "documentation": ["https://docs.stealthchain.org"],
          "explorers": [
            "https://test.stealthscan.xyz/",
            "https://stealthpad.instatus.com/"
          ],
          "repositories": ["https://github.com/stealthpadxyz"],
          "socialMedia": [
            "https://twitter.com/stealthpadxyz",
            "https://discord.gg/tWA5AhUS",
            "https://mirror.xyz/stealthpad.eth"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "superlumio",
      "createdAt": "1726646157",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x68c36689D9820D78F53CF384D06199b061cc948b#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xA12Cf34001e553dc254D131105364351f5174d75"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x4662AF45c8A14c63cb90c5a61A8045EE5a35A00D#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x68c36689D9820D78F53CF384D06199b061cc948b#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x68c36689D9820D78F53CF384D06199b061cc948b#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x4662AF45c8A14c63cb90c5a61A8045EE5a35A00D#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x4662AF45c8A14c63cb90c5a61A8045EE5a35A00D#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x4662AF45c8A14c63cb90c5a61A8045EE5a35A00D#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x68c36689D9820D78F53CF384D06199b061cc948b#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0xb6E2Eee22b684f6AAb2083097F7E874994bA930e",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x5c53f2fF1030C7fbC0616fD5B8fC6bE97aa27e00",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "ConduitMultisig",
          "description": "* This is a Gnosis Safe with 4 / 7 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n* Can upgrade implementation of L1ERC721Bridge, OptimismPortal, OptimismMintableERC20Factory, SystemConfig, L2OutputOracle (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x5c53f2fF1030C7fbC0616fD5B8fC6bE97aa27e00",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xb6E2Eee22b684f6AAb2083097F7E874994bA930e",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x6c10d7e5750b21729Eb863Cf89E5b48850E6d97D",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xfe0651694489eb60Bb93031C9C32318b0E1Fe200"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x9bF59F099d4306B52C7624c90B6d5FD75ab8513b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xA6b2b6B6E621482aF877F304D46B94123a942Ae9"],
              "implementations": ["0xf7110272725E2036fc21294E9468EBD635800381"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x9C93982cb4861311179aE216d1B7fD61232DE1f0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xA6b2b6B6E621482aF877F304D46B94123a942Ae9"],
              "implementations": ["0x4662AF45c8A14c63cb90c5a61A8045EE5a35A00D"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x9cF613c19371eFf26c94c0d4F62197d2C0ab60bc",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "ProxyAdmin",
            "address": "0xA6b2b6B6E621482aF877F304D46B94123a942Ae9",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L1ERC721Bridge, OptimismPortal, OptimismMintableERC20Factory, SystemConfig, L2OutputOracle.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0xccc6Fc5B866D34a7A4C40455a3cCfaa0cbFc145B",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xA6b2b6B6E621482aF877F304D46B94123a942Ae9"],
              "implementations": ["0xCB163fF84Dfe5380C76cbd9B660d62D9ccE8945C"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xdB5C6b73CB1c5875995a42D64C250BF8BC69a8bc",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xA6b2b6B6E621482aF877F304D46B94123a942Ae9"],
              "implementations": ["0xAaa6cF2EFB6cfB5f6887366cC9ce242899f495A1"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0xFb252d6199AEfeE6938a1c57213AAd96ecD2650c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xA6b2b6B6E621482aF877F304D46B94123a942Ae9"],
              "implementations": ["0x4e85732016AFF90b14ea7F39Df04cBcf4ED170eC"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0xffB004874CbBF8692B5f397B602f4B8a630aeD59",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xA6b2b6B6E621482aF877F304D46B94123a942Ae9"],
              "implementations": ["0x68c36689D9820D78F53CF384D06199b061cc948b"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ConduitMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "SuperLumio Launch",
          "link": "https://x.com/PontemNetwork/status/1762887219235127612",
          "date": "2024-02-28T00:00:00Z",
          "description": "SuperLumio launch is announced on X.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Conduit", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "opstack",
        "name": "SuperLumio",
        "slug": "superlumio",
        "description": "SuperLumio (сanary mainnet) marks the initial phase of the Lumio Layer 2 on the Optimism Superchain, launched as a pure Ethereum Virtual Machine fork with the support of Conduit technology. This platform is designed to serve as a testnet-in-production. Lumio is a rollup technology suite that enables developers to build with any VM on any chain.",
        "links": {
          "websites": ["https://lumio.io/"],
          "apps": [],
          "documentation": ["https://docs.lumio.io/"],
          "explorers": ["https://explorer.lumio.io/"],
          "repositories": ["https://github.com/pontem-network"],
          "socialMedia": [
            "https://x.com/lumiofdn",
            "https://t.me/pontemnetworkchat",
            "https://discord.com/invite/44QgPFHYqs"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "SuperLumio is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x9C93982cb4861311179aE216d1B7fD61232DE1f0",
            "newVersion": true,
            "sinceTimestamp": "1708984751",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x9C93982cb4861311179aE216d1B7fD61232DE1f0",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xA6b2b6B6E621482aF877F304D46B94123a942Ae9"],
                "implementations": [
                  "0x4662AF45c8A14c63cb90c5a61A8045EE5a35A00D"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xdB5C6b73CB1c5875995a42D64C250BF8BC69a8bc",
            "newVersion": true,
            "sinceTimestamp": "1708984787",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xdB5C6b73CB1c5875995a42D64C250BF8BC69a8bc",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xA6b2b6B6E621482aF877F304D46B94123a942Ae9"],
                "implementations": [
                  "0xAaa6cF2EFB6cfB5f6887366cC9ce242899f495A1"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://mainnet.lumio.io",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x5c53f2fF1030C7fbC0616fD5B8fC6bE97aa27e00",
              "to": "0xA12Cf34001e553dc254D131105364351f5174d75",
              "sinceTimestamp": "1708984633"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xffB004874CbBF8692B5f397B602f4B8a630aeD59",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1708984763"
            }
          }
        ],
        "finality": {
          "type": "OPStack-blob",
          "genesisTimestamp": "1708984633",
          "minTimestamp": "1708984751",
          "l2BlockTimeSeconds": 2,
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "superseed",
      "createdAt": "1714316238",
      "display": {
        "name": "Superseed",
        "slug": "superseed",
        "description": "Superseed is an Optimistic Rollup utilizing the OP Stack, aiming to provide a CDP lending platform enshrined in the protocol.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://superseed.xyz/"],
          "apps": ["https://superseed.xyz/coming-soon"],
          "documentation": ["https://docs.superseed.xyz/"],
          "explorers": ["https://superseed.xyz/coming-soon"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/SuperseedXYZ",
            "https://discord.com/invite/vjDDB5S4BN"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "swan",
      "createdAt": "1722275591",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x0092400cf9cbAC5ABD8518960Cb1F90663607630#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xfF00000000000000000000000000000000000254"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x1606beCd26316B935B2dFE31D57C1C0B39f4f52f#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x0092400cf9cbAC5ABD8518960Cb1F90663607630#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x0092400cf9cbAC5ABD8518960Cb1F90663607630#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x1606beCd26316B935B2dFE31D57C1C0B39f4f52f#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x1606beCd26316B935B2dFE31D57C1C0B39f4f52f#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x1606beCd26316B935B2dFE31D57C1C0B39f4f52f#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x0092400cf9cbAC5ABD8518960Cb1F90663607630#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x3FcB6E08A960EF52Ec3101A444f71A2Fd964b248",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x3FcB6E08A960EF52Ec3101A444f71A2Fd964b248",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0xb2a5571C23d13Ce16EF3e993FbE8d225D3f67366",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xde794bEc196832474f2F218135bFd0f7cA7fb038",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Swan Network Multisig",
          "description": "* This is a Gnosis Safe with 3 / 4 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L2OutputOracle, L1ERC721Bridge, SystemConfig, SuperchainConfig, OptimismPortal, OptimismMintableERC20Factory (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x6197f64902b9275e6815F9A5b641Ed2291A5d39c",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xB12bd496383288A3c7916AEF8e40197d61e07815",
              "type": "EOA"
            },
            {
              "address": "0x2c1877cDFa3649122CC0F41423A2a185217a2E23",
              "type": "EOA"
            },
            {
              "address": "0x04E1b8f517aF7dcD75a95B46DAdCc2c6f486502D",
              "type": "EOA"
            },
            {
              "address": "0x3FcB6E08A960EF52Ec3101A444f71A2Fd964b248",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x3FcB6E08A960EF52Ec3101A444f71A2Fd964b248",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "* Member of Swan Network Multisig.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n"
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xb2a5571C23d13Ce16EF3e993FbE8d225D3f67366",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0xde794bEc196832474f2F218135bFd0f7cA7fb038",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x15567C4FfD9109795dFf1D9A5233D10aef0738D2",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x76A8Eb93D4a200e8594B1ab1021ab5595CDfB57D"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L2OutputOracle",
            "address": "0x1c22740A0B4511E11D76434A424487862b593901",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
              "implementations": ["0x0092400cf9cbAC5ABD8518960Cb1F90663607630"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["Swan Network Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x1Ccf7e62889E6A93413DEAFC4e390Bd4047bDC32",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
              "implementations": ["0x621729Ef0571a76E438689ec2bC88ee8E3f2Beff"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["Swan Network Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x504D56cf68f791B45E3A2e895B0e1562f3431328",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
              "implementations": ["0x7CDAEa613E1D17e78F24CAF6349bCCf2bC364F0a"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["Swan Network Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x55Aec4EE11dA7d655565cCc2EB3bF21a46C94e6f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SuperchainConfig",
            "address": "0xadE916De67511E5C24af4174Be67143d0dA94959",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
              "implementations": ["0x704Ad7cb61f3Ff97F790FAA747279244Eb2a1802"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["Swan Network Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0xBa50434BC5fCC07406b1baD9AC72a4CDf776db15",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
              "implementations": ["0x1606beCd26316B935B2dFE31D57C1C0B39f4f52f"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["Swan Network Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, L1ERC721Bridge, SystemConfig, SuperchainConfig, OptimismPortal, OptimismMintableERC20Factory.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0xE9614162C6128ABD7790C65D711CfC43ea842153",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
              "implementations": ["0x351ABA1B5B72E6bA8d530740f073993069e7BC69"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["Swan Network Multisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xed7525946A09056C6AaE29941b8323017382050e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
              "implementations": ["0xc7e1EA328166Eea934429Eaa9F6c55Ef5548Efe7"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["Swan Network Multisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Mainnet launch",
          "link": "https://swanchain.medium.com/announcement-swan-chain-mainnet-is-now-live-e34feadec170",
          "date": "2024-07-02T00:00:00Z",
          "description": "Swan Mainnet launches.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Superchain", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "AI", "Storage"],
        "architectureImage": "bedrock-superchain",
        "name": "Swan Chain",
        "slug": "swan",
        "description": "Swan Chain is an OP Stack L2 providing comprehensive AI infrastructure on the blockchain.",
        "links": {
          "websites": ["https://swanchain.io/"],
          "apps": ["https://bridge.swanchain.io/"],
          "documentation": ["https://docs.swanchain.io/"],
          "explorers": [
            "https://mainnet-explorer.swanchain.io/",
            "https://swanscan.io/"
          ],
          "repositories": ["https://github.com/swanchain"],
          "socialMedia": [
            "https://x.com/swan_chain",
            "https://discord.gg/swanchain",
            "https://linkedin.com/company/swancloud",
            "https://swanchain.medium.com/"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Swan Chain is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xBa50434BC5fCC07406b1baD9AC72a4CDf776db15",
            "newVersion": true,
            "sinceTimestamp": "1718644919",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xBa50434BC5fCC07406b1baD9AC72a4CDf776db15",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
                "implementations": [
                  "0x1606beCd26316B935B2dFE31D57C1C0B39f4f52f"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xed7525946A09056C6AaE29941b8323017382050e",
            "newVersion": true,
            "sinceTimestamp": "1718644955",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xed7525946A09056C6AaE29941b8323017382050e",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xCc8c55Ec2Ea3F3001C049eC934e72b55cf52fBf3"],
                "implementations": [
                  "0xc7e1EA328166Eea934429Eaa9F6c55Ef5548Efe7"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://mainnet-rpc01.swanchain.io",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0xde794bEc196832474f2F218135bFd0f7cA7fb038",
              "to": "0xfF00000000000000000000000000000000000254",
              "sinceTimestamp": "1718640220"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x1c22740A0B4511E11D76434A424487862b593901",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1718644931"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "swell",
      "createdAt": "1712341625",
      "display": {
        "name": "Swell",
        "slug": "swell",
        "description": "Swell L2, powered by Polygon CDK,  will leverage EigenDA and the AggLayer in collaboration with AltLayer and Chainlink.",
        "purposes": ["Universal", "Restaking"],
        "category": "Validium",
        "provider": "Polygon",
        "links": {
          "websites": ["https://swellnetwork.io/"],
          "apps": [],
          "documentation": ["https://docs.swellnetwork.io/"],
          "explorers": [],
          "repositories": ["https://github.com/SwellNetwork"],
          "socialMedia": ["https://twitter.com/swellnetworkio"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "sxt",
      "createdAt": "1716819511",
      "display": {
        "name": "Space and Time",
        "slug": "sxt",
        "description": "Space and Time (SxT) is a decentralized data warehouse that aims to provide a zk 'Proof of SQL' to bring offchain data to smart contracts onchain. Built on ZK Stack, the SxT hyperchain will serve as a settlement layer and payment hub for data queries.",
        "purposes": ["AI", "Information"],
        "category": "ZK Rollup",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://spaceandtime.io"],
          "apps": ["https://app.spaceandtime.ai"],
          "documentation": ["https://docs.spaceandtime.io"],
          "explorers": [],
          "repositories": ["https://github.com/spaceandtimelabs"],
          "socialMedia": [
            "https://x.com/SpaceandTimeDB",
            "https://discord.com/invite/spaceandtimeDB",
            "https://linkedin.com/company/space-and-time-db/",
            "https://youtube.com/channel/UCXJyE7ahmqCH11aO7L76PBA",
            "https://t.me/spaceandtimedb",
            "https://instagram.com/spaceandtimedb/",
            "https://spaceandtime.io/blog"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "sxnetwork",
      "createdAt": "1722430544",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x36c6C69A6186D4475fc5c21181CD980Bd6E5e11F",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x44Ec40D86b4643Bd5110ED07BE188F8473Ad2d3a"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0xa104C0426e95a5538e89131DbB4163d230C35f86",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xe8606A55d105EF857F187C32Ae0E9a168aF8F497"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xD80a805c86C14c879420eC6acb366D04D318fC0C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xe8606A55d105EF857F187C32Ae0E9a168aF8F497"],
              "implementations": ["0x383f16fB2809a56fC639c1eE2c93Ad2aa7Ee130A"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xEa83E8907C89Bc0D9517632f0ba081972E328631",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xe8606A55d105EF857F187C32Ae0E9a168aF8F497"],
              "implementations": ["0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xB360b2f57c645E847148d7C479b7468AbF6F707d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xe8606A55d105EF857F187C32Ae0E9a168aF8F497"],
              "implementations": ["0x19431dc37098877486532250FB3158140717C00C"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x44Ec40D86b4643Bd5110ED07BE188F8473Ad2d3a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xe8606A55d105EF857F187C32Ae0E9a168aF8F497"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x73cfa0F6ae141212115657ad91Ad918E5d34d882",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xe8606A55d105EF857F187C32Ae0E9a168aF8F497"],
              "implementations": ["0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x57EA090Ac0554d174AE0e2855B460e84A1A7C221",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x17e7F68ce50A77e55C7834ddF31AEf86403B8010",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x72B166070781a552D7b95a907eF59ca05d3D5a62",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 2.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 4d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x383f16fB2809a56fC639c1eE2c93Ad2aa7Ee130A#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x90906eA9eb38B6afC104bB761F493b2a78c85024",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x9C56265ef2989138d264b30fBbA2043902daBdf8",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "SX Network Admin EOA",
          "accounts": [
            {
              "address": "0xa9d1C9D877F235C21d803e4a0b81F8ca6C4c83AC",
              "type": "EOA"
            }
          ],
          "description": "EOA address that can upgrade the rollup's smart contract system (via UpgradeExecutor) and gain access to all funds."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": null,
      "knowledgeNuggets": null,
      "badges": ["DAC", "Gelato", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Betting"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "SX Network",
        "slug": "sxnetwork",
        "redWarning": "Critical contracts can be upgraded by an EOA which could result in the loss of all funds.",
        "description": "SX Network is an Orbit stack Optimium, built to scale the SX team's existing sports betting platform.",
        "links": {
          "websites": ["https://sx.technology/"],
          "apps": [
            "https://sx.bet/wallet/bridge",
            "https://bridge.gelato.network/bridge/sx-rollup"
          ],
          "documentation": ["https://docs.sx.technology/"],
          "explorers": ["https://explorerl2.sx.technology/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/SX_Network",
            "https://discord.com/invite/sxnetwork"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 549816 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -345600
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 4d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 345600
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["SX"],
        "escrows": [
          {
            "address": "0xa104C0426e95a5538e89131DbB4163d230C35f86",
            "newVersion": true,
            "sinceTimestamp": "1720173479",
            "tokens": ["SX"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xa104C0426e95a5538e89131DbB4163d230C35f86",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xe8606A55d105EF857F187C32Ae0E9a168aF8F497"],
                "implementations": [
                  "0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows SX sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.sx-rollup.gelato.digital",
          "defaultCallsPerMinute": 1500,
          "startBlock": 1
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "id": "taiko",
      "createdAt": "1680768480",
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data"
      },
      "badges": ["EVM", "EthereumBlobs", "BasedSequencing"],
      "display": {
        "name": "Taiko",
        "slug": "taiko",
        "provider": "Taiko",
        "description": "Taiko is an Ethereum-equivalent Optimistic Rollup on the Ethereum network. In the future it aims to add zkVerifier making it a hybrid, optimistic-zk construction. Taiko combines based sequencing and a contestation mechanism with multi-proofs.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://taiko.xyz"],
          "apps": ["https://bridge.taiko.xyz/"],
          "documentation": ["https://docs.taiko.xyz/"],
          "explorers": ["https://taikoscan.io", "https://taikoscan.network/"],
          "repositories": ["https://github.com/taikoxyz"],
          "socialMedia": [
            "https://twitter.com/taikoxyz",
            "https://discord.gg/taikoxyz",
            "https://taiko.mirror.xyz"
          ],
          "rollupCodes": "https://rollup.codes/taiko"
        },
        "activityDataSource": "Blockchain RPC",
        "liveness": {
          "explanation": "Taiko is an Optimistic rollup that posts blocks of L2 transaction data directly to the L1. For a transaction to be considered final, both a block and its parent block have to be proven on the L1. State updates are a three step process: first blocks are proposed to L1, then they are proved, and lastly finalized after the challenge period has elapsed."
        }
      },
      "config": {
        "associatedTokens": ["TAIKO"],
        "escrows": [
          {
            "address": "0xd60247c6848B7Ca29eDdF63AA924E53dB6Ddd8EC",
            "sinceTimestamp": "1714550603",
            "tokens": ["ETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x996282cA11E5DEb6B5D122CC3B9A1FcAAD4415Ab",
            "sinceTimestamp": "1714550603",
            "tokens": "*",
            "chain": "ethereum"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.mainnet.taiko.xyz",
          "defaultCallsPerMinute": 500,
          "startBlock": 1
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x06a9Ab27c7e2255df1815E6CC0168d7755Feb19a",
              "selector": "0xef16e845",
              "functionSignature": "function proposeBlock(bytes _params, bytes _txList) payable returns (tuple(bytes32 l1Hash, bytes32 difficulty, bytes32 blobHash, bytes32 extraData, bytes32 depositsHash, address coinbase, uint64 id, uint32 gasLimit, uint64 timestamp, uint64 l1Height, uint16 minTier, bool blobUsed, bytes32 parentMetaHash, address sender) meta_, tuple(address recipient, uint96 amount, uint64 id)[] deposits_)",
              "sinceTimestamp": "1716620627"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x06a9Ab27c7e2255df1815E6CC0168d7755Feb19a",
              "selector": "0x10d008bd",
              "functionSignature": "function proveBlock(uint64 _blockId, bytes _input)",
              "sinceTimestamp": "1716620627"
            }
          }
        ]
      },
      "chainConfig": {
        "name": "taiko",
        "chainId": 167000,
        "explorerUrl": "https://taikoscan.io",
        "explorerApi": {
          "url": "https://api.taikoscan.io/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1716620627"
      },
      "type": "layer2",
      "riskView": {
        "stateValidation": {
          "description": "Taiko uses a multi-tier proof system to validate the state. However, current tier proofs include either SGX (secure-enclave) execution verification, or approval by a minimum number of Guardians. State validation through the Zk-proof tier is not yet active. \n        Each proof goes through a cooldown window allowing for contestation. Contested blocks require proof from a higher level tier. If no contestation is made, or the block has been proven by the highest tier, the proof is considered valid.\n        The system allows for an invalid state to be proven by either a compromised SGX instance or compromised Guardians (the highest tier). This can lead to a state being proven as valid when it is not.",
          "sentiment": "bad",
          "value": "SGX proofs",
          "secondLine": "1d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "description": "There is no window for users to exit in case of an unwanted upgrade since contracts are instantly upgradable.",
          "sentiment": "bad",
          "value": "None"
        },
        "sequencerFailure": {
          "description": "The system uses a based (or L1-sequenced) rollup sequencing mechanism. Users can propose L2 blocks directly on the Taiko L1 contract. The TaikoAdmin multisig can pause block proposals without delay.",
          "sentiment": "good",
          "value": "Self sequence"
        },
        "proposerFailure": {
          "description": "Provers can examine the proposed blocks on the TaikoL1 contract, and generate SGX proofs for them. Currently, any prover providing a valid SGX attestation can register a SGX instance and create proofs for proposed blocks.",
          "sentiment": "good",
          "value": "Self propose"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.",
            "The Security Council is not properly set up."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/taikoxyz/simple-taiko-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": false,
                "description": "The Security Council is not properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Multi-tier proof system",
          "description": "Taiko uses a multi-tier proof system to validate the state. Currently there are three tiers, SGX tier, 1/8 Guardian tier and 6/8 Guardian tier (from lowest to highest).\n        When proposing a block, the sequencer is assigned the designated prover role for that block. The prover is required to deposit a liveness bond (125.0 TAIKO) as a commitment to prove the block, which will be returned once the block is proven.\n        The SGX tier has a proving window of 1h, during which only the designated prover can submit proof for the block. Once elapsed, proving is open to everyone able to submit SGX proofs.\n        After the proof is submitted, anyone within the cooldown window - for SGX tier is 1d - can contest the block by submitting a bond. For the SGX Proof tier, the validity bond is currently set to 125.0 TAIKO, while 820.0 TAIKO is required to contest the proof. \n        For the Minority guardian tier, validity and contest bonds are set to 250.0 TAIKO and 1640.0 TAIKO, respectively. It is not required to provide a proof for the block to submit a contestation.\n        When someone contests, a higher level tier has to step in to prove the contested block. Decision of the highest tier (currently the 6/8 Guardian) is considered final.\n        If no one challenges the original SGX proof, it finalizes after 1d (the cooldown window).",
          "references": [
            {
              "text": "TierProviderV2.sol - Etherscan source code, tier ids",
              "href": "https://etherscan.io/address/0x3a1A900680BaADb889202faf12915F7E47B71ddd#code"
            },
            {
              "text": "TaikoL1.sol - Etherscan source code, liveness bond",
              "href": "https://etherscan.io/address/0xf0E6d34937701622cA887a75c150cC23d4FFDf2F#code"
            }
          ],
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "a malicious block is proven by a compromised SGX instance or approved by Guardians."
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of blobs. This ensures that it will be available for enough time.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "The system uses a based sequencing mechanism",
          "description": "The system uses a based (or L1-sequenced) sequencing mechanism. Anyone can sequence Taiko L2 blocks by proposing them directly on the TaikoL1 contract. \n        The proposer of a block is assigned the designated prover role, and will be the only entity allowed to provide a proof for the block during the initial proving window. \n        Currently, proving a block requires the block proposer to run an SGX instance. Proposing a block also requires depositing a liveness bond as a commitment to proving the block. \n        Unless the block proposer proves the block within the proving window, it will forfeit its liveness bond to the TaikoL1 smart contract.",
          "references": [
            {
              "text": "TaikoL1.sol - Etherscan source code, proposeBlock function",
              "href": "https://etherscan.io/address/0xf0E6d34937701622cA887a75c150cC23d4FFDf2F#code"
            }
          ],
          "risks": []
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "The system is designed to allow users to propose L2 blocks directly on L1. \n        Note that this would require the user to run an SGX instance to prove the block, or forfeit the liveness bond of 125.0 TAIKO.\n        The TaikoAdmin multisig can pause block proposals without delay.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": []
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "TaikoL1Contract",
            "address": "0x06a9Ab27c7e2255df1815E6CC0168d7755Feb19a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0xf0E6d34937701622cA887a75c150cC23d4FFDf2F"]
            },
            "chain": "ethereum",
            "description": "This contract provides functionalities for sequencing, proving, and verifying blocks.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1RollupAddressManager",
            "address": "0x579f40D0BE111b823962043702cabe6Aaa290780",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0x4f6D5D3109C07E77035B410602996e445b18E8E9"]
            },
            "chain": "ethereum",
            "description": "This contract manages the rollup addresses list, allowing to set the address for a specific chainId-name pair.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "TierRouter",
            "address": "0x6E997f1F22C40ba37F633B08f3b07E10Ed43155a",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract allowing for granular control of which TierProvider to apply to a specific block. Currently, the TierProvider is hardcoded as an address for all blocks. Can be changed through L1RollupAddressManager."
          },
          {
            "name": "TierProvider",
            "address": "0x3a1A900680BaADb889202faf12915F7E47B71ddd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract managing the multi-tier proof system."
          },
          {
            "name": "SgxVerifier",
            "address": "0xb0f3186FC1963f774f52ff455DC86aEdD0b31F81",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0x7EE4CEF8a945639e09DDf3032e9d95c8d90f07f3"]
            },
            "chain": "ethereum",
            "description": "Verifier contract for SGX proven blocks.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "GuardianMinorityProver",
            "address": "0x579A8d63a2Db646284CBFE31FE5082c9989E985c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0x3c40CC51e78B4a622622F9A4Df1b40068bc8Df98"]
            },
            "chain": "ethereum",
            "description": "Verifier contract for blocks proven by Guardian multisig minority.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "GuardianProver",
            "address": "0xE3D777143Ea25A6E031d1e921F396750885f43aC",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0x3c40CC51e78B4a622622F9A4Df1b40068bc8Df98"]
            },
            "chain": "ethereum",
            "description": "Verifier contract for Guardian multisig proven blocks.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProverSetProxy",
            "address": "0x68d30f47F19c07bCCEf4Ac7FAE2Dc12FCa3e0dC9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0xCE5a119479337a153CA3bd1b2bF9755c78F2B15A"]
            },
            "chain": "ethereum",
            "description": "A contract that holds TAIKO token and acts as a Taiko prover for Taiko Labs. This contract will simply relay `proveBlock` calls to TaikoL1 so msg.sender doesn't need to hold any TAIKO. There are several instances of this contract operated by different entities.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SignalService",
            "address": "0x9e0a24964e5397B566c1ed39258e21aB5E35C77C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0xDF8642a1FBFc2014de27E8E87283D6f3eEF315DF"]
            },
            "chain": "ethereum",
            "description": "The SignalService contract serves as cross-chain message passing system. It defines methods for sending and verifying signals with merkle proofs.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AutomataDcapV3Attestation",
            "address": "0x8d7C954960a36a7596d7eA4945dDf891967ca8A3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0x5f73f0AdC7dAA6134Fe751C4a78d524f9384e0B5"]
            },
            "chain": "ethereum",
            "description": "Contract managing SGX attestation certificates.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "TaikoToken",
            "address": "0x10dea67478c5F8C5E2D90e5E9B26dBe60c54d800",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0xcfe803378D79d1180EbF030455040EA6513869dF"]
            },
            "chain": "ethereum",
            "description": "Taiko's native token. Used for block proposal rewards, proving bonds and rewards, and contesting bonds.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "TaikoBridge",
            "address": "0xd60247c6848B7Ca29eDdF63AA924E53dB6Ddd8EC",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0xAc96FF285158bceBB8573D20d853e86BB2915aF3"]
            },
            "chain": "ethereum",
            "description": "Shared bridge for Taiko chains for bridged ETH.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SharedERC20Vault",
            "address": "0x996282cA11E5DEb6B5D122CC3B9A1FcAAD4415Ab",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F"],
              "implementations": ["0x7ACFBb369a552C45d402448A4d64b9da54C3FF30"]
            },
            "chain": "ethereum",
            "description": "Shared vault for Taiko chains for bridged ERC20 tokens.",
            "upgradableBy": ["TaikoAdmin"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "TaikoAdmin",
          "description": "This is a Gnosis Safe with 3 / 4 threshold.  Currently also designated as the Security Council. Can upgrade proxies without delay, remove SGX attestation certificates, pause block proposals and block proving, among other permissions.",
          "accounts": [
            {
              "address": "0x9CBeE534B5D8a6280e01a14844Ee8aF350399C7F",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x55d79345Afc87806B690C9f96c4D7BfE2Bca8268",
              "type": "EOA"
            },
            {
              "address": "0x7Cdd1c128Cd72dd252f569eeD942735330937F91",
              "type": "EOA"
            },
            {
              "address": "0x3b1D1F89E0b6803174A2dE72e21A6f6f8464d5F1",
              "type": "EOA"
            },
            {
              "address": "0x6B6072CE402F22fDcFbA1705383D8e280717Cb87",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "GuardianProvers",
          "description": "Guardians can prove blocks on the highest tier. Guardians are selected by the TaikoAdmin multisig. Acts as a 6/8 multisig.",
          "accounts": [
            {
              "address": "0x000012dd12a6D9Dd2045f5E2594f4996b99A5d33",
              "type": "EOA"
            },
            {
              "address": "0x0cAC6E2Fd10e92Bf798341Ad0A57b5Cb39DA8D0D",
              "type": "EOA"
            },
            {
              "address": "0xd6BB974bc47626E3547426efa4CA2A8d7DFCccdf",
              "type": "EOA"
            },
            {
              "address": "0xd26c4e85BC2fAAc27a320987e340971cF3b47d51",
              "type": "EOA"
            },
            {
              "address": "0xC384B679c028787166b9B3725aC14A60da205861",
              "type": "EOA"
            },
            {
              "address": "0x1602958A85494cd9C3e0D6672BA0eE42b95B4200",
              "type": "EOA"
            },
            {
              "address": "0x5CfEb9a72256B1b49dc2C98b1b7b99d172D50B68",
              "type": "EOA"
            },
            {
              "address": "0x1DB8Ac9f19AbdD60A6418383BfA56A4450aa80C6",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "GuardianMinorityProver",
          "description": "Minority guardians can prove blocks on the second highest tier. Guardians are selected by the TaikoAdmin multisig. Acts as a 1/8 multisig.",
          "accounts": [
            {
              "address": "0x000012dd12a6D9Dd2045f5E2594f4996b99A5d33",
              "type": "EOA"
            },
            {
              "address": "0x0cAC6E2Fd10e92Bf798341Ad0A57b5Cb39DA8D0D",
              "type": "EOA"
            },
            {
              "address": "0xd6BB974bc47626E3547426efa4CA2A8d7DFCccdf",
              "type": "EOA"
            },
            {
              "address": "0xd26c4e85BC2fAAc27a320987e340971cF3b47d51",
              "type": "EOA"
            },
            {
              "address": "0xC384B679c028787166b9B3725aC14A60da205861",
              "type": "EOA"
            },
            {
              "address": "0x1602958A85494cd9C3e0D6672BA0eE42b95B4200",
              "type": "EOA"
            },
            {
              "address": "0x5CfEb9a72256B1b49dc2C98b1b7b99d172D50B68",
              "type": "EOA"
            },
            {
              "address": "0x1DB8Ac9f19AbdD60A6418383BfA56A4450aa80C6",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ChainWatchdog",
          "accounts": [
            {
              "address": "0xE3D777143Ea25A6E031d1e921F396750885f43aC",
              "type": "MultiSig"
            }
          ],
          "description": "The chain watchdog role can pause proving of blocks."
        },
        {
          "name": "SequencerBlockOne",
          "accounts": [
            {
              "address": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
              "type": "EOA"
            }
          ],
          "description": "The authorized sequencer (in Taiko called “proposer”) of block one, hardcoded to vitalik.eth address."
        }
      ],
      "milestones": [
        {
          "name": "TKO Token Airdrop",
          "link": "https://taiko.mirror.xyz/VSOtILX2DQsc_6IMt5hBT1fEYSH8243pZ8IA_pBfHks",
          "date": "2024-06-05T00:00:00.00Z",
          "description": "TKO token launches.",
          "type": "general"
        },
        {
          "name": "Taiko Mainnet Launch",
          "link": "https://taiko.mirror.xyz/Pizjv30FvjsZUwEG-Da7Gs6F8qeDLc4CKKEBqy3pTt8",
          "date": "2024-05-27T00:00:00.00Z",
          "description": "Taiko is deployed on Ethereum mainnet.",
          "type": "general"
        },
        {
          "name": "Taiko Based Sequencing Upgrade",
          "link": "https://taiko.mirror.xyz/_oKlnpzKSOxGILyy4WlvpUmYEqD7BFxzmRo3XETlJqE",
          "date": "2024-06-06T00:00:00.00Z",
          "description": "Proposing blocks on Taiko is now permissionless.",
          "type": "general"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "brine",
      "createdAt": "1690545663",
      "badges": ["AppChain", "DAC", "StarkEx", "SHARP"],
      "display": {
        "name": "tanX",
        "slug": "tanx",
        "description": "tanX is a DEX powered by StarkEx technology.",
        "purposes": ["Exchange"],
        "category": "Validium",
        "provider": "StarkEx",
        "links": {
          "websites": ["https://tanx.fi/"],
          "apps": ["https://trade.tanx.fi/"],
          "documentation": ["https://docs.tanx.fi/"],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/tanXfinance",
            "https://discord.gg/wMAnf3gVTh",
            "https://youtube.com/channel/UCUG2L75yvKJBK9QFUaXTdyA",
            "https://linkedin.com/company/tanx-fi"
          ]
        },
        "activityDataSource": "Closed API"
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "escrows": [
          {
            "address": "0x1390f521A79BaBE99b69B37154D63D431da27A07",
            "newVersion": true,
            "sinceTimestamp": "1657453320",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x1390f521A79BaBE99b69B37154D63D431da27A07",
              "upgradeability": {
                "proxyType": "StarkWare diamond",
                "admins": ["0x303775491494a08b07365938787274F742a81F63"],
                "implementations": [
                  "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                  "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                  "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                  "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                  "0x613ee54C54D5548627064B4D648942bF3648f376",
                  "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                  "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "Main entry point for users' deposits.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "starkex",
          "product": ["brine"],
          "sinceTimestamp": "1657453320",
          "resyncLastDays": 7
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "2/4 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 2/4 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST)",
          "description": "STARKs are zero knowledge proofs that ensure state correctness.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 2/4 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5,
          "sources": [
            {
              "contract": "Committee",
              "references": [
                "https://etherscan.io/address/0x4F8B2dd49D958b6ac3e5f4705Bf1a9aDA5Bc4446#code#F1#L60"
              ]
            }
          ]
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 7d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 604800
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a Merkle proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.",
          "risks": [],
          "references": [
            {
              "text": "Enforcing Consistency on the On-Chain State - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The balances of the users are not published on-chain, but rather sent to external trusted parties, also known as committee members. A state update is valid and accepted on-chain only if at least a quorum of the committee members sign a state update.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Data Availability Modes - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"
            },
            {
              "text": "Validium - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/con_data_availability.html#validium_starkex"
            },
            {
              "text": "Availability Verifiers - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/spot/shared/contract-management.html#availability_verifiers_spot"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Operator - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Censorship Prevention - StarkEx documentation",
              "href": "https://docs.starkware.co/starkex/architecture/solution-architecture.html#8-censorship-prevention"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. When withdrawing NFTs they are minted on L1.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/withdrawal.html"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.",
            "risks": [],
            "references": [
              {
                "text": "Forced Operations - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/shared/README-forced-operations.html"
              },
              {
                "text": "Full Withdrawal - StarkEx documentation",
                "href": "https://docs.starkware.co/starkex/spot/spot-trading-full-withdrawals.html"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "StarkExchange",
            "address": "0x1390f521A79BaBE99b69B37154D63D431da27A07",
            "upgradeability": {
              "proxyType": "StarkWare diamond",
              "admins": ["0x303775491494a08b07365938787274F742a81F63"],
              "implementations": [
                "0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
                "0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
                "0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
                "0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
                "0x613ee54C54D5548627064B4D648942bF3648f376",
                "0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
                "0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
              ],
              "immutable": false
            },
            "chain": "ethereum"
          },
          {
            "name": "Committee",
            "address": "0x4F8B2dd49D958b6ac3e5f4705Bf1a9aDA5Bc4446",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Data Availability Committee (DAC) contract verifying data availability claim from DAC Members (via multisig check)."
          },
          {
            "name": "SHARPVerifierProxy",
            "address": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
            "upgradeability": {
              "proxyType": "StarkWare proxy",
              "admins": [
                "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
                "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"
              ],
              "implementations": ["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "CallProxy for GpsStatementVerifier."
          },
          {
            "name": "SHARPVerifier",
            "address": "0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."
          },
          {
            "name": "FriStatementContract",
            "address": "0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MerkleStatementContract",
            "address": "0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "CairoBootloaderProgram",
            "address": "0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Part of STARK Verifier."
          },
          {
            "name": "MemoryPageFactRegistry",
            "address": "0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."
          },
          {
            "name": "OldMemoryPageFactRegistry",
            "address": "0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Governors",
          "accounts": [
            {
              "address": "0x303775491494a08b07365938787274F742a81F63",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "Data Availability Committee",
          "accounts": [
            {
              "address": "0x502FffBcdcaA61f19deFBb9b60e799F74FB48Bc1",
              "type": "EOA"
            },
            {
              "address": "0xC37a598468A59D5d6DCeb889847B5824aD61697e",
              "type": "EOA"
            },
            {
              "address": "0xfceC0b967e4390Eb7Cd4f2318c247eD193fE78E9",
              "type": "EOA"
            },
            {
              "address": "0xFE4913D959064ee0b026ba0cE3Faccc1c5834a00",
              "type": "EOA"
            }
          ],
          "minSigners": 2,
          "minAssumedHonestMembers": 3,
          "description": "Validity proof must be signed by at least 2 of these addresses to approve state update."
        },
        {
          "name": "SHARP Verifier Governors",
          "accounts": [
            {
              "address": "0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6",
              "type": "EOA"
            },
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "description": "Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."
        },
        {
          "name": "SHARPVerifierGovernorMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.",
          "accounts": [
            {
              "address": "0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x0405107a60391Eb51821be373ff978115Ee58488",
              "type": "EOA"
            },
            {
              "address": "0x59232aC80E6d403b6381393e52f4665ECA328558",
              "type": "EOA"
            },
            {
              "address": "0xebc8416179fE90854fe8B3f774801165572cfD7F",
              "type": "EOA"
            },
            {
              "address": "0x955B978F3ee7818dA71fA25c676062E6BC462Fec",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0xc3a27F45015E2c36ce3cC78c662c5f259c26Cf25",
              "type": "EOA"
            }
          ],
          "description": "Allowed to update the state. When the Operator is down the state cannot be updated."
        }
      ],
      "milestones": [
        {
          "name": "Mainnet Launch",
          "date": "2023-04-27T00:00:00.00Z",
          "link": "https://tanx.fi/",
          "description": "tanX is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "Understand StarkWare #1",
          "url": "https://twitter.com/bkiepuszewski/status/1480473352213041152",
          "thumbnail": "starkware-01.jpg"
        },
        {
          "title": "Understand StarkWare #2",
          "url": "https://twitter.com/bkiepuszewski/status/1480804584926949377",
          "thumbnail": "starkware-02.jpg"
        },
        {
          "title": "Understand StarkWare #3",
          "url": "https://twitter.com/bkiepuszewski/status/1481173682219270146",
          "thumbnail": "starkware-03.jpg"
        },
        {
          "title": "Understand StarkWare #4",
          "url": "https://twitter.com/bkiepuszewski/status/1481521079562784769",
          "thumbnail": "starkware-04.jpg"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "telos",
      "createdAt": "1718018621",
      "display": {
        "name": "Telos zkEVM",
        "slug": "telos",
        "description": "Telos zkEVM is an upcoming ZK-based scaling solution on Ethereum, powered by SNARKtor decentralized proof aggregation and developed by Telos.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://zkevm.telos.net/"],
          "apps": [],
          "documentation": [
            "https://docs.telos.net/overview/what-is-telos/introduction/"
          ],
          "explorers": [],
          "repositories": ["https://github.com/telosnetwork"],
          "socialMedia": [
            "https://x.com/HelloTelos",
            "https://discord.com/invite/telos",
            "https://youtube.com/@TheTelosNetwork"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "ten",
      "createdAt": "1705390051",
      "display": {
        "name": "Ten",
        "slug": "ten",
        "description": "Ten is an Encrypted Rollup that has been designed for use on the Ethereum network and uses 100% of the EVM. At present, Ten is available in testnet running on the Sepolia testnet for further testing and optimization.",
        "purposes": ["Universal", "Privacy"],
        "category": "Optimistic Rollup",
        "links": {
          "websites": ["https://ten.xyz"],
          "apps": [],
          "documentation": [
            "https://docs.ten.xyz",
            "https://ten.xyz/litepaper",
            "https://whitepaper.ten.xyz"
          ],
          "explorers": ["https://testnet.tenscan.io"],
          "repositories": [
            "https://github.com/ten-protocol",
            "https://github.com/ten-protocol/go-ten",
            "https://github.com/ten-protocol/tutorial",
            "https://github.com/ten-protocol/sample-applications"
          ],
          "socialMedia": [
            "https://twitter.com/tenprotocol",
            "https://discord.gg/yQfmKeNzNd",
            "https://t.me/tenprotocol",
            "https://medium.com/obscuro-labs"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "id": "termstructure",
      "createdAt": "1709724246",
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "badges": ["AppChain", "EthereumCalldata", "ZKsyncLiteFork"],
      "display": {
        "name": "Term Structure",
        "slug": "termstructure",
        "description": "Term Structure introduces a distinct ZK Rollup solution democratizing fixed-rate and fixed-term borrowing and lending as well as fixed income trading by offering low transaction fees and enabling forced withdrawals.",
        "purposes": ["Payments", "Exchange", "Lending"],
        "category": "ZK Rollup",
        "provider": "ZKsync Lite",
        "links": {
          "websites": ["https://ts.finance/"],
          "apps": ["https://app.ts.finance/"],
          "documentation": ["https://docs.ts.finance/"],
          "explorers": ["https://explorer.ts.finance/"],
          "repositories": ["https://github.com/term-structure/"],
          "socialMedia": [
            "https://twitter.com/TermStructLabs",
            "https://discord.gg/VnyTqGBSzK",
            "https://t.me/termstructure",
            "https://youtube.com/@termstructurelabs"
          ]
        },
        "liveness": {
          "explanation": "Term Structure is a ZK rollup based on ZKsync Lite’s code base that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. "
        },
        "finality": { "finalizationPeriod": 0 }
      },
      "config": {
        "escrows": [
          {
            "address": "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
            "newVersion": true,
            "sinceTimestamp": "1716263903",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
              "upgradeability": {
                "proxyType": "EIP2535 diamond proxy",
                "admins": [],
                "implementations": [
                  "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
                  "0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A",
                  "0x5d8A9DDA649524D1Ce31C204551a93560617D1D3",
                  "0xbb629c830a4d153CDE43Cb127b5aff60d1185B8c",
                  "0x84283289D7E57a2f5b80ddA065AC99450eB44cb6",
                  "0xf1E357A2645dad05FbfbC34ddF6c2D24B9f332B9",
                  "0x955cdD2E56Ca2776a101a552A318d28fe311398D",
                  "0x0d7598cE7Cd1fA07C2a26c49876F850b0AD66bbC",
                  "0x10a73b16f6CD03931484b4Ae69fEDc55E868D295",
                  "0x882aBFb2F6A67d36350499991638044e8Bd83a72"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "trackedTxs": [
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
              "selector": "0x0d874ce4",
              "functionSignature": "function commitBlocks((uint32,uint64,bytes32,bytes32,bytes32,uint256),(uint32,bytes32,bytes32,uint256,uint16[],bytes)[])",
              "sinceTimestamp": "1716263903"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
              "selector": "0x70ab1eb6",
              "functionSignature": "function verifyBlocks(((uint32,uint64,bytes32,bytes32,bytes32,uint256),(uint256[2],uint256[2][2],uint256[2],uint256[1]))[])",
              "sinceTimestamp": "1716263903"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
              "selector": "0x632a5607",
              "functionSignature": "function executeBlocks(((uint32,uint64,bytes32,bytes32,bytes32,uint256),bytes[])[])",
              "sinceTimestamp": "1716263903"
            }
          }
        ]
      },
      "type": "layer2",
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "Verifier",
              "references": [
                "https://etherscan.io/address/0x23369A60E5A8f422E38d799eD55e7AD8Ed4A86cE"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "RollupFacet",
              "references": [
                "https://etherscan.io/address/0x955cdD2E56Ca2776a101a552A318d28fe311398D#writeContract"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -1209600
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 14d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 1209600
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a zero knowledge proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "RollupFacet.sol - Etherscan source code, verifyOneBlock function",
              "href": "https://etherscan.io/address/0x955cdD2E56Ca2776a101a552A318d28fe311398D#code"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "Verifier.sol - Etherscan source code",
              "href": "https://etherscan.io/address/0x23369A60E5A8f422E38d799eD55e7AD8Ed4A86cE"
            },
            {
              "text": "EvacuVerifier.sol - Etherscan source code",
              "href": "https://etherscan.io/address/0x9c7Df3981A89eD04588907843fe2a6c1BcCc4467#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "RollupFacet.sol - Etherscan source code, _commitOneBlock function",
              "href": "https://etherscan.io/address/0x955cdD2E56Ca2776a101a552A318d28fe311398D#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "RollupFacet.sol - Etherscan source code, onlyRole in commit, verify, execute functions",
              "href": "https://etherscan.io/address/0x955cdD2E56Ca2776a101a552A318d28fe311398D#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "AccountFacet.sol - Etherscan source code, forceWithdraw function",
              "href": "https://etherscan.io/address/0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A#code"
            },
            {
              "text": "Force Withdrawal and Evacuation Mode - Term Structure documentation",
              "href": "https://docs.ts.finance/zktrue-up/zk-architecture/forced-withdrawal-and-evacuation-mode"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "AccountFacet.sol - Etherscan source code, withdraw function",
                "href": "https://etherscan.io/address/0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A#code"
              },
              {
                "text": "Withdraw - Term Structure documentation",
                "href": "https://docs.ts.finance/protocol-spec/general/withdraw"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "AccountFacet.sol - Etherscan source code, forceWithdraw function",
                "href": "https://etherscan.io/address/0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A#code"
              },
              {
                "text": "Forced Withdrawal - Term Structure documentation",
                "href": "https://docs.ts.finance/zktrue-up/zk-architecture/forced-withdrawal-and-evacuation-mode#forced-withdrawal"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into Evacuation Mode, disallowing further state updates. In that case everybody can withdraw by submitting a zero knowledge proof of their funds with their L1 transaction.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the user is unable to generate the non-trivial ZK proof for exodus withdraw."
              }
            ],
            "references": [
              {
                "text": "Evacuation Mode - Term Structure documentation",
                "href": "https://docs.ts.finance/zktrue-up/zk-architecture/forced-withdrawal-and-evacuation-mode#evacuation-mode"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "Flashloans on escrowed funds",
            "description": "The protocol allows flashloans with the funds locked with the bridge, for a fee.",
            "references": [
              {
                "text": "FlashloanFacet.sol - Etherscan source code, flashLoan function",
                "href": "https://etherscan.io/address/0xbb629c830a4d153CDE43Cb127b5aff60d1185B8c#code"
              }
            ],
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the flashloan mechanism is implemented incorrectly."
              }
            ],
            "isIncomplete": true
          }
        ]
      },
      "permissions": [
        {
          "name": "Admins",
          "accounts": [
            {
              "address": "0xa00d50A40B1635D293c87BA36503bD2504b5D818",
              "type": "MultiSig"
            }
          ],
          "description": "Can update the main verifier, the evacuation verifier, can set the flash loan premium, set the half liquidation threshold, the liquidation factor, the borrow rate, the rollover fee, the withdraw protocol fee, the price feed, the stablecoin used, the minimum deposit amount and it can pause the system."
        },
        {
          "name": "TermStructureMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  Owner of the protocol, meaning it can upgrade the project implementation potentially gaining access to all funds.",
          "accounts": [
            {
              "address": "0xa00d50A40B1635D293c87BA36503bD2504b5D818",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44",
              "type": "EOA"
            },
            {
              "address": "0x83d4814307088732528A53D8DF75fd6F2f5be398",
              "type": "EOA"
            },
            {
              "address": "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d",
              "type": "EOA"
            },
            {
              "address": "0x85e500dF81F10B539E16Dd717e24C41465D10D82",
              "type": "EOA"
            },
            {
              "address": "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348",
              "type": "EOA"
            },
            {
              "address": "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Operators",
          "accounts": [
            {
              "address": "0xeBec1D162f8467C0070C190A347Bbc3bFf6d14F8",
              "type": "EOA"
            }
          ],
          "description": "Can add tokens to the system."
        },
        {
          "name": "Committers",
          "accounts": [
            {
              "address": "0x0A4aB40Cc78D34052e1A8F5Bb5BaEb0174aBDe12",
              "type": "EOA"
            }
          ],
          "description": "Can commit blocks on L1 and revert pending (i.e. not yet executed) blocks."
        },
        {
          "name": "Verifiers",
          "accounts": [
            {
              "address": "0x0A4aB40Cc78D34052e1A8F5Bb5BaEb0174aBDe12",
              "type": "EOA"
            }
          ],
          "description": "Can verify blocks on L1."
        },
        {
          "name": "Executers",
          "accounts": [
            {
              "address": "0x0A4aB40Cc78D34052e1A8F5Bb5BaEb0174aBDe12",
              "type": "EOA"
            }
          ],
          "description": "Can execute blocks on L1."
        },
        {
          "name": "VaultMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  Address collecting a portion of protocol fees. Currently set to 100% of the fees.",
          "accounts": [
            {
              "address": "0x23bCad9BFB1378cd45b32525B835F037b673f529",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44",
              "type": "EOA"
            },
            {
              "address": "0x83d4814307088732528A53D8DF75fd6F2f5be398",
              "type": "EOA"
            },
            {
              "address": "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d",
              "type": "EOA"
            },
            {
              "address": "0x85e500dF81F10B539E16Dd717e24C41465D10D82",
              "type": "EOA"
            },
            {
              "address": "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348",
              "type": "EOA"
            },
            {
              "address": "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "InsuranceMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  Address collecting a portion of protocol fees. Currently set to 0% of the fees.",
          "accounts": [
            {
              "address": "0x2df3e912aeDe36ea5EaB06232ca3b239a40A8165",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44",
              "type": "EOA"
            },
            {
              "address": "0x83d4814307088732528A53D8DF75fd6F2f5be398",
              "type": "EOA"
            },
            {
              "address": "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d",
              "type": "EOA"
            },
            {
              "address": "0x85e500dF81F10B539E16Dd717e24C41465D10D82",
              "type": "EOA"
            },
            {
              "address": "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348",
              "type": "EOA"
            },
            {
              "address": "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "TreasuryMultisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  Address collecting a portion of protocol fees. Currently set to 0% of the fees.",
          "accounts": [
            {
              "address": "0xB7ef7117FfCa1956249B666D9fdBe182cFbbF5ca",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44",
              "type": "EOA"
            },
            {
              "address": "0x83d4814307088732528A53D8DF75fd6F2f5be398",
              "type": "EOA"
            },
            {
              "address": "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d",
              "type": "EOA"
            },
            {
              "address": "0x85e500dF81F10B539E16Dd717e24C41465D10D82",
              "type": "EOA"
            },
            {
              "address": "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348",
              "type": "EOA"
            },
            {
              "address": "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93",
              "type": "EOA"
            }
          ]
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "ZkTrueUp",
            "address": "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
            "upgradeability": {
              "proxyType": "EIP2535 diamond proxy",
              "admins": [],
              "implementations": [
                "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
                "0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A",
                "0x5d8A9DDA649524D1Ce31C204551a93560617D1D3",
                "0xbb629c830a4d153CDE43Cb127b5aff60d1185B8c",
                "0x84283289D7E57a2f5b80ddA065AC99450eB44cb6",
                "0xf1E357A2645dad05FbfbC34ddF6c2D24B9f332B9",
                "0x955cdD2E56Ca2776a101a552A318d28fe311398D",
                "0x0d7598cE7Cd1fA07C2a26c49876F850b0AD66bbC",
                "0x10a73b16f6CD03931484b4Ae69fEDc55E868D295",
                "0x882aBFb2F6A67d36350499991638044e8Bd83a72"
              ],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Main contract of the system. It manages deposits, withdrawals, verification, permissions and DeFi operations.",
            "upgradableBy": ["TermStructureMultisig"],
            "upgradeDelay": "None"
          },
          {
            "name": "Verifier",
            "address": "0x23369A60E5A8f422E38d799eD55e7AD8Ed4A86cE",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Verifier contract used to verify the SNARK proofs.",
            "upgradableBy": ["TermStructureMultisig"],
            "upgradeDelay": "None"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      }
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "ternoa",
      "createdAt": "1727455020",
      "display": {
        "name": "Ternoa",
        "slug": "ternoa",
        "description": "Ternoa is a modular Validium leveraging Polygon CDK, Avail, and AggLayer to achieve enhanced functionality.",
        "purposes": ["Universal"],
        "category": "Validium",
        "provider": "Polygon",
        "links": {
          "websites": ["https://ternoa.network/"],
          "apps": [],
          "documentation": ["https://docs.ternoa.network/learn/ternoa-zkevm+"],
          "explorers": [],
          "repositories": ["https://github.com/capsule-corp-ternoa"],
          "socialMedia": [
            "https://x.com/ternoa_",
            "https://t.me/ternoa",
            "https://discord.com/invite/cNZTGtGJNR",
            "https://linkedin.com/company/ternoa/mycompany/",
            "https://youtube.com/channel/UCUYvbtRE5HoWPz7z88V7Khw"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": ["AggLayer"]
    },
    {
      "type": "layer2",
      "id": "thebinaryholdings",
      "createdAt": "1726668186",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xF8BE077b85C8553124918d4ECE132E0Fb634c86A#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xFF00000000000000000000000000000000000624"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x1554F55Bd54DAC8e8164C33ce156F13e9c0d1B46#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xF8BE077b85C8553124918d4ECE132E0Fb634c86A#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xF8BE077b85C8553124918d4ECE132E0Fb634c86A#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x1554F55Bd54DAC8e8164C33ce156F13e9c0d1B46#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x1554F55Bd54DAC8e8164C33ce156F13e9c0d1B46#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x1554F55Bd54DAC8e8164C33ce156F13e9c0d1B46#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xF8BE077b85C8553124918d4ECE132E0Fb634c86A#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x79DdF0745D14783cDC2a05624c585Ddce07F4A02",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x87aab081Ac9F8ce80fb048f23280DF019036BA1d",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x2b6cD940ABE0CAF2fd89155b99522548c00EBaB1",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x7f9D9c1BCE1062E1077845eA39a0303429600a06",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "TBHMultisig",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L2OutputOracle, L1ERC721Bridge, SuperchainConfig, OptimismPortal, SystemConfig, OptimismMintableERC20Factory (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x48EC051349dDc7E8baBafCBfe27696ECF2A8a8B3",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xE559cf25AE191566d4A2E1cd5A533475179672A0",
              "type": "EOA"
            },
            {
              "address": "0x25A6E7c6f3d0fE89A656Fcf065614B74E55099fF",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x25A6E7c6f3d0fE89A656Fcf065614B74E55099fF",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "* Member of TBHMultisig.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n"
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x2b6cD940ABE0CAF2fd89155b99522548c00EBaB1",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0x79DdF0745D14783cDC2a05624c585Ddce07F4A02",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Challenger."
        },
        {
          "name": "EOA 4",
          "accounts": [
            {
              "address": "0x7f9D9c1BCE1062E1077845eA39a0303429600a06",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 5",
          "accounts": [
            {
              "address": "0x87aab081Ac9F8ce80fb048f23280DF019036BA1d",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Guardian."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x012f4baa6e0F5Ac4dFDF47BDdd9CF68a2B17821e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
              "implementations": ["0xF8BE077b85C8553124918d4ECE132E0Fb634c86A"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["TBHMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x1b396e4dC6ECB0be33CF01C5a34E1a3a7D03c378",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
              "implementations": ["0xfb5bE2d53F1429897c485C109A2A4Ae062C2A2ce"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["TBHMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0x34bb53D7C525114A27F0FE2aF91bdDAd186abb12",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
              "implementations": ["0x0F4D0486B8628Fb6351EE3E63a95e104dDB2FB0F"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["TBHMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, L1ERC721Bridge, SuperchainConfig, OptimismPortal, SystemConfig, OptimismMintableERC20Factory.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "OptimismPortal",
            "address": "0x5ff88fcF8e9947f45F4cAf8FFd5231B5DdF05e0A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
              "implementations": ["0x1554F55Bd54DAC8e8164C33ce156F13e9c0d1B46"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["TBHMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x7aC7e5989EaC278B7BbfeF560871a2026baD472c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
              "implementations": ["0xB7a1e72da74DF4CB498Ded5c45653374A6CC7097"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["TBHMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x807d21e416434ae92c8E5bcA4d506781aFbBa380",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x48455CB9bB2407C3e8De538B884bBec5aCbaa137"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "AddressManager",
            "address": "0x8173904703995c6BbA59a42B8bBf8405F978758a",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0xa641e14B685b5E652865e14A4fBc07e51371D124",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
              "implementations": ["0x343CC6af2CD31aF51655AE75D19D51ec49a89b7A"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["TBHMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xD1B30378CBF968E5525e8835219A5726A1e71D10",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
              "implementations": ["0x1BcF2686F42e856520f0C16de82c2cF8bb50Ae77"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["TBHMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Superchain", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "bedrock-superchain",
        "name": "The Binary Holdings",
        "slug": "thebinaryholdings",
        "shortName": "Binary",
        "description": "The Binary Holdings is a web3 infrastructure that integrates into telecommunication and banking apps to increase user engagement, retention, and ARPU (Average Revenue Per User) - while rewarding users for their engagement. It uses its own token (BNRY) for gas.",
        "links": {
          "websites": ["https://thebinaryholdings.com/"],
          "apps": [],
          "documentation": ["https://docs.thebinaryholdings.com/"],
          "explorers": ["https://explorer.thebinaryholdings.com"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/thebinaryhldgs",
            "https://t.me/tbhofficialchat",
            "https://discord.gg/wCXJmTBGr2"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "The Binary Holdings is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x5ff88fcF8e9947f45F4cAf8FFd5231B5DdF05e0A",
            "newVersion": true,
            "sinceTimestamp": "1719398555",
            "tokens": ["ETH", "BNRY"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x5ff88fcF8e9947f45F4cAf8FFd5231B5DdF05e0A",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
                "implementations": [
                  "0x1554F55Bd54DAC8e8164C33ce156F13e9c0d1B46"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH, BNRY.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xD1B30378CBF968E5525e8835219A5726A1e71D10",
            "newVersion": true,
            "sinceTimestamp": "1719398579",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xD1B30378CBF968E5525e8835219A5726A1e71D10",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x38593Cce8FaB9887Ef9760f5F6aB3d6C595143cF"],
                "implementations": [
                  "0x1BcF2686F42e856520f0C16de82c2cF8bb50Ae77"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.zero.thebinaryholdings.com",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x7f9D9c1BCE1062E1077845eA39a0303429600a06",
              "to": "0xFF00000000000000000000000000000000000624",
              "sinceTimestamp": "1719397465"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x012f4baa6e0F5Ac4dFDF47BDdd9CF68a2B17821e",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1719398651"
            }
          }
        ],
        "finality": {
          "type": "OPStack-blob",
          "genesisTimestamp": "1719398651",
          "minTimestamp": "1719397465",
          "l2BlockTimeSeconds": 2,
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "thanos",
      "createdAt": "1726844759",
      "display": {
        "name": "THANOS",
        "slug": "thanos",
        "description": "Thanos is an upcoming Optimistic Rollup. By utilizing its native token within the L2 network, it aims to enable the creation of tailored Layer 2 environments where the token is used for transactions, offering a more efficient and cost-effective blockchain experience.",
        "purposes": ["Universal"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://tokamak.network/"],
          "apps": [],
          "documentation": ["https://docs.tokamak.network/"],
          "explorers": ["https://explorer.thanos-sepolia.tokamak.network/"],
          "repositories": ["https://github.com/tokamak-network/tokamak-thanos"],
          "socialMedia": [
            "https://t.me/tokamak_network",
            "https://discord.gg/FuwksZQQ7r",
            "https://twitter.com/Tokamak_Network",
            "https://medium.com/tokamak-network"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "treasure",
      "createdAt": "1719931843",
      "display": {
        "name": "Treasure Chain",
        "slug": "treasure",
        "description": "Treasure Chain is an upcoming gaming-specific L2 built on the ZK Stack. The Treasure Platform powers end-to-end gaming and game-builder needs including but not limited to Identity, Marketplace, AMM Payments, Analytics and LiveOps.",
        "purposes": ["Gaming"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://treasure.lol/"],
          "apps": ["https://app.treasure.lol"],
          "documentation": ["https://docs.treasure.lol"],
          "explorers": [],
          "repositories": ["https://github.com/TreasureProject"],
          "socialMedia": ["https://x.com/Treasure_DAO"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "turboprotocol",
      "createdAt": "1728666437",
      "display": {
        "name": "Turbo Protocol",
        "slug": "turboprotocol",
        "description": "Turbo Protocol is an Ethereum scaling solution that will offer interactive query speeds for AI dApps in the Ethereum ecosystem.",
        "purposes": ["Universal", "AI"],
        "category": "Validium",
        "links": {
          "websites": ["https://turboprotocol.xyz/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/TurboProtocol"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "unichain",
      "createdAt": "1728932992",
      "display": {
        "name": "Unichain",
        "slug": "unichain",
        "description": "Unichain, a faster, cheaper L2 designed to be the home for DeFi and the home for multichain liquidity.",
        "purposes": ["Universal", "Exchange"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://unichain.org/"],
          "apps": ["https://unichain.org/bridge"],
          "documentation": ["https://docs.unichain.org/docs"],
          "explorers": ["https://unichain-sepolia.blockscout.com/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/unichain",
            "https://discord.com/invite/uniswap"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "createdAt": "1720180654",
      "id": "wirex",
      "display": {
        "name": "Pay Chain",
        "slug": "wirex",
        "description": "Pay Chain is a Validium built on the Polygon CDK stack. It is used as the infrastructure for the Wirex non-custodial debit cards.",
        "links": {
          "websites": ["https://wirexpaychain.com/"],
          "apps": ["https://pay-chain-bridge.wirexpaychain.com/"],
          "documentation": [
            "https://docs.wirexpaychain.com/tech/wirex-pay-chain"
          ],
          "explorers": ["https://pay-chain-blockscout.wirexpaychain.com/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/wirexpaychain",
            "https://discord.gg/f8UGp4dH6g",
            "https://wirexpaychain.com/blog"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "purposes": ["Universal", "Payments"],
        "category": "Validium",
        "provider": "Polygon",
        "tvlWarning": null,
        "finality": {
          "finalizationPeriod": 0,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "Uniform block distribution is assumed for calculations."
            }
          }
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "newVersion": true,
            "sinceTimestamp": "1679653127",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
                "implementations": [
                  "0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "AggLayer",
              "nativeAsset": "etherPreminted",
              "premintedAmount": "340282366920938463463374607431768211455"
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://pay-chain-rpc.wirexpaychain.com",
          "defaultCallsPerMinute": 500
        },
        "trackedTxs": null,
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": null
      },
      "chainConfig": {
        "name": "wirex",
        "chainId": 31415,
        "explorerUrl": "https://pay-chain-blockscout.wirexpaychain.com",
        "minTimestampForTvl": "1720093223"
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5,
          "sources": [{ "contract": "WirexPayChainValidium", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -432000,
          "warning": {
            "value": "The Security Council can remove the delay on upgrades.",
            "sentiment": "bad"
          }
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.",
          "sentiment": "bad",
          "sources": [{ "contract": "WirexPayChainValidium", "references": [] }]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b",
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "PolygonRollupManager.sol - Etherscan source code, _verifyAndRewardBatches function",
              "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain. Transaction data is stored off-chain and only the hashes are posted on-chain by the Sequencer, after being signed by the DAC members.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "PolygonValidiumStorageMigration.sol - Etherscan source code, sequenceBatchesValidium function",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C#code#F1#L126"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "WirexPayChainValidium.sol - Etherscan source code, onlyTrustedSequencer modifier",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "The mechanism for allowing users to submit their own transactions is currently disabled.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "WirexPayChainValidium.sol - Etherscan source code, forceBatchAddress address",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "PolygonZkEvmBridgeV2.sol - Etherscan source code, claimAsset function",
                "href": "https://etherscan.io/address/0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
              }
            ]
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "Node software can be found [here](https://github.com/0xPolygon/cdk-validium-node).",
        "compressionScheme": "No compression scheme yet.",
        "genesisState": "The genesis state, whose corresponding root is accessible as Batch 0 root in the `getRollupBatchNumToStateRoot(5,0)` method of PolygonRollupManager, is available [here](https://github.com/0xPolygonHermez/zkevm-contracts/blob/1ad7089d04910c319a257ff4f3674ffd6fc6e64e/tools/addRollupType/genesis.json).",
        "dataFormat": "The trusted sequencer request signatures from DAC members off-chain, and posts hashed batches with signatures to the WirexPayChainValidium contract."
      },
      "stateValidation": null,
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x49a191471F248f7c86cA29477e6E969970BaEAdA",
              "type": "EOA"
            }
          ],
          "description": "Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."
        },
        {
          "name": "Proposer (Trusted Aggregator)",
          "accounts": [
            {
              "address": "0x6329Fe417621925C81c16F9F9a18c203C21Af7ab",
              "type": "EOA"
            },
            {
              "address": "0x20A53dCb196cD2bcc14Ece01F358f1C849aA51dE",
              "type": "EOA"
            }
          ],
          "description": "The trusted proposer (called Aggregator) provides ZK proofs for all the supported systems. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 6 / 8 threshold.  The Security Council is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.",
          "accounts": [
            {
              "address": "0x37c58Dfa7BF0A165C5AAEdDf3e2EdB475ac6Dcb6",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
              "type": "EOA"
            },
            {
              "address": "0xaF46a0ddf80DFFB49C87656625E65A37499B261D",
              "type": "EOA"
            },
            {
              "address": "0xBDc235cC9d6Baa641c5ae306bc83962475A5FEFf",
              "type": "EOA"
            },
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0x3ab9f4b964eE665F7CDf1d65f1cEEc6196B0D622",
              "type": "EOA"
            },
            {
              "address": "0x49c15936864690bCd6af0ecaca8E874adFF30E86",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0x21887c89368bf918346c62460e0c339113801C28",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Forced Batcher",
          "accounts": [
            {
              "address": "0xecEA75e2854FD52b0aE5C51C88f5eA8e2eC4bf9A",
              "type": "EOA"
            }
          ],
          "description": "Sole account allowed to submit forced transactions. If this address is the zero address, anyone can submit forced transactions."
        },
        {
          "name": "RollupManagerAdminMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Admin of the PolygonRollupManager contract, can set core system parameters like timeouts and aggregator as well as deactivate emergency state. They can also upgrade the WirexPayChainValidium contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0xA0B02B28920812324f1cC3255bd8840867d3f227",
              "type": "EOA"
            },
            {
              "address": "0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LocalAdmin",
          "accounts": [
            {
              "address": "0xecEA75e2854FD52b0aE5C51C88f5eA8e2eC4bf9A",
              "type": "EOA"
            }
          ],
          "description": "Admin and ForceBatcher of the WirexPayChainValidium contract, can set core system parameters like timeouts, sequencer, activate forced transactions, and set the DA committee members in the WirexPayChainDAC contract."
        },
        {
          "name": "WirexPayChainDAC Upgrader",
          "accounts": [
            {
              "address": "0xb8605297399baEb6628C9E8F5D3E52A056492cfe",
              "type": "EOA"
            }
          ],
          "description": "Can upgrade the WirexPayChainDAC contract and thus change the data availability rules any time."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "WirexPayChainDAC",
            "address": "0x755e9A5B4BAEFc78Bb82BA7E6d2386CCB2F238a5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x2B966b9824c11f274aa39f2f72cF25C4b47c3A78"],
              "implementations": ["0xAce9269EaC3419937093154dea0AD44C36Df6963"]
            },
            "chain": "ethereum",
            "description": "Validium committee contract that allows the owner to setup the members of the committee and stores the required amount of signatures threshold.",
            "upgradableBy": ["WirexPayChainDAC Upgrader"],
            "upgradeDelay": "None"
          },
          {
            "name": "WirexPayChainValidium",
            "address": "0x78253E2E6120164bd826668A4C96Db20f78A94c9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"],
              "implementations": ["0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"]
            },
            "chain": "ethereum",
            "description": "The main contract of the Pay Chain. Contains sequenced transaction batch hashes and forced transaction logic.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Verifier",
            "address": "0x0775e11309d75aA6b0967917fB0213C5673eDf81",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "An autogenerated contract that verifies ZK proofs in the PolygonRollupManager system."
          },
          {
            "name": "PolygonRollupManager",
            "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]
            },
            "chain": "ethereum",
            "description": "It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the Security Council, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives L2 state roots as well as ZK proofs.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Bridge",
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]
            },
            "chain": "ethereum",
            "description": "The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer both ERC20 assets and arbitrary messages. To transfer funds a user initiated transaction on both sides is required.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "GlobalExitRootV2",
            "address": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x2E38cD55163137483E30580Cb468C2dFf1d85077"]
            },
            "chain": "ethereum",
            "description": "Synchronizes deposit and withdraw merkle trees across L1 and the L2s. The global root from this contract is injected into the L2 contracts.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Timelock",
            "address": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract upgrades have to go through a 10d timelock unless the Emergency State is activated. It can also add rollup types that can be used to upgrade verifier contracts of existing systems. It is controlled by the ProxyAdminOwner."
          }
        ],
        "references": [
          {
            "text": "State injections - stateRoot and exitRoot are part of the validity proof input.",
            "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 10d delay on code upgrades."
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Wirex Pay Chain Protocol Launch",
          "link": "https://x.com/wirexpaychain/status/1828779629051793710",
          "date": "2024-08-28",
          "description": "Wirex Pay Chain launches officially, integrated with Polygon AggLayer.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Gateway", "PolygonCDK", "AggLayer", "EVM"]
    },
    {
      "type": "layer2",
      "createdAt": "1720180654",
      "id": "witness",
      "display": {
        "name": "Witness Chain",
        "slug": "witness",
        "headerWarning": "Witness Chain is using AggLayer, meaning it shares the TVL escrow contracts with Polygon zkEVM and other connected chains.",
        "description": "Witness Chain is a Validium built on the Polygon CDK stack and Eigenlayer validates services. The purpose of the project is to create a DePIN coordination Layer.",
        "links": {
          "websites": ["https://witnesschain.com/"],
          "apps": ["https://witnesschain-bridge.eu-north-2.gateway.fm"],
          "documentation": ["https://docs.witnesschain.com/"],
          "explorers": [
            "https://witnesschain-blockscout.eu-north-2.gateway.fm/"
          ],
          "repositories": ["https://github.com/witnesschain-com"],
          "socialMedia": [
            "https://twitter.com/witnesschain",
            "https://discord.gg/HwnzU5CYDp",
            "https://docs.witnesschain.com/resources/technical-papers"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "purposes": ["Universal", "IoT", "Oracles"],
        "category": "Validium",
        "provider": "Polygon",
        "tvlWarning": null,
        "finality": {
          "finalizationPeriod": 0,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "Uniform block distribution is assumed for calculations."
            }
          }
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "newVersion": true,
            "sinceTimestamp": "1679653127",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
                "implementations": [
                  "0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "AggLayer",
              "nativeAsset": "etherPreminted",
              "premintedAmount": "340282366920938463463374607431768211455"
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://witnesschain-sequencer.eu-north-2.gateway.fm/",
          "defaultCallsPerMinute": 500
        },
        "trackedTxs": null,
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": null
      },
      "chainConfig": {
        "chainId": 1702448187,
        "name": "witness",
        "minTimestampForTvl": "1718569535"
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5,
          "sources": [{ "contract": "WitnessValidium", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -432000,
          "warning": {
            "value": "The Security Council can remove the delay on upgrades.",
            "sentiment": "bad"
          }
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.",
          "sentiment": "bad",
          "sources": [{ "contract": "WitnessValidium", "references": [] }]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b",
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "PolygonRollupManager.sol - Etherscan source code, _verifyAndRewardBatches function",
              "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain. Transaction data is stored off-chain and only the hashes are posted on-chain by the Sequencer, after being signed by the DAC members.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "PolygonValidiumStorageMigration.sol - Etherscan source code, sequenceBatchesValidium() function",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C#code#F1#L126"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "WitnessValidium.sol - Etherscan source code, onlyTrustedSequencer modifier",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "The mechanism for allowing users to submit their own transactions is currently disabled.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "WitnessValidium.sol - Etherscan source code, forceBatchAddress address",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "PolygonZkEvmBridgeV2.sol - Etherscan source code, claimAsset function",
                "href": "https://etherscan.io/address/0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
              }
            ]
          }
        ]
      },
      "stateDerivation": null,
      "stateValidation": null,
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x353800524721e11B453f73f523dD8840c215a213",
              "type": "EOA"
            }
          ],
          "description": "Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."
        },
        {
          "name": "Proposer (Trusted Aggregator)",
          "accounts": [
            {
              "address": "0x6329Fe417621925C81c16F9F9a18c203C21Af7ab",
              "type": "EOA"
            },
            {
              "address": "0x20A53dCb196cD2bcc14Ece01F358f1C849aA51dE",
              "type": "EOA"
            }
          ],
          "description": "The trusted proposer (called Aggregator) provides ZK proofs for all the supported systems. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 6 / 8 threshold.  The Security Council is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.",
          "accounts": [
            {
              "address": "0x37c58Dfa7BF0A165C5AAEdDf3e2EdB475ac6Dcb6",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
              "type": "EOA"
            },
            {
              "address": "0xaF46a0ddf80DFFB49C87656625E65A37499B261D",
              "type": "EOA"
            },
            {
              "address": "0xBDc235cC9d6Baa641c5ae306bc83962475A5FEFf",
              "type": "EOA"
            },
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0x3ab9f4b964eE665F7CDf1d65f1cEEc6196B0D622",
              "type": "EOA"
            },
            {
              "address": "0x49c15936864690bCd6af0ecaca8E874adFF30E86",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0x21887c89368bf918346c62460e0c339113801C28",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Forced Batcher",
          "accounts": [
            {
              "address": "0xd0676f1Ee81d7C6fe9B0F2EEf9FF74C3E984f94b",
              "type": "EOA"
            }
          ],
          "description": "Sole account allowed to submit forced transactions. If this address is the zero address, anyone can submit forced transactions."
        },
        {
          "name": "RollupManagerAdminMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Admin of the PolygonRollupManager contract, can set core system parameters like timeouts and aggregator as well as deactivate emergency state. They can also upgrade the WitnessValidium contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0xA0B02B28920812324f1cC3255bd8840867d3f227",
              "type": "EOA"
            },
            {
              "address": "0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LocalAdmin",
          "accounts": [
            {
              "address": "0xd0676f1Ee81d7C6fe9B0F2EEf9FF74C3E984f94b",
              "type": "EOA"
            }
          ],
          "description": "Admin of the WitnessValidium contract, can set core system parameters like timeouts, sequencer, activate forced transactions and update the DA mode."
        },
        {
          "name": "DACProxyAdminOwner",
          "accounts": [
            {
              "address": "0xb8605297399baEb6628C9E8F5D3E52A056492cfe",
              "type": "EOA"
            }
          ],
          "description": "Owner of the WitnessValidiumDAC's ProxyAdmin. Can upgrade the contract."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "WitnessValidiumDAC",
            "address": "0xB0FD8Ba20B1C178b14Dd2a02f4e72c03fdA626f8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8cC10554B5C7D322E6a7F33CBb584c7C5fdBA039"],
              "implementations": ["0xD26B535AD58715C4c2ffFAC32908b13674533DAe"]
            },
            "chain": "ethereum",
            "description": "Validium data availability committee contract that allows the admin to setup the members of the committee and stores the required amount of signatures threshold.",
            "upgradableBy": ["DACProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "WitnessValidium",
            "address": "0x42Ac57F24EC4C3AAC843f6DBAcd9282DAaeE9238",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"],
              "implementations": ["0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"]
            },
            "chain": "ethereum",
            "description": "The main contract of the Witness Chain. Contains sequenced transaction batch hashes and forced transaction logic.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "FflonkVerifier",
            "address": "0x0775e11309d75aA6b0967917fB0213C5673eDf81",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "An autogenerated contract that verifies ZK proofs in the PolygonRollupManager system."
          },
          {
            "name": "PolygonRollupManager",
            "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]
            },
            "chain": "ethereum",
            "description": "It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the Security Council, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives L2 state roots as well as ZK proofs.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Bridge",
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]
            },
            "chain": "ethereum",
            "description": "The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer both ERC20 assets and arbitrary messages. To transfer funds a user initiated transaction on both sides is required.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "GlobalExitRootV2",
            "address": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x2E38cD55163137483E30580Cb468C2dFf1d85077"]
            },
            "chain": "ethereum",
            "description": "Synchronizes deposit and withdraw merkle trees across L1 and the L2s. The global root from this contract is injected into the L2 contracts.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Timelock",
            "address": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract upgrades have to go through a 10d timelock unless the Emergency State is activated. It can also add rollup types that can be used to upgrade verifier contracts of existing systems. It is controlled by the ProxyAdminOwner."
          }
        ],
        "references": [
          {
            "text": "State injections - stateRoot and exitRoot are part of the validity proof input.",
            "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 10d delay on code upgrades."
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Witness Chain Mainnet Launch",
          "link": "https://x.com/witnesschain/status/1808153753897652256",
          "date": "2024-07-02",
          "description": "L2 Diligence proofs are now posted to Witness Chain Mainnet by Eigenlayer operators.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [],
      "badges": ["DAC", "PolygonCDK", "AggLayer", "EVM"]
    },
    {
      "type": "layer2",
      "id": "worldchain",
      "createdAt": "1729586060",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x714d763CB676b97fA878d452dB70d81CBCb7D228#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xff00000000000000000000000000000000000480"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xB4BA75C87A48a233BC22678EfDa7d49CfD89ea5F#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x714d763CB676b97fA878d452dB70d81CBCb7D228#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x714d763CB676b97fA878d452dB70d81CBCb7D228#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xB4BA75C87A48a233BC22678EfDa7d49CfD89ea5F#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xB4BA75C87A48a233BC22678EfDa7d49CfD89ea5F#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xB4BA75C87A48a233BC22678EfDa7d49CfD89ea5F#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x714d763CB676b97fA878d452dB70d81CBCb7D228#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xB2aa0C2C4fD6BFCBF699d4c787CD6Cc0dC461a9d",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xB2aa0C2C4fD6BFCBF699d4c787CD6Cc0dC461a9d",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x2307278fC8aB0005974A6DeD2FA6d1187333a223",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xdBBE3D8c2d2b22A2611c5A94A9a12C2fCD49Eb29",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "WorldchainMultisig",
          "description": "* This is a Gnosis Safe with 3 / 6 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L2OutputOracle, L1ERC721Bridge, SystemConfig, OptimismMintableERC20Factory, SuperchainConfig, OptimismPortal (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0xA4fB12D15Eb85dc9284a7df0AdBC8B696EdbbF1d",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xaCEF7482b54a57F50b1CD8c99d1dC1964202A063",
              "type": "EOA"
            },
            {
              "address": "0x5EABE7f6673311EdD1Ad17A76ce148c2Bb56aF01",
              "type": "EOA"
            },
            {
              "address": "0x2e42cEfC761e64Bf4442694220d31C2464a6EE21",
              "type": "EOA"
            },
            {
              "address": "0x3f0030b9Ca695Abd41b2B619F3298e172e4FCAD6",
              "type": "EOA"
            },
            {
              "address": "0x39CF304731099e756204219BF0a8cCc4738dE9dD",
              "type": "EOA"
            },
            {
              "address": "0xB2aa0C2C4fD6BFCBF699d4c787CD6Cc0dC461a9d",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x2307278fC8aB0005974A6DeD2FA6d1187333a223",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x28fAb3A5b69711cc64B09240d2694d9F0f07eBf6",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Can upgrade implementation of L1OpUSDCBridgeAdapter."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0xB2aa0C2C4fD6BFCBF699d4c787CD6Cc0dC461a9d",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "* Member of WorldchainMultisig.\n* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n"
        },
        {
          "name": "EOA 4",
          "accounts": [
            {
              "address": "0xdBBE3D8c2d2b22A2611c5A94A9a12C2fCD49Eb29",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1OpUSDCBridgeAdapter",
            "address": "0x153A69e4bb6fEDBbAaF463CB982416316c84B2dB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x28fAb3A5b69711cc64B09240d2694d9F0f07eBf6"],
              "implementations": ["0x62d45660505D7457e3ce9Cd87C0a0cf890fB38ff"]
            },
            "chain": "ethereum",
            "description": "Custom external escrow for USDC bridged to Worldchain.",
            "upgradableBy": ["EOA 2"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x19A6d1E9034596196295CF148509796978343c5D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
              "implementations": ["0x714d763CB676b97fA878d452dB70d81CBCb7D228"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["WorldchainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x1Df436AfDb2fBB40F1fE8bEd4Fc89A0D0990a8E9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
              "implementations": ["0x3c5bC88Fad9D35072213cD1FB5e83f9D150B3144"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["WorldchainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x470458C91978D2d929704489Ad730DC3E3001113",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
              "implementations": ["0xf1b86d4ec73E17AeD218153278653D0f53220776"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["WorldchainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x5891090d5085679714cb0e62f74950a3c19146a8",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SystemConfig",
            "address": "0x6ab0777fD0e609CE58F939a7F70Fe41F5Aa6300A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
              "implementations": ["0x18fffcb31850795D919B6aDD4b16bEB3a5f5ECFB"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["WorldchainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x82Cb528466cF22412d89bdBE9bCF04856790dD0e",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
              "implementations": ["0x73A793CdcF6F0f20e14e1835Eb1462b0376727cF"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["WorldchainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0xa231f8be37e583f276f93dF516D88a043bfe47E3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
              "implementations": ["0x76072B79Efc11E5C6c74A56560F8CE0B89D2966c"]
            },
            "chain": "ethereum",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["WorldchainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0xd5ec14a83B7d95BE1E2Ac12523e2dEE12Cbeea6C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
              "implementations": ["0xB4BA75C87A48a233BC22678EfDa7d49CfD89ea5F"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["WorldchainMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, L1ERC721Bridge, SystemConfig, OptimismMintableERC20Factory, SuperchainConfig, OptimismPortal.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0xf931a81D18B1766d15695ffc7c1920a62b7e710a",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xE187FEF3AAe13137e6062B2634cCE43B599156F6"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "World Chain Launch",
          "link": "https://worldcoin.org/blog/announcements/introducing-world-chain",
          "date": "2024-10-17T00:00:00Z",
          "description": "World Chain Mainnet is officially live.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Alchemy", "Superchain", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "Identity"],
        "architectureImage": "bedrock-superchain",
        "name": "World Chain",
        "slug": "world",
        "description": "World Chain is an OP Stack Rollup built to scale Proof of Personhood, aiming to offer priority blockspace for users with a World ID.",
        "links": {
          "websites": ["https://worldcoin.org/world-chain"],
          "apps": [
            "https://worldchain-mainnet.bridge.alchemy.com/",
            "https://worldcoin.org/download-app"
          ],
          "documentation": ["https://docs.world.org/world-chain/"],
          "explorers": [
            "https://worldscan.org",
            "https://worldchain-mainnet.explorer.alchemy.com/"
          ],
          "repositories": ["https://github.com/worldcoin"],
          "socialMedia": [
            "https://x.com/worldcoin",
            "https://discord.com/invite/worldcoin",
            "https://t.me/worldcoin",
            "https://linkedin.com/company/worldcoinproject/",
            "https://youtube.com/@worldcoinofficial"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "World Chain is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": ["WLD"],
        "escrows": [
          {
            "address": "0xd5ec14a83B7d95BE1E2Ac12523e2dEE12Cbeea6C",
            "newVersion": true,
            "sinceTimestamp": "1719432935",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xd5ec14a83B7d95BE1E2Ac12523e2dEE12Cbeea6C",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
                "implementations": [
                  "0xB4BA75C87A48a233BC22678EfDa7d49CfD89ea5F"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x470458C91978D2d929704489Ad730DC3E3001113",
            "newVersion": true,
            "sinceTimestamp": "1719432959",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x470458C91978D2d929704489Ad730DC3E3001113",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D"],
                "implementations": [
                  "0xf1b86d4ec73E17AeD218153278653D0f53220776"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x153A69e4bb6fEDBbAaF463CB982416316c84B2dB",
            "newVersion": true,
            "sinceTimestamp": "1724427575",
            "tokens": ["USDC"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": "External USDC Vault",
              "address": "0x153A69e4bb6fEDBbAaF463CB982416316c84B2dB",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x28fAb3A5b69711cc64B09240d2694d9F0f07eBf6"],
                "implementations": [
                  "0x62d45660505D7457e3ce9Cd87C0a0cf890fB38ff"
                ]
              },
              "chain": "ethereum",
              "description": "Custom external escrow for USDC bridged to Worldchain.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://worldchain-mainnet.g.alchemy.com/public",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0xdBBE3D8c2d2b22A2611c5A94A9a12C2fCD49Eb29",
              "to": "0xff00000000000000000000000000000000000480",
              "sinceTimestamp": "1719432935"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x19A6d1E9034596196295CF148509796978343c5D",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1719433019"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "type": "layer2",
      "id": "xchain",
      "createdAt": "1690896554",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0xeb61c3FA03544021cf76412eFb9D0Ce7D8c0290d",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x20195677a6De5f0f7dF4e21cE48F0D24e5477110"],
              "implementations": [
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A",
                "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"
              ]
            },
            "chain": "ethereum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x2Be65c5b58F78B02AB5c0e798A9ffC181703D3C1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x22010F5C4c106dfBaffec780196d2F691860Ff62"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "ethereum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x47861E0419BE83d0175818a09221B6DF2EFD7793",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x22010F5C4c106dfBaffec780196d2F691860Ff62"],
              "implementations": ["0x383f16fB2809a56fC639c1eE2c93Ad2aa7Ee130A"]
            },
            "chain": "ethereum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xE961Ef06c26D0f032F0298c97C41e648d3bb715a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x22010F5C4c106dfBaffec780196d2F691860Ff62"],
              "implementations": ["0x1162084C3C6575121146582Db5BE43189e8CEe6b"]
            },
            "chain": "ethereum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x0b8071337dcB089478Ea740efC10904d9F359141",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x22010F5C4c106dfBaffec780196d2F691860Ff62"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "ethereum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x20195677a6De5f0f7dF4e21cE48F0D24e5477110",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x22010F5C4c106dfBaffec780196d2F691860Ff62"],
              "implementations": ["0x6c21303F5986180B1394d2C89f3e883890E2867b"]
            },
            "chain": "ethereum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0xC0880Eea7Ad1B28a39344D48B411bC96f3daf60D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x22010F5C4c106dfBaffec780196d2F691860Ff62"],
              "implementations": ["0x1D901DD7A5eFE421C3C437B147040E5AF22E6A43"]
            },
            "chain": "ethereum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x57EA090Ac0554d174AE0e2855B460e84A1A7C221",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x90eC62De2EB7C7512a22bD2D55926AD6bA609F38",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x17e7F68ce50A77e55C7834ddF31AEf86403B8010",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x72B166070781a552D7b95a907eF59ca05d3D5a62",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "xchain",
        "chainId": 94524,
        "explorerUrl": "https://xchain-explorer.idex.io/",
        "explorerApi": {
          "url": "https://xchain-explorer.idex.io/api",
          "type": "blockscout"
        },
        "multicallContracts": [],
        "minTimestampForTvl": "1724198400"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://etherscan.io/address/0x383f16fB2809a56fC639c1eE2c93Ad2aa7Ee130A#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x74978411BbBCbC466e79fb855DAe981997100deB",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x115B6563C9237B1Ff6f9E2B2a825B210ECDE021e",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "ethereum"
        },
        {
          "name": "ConduitMultisig",
          "description": "This is a Gnosis Safe with 4 / 7 threshold.  Admin that can upgrade the smart contract system (via UpgradeExecutor) at any time and gain access to all funds.",
          "accounts": [
            {
              "address": "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 5d 14h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "Mainnet launch",
          "link": "https://blog.idex.io/p/idex-mainnet-is-live",
          "date": "2024-09-02T00:00:00Z",
          "description": "XCHAIN launches together with a new version of IDEX.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": null,
      "badges": ["Conduit", "DAC", "Orbit", "EVM"],
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "name": "XCHAIN",
        "slug": "xchain",
        "description": "XCHAIN is an Optimium based on the Arbitrum Orbit stack. It is built to support IDEX - a high-performance perpetual swaps exchange. It allows for gas free and nearly instant settlement of all IDEX transactions.",
        "links": {
          "websites": ["https://idex.io/"],
          "apps": ["https://exchange.idex.io/"],
          "documentation": ["https://docs.idex.io/"],
          "explorers": ["https://xchain-explorer.idex.io/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/idexio",
            "https://discord.com/invite/idex",
            "https://t.me/IDEXChat"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "Arbitrum",
        "category": "Optimium",
        "finality": { "finalizationPeriod": 483840 },
        "liveness": null
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 11d 23h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1033656
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x2Be65c5b58F78B02AB5c0e798A9ffC181703D3C1",
            "newVersion": true,
            "sinceTimestamp": "1716494507",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2Be65c5b58F78B02AB5c0e798A9ffC181703D3C1",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x22010F5C4c106dfBaffec780196d2F691860Ff62"],
                "implementations": [
                  "0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"
                ]
              },
              "chain": "ethereum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://xchain-rpc.idex.io/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": "coming soon"
      }
    },
    {
      "type": "layer2",
      "createdAt": "1713983341",
      "id": "xlayer",
      "display": {
        "name": "X Layer",
        "slug": "xlayer",
        "description": "X Layer is Validium by OKX with seamless integration with OKX products. It is powered by the Polygon CDK.",
        "links": {
          "websites": ["https://okx.com/xlayer"],
          "apps": [],
          "documentation": [
            "https://okx.com/xlayer/docs/users/welcome/about-x-layer"
          ],
          "explorers": ["https://okx.com/explorer/xlayer"],
          "repositories": [],
          "socialMedia": ["https://twitter.com/XLayerOfficial"]
        },
        "activityDataSource": "Blockchain RPC",
        "purposes": ["Universal"],
        "category": "Validium",
        "provider": "Polygon",
        "tvlWarning": null,
        "finality": {
          "finalizationPeriod": 0,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "Uniform block distribution is assumed for calculations."
            }
          }
        }
      },
      "config": {
        "associatedTokens": ["OKB"],
        "escrows": [
          {
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "newVersion": true,
            "sinceTimestamp": "1712620800",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
                "implementations": [
                  "0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "AggLayer",
              "nativeAsset": "etherWrapped",
              "wethAddress": "0x5A77f1443D16ee5761d310e38b62f77f726bC71c",
              "tokensToAssignFromL1": ["OKB"]
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.xlayer.tech",
          "defaultCallsPerMinute": 500
        },
        "trackedTxs": null,
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": null
      },
      "chainConfig": {
        "name": "xlayer",
        "chainId": 196,
        "explorerUrl": "https://rpc.xlayer.tech",
        "minTimestampForTvl": "1711782180",
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 47416,
            "version": "3"
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "2/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 2/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 2/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1,
          "sources": [{ "contract": "XLayerValidium", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -432000,
          "warning": {
            "value": "The Security Council can remove the delay on upgrades.",
            "sentiment": "bad"
          }
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.",
          "sentiment": "bad",
          "sources": [{ "contract": "XLayerValidium", "references": [] }]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "PolygonRollupManager",
              "references": [
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b",
                "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "PolygonRollupManager.sol - Etherscan source code, _verifyAndRewardBatches function",
              "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain. Transaction data is stored off-chain and only the hashes are posted on-chain by the Sequencer, after being signed by the DAC members.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "PolygonValidiumStorageMigration.sol - Etherscan source code, sequenceBatchesValidium function",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C#code#F1#L126"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "XLayerValidium.sol - Etherscan source code, onlyTrustedSequencer modifier",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "The mechanism for allowing users to submit their own transactions is currently disabled.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "XLayerValidium.sol - Etherscan source code, forceBatchAddress address",
              "href": "https://etherscan.io/address/0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "PolygonZkEvmBridgeV2.sol - Etherscan source code, claimAsset function",
                "href": "https://etherscan.io/address/0x0FeB850B183C57534b56b7d56520133C8f9BDB65"
              }
            ]
          }
        ]
      },
      "stateDerivation": null,
      "stateValidation": null,
      "permissions": [
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0xAF9d27ffe4d51eD54AC8eEc78f2785D7E11E5ab1",
              "type": "EOA"
            }
          ],
          "description": "Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."
        },
        {
          "name": "Proposer (Trusted Aggregator)",
          "accounts": [
            {
              "address": "0x6329Fe417621925C81c16F9F9a18c203C21Af7ab",
              "type": "EOA"
            },
            {
              "address": "0x20A53dCb196cD2bcc14Ece01F358f1C849aA51dE",
              "type": "EOA"
            }
          ],
          "description": "The trusted proposer (called Aggregator) provides ZK proofs for all the supported systems. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."
        },
        {
          "name": "SecurityCouncil",
          "description": "This is a Gnosis Safe with 6 / 8 threshold.  The Security Council is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.",
          "accounts": [
            {
              "address": "0x37c58Dfa7BF0A165C5AAEdDf3e2EdB475ac6Dcb6",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
              "type": "EOA"
            },
            {
              "address": "0xaF46a0ddf80DFFB49C87656625E65A37499B261D",
              "type": "EOA"
            },
            {
              "address": "0xBDc235cC9d6Baa641c5ae306bc83962475A5FEFf",
              "type": "EOA"
            },
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0x3ab9f4b964eE665F7CDf1d65f1cEEc6196B0D622",
              "type": "EOA"
            },
            {
              "address": "0x49c15936864690bCd6af0ecaca8E874adFF30E86",
              "type": "EOA"
            },
            {
              "address": "0x9F7dfAb2222A473284205cdDF08a677726d786A0",
              "type": "EOA"
            },
            {
              "address": "0x21887c89368bf918346c62460e0c339113801C28",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Forced Batcher",
          "accounts": [
            {
              "address": "0x491619874b866c3cDB7C8553877da223525ead01",
              "type": "EOA"
            }
          ],
          "description": "Sole account allowed to submit forced transactions. If this address is the zero address, anyone can submit forced transactions."
        },
        {
          "name": "RollupManagerAdminMultisig",
          "description": "This is a Gnosis Safe with 2 / 3 threshold.  Admin of the PolygonRollupManager contract, can set core system parameters like timeouts and aggregator as well as deactivate emergency state. They can also upgrade the XLayerValidium contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.",
          "accounts": [
            {
              "address": "0x242daE44F5d8fb54B198D03a94dA45B5a4413e21",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x4c1665d6651ecEfa59B9B3041951608468b18891",
              "type": "EOA"
            },
            {
              "address": "0xA0B02B28920812324f1cC3255bd8840867d3f227",
              "type": "EOA"
            },
            {
              "address": "0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "LocalAdmin",
          "accounts": [
            {
              "address": "0x491619874b866c3cDB7C8553877da223525ead01",
              "type": "EOA"
            }
          ],
          "description": "Admin of the XLayerValidium contract, can set core system parameters like timeouts, sequencer, activate forced transactions and update the DA mode."
        },
        {
          "name": "DACProxyAdminOwner",
          "accounts": [
            {
              "address": "0xE4c5BFaddbf21a1F35AE66F180F78822078FBfDE",
              "type": "EOA"
            }
          ],
          "description": "Owner of the XLayerValidiumDAC's ProxyAdmin. Can upgrade the contract."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "XLayerValidiumDAC",
            "address": "0x05652Ec92366F3C2255991a265c499E01Ba58e6a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1e37EA18e9515db29b3E94A00eD31484A3130204"],
              "implementations": ["0xd620Ca1ad5c3888e4521c3374cE4088Cb78079b8"]
            },
            "chain": "ethereum",
            "description": "Validium committee contract that allows the admin to setup the members of the committee and stores the required amount of signatures threshold.",
            "upgradableBy": ["DACProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "XLayerValidium",
            "address": "0x2B0ee28D4D51bC9aDde5E58E295873F61F4a0507",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"],
              "implementations": ["0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"]
            },
            "chain": "ethereum",
            "description": "The main contract of the X Layer. Contains sequenced transaction batch hashes and forced transaction logic.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "XLayerVerifier",
            "address": "0x0775e11309d75aA6b0967917fB0213C5673eDf81",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "An autogenerated contract that verifies ZK proofs in the PolygonRollupManager system."
          },
          {
            "name": "PolygonRollupManager",
            "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]
            },
            "chain": "ethereum",
            "description": "It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the Security Council, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives L2 state roots as well as ZK proofs.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Bridge",
            "address": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]
            },
            "chain": "ethereum",
            "description": "The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer both ERC20 assets and arbitrary messages. To transfer funds a user initiated transaction on both sides is required.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "GlobalExitRootV2",
            "address": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],
              "implementations": ["0x2E38cD55163137483E30580Cb468C2dFf1d85077"]
            },
            "chain": "ethereum",
            "description": "Synchronizes deposit and withdraw merkle trees across L1 and the L2s. The global root from this contract is injected into the L2 contracts.",
            "upgradableBy": ["RollupManagerAdminMultisig"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Timelock",
            "address": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Contract upgrades have to go through a 10d timelock unless the Emergency State is activated. It can also add rollup types that can be used to upgrade verifier contracts of existing systems. It is controlled by the ProxyAdminOwner."
          }
        ],
        "references": [
          {
            "text": "State injections - stateRoot and exitRoot are part of the validity proof input.",
            "href": "https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 10d delay on code upgrades."
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [
        {
          "name": "X Layer Public Launch",
          "link": "https://x.com/XLayerOfficial/status/1780056275898048562",
          "date": "2024-04-16",
          "description": "X Layer is now accessible to everyone.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [],
      "badges": ["DAC", "AggLayer", "PolygonCDK", "EVM"]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "xpla",
      "createdAt": "1716818766",
      "display": {
        "name": "zkXPLA",
        "slug": "xpla",
        "description": "XPLA is a global content powerhouse acting as the hub for digital media. The zkXPLA chain, built on ZKsync's ZK Stack technology, will optimize the deployment of games by publishers and developers and offer a seamless end-to-end gaming environment.",
        "purposes": ["Universal", "Gaming"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://xpla.io"],
          "apps": ["https://vault.xpla.io/"],
          "documentation": ["https://docs.xpla.io"],
          "explorers": ["https://explorer.xpla.io"],
          "repositories": ["https://github.com/xpladev"],
          "socialMedia": ["https://x.com/XPLA_Official"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "xterio",
      "createdAt": "1714996778",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x48Ef83Cf812f291EDB00C2D48440Ee90cD12be1a#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data required to compute fraud proofs is published offchain without onchain attestations",
          "description": "Xterio relies on DA challenges for data availability. If a DA challenger finds that the data behind a tx data commitment is not available, they can submit a challenge which requires locking a bond within 12h. A challenge can be resolved by publishing the preimage data within an additional 12h. In such a case, a portion of the challenger bond is burned, with the exact amount estimated as the cost incurred by the resolver to publish the full data, meaning that the resolver and challenger will approximately lose the same amount of funds. The system is not secure if the malicious sequencer is able to outspend the altruistic challengers. If instead, after a challenge, the preimage data is not published, the chain reorgs to the last fully derivable state.",
          "references": [
            {
              "text": "OP Plasma design docs",
              "href": "https://github.com/ethereum-optimism/design-docs/blob/main/protocol/plasma-mode.md"
            },
            {
              "text": "Universal Plasma and DA Challenges - Ethresear.ch",
              "href": "https://ethresear.ch/t/universal-plasma-and-da-challenges/18629"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xfF00000000000000000000000000000000293b30"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xb6a5DCc244EfAbE3194cf5e5590a463f44eD5784#code"
            }
          ],
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the sequencer is malicious and is able to economically outspend the altruistic challengers."
            },
            {
              "category": "Funds can be stolen if",
              "text": "there is no challenger willing to challenge unavailable data commitments."
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x48Ef83Cf812f291EDB00C2D48440Ee90cD12be1a#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x48Ef83Cf812f291EDB00C2D48440Ee90cD12be1a#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xb6a5DCc244EfAbE3194cf5e5590a463f44eD5784#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xb6a5DCc244EfAbE3194cf5e5590a463f44eD5784#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xb6a5DCc244EfAbE3194cf5e5590a463f44eD5784#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x48Ef83Cf812f291EDB00C2D48440Ee90cD12be1a#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "ProxyAdmin",
          "accounts": [
            {
              "address": "0x9e48d6bBca781c23392Ec459BfB3657C40a794A8",
              "type": "Contract"
            }
          ],
          "description": "Owner of AddressManager. Admin of OptimismPortal, SystemConfig, L2OutputOracle, L1ERC721Bridge, OptimismMintableERC20Factory, L1StandardBridge.",
          "chain": "ethereum"
        },
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x7d6251D49A102a330CfB46d132982781620700Cb",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to commit L2 transactions to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Proposer",
          "accounts": [
            {
              "address": "0x7d2f9b38866141Bf090DD670A826F27eA2408Ad4",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to post new L2 state roots to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Challenger",
          "accounts": [
            {
              "address": "0xfA8d42bDE52C2B8B05fE5EeCbAdEa6CB698A0Bc5",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to delete L2 state roots proposed by a Proposer.",
          "chain": "ethereum"
        },
        {
          "name": "Guardian",
          "accounts": [
            {
              "address": "0xdF3700a9Cf9c7506Ca3B41E6ba991476677A8787",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to pause deposits and withdrawals.",
          "chain": "ethereum"
        },
        {
          "name": "RollupOwnerMultisig",
          "description": "This is a Gnosis Safe with 3 / 4 threshold.  Owner of the ProxyAdmin and the rollup system. It can upgrade the bridge implementation potentially gaining access to all funds, and change any system component.",
          "accounts": [
            {
              "address": "0xfF75Bd7672b79f2562fAf98D488bbb3Db1cD1574",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xaC79765A73eB9dcBd3c427181E6819902AE25b48",
              "type": "EOA"
            },
            {
              "address": "0xB5b01E638CEF6AE50462A487d70005D6fe85eCf2",
              "type": "EOA"
            },
            {
              "address": "0xa8AC7D03BEb92Fa3E6030AEB21629D00Ffb66dD7",
              "type": "EOA"
            },
            {
              "address": "0x8B6341E18B2DC644cA94eD85173691873626fc7F",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "DataAvailabilityChallenge owner",
          "accounts": [
            {
              "address": "0xCf06c459AE59d4f47469BcE535afC3485Ce89dBf",
              "type": "EOA"
            }
          ],
          "description": "Owner of the DataAvailabilityChallenge contract. It can upgrade the contract params, potentially making the system insecure."
        },
        {
          "name": "SystemConfig owner",
          "description": "Account privileged to change System Config parameters such as Sequencer Address and gas limit.",
          "accounts": [
            {
              "address": "0xCf06c459AE59d4f47469BcE535afC3485Ce89dBf",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x5A0492D20D984eE904E46E6Ff24572bc755abb28",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
              "implementations": ["0x48Ef83Cf812f291EDB00C2D48440Ee90cD12be1a"]
            },
            "chain": "ethereum",
            "description": "The L2OutputOracle contract contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0xBC2bEDA4ce7A1f40aa458322A33B44081b2F545A",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
              "implementations": ["0xb6a5DCc244EfAbE3194cf5e5590a463f44eD5784"]
            },
            "chain": "ethereum",
            "description": "The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x6E99cdE188DAAFeEcb6eD8AC28B98dE4c8eE5D6C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
              "implementations": ["0x42557f7920a257C7be82C2dfafcEd7aC1CCDb43F"]
            },
            "chain": "ethereum",
            "description": "It contains configuration parameters such as the Sequencer address, the L2 gas limit and the unsafe block signer address.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x702dF90E92A6841c9013faE6D724ddFA8F141d5C",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x5eAAeabB78C28EF184Bb0cF9B0af6D2DA232679a"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "The L1CrossDomainMessenger (L1xDM) contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x2AD84AbD52050956AcC9c490D024b821A59e3FB6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
              "implementations": ["0xC2AbCf1dDADA750936a168334fD14D66fCa931e0"]
            },
            "chain": "ethereum",
            "description": "The L1StandardBridge contract is the main entry point to deposit ERC20 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x28d56C3BBbe4807c19Cc81E6D5207Fb681C3726b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
              "implementations": ["0x53699fbA16599c1425D2637B839bA59c121a2e6a"]
            },
            "chain": "ethereum",
            "description": "The L1ERC721Bridge contract is used to bridge ERC-721 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "DataAvailabilityChallenge",
            "address": "0x16193e14197c10109F3e81b938153A04A2a00190",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
              "implementations": ["0x36b9F31874b8790d4caf341168A95FE165bA3C91"]
            },
            "chain": "ethereum",
            "description": "The DataAvailabilityChallenge contract is used to challenge the data availability of tx data hashes. See the technology section for more details."
          },
          {
            "name": "SuperchainConfig",
            "address": "0xcbF423525a5471Fc5037a5397F99f6F09fe41379",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
              "implementations": ["0x17bcBF2A2CF8156cf4603f8aFAAB27Ec4e998888"]
            },
            "chain": "ethereum",
            "description": "Upgradable contract that manages the PAUSED_SLOT, a boolean value indicating whether the Superchain is paused, and GUARDIAN_SLOT, the address of the guardian which can pause and unpause the system. The address of the guardian can only be modified by the ProxyAdmin by upgrading the SuperchainConfig contract. This contract is a fork of Optimism's superchainConfig contract and is unrelated to the one used by the OP stack Superchain."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["CustomDA", "AltLayer", "OPStack", "EVM"],
      "discoveryDrivenData": null,
      "display": {
        "purposes": ["Universal", "Gaming"],
        "architectureImage": "bedrock-superchain",
        "name": "Xterio Chain",
        "slug": "xterio",
        "description": "Xterio Chain is an OP stack Optimium on Ethereum. The chain focuses on gaming, high performance and low fees .",
        "links": {
          "websites": ["https://xter.io/"],
          "apps": ["https://xter.io/", "https://eth-bridge.xter.io/"],
          "documentation": ["https://stack.optimism.io/"],
          "explorers": ["https://eth.xterscan.io/"],
          "repositories": ["https://github.com/XterioTech"],
          "socialMedia": [
            "https://x.com/XterioGames",
            "https://discord.gg/xterio",
            "https://medium.com/@XterioGames"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": null,
        "liveness": null,
        "finality": null
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xBC2bEDA4ce7A1f40aa458322A33B44081b2F545A",
            "newVersion": true,
            "sinceTimestamp": "1716540359",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xBC2bEDA4ce7A1f40aa458322A33B44081b2F545A",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
                "implementations": [
                  "0xb6a5DCc244EfAbE3194cf5e5590a463f44eD5784"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x2AD84AbD52050956AcC9c490D024b821A59e3FB6",
            "newVersion": true,
            "sinceTimestamp": "1716540383",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2AD84AbD52050956AcC9c490D024b821A59e3FB6",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x9e48d6bBca781c23392Ec459BfB3657C40a794A8"],
                "implementations": [
                  "0xC2AbCf1dDADA750936a168334fD14D66fCa931e0"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://xterio-eth.alt.technology/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": null,
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "XterioDA",
          "sentiment": "warning",
          "description": "The data is posted to XterioDA which is a separate data availability module developed by the Xterio team. Data is posted off chain, and only hashes of data are published on an on chain inbox."
        },
        "bridge": {
          "value": "None + DA challenges",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available. However, there is a mechanism that allows users to challenge unavailability of data."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely on data that is NOT published onchain. Xterio uses a custom data availability provider without attestations, relying though on DA challenges.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "zentachain",
      "createdAt": "1706277671",
      "display": {
        "name": "Zentachain",
        "slug": "zentachain",
        "description": "Zentachain is a privacy-focused IoT blockchain networking project that is focused on communication and data storage. Innovative and useful solutions are provided for issues of security and data ownership.",
        "purposes": ["Universal", "Privacy"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "websites": ["https://zentachain.io/"],
          "apps": ["https://sepolia-bridge.zentachain.io/"],
          "documentation": ["https://docs.zentachain.io/"],
          "explorers": ["https://explorer-sepolia.zentachain.io/"],
          "repositories": ["https://github.com/ZentaChain"],
          "socialMedia": [
            "https://twitter.com/zentachain",
            "https://discord.com/invite/TR5bv3e8Ny",
            "https://zentachain.blog/",
            "https://t.me/ZentachainOfficialChat",
            "https://reddit.com/r/Zentachain/"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "zeronetwork",
      "createdAt": "1721214420",
      "display": {
        "name": "Zero Network",
        "slug": "zeronetwork",
        "description": "Zero Network is an L2 by the Zerion wallet team, utilizing the ZKsync Stack and allowing certain users with Zerion DNA NFTs gasless and prioritized transactions.",
        "purposes": ["Universal"],
        "category": "ZK Rollup",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://zero.network/"],
          "apps": ["https://zerion.io/"],
          "documentation": ["https://docs.zero.network/"],
          "explorers": ["https://explorer.zero.network/"],
          "repositories": [],
          "socialMedia": ["https://x.com/zerodotnetwork"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "zircuit",
      "createdAt": "1712559704",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs (when available) ensure state correctness, but not DA",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. Currently proofs are optional and state (by default) is considered optimistically to be valid. Moreover, the system doesn’t check that the transactions applied to the state are the ones published by the sequencer.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the published state is invalid and the Challenger does not react during the 5h finalization window."
            }
          ],
          "references": [
            {
              "text": "Verifier.sol - Etherscan source code",
              "href": "https://etherscan.io/address/0x13A06FF21E46BCCd4B03E5Cb04372bB7aE7f2168#code#F1#L9"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0xFF00000000000000000000000000000000048900"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xde8B916B972cE3c27C21157Fc2b107c413062b9d#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xaaF7FCc7252eb739E0001D8727800deAE04A84f1#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xaaF7FCc7252eb739E0001D8727800deAE04A84f1#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xde8B916B972cE3c27C21157Fc2b107c413062b9d#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 5h to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xde8B916B972cE3c27C21157Fc2b107c413062b9d#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xde8B916B972cE3c27C21157Fc2b107c413062b9d#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xaaF7FCc7252eb739E0001D8727800deAE04A84f1#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "ProxyAdmin",
          "accounts": [
            {
              "address": "0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257",
              "type": "Contract"
            }
          ],
          "description": "Admin of OptimismPortal, SystemConfig, L2OutputOracle, L1ERC721Bridge, OptimismMintableERC20Factory, L1StandardBridge.",
          "chain": "ethereum"
        },
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0xAF1E4f6a47af647F87C0Ec814d8032C4a4bFF145",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to commit L2 transactions to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Proposer",
          "accounts": [
            {
              "address": "0xE8C20EA8eF100d7aa3846616E5D07A5aBb067C65",
              "type": "EOA"
            }
          ],
          "description": "Central actor allowed to post new L2 state roots to L1.",
          "chain": "ethereum"
        },
        {
          "name": "Challenger",
          "accounts": [
            {
              "address": "0xC463EaC02572CC964D43D2414023E2c6B62bAF38",
              "type": "MultiSig"
            }
          ],
          "description": "Central actor allowed to delete L2 state roots proposed by a Proposer.",
          "chain": "ethereum"
        },
        {
          "name": "Admins of SuperchainConfig",
          "accounts": [
            {
              "address": "0x2c0B27F7C8F083B539557a0bA787041BF22DB276",
              "type": "MultiSig"
            }
          ],
          "description": "Admin of the SuperChainConfig, can configure other roles."
        },
        {
          "name": "Monitors of SuperchainConfig",
          "accounts": [
            {
              "address": "0xf9Fda17D91383120D59a7c60eAEA8Bd7319B5AE5",
              "type": "EOA"
            }
          ],
          "description": "Role set up in SuperChainConfig contract that can lower the withdrawal limit for a user."
        },
        {
          "name": "ZircuitMultiSig",
          "description": "This is a Gnosis Safe with 6 / 8 threshold.  This address is the owner of the following contracts: ProxyAdmin, SystemConfig.       It is also designated as a Challenger and SystemOwner of the L2OutputOracle, meaning it can remove L2 state roots and reconfigure       L2OutputOracle, including changing the Verifier contract.       It can upgrade the bridge implementation potentially gaining access to all funds, and change the sequencer, state root proposer or any other system component (unlimited upgrade power).",
          "accounts": [
            {
              "address": "0xC463EaC02572CC964D43D2414023E2c6B62bAF38",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xD8399320cF3a6C7068DaC0C35ea5e74ddd650BD4",
              "type": "EOA"
            },
            {
              "address": "0xC1Ea584f696ABF39044c18D510067f0Ce2cC8966",
              "type": "EOA"
            },
            {
              "address": "0x63cbB9fA540F6249AE4A3576f48BF07609b3a355",
              "type": "EOA"
            },
            {
              "address": "0x5E2a81d611e973C2ab1A4cAa71DD4E4Cdb2617d4",
              "type": "EOA"
            },
            {
              "address": "0x2F9072d5A8118a60ce41611AEe3e393D107f8Cec",
              "type": "EOA"
            },
            {
              "address": "0x0D5edFC67Ae336eddC91031FD6402EeAD6350CAb",
              "type": "EOA"
            },
            {
              "address": "0x62C688FCa995e07632D64A9586896BB7EcD68567",
              "type": "EOA"
            },
            {
              "address": "0x38809210f69ed6204E276d2Be6b15cd530698679",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ZircuitGuardianMultiSig",
          "description": "This is a Gnosis Safe with 2 / 5 threshold.  This address is the permissioned guardian of the system, meaning it can pause all withdrawals.       It is also an Admin of the ZircuitSuperchainConfig meaning that it can set roles and permissions for the SuperchainConfig contract.",
          "accounts": [
            {
              "address": "0x2c0B27F7C8F083B539557a0bA787041BF22DB276",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x5E2a81d611e973C2ab1A4cAa71DD4E4Cdb2617d4",
              "type": "EOA"
            },
            {
              "address": "0x63cbB9fA540F6249AE4A3576f48BF07609b3a355",
              "type": "EOA"
            },
            {
              "address": "0x62C688FCa995e07632D64A9586896BB7EcD68567",
              "type": "EOA"
            },
            {
              "address": "0x0D5edFC67Ae336eddC91031FD6402EeAD6350CAb",
              "type": "EOA"
            },
            {
              "address": "0x38809210f69ed6204E276d2Be6b15cd530698679",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x92Ef6Af472b39F1b363da45E35530c24619245A4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
              "implementations": ["0xaaF7FCc7252eb739E0001D8727800deAE04A84f1"]
            },
            "chain": "ethereum",
            "description": "The L2OutputOracle contract contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x17bfAfA932d2e23Bd9B909Fd5B4D2e2a27043fb1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
              "implementations": ["0xde8B916B972cE3c27C21157Fc2b107c413062b9d"]
            },
            "chain": "ethereum",
            "description": "The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0x30F82a1Ca89226E8b8815d6EbB728e3b18a428ff",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
              "implementations": ["0xA03E2f3Ee6dBa20411A2326D7FA9CCCc6a9A53de"]
            },
            "chain": "ethereum",
            "description": "It contains configuration parameters such as the Sequencer address, the L2 gas limit and the unsafe block signer address.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x2a721cBE81a128be0F01040e3353c3805A5EA091",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
              "implementations": ["0x6c01D349d3010Cc2953fFA0A5e8d176fc273B834"]
            },
            "chain": "ethereum",
            "description": "The L1CrossDomainMessenger (L1xDM) contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x386B76D9cA5F5Fb150B6BFB35CF5379B22B26dd8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
              "implementations": ["0xA4ba8bd753695B6121722CBB7cd81c71BCFBCA28"]
            },
            "chain": "ethereum",
            "description": "The L1StandardBridge contract is the main entry point to deposit ERC20 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x994eEb321F9cD79B077a5455fC248c77f30Dd244",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
              "implementations": ["0x3B21dC86c412aC34fF4c679497b274509D73cDcC"]
            },
            "chain": "ethereum",
            "description": "The L1ERC721Bridge contract is used to bridge ERC-721 tokens from L1 to L2.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "Verifier",
            "address": "0x6BCe7408c0781dcE7b71494274302D4b75a1447c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
              "implementations": ["0x13A06FF21E46BCCd4B03E5Cb04372bB7aE7f2168"]
            },
            "chain": "ethereum",
            "description": "This contract verifies zk proof (if provided). There is a temporary backdoor allowing to call this contract without the proof.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ZircuitSuperchainConfig",
            "address": "0x745393Cc03b5fE668ECd52c0E625f59aAD6D3Da0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
              "implementations": ["0xA47314C96ab9572af656788e15143B459F99AE0f"]
            },
            "chain": "ethereum",
            "description": "The SuperchainConfig contract is normally used to manage configuration values for multiple OP Chains,         however this is a separate instance of the SuperChain contract. It manages the PAUSED_SLOT, a boolean value         indicating whether the chain is paused, and GUARDIAN_SLOT, the address of the guardian which can pause and unpause the system. It also defines OPERATOR and MONITOR roles        which are used to manage throttling (withdrawal limits) on OptimismPortal.",
            "upgradableBy": ["ProxyAdmin"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Zircuit Mainnet Launch",
          "link": "https://www.zircuit.com/blog/mainnet-phase-1-is-live",
          "date": "2024-08-05T00:00:00.00Z",
          "description": "Zircuit is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": null,
      "display": {
        "purposes": ["Universal"],
        "architectureImage": "zircuit",
        "name": "Zircuit",
        "slug": "zircuit",
        "description": "Zircuit is a universal Rollup that aims to use zk proofs in the future. It is based on the Optimism Bedrock architecture, employing AI to identify and stop malicious transactions at the sequencer level.",
        "links": {
          "websites": ["https://zircuit.com/"],
          "apps": ["https://bridge.zircuit.com/"],
          "documentation": ["https://docs.zircuit.com/"],
          "explorers": ["https://explorer.zircuit.com/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/ZircuitL2",
            "https://discord.com/invite/zircuit",
            "https://zircuit.com/blog"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Proof system is currently under development. Users need to trust the block proposer to submit correct L1 state roots.",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Zircuit is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 5h after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 18000
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x17bfAfA932d2e23Bd9B909Fd5B4D2e2a27043fb1",
            "newVersion": true,
            "sinceTimestamp": "1719936491",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x17bfAfA932d2e23Bd9B909Fd5B4D2e2a27043fb1",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
                "implementations": [
                  "0xde8B916B972cE3c27C21157Fc2b107c413062b9d"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x386B76D9cA5F5Fb150B6BFB35CF5379B22B26dd8",
            "newVersion": true,
            "sinceTimestamp": "1719936539",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x386B76D9cA5F5Fb150B6BFB35CF5379B22B26dd8",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x5B1Ef673d9c316b3eE9Ed3B4E3cC84952bfC5257"],
                "implementations": [
                  "0xA4ba8bd753695B6121722CBB7cd81c71BCFBCA28"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://zircuit1-mainnet.p2pify.com/",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0xAF1E4f6a47af647F87C0Ec814d8032C4a4bFF145",
              "to": "0xFF00000000000000000000000000000000048900",
              "sinceTimestamp": "1719936217"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x92Ef6Af472b39F1b363da45E35530c24619245A4",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1719936515"
            }
          }
        ],
        "finality": null
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "5h challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -18000,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "stateDerivation": null,
      "upgradesAndGovernance": null
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "zkcandy",
      "createdAt": "1706088230",
      "display": {
        "name": "zkCandy",
        "slug": "zkcandy",
        "description": "zkCandy is an L2 Gaming Hyperchain built on ZKsync's ZK stack for the next generation of GameFi - Supercharged by iCandy, the largest game developer in ANZ and SEA.",
        "purposes": ["Universal", "Gaming"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://zkcandy.io", "https://icandy.io/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/zkCandyHQ",
            "https://discord.gg/zkcandy",
            "https://t.me/zkcandy"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "zkfair",
      "createdAt": "1690815262",
      "badges": ["EVM", "DAC", "PolygonCDK"],
      "display": {
        "name": "ZKFair",
        "slug": "zkfair",
        "purposes": ["Universal"],
        "warning": "The forced transaction mechanism is currently disabled. The project claims to use CelestiaDA but smart contracts on L1 use DAC. Arbitrary messaging passing is removed from the bridge.",
        "description": "ZKFair is a Validium based on Polygon CDK and Celestia DA.",
        "category": "Validium",
        "provider": "Polygon",
        "links": {
          "websites": ["https://zkfair.io/"],
          "apps": ["https://wallet.zkfair.io/"],
          "documentation": ["https://docs.zkfair.io/"],
          "explorers": ["https://scan.zkfair.io/"],
          "repositories": ["https://github.com/ZKFair"],
          "socialMedia": ["https://twitter.com/ZKFCommunity"]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "config": {
        "escrows": [
          {
            "address": "0x9cb4706e20A18E59a48ffa7616d700A3891e1861",
            "newVersion": true,
            "sinceTimestamp": "1702879283",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x9cb4706e20A18E59a48ffa7616d700A3891e1861",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],
                "implementations": [
                  "0xEb80283EBc508CF6AaC5E054118954a2BD7fA006"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "associatedTokens": ["ZKF"],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.zkfair.io",
          "defaultCallsPerMinute": 1500,
          "startBlock": 1
        }
      },
      "chainConfig": {
        "name": "zkfair",
        "chainId": 42766,
        "explorerUrl": "https://scan.zkfair.io/",
        "explorerApi": {
          "url": "https://scan.zkfair.io/api/",
          "type": "blockscout"
        },
        "minTimestampForTvl": "1703016000",
        "multicallContracts": [
          {
            "sinceBlock": 6330383,
            "batchSize": 150,
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "version": "3"
          }
        ],
        "coingeckoPlatform": "zkfair"
      },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "3/5 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 3/5 members that must sign and attest that the data is correct and available."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ZKFairValidium",
              "references": [
                "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L820"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 3/5 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.6,
          "sources": [
            {
              "contract": "ZKFairValidium",
              "references": [
                "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L587"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -1209600,
          "warning": {
            "value": "The ZkFair Owner can upgrade with no delay.",
            "sentiment": "bad"
          }
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.",
          "sentiment": "bad",
          "sources": [
            {
              "contract": "ZKFairValidium",
              "references": [
                "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L247"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.",
          "sentiment": "good",
          "sources": [
            {
              "contract": "ZKFairValidium",
              "references": [
                "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L639",
                "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L862"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "ZKFairValidium.sol#L758 - Etherscan source code, _verifyAndRewardBatches function",
              "href": "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L758"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "ZKFairValidium.sol#L494 - Etherscan source code, sequencedBatches mapping",
              "href": "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L494"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be frozen if",
              "text": "the sequencer refuses to include an exit transaction.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "ZKFairValidium.sol#L61 - Etherscan source code, onlyTrustedSequencer modifier",
              "href": "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L461"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can't force any transaction",
          "description": "The mechanism for allowing users to submit their own transactions is currently disabled.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": [
            {
              "text": "ZKFairValidium.sol#L475 - Etherscan source code, isForceBatchAllowed modifier",
              "href": "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L475"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "PolygonZkEvmBridge.sol#L311 - Etherscan source code, claimAsset function",
                "href": "https://etherscan.io/address/0xEb80283EBc508CF6AaC5E054118954a2BD7fA006#code#F19#L315"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "ZKFairAdmin",
          "description": "This is a Gnosis Safe with 3 / 4 threshold.  Admin of the ZKFairValidium, can set core system parameters like timeouts, sequencer and aggregator as well as deactivate emergency state. They can also upgrade the ZKFairValidium contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.",
          "accounts": [
            {
              "address": "0xcd14BE1959928BB8c160D11817E2BE2129e2F25F",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x4Ea1f0f05E7484Ee85a97303DC88c2dF4288df3e",
              "type": "EOA"
            },
            {
              "address": "0x44fb52EB2bdDAf1c8b6D441e0b5DCa123A345292",
              "type": "EOA"
            },
            {
              "address": "0x689752C198f0cEbe9993ee3E13AF0e565C068c25",
              "type": "EOA"
            },
            {
              "address": "0xa57c2B747193fe3F9CC8bea89103B7d76B8A0c70",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Sequencer",
          "accounts": [
            {
              "address": "0x9eed06d1566F0cAfdA3df624E2376864cA84Db6c",
              "type": "EOA"
            }
          ],
          "description": "Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."
        },
        {
          "name": "Proposer",
          "accounts": [
            {
              "address": "0xd6888c41EeAcc94f4A1CEe7A99E1557aa41FA027",
              "type": "EOA"
            }
          ],
          "description": "The trusted proposer (called Aggregator) provides the ZKFairValidium contract with ZK proofs of the new system state. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."
        },
        {
          "name": "ZKFairOwner",
          "description": "This is a Gnosis Safe with 3 / 4 threshold.  The ZkFair Owner is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.",
          "accounts": [
            {
              "address": "0x8933Fa0A97f39cd38f56b1887d5cc56cF04F3A88",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x9fAe81C21be8D1Ad91c3617A7b0140dfe0DCe6C7",
              "type": "EOA"
            },
            {
              "address": "0x540C913ad8b197152EB041bC56f9c6Ab314D25Ba",
              "type": "EOA"
            },
            {
              "address": "0xcf6226d0264496abB69eF8BC1DF366c9E00f5b87",
              "type": "EOA"
            },
            {
              "address": "0x4B7f09f4D658638d81Bb2023674B80a9Dd7e9976",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "BridgeAdminMultiSig",
          "description": "This is a Gnosis Safe with 3 / 4 threshold.  The Bridge Admin is a multisig that can be used to set bridge fees and an address into which fees are transferred.",
          "accounts": [
            {
              "address": "0x0110B1B231aA3b96a94c900eb3056297526AB725",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x39FcAEb9870cB015f2165e93c51f4663AE970953",
              "type": "EOA"
            },
            {
              "address": "0x3226ECf79dc7007063599A334832d015B48aBDBc",
              "type": "EOA"
            },
            {
              "address": "0x4dba6F06597Ea29A330C06806FA284610c810295",
              "type": "EOA"
            },
            {
              "address": "0xe1229a2716D19eC9aF74017418Fc9E165b80c7aF",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "DAC members",
          "accounts": [
            {
              "address": "0x033A75B6B0fc26eDf60e99c4172eB5f87E733ca2",
              "type": "EOA"
            },
            {
              "address": "0x061D273bEf947BD0ef2B828526e710eEa0f297ae",
              "type": "EOA"
            },
            {
              "address": "0x9231622437bD57349cC9a15CDEc5383627DEbA17",
              "type": "EOA"
            },
            {
              "address": "0x9d8616545C9941138832EebC58Cb498E0ef21a13",
              "type": "EOA"
            },
            {
              "address": "0xFe1da7CAd939805d4A889822357c348177a5118d",
              "type": "EOA"
            }
          ],
          "description": "Members of the Data Availability Committee. The setup is equivalent to a 3/5 multisig."
        },
        {
          "name": "DAC Owner",
          "accounts": [
            {
              "address": "0xa57c2B747193fe3F9CC8bea89103B7d76B8A0c70",
              "type": "EOA"
            }
          ],
          "description": "The owner of the Data Availability Committee, can update the member set at any time."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "ZKFairValidium",
            "address": "0x1CbC08bf0D48b18F9f97796c61352b192d1850A5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],
              "implementations": ["0x668965757127549f8755D2eEd10494B06420213b"]
            },
            "chain": "ethereum",
            "description": "The main contract of the Polygon CDK Validium. It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the ZkFair Owner, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives transaction roots, L2 state roots as well as ZK proofs. It also holds the address of ZKFairValidiumDAC.",
            "upgradableBy": ["ZKFairAdmin"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "Bridge",
            "address": "0x9cb4706e20A18E59a48ffa7616d700A3891e1861",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],
              "implementations": ["0xEb80283EBc508CF6AaC5E054118954a2BD7fA006"]
            },
            "chain": "ethereum",
            "description": "The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer ERC20 assets. To transfer funds a user initiated transaction on both sides is required.",
            "upgradableBy": ["ZKFairAdmin"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "GlobalExitRoot",
            "address": "0x72abD6416Ea2d99ad30C86B90e7409Dc2d1ba40b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],
              "implementations": ["0xC4CD3D0b31904969a397A98AcE8bDF2A94ba8615"]
            },
            "chain": "ethereum",
            "description": "Synchronizes deposit and withdraw merkle trees across L1 and L2. The global root from this contract is injected into the L2 contract.",
            "upgradableBy": ["ZKFairAdmin"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          },
          {
            "name": "FflonkVerifier",
            "address": "0x769E285d2120472c3400A09684B82A842012F46d",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "An autogenerated contract that verifies ZK proofs in the ZKFairValidium system."
          },
          {
            "name": "ZKFairValidiumDAC",
            "address": "0x997CfB0838544f68E59f877EDc905001456F125b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xb57b9101dEc7dC1635B576fFf71F2f522C970EF3"],
              "implementations": ["0x63150fA72c1c9fF8Fe4438f8355927D3415b0FDc"]
            },
            "chain": "ethereum",
            "description": "Committee attesting that data for a given dataRoot has been published. The DAC Owner can update the member set at any time.",
            "upgradableBy": ["ZKFairAdmin"],
            "upgradeDelay": "None",
            "upgradeConsiderations": "Even though there is a 1d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."
          }
        ],
        "references": [
          {
            "text": "State injections - stateRoot and exitRoot are part of the validity proof input.",
            "href": "https://etherscan.io/address/0x668965757127549f8755D2eEd10494B06420213b#code#F8#L809"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 1d delay on code upgrades."
          }
        ]
      },
      "milestones": [
        {
          "name": "ZKFair Mainnet is Live",
          "link": "https://twitter.com/ZKFCommunity/status/1737307444181869017",
          "date": "2023-12-20T00:00:00Z",
          "description": "ZKFair launched.",
          "type": "general"
        }
      ]
    },
    {
      "isUpcoming": true,
      "type": "layer2",
      "id": "zklighter",
      "createdAt": "1711551933",
      "display": {
        "name": "zkLighter",
        "slug": "zklighter",
        "description": "zkLighter is an efficient order book Validium on Ethereum - low cost, low latency, verifiable matching.",
        "purposes": ["Universal", "Exchange"],
        "category": "Validium",
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://zk.lighter.xyz"],
          "apps": [],
          "documentation": ["https://zk.lighter.xyz/developers"],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://twitter.com/lighter_xyz"]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer2",
      "id": "zkspace",
      "createdAt": "1629199654",
      "badges": ["AppChain", "EthereumCalldata", "ZKsyncLiteFork"],
      "display": {
        "name": "ZKSpace",
        "slug": "zkspace",
        "description": "ZKSpace consists of three main parts: an AMM DEX utilizing ZK Rollups technology ZKSwap v3, a payment service called ZKSquare, and an NFT marketplace called ZKSea.",
        "purposes": ["NFT", "Exchange", "Payments"],
        "provider": "ZKsync Lite",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://zks.org/"],
          "apps": ["https://zks.app"],
          "documentation": ["https://en.wiki.zks.org/"],
          "explorers": ["https://zkspace.info"],
          "repositories": ["https://github.com/l2labs/zkswap-contracts"],
          "socialMedia": [
            "https://medium.com/@zkspaceofficial",
            "https://twitter.com/ZKSpaceOfficial",
            "https://discord.gg/UbjmQfUVvf",
            "https://t.me/ZKSpaceOfficial",
            "https://reddit.com/r/ZKSwap_Official/"
          ]
        },
        "liveness": {
          "explanation": "ZK Space is a ZK rollup based on ZKsync Lite’s code base that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. "
        },
        "finality": { "finalizationPeriod": 0 }
      },
      "config": {
        "associatedTokens": ["ZKS"],
        "escrows": [
          {
            "address": "0x5CDAF83E077DBaC2692b5864CA18b61d67453Be8",
            "newVersion": true,
            "sinceTimestamp": "1639569183",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x5CDAF83E077DBaC2692b5864CA18b61d67453Be8",
              "upgradeability": {
                "proxyType": "zkSpace proxy",
                "admins": ["0xB0C7E781f70C0B8E3e62F1766a4Be6e435431390"],
                "implementations": [
                  "0x467a2B91f231D930F5eeB6B982C7666E81DA8626",
                  "0x899A605a3B7A11eA5D928958b77014e763c53426",
                  "0x49dCe53faeAD4538F77c3b8Bae8347f1644101Db",
                  "0x6A4E7dd4c546Ca2DD84b48803040732fC30206D7"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x5CDAF83E077DBaC2692b5864CA18b61d67453Be8",
              "selector": "0x6898e6fc",
              "functionSignature": "function verifyBlocks(uint32 _blockNumberFrom, uint32 _blockNumberTo, uint256[] _recursiveInput, uint256[] _proof, uint256[] _subProofLimbs)",
              "sinceTimestamp": "1639569183"
            }
          }
        ],
        "liveness": {
          "duplicateData": { "from": "stateUpdates", "to": "proofSubmissions" }
        },
        "finality": "coming soon"
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "Verifier",
              "references": [
                "https://etherscan.io/address/0x44DedA2C824458A5DfE1e363c679dea33f1ffA39#code#F1#L26"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ZkSync",
              "references": [
                "https://etherscan.io/address/0x49dCe53faeAD4538F77c3b8Bae8347f1644101Db#code#F1#L79"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "5d",
          "description": "Users have 5d to exit funds in case of an unwanted regular upgrade. There is a 8d delay before a regular upgrade is applied, and withdrawals can take up to 3d to be processed.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 432000,
          "sources": [
            {
              "contract": "ZkSync",
              "references": [
                "https://etherscan.io/address/0x467a2B91f231D930F5eeB6B982C7666E81DA8626#code#F8#L115"
              ]
            }
          ]
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 3d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 259200,
          "sources": [
            {
              "contract": "ZkSync",
              "references": [
                "https://etherscan.io/address/0x467a2B91f231D930F5eeB6B982C7666E81DA8626#code#F1#L511",
                "https://etherscan.io/address/0x49dCe53faeAD4538F77c3b8Bae8347f1644101Db#code#F1#L219"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a zero knowledge proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ZkSync",
              "references": [
                "https://etherscan.io/address/0x49dCe53faeAD4538F77c3b8Bae8347f1644101Db#code#F1#L219",
                "https://etherscan.io/address/0x6A4E7dd4c546Ca2DD84b48803040732fC30206D7#code#F1#L26"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": false,
                "description": "No source-available node exists that can recreate the state from L1 data."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "warning",
          "text": "There is no available node software that can reconstruct the state from L1 data, hence there is no way to verify that this system is a rollup."
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "ZKSwap Introduces Practical ZK Rollups - Medium blog",
              "href": "https://medium.com/zkswap/zkswap-introduces-practical-zk-rollups-zkspeed-achieving-high-tps-and-low-gas-fees-in-real-6effe4e789e0"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "ZKSpace Whitepaper",
              "href": "https://github.com/l2labs/zkspace-whitepaper"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "ZKSwap Introduces Practical ZK Rollups - Medium blog",
              "href": "https://medium.com/zkswap/zkswap-introduces-practical-zk-rollups-zkspeed-achieving-high-tps-and-low-gas-fees-in-real-6effe4e789e0"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "ZKSwap Validator - ZKSwap wiki",
              "href": "https://en.wiki.zks.org/techonology#3-validator"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "ZkSync.sol#L404 - ZKSwap source code",
              "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/master/contracts/ZkSync.sol#L404"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Make Transaction",
                "href": "https://en.wiki.zks.org/interact-with-zkswap/make-transaction#withdraw"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "ZkSync.sol#L404 - ZKSwap source code",
                "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/master/contracts/ZkSync.sol#L404"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into Exodus Mode, disallowing further state updates. In that case everybody can withdraw by submitting a zero knowledge proof of their funds with their L1 transaction.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the user is unable to generate the non-trivial ZK proof for exodus withdraw."
              }
            ],
            "references": [
              {
                "text": "ZkSyncCommitBlock.sol#L230-L246 - ZKSwap source code",
                "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/3f650d28a266a56d49a3b3d2049cde34112efb14/contracts/ZkSyncCommitBlock.sol#L230-L246"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "ZkSync",
            "address": "0x5CDAF83E077DBaC2692b5864CA18b61d67453Be8",
            "upgradeability": {
              "proxyType": "zkSpace proxy",
              "admins": ["0xB0C7E781f70C0B8E3e62F1766a4Be6e435431390"],
              "implementations": [
                "0x467a2B91f231D930F5eeB6B982C7666E81DA8626",
                "0x899A605a3B7A11eA5D928958b77014e763c53426",
                "0x49dCe53faeAD4538F77c3b8Bae8347f1644101Db",
                "0x6A4E7dd4c546Ca2DD84b48803040732fC30206D7"
              ]
            },
            "chain": "ethereum",
            "description": "The main Rollup contract. Operator commits blocks, provides ZK proof which is validated by the Verifier contract and process withdrawals (executes blocks). Users deposit ETH and ERC20 tokens. This contract defines the upgrade delay in the UPGRADE_NOTICE_PERIOD constant that is currently set to 8 days.",
            "upgradableBy": ["zkSpace Admin"],
            "upgradeDelayString": "8d"
          },
          {
            "name": "Governance",
            "address": "0x83Cb1531Ec8447366501aE440478da245EcffB89",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB0C7E781f70C0B8E3e62F1766a4Be6e435431390"],
              "implementations": ["0x6659174CdB0c445B897aEd25181f293E468941a5"]
            },
            "chain": "ethereum",
            "description": "Keeps a list of block producers and whitelisted tokens.",
            "upgradableBy": ["zkSpace Admin"],
            "upgradeDelayString": "8d"
          },
          {
            "name": "UniswapV2Factory",
            "address": "0xc07f850b60E0EEd49a09E455b01a869C25963735",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB0C7E781f70C0B8E3e62F1766a4Be6e435431390"],
              "implementations": ["0x5f3bE7846efC473552C5619b929F7d4aa640fb54"]
            },
            "chain": "ethereum",
            "description": "Manages trading pairs.",
            "upgradableBy": ["zkSpace Admin"],
            "upgradeDelayString": "8d"
          },
          {
            "name": "ZkSeaNFT",
            "address": "0xc632347cc96A4400653E3514eA148630455295b5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB0C7E781f70C0B8E3e62F1766a4Be6e435431390"],
              "implementations": ["0xD06986022EFE62A5BC8258299e4495Bb27567BE0"]
            },
            "chain": "ethereum",
            "description": "Contract managing deposits and withdrawals of NFTs to Layer2.",
            "upgradableBy": ["zkSpace Admin"],
            "upgradeDelayString": "8d"
          },
          {
            "name": "Verifier",
            "address": "0xB7A4f3eFBe8e2B2FC973FfDb1b1D7F19F012A7af",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB0C7E781f70C0B8E3e62F1766a4Be6e435431390"],
              "implementations": ["0x44DedA2C824458A5DfE1e363c679dea33f1ffA39"]
            },
            "chain": "ethereum",
            "description": "zkSNARK Plonk Verifier.",
            "upgradableBy": ["zkSpace Admin"],
            "upgradeDelayString": "8d"
          },
          {
            "name": "VerifierExit",
            "address": "0x1d8d584F1aef51ad5E2f436F057E43e0d788Be81",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xB0C7E781f70C0B8E3e62F1766a4Be6e435431390"],
              "implementations": ["0x41455808B3109AD0f79672C44D75933D3529FEaE"]
            },
            "chain": "ethereum",
            "description": "zkSNARK Verifier for the escape hatch.",
            "upgradableBy": ["zkSpace Admin"],
            "upgradeDelayString": "8d"
          },
          {
            "name": "UpgradeGatekeeper",
            "address": "0xB0C7E781f70C0B8E3e62F1766a4Be6e435431390",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "This is the contract that implements the upgrade mechanism for Governance, Verifier and ZkSync. It relies on the ZkSync contract to enforce upgrade delays."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 8d delay on code upgrades."
          }
        ]
      },
      "permissions": [
        {
          "name": "zkSpace Admin",
          "accounts": [
            {
              "address": "0xfCAE399eA757DDf0a4020198C59BF2270c2B05Be",
              "type": "EOA"
            }
          ],
          "description": "This address is the master of Upgrade Gatekeeper contract, which is allowed to perform upgrades for Governance, Verifier, VerifierExit, PairManager, ZkSeaNFT and ZkSync contracts."
        },
        {
          "name": "Active validator",
          "accounts": [
            {
              "address": "0x5bd9404260D2B0D55081E599e4e085BE080141E2",
              "type": "EOA"
            }
          ],
          "description": "This actor is allowed to propose, revert and execute L2 blocks on L1. A list of active validators is kept inside Governance contract and can be updated by zkSpace Admin."
        }
      ],
      "milestones": [
        {
          "name": "ZKSpace launched",
          "link": "https://medium.com/zkswap/l2-labs-launches-all-in-one-layer2-platform-zkspace-featuring-zkswap-v3-0-nfts-payments-82dae7d9207c",
          "date": "2021-12-20T00:00:00Z",
          "description": "All-in-One Layer2 Platform ZKSpace, Featuring ZKSwap v3.0, NFTs, & Payments is launched.",
          "type": "general"
        },
        {
          "name": "Token Deposit Campaign started",
          "link": "https://medium.com/@zkspaceofficial/zkspace-releases-token-deposit-campaign-with-fascinating-zks-rewards-151e2492549e",
          "date": "2022-02-21T00:00:00Z",
          "description": "Incentives program to onboard new users has started.",
          "type": "general"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "zkswap",
      "createdAt": "1623153328",
      "isArchived": true,
      "display": {
        "name": "ZKSwap 1.0",
        "slug": "zkswap",
        "warning": "Version 3 of the protocol called ZkSpace is available and users are encouraged to move their assets there.",
        "description": "ZKSwap is a fork of ZKsync with added AMM functionality. Based on ZK Rollup technology, ZKSwap aims to execute the full functionality of Uniswap on Layer 2, but increase the TPS, and make transaction processing cheaper.",
        "purposes": ["Payments", "Exchange"],
        "provider": "ZKsync Lite",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://zks.org/"],
          "apps": ["https://zks.app"],
          "documentation": ["https://en.wiki.zks.org/"],
          "explorers": ["https://zkswap.info"],
          "repositories": ["https://github.com/l2labs/zkswap-contracts"],
          "socialMedia": [
            "https://medium.com/@zkswapofficial",
            "https://twitter.com/ZKSwapOfficial",
            "https://discord.gg/rpjpeq4Y47",
            "https://t.me/zkswapofficial",
            "https://reddit.com/r/ZKSwap_Official/"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": ["ZKS"],
        "escrows": [
          {
            "address": "0x8ECa806Aecc86CE90Da803b080Ca4E3A9b8097ad",
            "sinceTimestamp": "1613135194",
            "tokens": "*",
            "chain": "ethereum"
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "Unknown",
          "description": "Some contracts are not verified, so there is no way to assess the exit window.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for , users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": null
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a zero knowledge proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "ZKSwap Introduces Practical ZK Rollups - Medium blog",
              "href": "https://medium.com/zkswap/zkswap-introduces-practical-zk-rollups-zkspeed-achieving-high-tps-and-low-gas-fees-in-real-6effe4e789e0"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "ZKSwap Whitepaper - Medium blog",
              "href": "https://medium.com/zkswap/zkswap-whitepaper-a-layer-2-token-swap-protocol-based-on-zk-rollup-113671ef3e6d"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "ZKSwap Introduces Practical ZK Rollups - Medium blog",
              "href": "https://medium.com/zkswap/zkswap-introduces-practical-zk-rollups-zkspeed-achieving-high-tps-and-low-gas-fees-in-real-6effe4e789e0"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "ZKSwap Validator - ZKSwap wiki",
              "href": "https://en.wiki.zks.org/techonology#3-validator"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "ZkSync.sol#L404 - ZKSwap source code",
              "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/master/contracts/ZkSync.sol#L404"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Make Transaction",
                "href": "https://en.wiki.zks.org/interact-with-zkswap/make-transaction#withdraw"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "ZkSync.sol#L404 - ZKSwap source code",
                "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/master/contracts/ZkSync.sol#L404"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into Exodus Mode, disallowing further state updates. In that case everybody can withdraw by submitting a zero knowledge proof of their funds with their L1 transaction.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the user is unable to generate the non-trivial ZK proof for exodus withdraw."
              }
            ],
            "references": [
              {
                "text": "ZkSyncCommitBlock.sol#L230-L246 - ZKSwap source code",
                "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/3f650d28a266a56d49a3b3d2049cde34112efb14/contracts/ZkSyncCommitBlock.sol#L230-L246"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "ZkSync",
            "address": "0x8ECa806Aecc86CE90Da803b080Ca4E3A9b8097ad",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x714B2D10210f2A3a7AA614F949259C87613689aB"],
              "implementations": ["0x2F70F6D864F8F597a0ef57aDDf24323DFAb5797f"]
            },
            "chain": "ethereum",
            "description": "The main Rollup contract. Operator commits blocks, provides ZK proof which is validated by the Verifier contract and process withdrawals (executes blocks). Users deposit ETH and ERC20 tokens. This contract defines the upgrade delay in the UPGRADE_NOTICE_PERIOD constant that is currently set to 8 days."
          },
          {
            "name": "ZkSyncCommitBlock",
            "address": "0x2c543eBd91DAB7Be40eDB671D48CeDF35A75e157",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Additional contract to store implementation details of the main ZkSync contract."
          },
          {
            "name": "ZkSyncExit",
            "address": "0x8A1DBf1C32A4f5AfBD70D778F25FBEed7Cc881e5",
            "upgradeability": null,
            "chain": "ethereum"
          },
          {
            "name": "Governance",
            "address": "0x02ecef526f806f06357659fFD14834fe82Ef4B04",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x714B2D10210f2A3a7AA614F949259C87613689aB"],
              "implementations": ["0x9d3fdf9b4782753d12f6262bf22B6322608962b8"]
            },
            "chain": "ethereum",
            "description": "Keeps a list of block producers and whitelisted tokens."
          },
          {
            "name": "PairManager",
            "address": "0x661121AE41edE3f6FECDed922c59acC19A3ea9B3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x714B2D10210f2A3a7AA614F949259C87613689aB"],
              "implementations": ["0x65Fab217f1948af2D7A8eEB11fF111B0993C5Df8"]
            },
            "chain": "ethereum"
          },
          {
            "name": "Verifier",
            "address": "0x27C229937745d697d28FC7853d1bFEA7331Edf56",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x714B2D10210f2A3a7AA614F949259C87613689aB"],
              "implementations": ["0x165dFA76DFD3F6ad6Ad614aE4566C2E9262E532F"]
            },
            "chain": "ethereum"
          },
          {
            "name": "VerifierExit",
            "address": "0x961369d347EF7A6896BDD39cBE2B89e3911f521f",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x714B2D10210f2A3a7AA614F949259C87613689aB"],
              "implementations": ["0xd12F4D8329584F36aEd67f807F42D9a02bEb9534"]
            },
            "chain": "ethereum"
          },
          {
            "name": "UpgradeGatekeeper",
            "address": "0x714B2D10210f2A3a7AA614F949259C87613689aB",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "This is the contract that implements the upgrade mechanism for Governance, Verifier and ZkSync. It relies on the ZkSync contract to enforce upgrade delays."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 8 days delay on code upgrades."
          }
        ]
      },
      "permissions": [
        {
          "name": "zkSwap 1.0 Admin",
          "accounts": [
            {
              "address": "0x7D1a14eeD7af8e26f24bf08BA6eD7A339AbcF037",
              "type": "EOA"
            }
          ],
          "description": "This address is the master of Upgrade Gatekeeper contract, which is allowed to perform upgrades for Governance, Verifier, VerifierExit, PairManager and ZkSync contracts."
        },
        {
          "name": "Active validator",
          "accounts": [
            {
              "address": "0x042147Bd43d3f59B3133eE08322B67E4e9f2fDb3",
              "type": "EOA"
            }
          ],
          "description": "This actor is allowed to propose, revert and execute L2 blocks on L1. A list of active validators is kept inside Governance contract and can be updated by zkSwap 1.0 Admin."
        }
      ]
    },
    {
      "type": "layer2",
      "id": "zkswap2",
      "createdAt": "1629199654",
      "isArchived": true,
      "display": {
        "name": "ZKSwap 2.0",
        "slug": "zkswap2",
        "warning": "Version 3 of the protocol called ZkSpace is available and users are encouraged to move their assets there.",
        "description": "ZKSwap is a fork of ZKsync with added AMM functionality. Based on ZK Rollup technology, ZKSwap aims to execute the full functionality of Uniswap on Layer 2, but increase the TPS, and make transaction processing cheaper.",
        "purposes": ["Payments", "Exchange"],
        "provider": "ZKsync Lite",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://zks.org/"],
          "apps": ["https://zks.app"],
          "documentation": ["https://en.wiki.zks.org/"],
          "explorers": ["https://zkswap.info"],
          "repositories": ["https://github.com/l2labs/zkswap-contracts"],
          "socialMedia": [
            "https://medium.com/@zkspaceofficial",
            "https://twitter.com/ZKSpaceOfficial",
            "https://discord.gg/UbjmQfUVvf",
            "https://t.me/ZKSpaceOfficial",
            "https://reddit.com/r/ZKSwap_Official/"
          ]
        }
      },
      "stage": { "stage": "NotApplicable" },
      "config": {
        "associatedTokens": ["ZKS"],
        "escrows": [
          {
            "address": "0x6dE5bDC580f55Bc9dAcaFCB67b91674040A247e3",
            "sinceTimestamp": "1626059966",
            "tokens": "*",
            "chain": "ethereum"
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "Unknown",
          "description": "Some contracts are not verified, so there is no way to assess the exit window.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for , users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": null
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a zero knowledge proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "ZKSwap Introduces Practical ZK Rollups - Medium blog",
              "href": "https://medium.com/zkswap/zkswap-introduces-practical-zk-rollups-zkspeed-achieving-high-tps-and-low-gas-fees-in-real-6effe4e789e0"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "ZKSpace Whitepaper",
              "href": "https://github.com/l2labs/zkspace-whitepaper"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "ZKSwap Introduces Practical ZK Rollups - Medium blog",
              "href": "https://medium.com/zkswap/zkswap-introduces-practical-zk-rollups-zkspeed-achieving-high-tps-and-low-gas-fees-in-real-6effe4e789e0"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "ZKSwap Validator - ZKSwap wiki",
              "href": "https://en.wiki.zks.org/techonology#3-validator"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "ZkSync.sol#L404 - ZKSwap source code",
              "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/master/contracts/ZkSync.sol#L404"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Make Transaction",
                "href": "https://en.wiki.zks.org/interact-with-zkswap/make-transaction#withdraw"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "ZkSync.sol#L404 - ZKSwap source code",
                "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/master/contracts/ZkSync.sol#L404"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into Exodus Mode, disallowing further state updates. In that case everybody can withdraw by submitting a zero knowledge proof of their funds with their L1 transaction.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the user is unable to generate the non-trivial ZK proof for exodus withdraw."
              }
            ],
            "references": [
              {
                "text": "ZkSyncCommitBlock.sol#L230-L246 - ZKSwap source code",
                "href": "https://github.com/l2labs/zkswap-contracts-v2/blob/3f650d28a266a56d49a3b3d2049cde34112efb14/contracts/ZkSyncCommitBlock.sol#L230-L246"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "ZkSync",
            "address": "0x6dE5bDC580f55Bc9dAcaFCB67b91674040A247e3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"],
              "implementations": ["0xf2c351f22b148A9fF583a0F81701471a74E7338e"]
            },
            "chain": "ethereum",
            "description": "The main Rollup contract. Operator commits blocks, provides ZK proof which is validated by the Verifier contract and process withdrawals (executes blocks). Users deposit ETH and ERC20 tokens. This contract defines the upgrade delay in the UPGRADE_NOTICE_PERIOD constant that is currently set to 8 days."
          },
          {
            "name": "ZkSyncCommitBlock",
            "address": "0xE26Ebb18144CD2d8DCB14cE87fdCfbEb81baCAD4",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Additional contract to store implementation details of the main ZkSync contract."
          },
          {
            "name": "ZkSyncExit",
            "address": "0xC0221a4Dfb792AA71CE84C2687b1D2b1E7D3eea0",
            "upgradeability": null,
            "chain": "ethereum"
          },
          {
            "name": "Governance",
            "address": "0x86E527BC3C43E6Ba3eFf3A8CAd54A7Ed09cD8E8B",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"],
              "implementations": ["0x95269f9E76540459c797089034dc74b48dF780a2"]
            },
            "chain": "ethereum",
            "description": "Keeps a list of block producers and whitelisted tokens."
          },
          {
            "name": "UniswapV2Factory",
            "address": "0xD2cbDcd7C6b3152BdFf6549C208052E4DBcd575D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"],
              "implementations": ["0xB2639bA16c7A5b0C55cA22D77CdA3D7ED88A5c89"]
            },
            "chain": "ethereum",
            "description": "Manages trading pairs."
          },
          {
            "name": "Verifier",
            "address": "0x42F15EFE22993C88441EF3467f2E6Fa8FFA9ADef",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"],
              "implementations": ["0x94b9401945a9bc06CE5B69e6dB3c6B671aABc829"]
            },
            "chain": "ethereum",
            "description": "zkSNARK Plonk Verifier."
          },
          {
            "name": "VerifierExit",
            "address": "0xb56878d21F6b101f48bb55f1AA9D3F624f04E513",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"],
              "implementations": ["0x17e51B3659884d70a306906B5BDD73D1c64a3892"]
            },
            "chain": "ethereum"
          },
          {
            "name": "UpgradeGatekeeper",
            "address": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7",
            "upgradeability": null,
            "chain": "ethereum"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 8 days delay on code upgrades."
          }
        ]
      },
      "permissions": [
        {
          "name": "zkSwap 2.0 Admin",
          "accounts": [
            {
              "address": "0x9D7397204F32e0Ee919Ea3475630cdf131086255",
              "type": "EOA"
            }
          ],
          "description": "This address is the master of Upgrade Gatekeeper contract, which is allowed to perform upgrades for Governance, Verifier, VerifierExit, PairManager and ZkSync contracts."
        },
        {
          "name": "Active validator",
          "accounts": [
            {
              "address": "0x38101ae98196C8BCf7dF1835Bf3983B384272ae4",
              "type": "EOA"
            }
          ],
          "description": "This actor is allowed to propose, revert and execute L2 blocks on L1. A list of active validators is kept inside Governance contract and can be updated by zkSwap 2.0 Admin."
        }
      ]
    },
    {
      "type": "layer2",
      "id": "zksync2",
      "createdAt": "1671115151",
      "badges": [
        "EVM",
        "EthereumBlobs",
        "ZKStack",
        "L3HostChain",
        "ElasticChain"
      ],
      "display": {
        "purposes": ["Universal"],
        "upgradesAndGovernanceImage": "zk-stack",
        "name": "ZKsync Era",
        "slug": "zksync-era",
        "description": "ZKsync Era is a general-purpose ZK Rollup with full EVM compatibility.",
        "links": {
          "websites": ["https://zksync.io/", "https://zksync.dappradar.com/"],
          "apps": ["https://portal.zksync.io/bridge/"],
          "documentation": ["https://docs.zksync.io/"],
          "explorers": [
            "https://explorer.zksync.io/",
            "https://era.zksync.network/",
            "https://zksync-era.l2scan.co/",
            "https://zksync.blockscout.com/",
            "https://hyperscan.xyz/"
          ],
          "repositories": ["https://github.com/matter-labs/zksync-era"],
          "socialMedia": [
            "https://zksync.mirror.xyz/",
            "https://join.zksync.dev/",
            "https://t.me/zksync",
            "https://twitter.com/zksync",
            "https://twitter.com/zkSyncDevs"
          ],
          "rollupCodes": "https://rollup.codes/zksync-era"
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "ZK Stack",
        "category": "ZK Rollup",
        "liveness": {
          "explanation": "ZKsync Era is a ZK rollup that posts state diffs to the L1. Transactions within a state diff can be considered final when proven on L1 using a ZK proof, except that an operator can revert them if not executed yet. Currently, there is at least a 21h delay between state diffs verification and the execution of the corresponding state actions."
        },
        "finality": {
          "finalizationPeriod": 75600,
          "warnings": {
            "timeToInclusion": {
              "sentiment": "warning",
              "value": "Proven but not executed batches can be reverted by the validator(s) or the StateTransitionManager."
            }
          }
        },
        "tvlWarning": null
      },
      "config": {
        "associatedTokens": ["ZK"],
        "escrows": [
          {
            "address": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
            "newVersion": true,
            "sinceTimestamp": "1717521479",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
                "implementations": [
                  "0xb56A8225A745756DD215faf22E4796f373561AcD"
                ]
              },
              "chain": "ethereum",
              "description": "Shared bridge for depositing tokens to ZKsync Era and other ZK stack chains.",
              "upgradableBy": ["ProtocolUpgradeHandler"],
              "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": {
              "type": "ElasticChian",
              "l2BridgeAddress": "0x11f943b2c77b743AB90f4A0Ae7d5A4e7FCA3E102",
              "l2EtherAddress": "0x000000000000000000000000000000000000800A"
            }
          },
          {
            "address": "0x41527B2d03844dB6b0945f25702cB958b6d55989",
            "newVersion": true,
            "sinceTimestamp": "1698058151",
            "tokens": ["wstETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x41527B2d03844dB6b0945f25702cB958b6d55989",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"],
                "implementations": [
                  "0x9a810469F4a451Ebb7ef53672142053b4971587c"
                ]
              },
              "chain": "ethereum",
              "description": "Bridge for depositing wrapped stETH (Lido) to ZKsync Era. These deposits and withdrawals do not go through the new shared BridgeHub.",
              "upgradableBy": ["Lido (Lido Agent)"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x32400084C286CF3E17e7B677ea9583e60a000324",
            "newVersion": true,
            "sinceTimestamp": "1676268575",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x32400084C286CF3E17e7B677ea9583e60a000324",
              "upgradeability": {
                "proxyType": "EIP2535 diamond proxy",
                "admins": [],
                "implementations": [
                  "0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a",
                  "0xE60E94fCCb18a81D501a38959E532C0A85A1be89",
                  "0xCDB6228b616EEf8Df47D69A372C4f725C43e718C",
                  "0xaD193aDe635576d8e9f7ada71Af2137b16c64075"
                ],
                "immutable": false
              },
              "chain": "ethereum",
              "description": "Main rollup contract of ZKsync Era.",
              "upgradableBy": ["ProtocolUpgradeHandler"],
              "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": true,
            "untilTimestamp": "1717922458",
            "sharedEscrow": null
          },
          {
            "address": "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
            "newVersion": true,
            "sinceTimestamp": "1676367083",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
                "implementations": [
                  "0x8191975d8B0851C7f0740918896Cf298c09aA05E"
                ]
              },
              "chain": "ethereum",
              "description": "Legacy bridge for depositing ERC20 tokens to ZKsync Era. Forwards deposits and withdrawals to the BridgeHub.",
              "upgradableBy": ["ProtocolUpgradeHandler"],
              "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://mainnet.era.zksync.io",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0xa0425d71cB1D6fb80E65a5361a04096E0672De03",
              "selector": "0x701f58c5",
              "functionSignature": "function commitBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32), (uint64,uint64,uint64,bytes32,uint256,bytes32,bytes32,bytes32,bytes,bytes)[])",
              "sinceTimestamp": "1701721931",
              "untilTimestamp": "1710169104"
            }
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
              "selector": "0x701f58c5",
              "functionSignature": "function commitBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32), (uint64,uint64,uint64,bytes32,uint256,bytes32,bytes32,bytes32,bytes,bytes)[])",
              "sinceTimestamp": "1710169104",
              "untilTimestamp": "1717681823"
            }
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
              "selector": "0x6edd4f12",
              "functionSignature": "function commitBatchesSharedBridge(uint256 _chainId, (uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), (uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
              "sinceTimestamp": "1717681823",
              "untilTimestamp": "1722410363"
            }
          },
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "sharedBridge",
              "chainId": 324,
              "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
              "selector": "0x6edd4f12",
              "functionSignature": "function commitBatchesSharedBridge(uint256 _chainId, (uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment) _lastCommittedBatchData, (uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
              "sinceTimestamp": "1722410363"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x3dB52cE065f728011Ac6732222270b3F2360d919",
              "selector": "0x7739cbe7",
              "functionSignature": "function proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32) calldata,(uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32)[] calldata,(uint256[],uint256[]) calldata)",
              "sinceTimestamp": "1679602559",
              "untilTimestamp": "1701718427"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa0425d71cB1D6fb80E65a5361a04096E0672De03",
              "selector": "0x7f61885c",
              "functionSignature": "function proveBatches(tuple(uint64, bytes32, uint64, uint256, bytes32, bytes32, uint256, bytes32), tuple(uint64, bytes32, uint64, uint256, bytes32, bytes32, uint256, bytes32)[], tuple(uint256[], uint256[]))",
              "sinceTimestamp": "1701258299",
              "untilTimestamp": "1710165419"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
              "selector": "0x7f61885c",
              "functionSignature": "function proveBatches(tuple(uint64, bytes32, uint64, uint256, bytes32, bytes32, uint256, bytes32), tuple(uint64, bytes32, uint64, uint256, bytes32, bytes32, uint256, bytes32)[], tuple(uint256[], uint256[]))",
              "sinceTimestamp": "1710165419",
              "untilTimestamp": "1717694375"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
              "selector": "0xc37533bb",
              "functionSignature": "function proveBatchesSharedBridge(uint256 _chainId, (uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), (uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[], (uint256[] recursiveAggregationInput, uint256[] serializedProof))",
              "sinceTimestamp": "1717694375",
              "untilTimestamp": "1722410363"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "sharedBridge",
              "chainId": 324,
              "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
              "selector": "0xc37533bb",
              "functionSignature": "function proveBatchesSharedBridge(uint256 _chainId,(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment) _prevBatch, (uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _committedBatches, (uint256[] recursiveAggregationInput, uint256[] serializedProof) _proof)",
              "sinceTimestamp": "1722410363"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x3dB52cE065f728011Ac6732222270b3F2360d919",
              "selector": "0xce9dcf16",
              "functionSignature": "function executeBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32)[] calldata _newBlocksData)",
              "sinceTimestamp": "1679602559",
              "untilTimestamp": "1701719687"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa0425d71cB1D6fb80E65a5361a04096E0672De03",
              "selector": "0xc3d93e7c",
              "functionSignature": "function executeBatches(tuple(uint64, bytes32, uint64, uint256, bytes32, bytes32, uint256, bytes32)[] _newBatchesData)",
              "sinceTimestamp": "1701258299",
              "untilTimestamp": "1710167255"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
              "selector": "0xc3d93e7c",
              "functionSignature": "function executeBatches(tuple(uint64, bytes32, uint64, uint256, bytes32, bytes32, uint256, bytes32)[] _newBatchesData)",
              "sinceTimestamp": "1710167255",
              "untilTimestamp": "1717683407"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
              "selector": "0x6f497ac6",
              "functionSignature": "function executeBatchesSharedBridge(uint256 _chainId, (uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _newBatchesData)",
              "sinceTimestamp": "1717683407",
              "untilTimestamp": "1722410363"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "sharedBridge",
              "chainId": 324,
              "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
              "selector": "0x6f497ac6",
              "functionSignature": "function executeBatchesSharedBridge(uint256 _chainId, (uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _batchesData)",
              "sinceTimestamp": "1722410363"
            }
          }
        ],
        "finality": {
          "type": "zkSyncEra",
          "stateUpdate": "zeroed",
          "minTimestamp": "1708556400",
          "lag": 0
        }
      },
      "chainConfig": {
        "name": "zksync2",
        "chainId": 324,
        "explorerUrl": "https://era.zksync.network/",
        "explorerApi": {
          "url": "https://api-era.zksync.network/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1676384520",
        "multicallContracts": [
          {
            "version": "3",
            "address": "0xF9cda624FBC7e059355ce98a31693d299FACd963",
            "batchSize": 150,
            "sinceBlock": 3908235
          }
        ],
        "coingeckoPlatform": "zksync"
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ValidatorTimelock",
              "references": [
                "https://etherscan.io/address/0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E#code#F1#L169"
              ]
            },
            {
              "contract": "ZKsync",
              "references": [
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L448",
                "https://etherscan.io/address/0xE60E94fCCb18a81D501a38959E532C0A85A1be89#code#F6#L23"
              ]
            },
            {
              "contract": "Verifier",
              "references": [
                "https://etherscan.io/address/0x70F3FBf8a427155185Ec90BED8a3434203de9604#code#F1#L343"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain (SD)",
          "description": "All of the data (SD = state diffs) needed for proof construction is published onchain.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ValidatorTimelock",
              "references": [
                "https://etherscan.io/address/0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E#code#F1#L120",
                "https://etherscan.io/tx/0x9dbf29985eae00b7a1b7dbd5b21eedfb287be17310eb8bef6c524990b6928f63"
              ]
            },
            {
              "contract": "ZKsync",
              "references": [
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L216",
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F11#L120"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no window for users to exit in case of an unwanted standard upgrade because the central operator can censor withdrawal transactions by implementing a TransactionFilterer with no delay. The standard upgrade delay is 4d 21h.",
          "sources": [
            {
              "contract": "ZKsync",
              "references": [
                "https://etherscan.io/address/0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a#code#F1#L114",
                "https://etherscan.io/address/0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a#code#F1#L128"
              ]
            }
          ]
        },
        "sequencerFailure": {
          "value": "Enqueue via L1",
          "description": "Users can submit transactions to an L1 queue, but can't force them. The sequencer cannot selectively skip transactions but can stop processing the queue entirely. In other words, if the sequencer censors or is down, it is so for everyone.",
          "sentiment": "warning",
          "sources": [
            {
              "contract": "ZKsync",
              "references": [
                "https://etherscan.io/address/0xCDB6228b616EEf8Df47D69A372C4f725C43e718C#code#F1#L53",
                "https://etherscan.io/address/0xE60E94fCCb18a81D501a38959E532C0A85A1be89#code#F1#L95"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen. There is a decentralized Governance system that can attempt changing Proposers with an upgrade.",
          "sentiment": "warning",
          "definingMetric": "-Infinity",
          "sources": [
            {
              "contract": "ZKsync",
              "references": [
                "https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L219"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/matter-labs/zksync-era)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": []
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can force any transaction via L1",
          "description": "If a user is censored by the L2 Sequencer, they can try to force their transaction via an L1 queue. Right now there is no mechanism that forces L2 Sequencer to include        transactions from the queue in an L2 block. The operator can implement a TransactionFilterer that censors forced transactions.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            },
            {
              "category": "Users can be censored if",
              "text": "the operator implements a TransactionFilterer, which is possible without delay."
            }
          ],
          "references": [
            {
              "text": "L1 - L2 interoperability - Developer's documentation",
              "href": "https://docs.zksync.io/build/developer-reference/l1-l2-interoperability#priority-queue"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawing funds - ZKsync documentation",
                "href": "https://docs.zksync.io/build/developer-reference/bridging-assets"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all messages from L1, including all forced withdrawals and deposits. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": []
          }
        ]
      },
      "upgradesAndGovernance": "\n    There are two main paths for contract upgrades in the shared ZK stack ecosystem - standard and emergency - both converging on the shared upgrade proxy contract ProtocolUpgradeHandler. \n    The standard path involves a governance proposal and voting through the DAO, multiple timelock delays and finally approval by the Guardians or 6 SecurityCouncil participants. \n    The emergency path allows for contract upgrades without any delay by the EmergencyUpgradeBoard, which acts as a 3/3 Multisig between SecurityCouncil, Guardians and the FoundationMultisig. \n    ## Standard path\n    ### On ZKsync Era\n    Delegates can start new proposals by reaching a threshold of 21M ZK tokens on the ZKsync Era Rollup's ZkProtocolGovernor contract.\n    This launches a 7d 'voting delay' after which the 7d voting period starts. During these first two periods, the proposal can be canceled by the proposer or if it falls below the proposing threshold.\n    A proposal is only successful if it reaches both quorum (630M ZK tokens) and simple majority. When it reaches quorum, the voting period is reset to 7d. \n    In the successful case, it can be queued in the 0s timelock which forwards it to Ethereum as an L2->L1 log. \n    ### On Ethereum\n    After the execution of the proposal-containing batch (21h delay), the proposal is now picked up by the ProtocolUpgradeHandler and enters the 3d 'legal veto period'.\n    This serves as a window in which a veto could be coordinated offchain, to be then enforced by non-approval of Guardians and SecurityCouncil. A threshold of 2 Guardians can extend the veto period to 7d. \n    After this a proposal enters a *waiting* state of 30d, from which it can be immediately approved (cancelling the delay) by 6 participants of the SecurityCouncil. \n    For the unlikely case that the SC does not approve here, the Guardians can instead approve the proposal, or nobody. In the two latter cases, the waiting period is enforced in full. \n    A proposal cannot be actively cancelled in the ProtocolUpgradeHandler, but will be expired if not approved within the waiting period. An approved proposal now enters the *pendingExecution* state for a final delay of 1d, and can then be executed.\n    ### Other governance tracks\n    There are two other tracks of Governance also starting with DAO Delegate proposals the ZKsync Era rollup: 1) Token Program Proposals that add new minters, allocations or upgrade the ZK token and \n    2) Governance Advisory Proposals that e.g. change the ZK Credo or other offchain Governance Procedures without onchain targets. \n    The protocol for these two other tracks is similar to the first part of the standard path described above (albeit having different quorum and timelock values), and not passing over to the Ethereum L1. \n    Further customizations are that the ZkFoundationMultisig can propose to the ZkTokenGovernor without a threshold and that the Guardians' L2 alias can cancel proposals in the ZkTokenGovernor and the ZkGovOpsGovernor.\n    ## Emergency path \n    SecurityCouncil (9 / 12), Guardians (5 / 8) and ZkFoundationMultisig (3 / 5) form a de-facto 3/3 Multisig \n    by pushing an immediate upgrade proposal through the EmergencyUpgradeBoard, which circumvents all delays and executes immediately via the ProtocolUpgradeHandler.\n    ## Upgrade Delays\n    The cumulative duration of the upgrade paths from the moment of a voted 'successful' proposal is 4d 21h or 8d 21h (depending on Guardians extending the LegalVetoPeriod) for Standard, 0 for Emergency and 34d 21h for the path in which the SecurityCouncil is not approving the proposal.\n    ## Freezing\n    The SecurityCouncil can freeze (pause withdrawals and settlement) all chains connected to the current StateTransitionManager. \n    Either for a softFreeze of 12h or a hardFreeze of 7d. \n    After a softFreeze and / or a hardFreeze, a proposal from the EmergencyUpgradeBoard has to be passed before subsequent freezes are possible. \n    Only the SecurityCouncil can unfreeze an active freeze.\n    ## Elastic Chain Operator and ChainAdmin\n    Apart from the paths that can upgrade all shared implementations, the ZK stack governance system defines other roles that can modify the system: \n    A single *Elastic Chain operator* role that governs parameters in the shared contracts and a *ChainAdmin* role (in the chain-specific diamond contract) for managing parameters of each individual Hyperchain that builds on the stack.\n    These chain-specific actions include setting a transaction filterer that can censor L1 -> L2 messages, setting fee parameters and adding / removing Validators in the ValidatorTimelock. \n    ZKsync Era's ChainAdmin differs from the others as it also has the above *Elastic Chain Operator* role in the shared ZK stack contracts.\n    ",
      "permissions": [
        {
          "name": "SecurityCouncil",
          "accounts": [
            {
              "address": "0xBDFfCC71FE84020238F2990a6D2954e87355De0D",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "One of the three signers of the EmergencyUpgradeBoard. Can freeze all ZK stack chains. Can approve governance proposals in the ProtocolUpgradeHandler. The default threshold for the members of this contract is 9 / 12 but is customized for certain actions."
        },
        {
          "name": "SecurityCouncil members",
          "accounts": [
            {
              "address": "0x13f07d9BF17615f6a17F272fe1A913168C275A66",
              "type": "Contract"
            },
            {
              "address": "0x34Ea62D4b9bBB8AD927eFB6ab31E3Ab3474aC93a",
              "type": "Contract"
            },
            {
              "address": "0x35eA56fd9eAd2567F339Eb9564B6940b9DD5653F",
              "type": "Contract"
            },
            {
              "address": "0x3888777686F0b0d8c3108fc22ad8DE9E049bE26F",
              "type": "Contract"
            },
            {
              "address": "0x69462a81ba94D64c404575f1899a464F123497A2",
              "type": "Contract"
            },
            {
              "address": "0x725065b4eB99294BaaE57AdDA9c32e42F453FA8A",
              "type": "Contract"
            },
            {
              "address": "0x84BF0Ac41Eeb74373Ddddae8b7055Bf2bD3CE6E0",
              "type": "Contract"
            },
            {
              "address": "0x9B39Ea22e838B316Ea7D74e7C4B07d91D51ccA88",
              "type": "Contract"
            },
            {
              "address": "0x9B8Be3278B7F0168D82059eb6BAc5991DcdfA803",
              "type": "Contract"
            },
            {
              "address": "0xB7aC3A79A23B148c85fba259712c5A1e7ad0ca44",
              "type": "Contract"
            },
            {
              "address": "0xc3Abc9f9AA75Be8341E831482cdA0125a7B1A23e",
              "type": "Contract"
            },
            {
              "address": "0xFB90Da9DC45378A1B50775Beb03aD10C7E8DC231",
              "type": "Contract"
            }
          ],
          "description": "Members of the SecurityCouncil. The members are mostly low-threshold multisigs themselves. ",
          "references": [
            {
              "text": "Security Council members - ZK Nation docs",
              "href": "https://docs.zknation.io/zksync-governance/schedule-3-zksync-security-council"
            }
          ]
        },
        {
          "name": "Guardians",
          "accounts": [
            {
              "address": "0xD677e09324F8Bb3cC64F009973693f751c33A888",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Is one of the three signers of the EmergencyUpgradeBoard. Can extend the legal veto period and / or approve governance proposals in the ProtocolUpgradeHandler. Permissioned to cancel non-protocolUpgrade proposals on L2. The default threshold for the members of this contract is 5 / 8 but is customized for certain actions."
        },
        {
          "name": "ZKsync Guardians",
          "accounts": [
            {
              "address": "0x015318c16AE443a20DE0A776dB06a59F0D279057",
              "type": "MultiSig"
            },
            {
              "address": "0x178D8Eb1A1fb81B5102808A83318Bb04C6a9fC6D",
              "type": "MultiSig"
            },
            {
              "address": "0x2A90830083C5Ca1f18d7AA7fCDC2998f93475384",
              "type": "MultiSig"
            },
            {
              "address": "0x538612F6eba6ff80FBD95D60dCDee16b8FfF2c0f",
              "type": "MultiSig"
            },
            {
              "address": "0x55c671BcE13120387Ded710A1d1b80C0e3d8E857",
              "type": "MultiSig"
            },
            {
              "address": "0x590926dBCDfD19627c3BbD2A6Eb96DeC7a3AbF69",
              "type": "MultiSig"
            },
            {
              "address": "0x6D26874130A174839b9cd8CB87Ed4E09D0c1a5f0",
              "type": "MultiSig"
            },
            {
              "address": "0xCe7a3dFcc35602155809920Ff65e093aa726f6cf",
              "type": "MultiSig"
            }
          ],
          "description": "Members of the Guardians contract, usually 1/1 Gnosis multisigs themselves. ",
          "references": [
            {
              "text": "ZKsync Guardians - ZK Nation docs",
              "href": "https://docs.zknation.io/zksync-governance/schedule-4-zksync-guardians"
            }
          ]
        },
        {
          "name": "ZkFoundationMultisig",
          "description": "This is a Gnosis Safe with 3 / 5 threshold.  Is one of the three signers of the EmergencyUpgradeBoard.",
          "accounts": [
            {
              "address": "0xbC1653bd3829dfEc575AfC3816D4899cd103B51c",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x56B3120c32AE9C3188fafc5Cc542F9c53B0b2222",
              "type": "EOA"
            },
            {
              "address": "0x441e5c8910Ef39996B2D01499509861228cbc2d1",
              "type": "EOA"
            },
            {
              "address": "0xd5966E3dd25f6086b6aD7D7Fa3292d11b988da95",
              "type": "EOA"
            },
            {
              "address": "0x0B2E7ffbcD1E3e6f5034555Fb638889FE7564709",
              "type": "EOA"
            },
            {
              "address": "0x610e45F112e0c8a9aA7137677C83E7A198A1b991",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ProtocolUpgradeHandler",
          "accounts": [
            {
              "address": "0x8f7a9912416e8AdC4D9c21FAe1415D3318A11897",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "Owner and upgrade Admin of all shared ZK stack contracts. Can also upgrade the individual Hyperchain diamond contracts."
        },
        {
          "name": "Matter Labs Multisig",
          "description": "This is a Gnosis Safe with 4 / 7 threshold.  Has the *ChainAdmin* role in the ZKsync Era diamond and the *Elastic Chain Operator* role in the shared contracts.",
          "accounts": [
            {
              "address": "0x4e4943346848c4867F81dFb37c4cA9C5715A7828",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x3F0009D00cc78979d00Eb635490F23E8d6aCc481",
              "type": "EOA"
            },
            {
              "address": "0xe79af29d618141Ffef951B240b250d47030D56d7",
              "type": "EOA"
            },
            {
              "address": "0x3068415e0F857A5eEd03302A1F7E44f67468d2Bc",
              "type": "EOA"
            },
            {
              "address": "0x702caCafA54B88e9c54449563Fb2e496e85c78b7",
              "type": "EOA"
            },
            {
              "address": "0xFAdb20191Ab38362C50f52909817B74214CA79AE",
              "type": "EOA"
            },
            {
              "address": "0xfd03dA3aeb6807a98db96C1704Ea4CFf031BaEd2",
              "type": "EOA"
            },
            {
              "address": "0x700DA14328eC2F81053E5B6aAE4803E16BEdF1df",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Elastic Chain Operator",
          "accounts": [
            {
              "address": "0x4e4943346848c4867F81dFb37c4cA9C5715A7828",
              "type": "MultiSig"
            }
          ],
          "description": "Can change the ValidatorTimelock in the StateTransitionManager, manage validators of the Hyperchain diamonds, revert batches and create new Hyperchains."
        },
        {
          "name": "ChainAdmin",
          "accounts": [
            {
              "address": "0x2cf3bD6a9056b39999F3883955E183F655345063",
              "type": "Contract"
            }
          ],
          "description": "Can manage fees, apply predefined upgrades and censor bridge transactions (*ChainAdmin* role)."
        },
        {
          "name": "Diamond Contract Validators",
          "accounts": [
            {
              "address": "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
              "type": "Contract"
            },
            {
              "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
              "type": "Contract"
            }
          ],
          "description": "Addresses permissioned to call the functions to propose, execute and revert L2 batches in the ZKsync Era diamond. Usually these are addresses of proxying ValidatorTimelock contracts."
        },
        {
          "name": "ValidatorTimelock Validators",
          "accounts": [
            {
              "address": "0x0D3250c3D5FAcb74Ac15834096397a3Ef790ec99",
              "type": "EOA"
            },
            {
              "address": "0x3527439923a63F8C13CF72b8Fe80a77f6e572092",
              "type": "EOA"
            }
          ],
          "description": "Actors that are allowed to propose, execute and revert L2 batches on L1 through the ValidatorTimelock."
        },
        {
          "name": "ChainAdmin Owner",
          "accounts": [
            {
              "address": "0x4e4943346848c4867F81dFb37c4cA9C5715A7828",
              "type": "MultiSig"
            }
          ],
          "description": "Can manage fees, apply predefined upgrades and censor bridge transactions (*ChainAdmin* role)."
        },
        {
          "name": "ValidatorTimelockOld Validators",
          "accounts": [
            {
              "address": "0x3527439923a63F8C13CF72b8Fe80a77f6e572092",
              "type": "EOA"
            },
            {
              "address": "0x0D3250c3D5FAcb74Ac15834096397a3Ef790ec99",
              "type": "EOA"
            }
          ],
          "description": "Actors that are allowed to propose, execute and revert L2 batches on L1 through the currently unused ValidatorTimelockOld."
        }
      ],
      "nativePermissions": {
        "zksync2": [
          {
            "accounts": [
              {
                "address": "0xcd2753Bd3829dfeC575AFC3816d4899CD103C62D",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "ZkFoundationMultisig L2 alias",
            "description": "The Layer2 alias address through which the ZkFoundationMultisig can act."
          },
          {
            "accounts": [
              {
                "address": "0xe788e09324F8bb3cc64f009973693f751C33b999",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "Guardians L2 alias",
            "description": "The Layer2 alias address through which the Guardians contract can act."
          },
          {
            "accounts": [
              {
                "address": "0xA08b9912416E8aDc4D9C21Fae1415d3318A129A8",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "ProtocolUpgradeHandler L2 alias",
            "description": "The Layer2 alias address through which the ProtocolUpgradeHandler contract can act."
          },
          {
            "accounts": [
              {
                "address": "0xe788e09324F8bb3cc64f009973693f751C33b999",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "Veto Guardian TokenGovernor",
            "description": "This address can cancel proposals in the ZkTokenGovernor while they are pending (after having been proposed) or active (during the voting period)."
          },
          {
            "accounts": [
              {
                "address": "0xcd2753Bd3829dfeC575AFC3816d4899CD103C62D",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "Propose Guardian TokenGovernor",
            "description": "This address can make direct proposals in the ZkTokenGovernor without owning ZK tokens."
          },
          {
            "accounts": [
              {
                "address": "0xA08b9912416E8aDc4D9C21Fae1415d3318A129A8",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "ZK Token upgrade Admin",
            "description": "Can upgrade the ZK token contract, affecting all holders of the ZK token."
          },
          {
            "accounts": [
              {
                "address": "0x3E21c654B545Bf6236DC08236169DcF13dA4dDd6",
                "type": "Contract"
              }
            ],
            "chain": "zksync2",
            "name": "ZK Token minter Admin",
            "description": "Can add and remove minters from the ZK token contract and mint unlimited amounts."
          },
          {
            "accounts": [
              {
                "address": "0xe788e09324F8bb3cc64f009973693f751C33b999",
                "type": "EOA"
              }
            ],
            "chain": "zksync2",
            "name": "Veto Guardian GovOpsGovernor",
            "description": "This address can cancel proposals in the ZkGovOpsGovernor while they are pending (after having been proposed) or active (during the voting period)."
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "ZKsync",
            "address": "0x32400084C286CF3E17e7B677ea9583e60a000324",
            "upgradeability": {
              "proxyType": "EIP2535 diamond proxy",
              "admins": [],
              "implementations": [
                "0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a",
                "0xE60E94fCCb18a81D501a38959E532C0A85A1be89",
                "0xCDB6228b616EEf8Df47D69A372C4f725C43e718C",
                "0xaD193aDe635576d8e9f7ada71Af2137b16c64075"
              ],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "The main Rollup contract. The operator commits blocks and provides a ZK proof which is validated by the Verifier contract           then processes transactions. During batch execution it processes L1 --> L2 and L2 --> L1 transactions.",
            "upgradableBy": ["ProtocolUpgradeHandler"],
            "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
          },
          {
            "name": "EraChainAdminProxy",
            "address": "0x2cf3bD6a9056b39999F3883955E183F655345063",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Intermediary governance contract proxies the *Elastic Chain Operator* role for the shared contracts and the *ChainAdmin* role for ZKsync Era."
          },
          {
            "name": "ValidatorTimelockOld",
            "address": "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Intermediary contract between the *Validators* and the ZKsync Era diamond that delays block execution (ie withdrawals and other L2 --> L1 messages) by 21h."
          },
          {
            "name": "ValidatorTimelock",
            "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Intermediary contract between the *Validators* and the ZKsync Era diamond that delays block execution (ie withdrawals and other L2 --> L1 messages) by 21h."
          },
          {
            "name": "Verifier",
            "address": "0x70F3FBf8a427155185Ec90BED8a3434203de9604",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Implements ZK proof verification logic."
          },
          {
            "name": "SecurityCouncil",
            "address": "0xBDFfCC71FE84020238F2990a6D2954e87355De0D",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Custom contract acting as a Multisig. The default threshold for the members of this contract is 9 / 12 but is customized for certain actions."
          },
          {
            "name": "Guardians",
            "address": "0xD677e09324F8Bb3cC64F009973693f751c33A888",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Custom contract acting as a Multisig. The default threshold for the members of this contract is 5 / 8 but is customized for certain actions."
          },
          {
            "name": "ProtocolUpgradeHandler",
            "address": "0x8f7a9912416e8AdC4D9c21FAe1415D3318A11897",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "The central upgrade contract and Governance proxy for all ZK stack contracts. Accepts successful DAO proposals from L2 and emergency proposals from the EmergencyUpgradeBoard."
          },
          {
            "name": "L1SharedBridge",
            "address": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
              "implementations": ["0xb56A8225A745756DD215faf22E4796f373561AcD"]
            },
            "chain": "ethereum",
            "description": "This bridge contract escrows all ERC-20s and ETH that are deposited to registered ZK stack chains like ZKsync Era.",
            "upgradableBy": ["ProtocolUpgradeHandler"],
            "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
          },
          {
            "name": "BridgeHub",
            "address": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
              "implementations": ["0x509dA1BE24432F8804C4A9FF4a3c3f80284CDd13"]
            },
            "chain": "ethereum",
            "description": "Sits between the single shared bridge and the StateTransitionManager(s) and relays L1 <-> L2 messages from the shared bridge or other ZK stack chains to their respective destinations.",
            "upgradableBy": ["ProtocolUpgradeHandler"],
            "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
          },
          {
            "name": "StateTransitionManager",
            "address": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],
              "implementations": ["0xed1Dc7F0Be2B19cb02a2476150C8ea24A37c5274"]
            },
            "chain": "ethereum",
            "description": "Defines L2 diamond contract creation and upgrade data, proof verification for the `ZKsync diamond` contract connected to it (and other L2 diamond contracts that share the logic).",
            "upgradableBy": ["ProtocolUpgradeHandler"],
            "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
          }
        ],
        "nativeAddresses": {
          "zksync2": [
            {
              "name": "ZkProtocolGovernor",
              "address": "0x76705327e682F2d96943280D99464Ab61219e34f",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "Main Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for protocol upgrade proposals (ZIPs) that go through Ethereum Layer 1 and can target all L1 and L2 contracts. At least 21M ZK tokens are necessary to start a proposal and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the ProtocolTimelockController."
            },
            {
              "name": "ProtocolTimelockController",
              "address": "0x3701fB675bCd4A85eb11A2467628BBe193F6e6A8",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "Timelock contract that can send L2->L1 logs that start a proposal in the ProtocolUpgradeHandler on Ethereum. This timelock has no minimum delay"
            },
            {
              "name": "ZkTokenGovernor",
              "address": "0x10560f8B7eE37571AD7E3702EEb12Bc422036E89",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for Token Program Proposals (TPPs) usually targeting the ZK token. At least 21M ZK tokens are necessary to start a proposal (for delegates) and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the TokenTimelockController."
            },
            {
              "name": "TokenTimelockController",
              "address": "0x3E21c654B545Bf6236DC08236169DcF13dA4dDd6",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "This timelock contract has 3d minimum delay"
            },
            {
              "name": "ZkGovOpsGovernor",
              "address": "0x496869a7575A1f907D1C5B1eca28e4e9E382afAb",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for Governance Advisory Proposals (GAPs) that are not executable onchain. At least 21M ZK tokens are necessary to start a proposal and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the GovOpsTimelockController."
            },
            {
              "name": "GovOpsTimelockController",
              "address": "0xC3e970cB015B5FC36edDf293D2370ef5D00F7a19",
              "upgradeability": null,
              "chain": "zksync2",
              "description": "This timelock contract has 3d minimum delay"
            },
            {
              "name": "ZkToken",
              "address": "0x5A7d6b2F92C77FAD6CCaBd7EE0624E64907Eaf3E",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdB1E46B448e68a5E35CB693a99D59f784aD115CC"],
                "implementations": [
                  "0x01a6715d3560241E09E865a46122bf347A576c09"
                ]
              },
              "chain": "zksync2",
              "description": "The ZK token contract on ZKsync Era. Used for voting in the ZK stack governance system.",
              "upgradableBy": ["ProtocolUpgradeHandler"],
              "upgradeDelay": "4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."
            }
          ]
        },
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is a 4d 21h - 8d 21h delay on code upgrades unless upgrade is initiated by the     EmergencyUpgradeBoard in which case there is no delay."
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "The node software is open-source, and its source code can be found [here](https://github.com/matter-labs/zksync-era).\n    The main node software does not rely on Layer 1 (L1) to reconstruct the state, but you can use [this tool](https://github.com/eqlabs/zksync-state-reconstruct) for that purpose. Currently, there is no straightforward method to inject the state into the main node, but ZKsync is actively working on a solution for this.",
        "compressionScheme": "Bytecodes undergo compression before deployment on Layer 1 (L1). You can find additional information on this process [here](https://github.com/matter-labs/zksync-era/blob/main/docs/guides/advanced/11_compression.md).",
        "genesisState": "There have been neither genesis states nor regenesis.",
        "dataFormat": "Details on data format can be found [here](https://github.com/matter-labs/zksync-era/blob/main/docs/guides/advanced/09_pubdata.md)."
      },
      "stateValidation": {
        "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
        "categories": [
          {
            "title": "Prover Architecture",
            "description": "ZKsync Era proof system Boojum can be found [here](https://github.com/matter-labs/era-boojum/tree/main) and contains essential tools like the Prover, the Verifier, and other backend components. The specs of the system can be found [here](https://github.com/matter-labs/zksync-era/tree/main/docs/specs/prover)."
          },
          {
            "title": "ZK Circuits",
            "description": "ZKsync Era circuits are built from Boojum and are designed to replicate the behavior of the EVM. The source code can be found [here](https://github.com/matter-labs/era-zkevm_circuits/tree/main). The circuits are checked against tests that can be found [here](https://github.com/matter-labs/era-zkevm_test_harness/tree/main).",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the proof system is implemented incorrectly."
              }
            ]
          },
          {
            "title": "Verification Keys Generation",
            "description": "SNARK verification keys can be generated and checked against the Ethereum verifier contract using [this tool](https://github.com/matter-labs/zksync-era/tree/main/prover/crates/bin/vk_setup_data_generator_server_fri). The system requires a trusted setup."
          }
        ],
        "proofVerification": {
          "shortDescription": "ZKsync Era is a ZK-EVM rollup on Ethereum.",
          "aggregation": true,
          "requiredTools": [
            {
              "name": "Custom tool",
              "version": "v14.2.0",
              "link": "https://github.com/matter-labs/zksync-era/tree/prover-v14.2.0/prover/vk_setup_data_generator_server_fri"
            }
          ],
          "verifiers": [
            {
              "name": "ZKsyncEraVerifier",
              "description": "ZKsync Era utilizes [Boojum](https://github.com/matter-labs/era-boojum/tree/main) as the main proving stack for their system. Boojum is an implementation of the [Redshift](https://eprint.iacr.org/2019/1400.pdf) protocol. The protocol makes use of recursive proof aggregation. The final Redshift proof is wrapped in a SNARK (Plonk + KZG) proof.",
              "verified": "no",
              "contractAddress": "0x70F3FBf8a427155185Ec90BED8a3434203de9604",
              "chainId": 1,
              "subVerifiers": [
                {
                  "name": "Final wrap",
                  "proofSystem": "Plonk SNARK",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "KZG",
                  "trustedSetup": "Aztec ceremony",
                  "link": "https://github.com/matter-labs/era-zkevm_test_harness/blob/v1.5.0/circuit_definitions/src/circuit_definitions/aux_layer/wrapper.rs"
                },
                {
                  "name": "Aggregation circuit",
                  "proofSystem": "Redshift",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "LPC",
                  "trustedSetup": "None",
                  "link": "https://github.com/matter-labs/era-zkevm_test_harness/blob/v1.5.0/circuit_definitions/src/circuit_definitions/recursion_layer/mod.rs#L45"
                },
                {
                  "name": "Main circuit",
                  "proofSystem": "Redshift",
                  "mainArithmetization": "Plonkish",
                  "mainPCS": "LPC",
                  "trustedSetup": "None",
                  "link": "https://github.com/matter-labs/era-zkevm_circuits"
                }
              ]
            }
          ]
        }
      },
      "milestones": [
        {
          "name": "Onchain Governance Launch",
          "link": "https://blog.zknation.io/zksync-governance-system/",
          "date": "2024-09-12T00:00:00Z",
          "description": "An onchain Governance system is introduced, including a Security Council and Guardians.",
          "type": "general"
        },
        {
          "name": "ZKsync Protocol Upgrade v24",
          "link": "https://github.com/ZKsync-Community-Hub/zksync-developers/discussions/519",
          "date": "2024-06-06T00:00:00Z",
          "description": "A protocol upgrade that introduces a shared bridge and the foundation for other ZK stack chains.",
          "type": "general"
        },
        {
          "name": "ZKsync Era starts using blobs",
          "link": "https://twitter.com/zksync/status/1767983026443579448",
          "date": "2024-03-13T00:00:00Z",
          "description": "ZKsync Era starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "Introduction of Boojum prover",
          "link": "https://zksync.mirror.xyz/HJ2Pj45EJkRdt5Pau-ZXwkV2ctPx8qFL19STM5jdYhc",
          "date": "2023-07-17T00:00:00Z",
          "description": "Deployment of Boojum - new high-performance proof system.",
          "type": "general"
        },
        {
          "name": "ZKsync 2.0 baby alpha launch",
          "link": "https://blog.matter-labs.io/baby-alpha-has-arrived-5b10798bc623",
          "date": "2022-10-28T00:00:00Z",
          "description": "ZKsync 2.0 baby alpha is launched on mainnet.",
          "type": "general"
        },
        {
          "name": "Fair Onboarding Alpha and Rebranding",
          "link": "https://blog.matter-labs.io/all-aboard-zksync-era-mainnet-8b8964ba7c59",
          "date": "2023-02-16T00:00:00Z",
          "description": "ZKsync 2.0 rebrands to ZKsync Era and lets registered projects and developers deploy on mainnet.",
          "type": "general"
        },
        {
          "name": "Full Launch Alpha",
          "link": "https://blog.matter-labs.io/gm-zkevm-171b12a26b36",
          "date": "2023-03-24T00:00:00Z",
          "description": "ZKsync Era is now permissionless and open for everyone.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "State diffs vs raw tx data",
          "url": "https://twitter.com/krzKaczor/status/1641505354600046594",
          "thumbnail": "l2beat-03.jpg"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "zksync",
      "createdAt": "1623153328",
      "badges": ["AppChain", "EthereumCalldata"],
      "display": {
        "name": "ZKsync Lite",
        "slug": "zksync-lite",
        "description": "ZKsync Lite (formerly ZKsync) is a ZK Rollup platform that supports payments, token swaps and NFT minting.",
        "purposes": ["Payments", "Exchange", "NFT"],
        "provider": "ZKsync Lite",
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://zksync.io/"],
          "apps": ["https://lite.zksync.io/"],
          "documentation": ["https://docs.lite.zksync.io/dev/"],
          "explorers": ["https://zkscan.io/"],
          "repositories": ["https://github.com/matter-labs/zksync"],
          "socialMedia": [
            "https://zksync.mirror.xyz/",
            "https://join.zksync.dev/",
            "https://t.me/zksync",
            "https://twitter.com/zksync",
            "https://twitter.com/zkSyncDevs"
          ]
        },
        "activityDataSource": "Explorer API",
        "liveness": {
          "explanation": "ZKsync Lite is a ZK rollup that posts state diffs to the L1. Transactions within a state diff can be considered final when proven on L1 using a ZK proof, except that an operator can revert them if not executed yet."
        },
        "finality": { "finalizationPeriod": 0 }
      },
      "config": {
        "escrows": [
          {
            "address": "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF",
            "newVersion": true,
            "sinceTimestamp": "1592218707",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF",
              "upgradeability": {
                "proxyType": "zkSync Lite proxy",
                "admins": ["0x38A43F4330f24fe920F943409709fc9A6084C939"],
                "implementations": [
                  "0x8e972b354E6933275513C355Ee14D44A832aD2d9",
                  "0x2eaa1377e0fC95dE998B9fA7611E9D67ebA534fD"
                ]
              },
              "chain": "ethereum",
              "description": null,
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "zksync",
          "defaultUrl": "https://api.zksync.io/api/v0.2",
          "defaultCallsPerMinute": 3000
        },
        "trackedTxs": [
          {
            "uses": [{ "type": "l2costs", "subtype": "batchSubmissions" }],
            "query": {
              "formula": "functionCall",
              "address": "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF",
              "selector": "0x45269298",
              "functionSignature": "function commitBlocks((uint32,uint64,bytes32,uint256,bytes32,bytes32), (bytes32,bytes,uint256,(bytes,uint32)[],uint32,uint32)[])",
              "sinceTimestamp": "1612885558"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "proofSubmissions" },
              { "type": "l2costs", "subtype": "proofSubmissions" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF",
              "selector": "0x83981808",
              "functionSignature": "function proveBlocks((uint32,uint64,bytes32,uint256,bytes32,bytes32)[] calldata _committedBlocks, (uint256[],uint256[],uint256[],uint8[],uint256[16]) memory _proof)",
              "sinceTimestamp": "1592218707"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF",
              "selector": "0xb0705b42",
              "functionSignature": "function executeBlocks(((uint32,uint64,bytes32,uint256,bytes32,bytes32),bytes[])[] calldata _blocksData)",
              "sinceTimestamp": "1592218707"
            }
          }
        ],
        "finality": {
          "lag": 0,
          "type": "zkSyncLite",
          "minTimestamp": "1592218708",
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "State diffs"
      },
      "riskView": {
        "stateValidation": {
          "value": "ZK proofs (SN)",
          "description": "SNARKs are zero knowledge proofs that ensure state correctness, but require trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ZkSync",
              "references": [
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L549",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L575",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F16#L22",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F16#L36",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F21#L1193"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ZkSync",
              "references": [
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L422",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L44"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "7d",
          "description": "Users have 7d to exit funds in case of an unwanted upgrade. There is a 21d delay before an upgrade is applied, and withdrawals can take up to 14d to be processed.",
          "secondLine": null,
          "sentiment": "warning",
          "definingMetric": -1209600,
          "warning": {
            "value": "The Security Council can upgrade with no delay.",
            "sentiment": "bad"
          },
          "sources": [
            {
              "contract": "Governance",
              "references": [
                "https://etherscan.io/address/0x3FBc7C6c2437dE24F91b2Ca61Fc7AD3D2D62F4c8#code#F1#L93",
                "https://etherscan.io/address/0x3FBc7C6c2437dE24F91b2Ca61Fc7AD3D2D62F4c8#code#F1#L205"
              ]
            }
          ]
        },
        "sequencerFailure": {
          "value": "Force via L1",
          "description": "Users can force the sequencer to include a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for  for more than 14d, users can use the exit hatch to withdraw their funds.",
          "sentiment": "good",
          "definingMetric": 1209600,
          "sources": [
            {
              "contract": "ZkSync",
              "references": [
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L325",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L360",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L977",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L600"
              ]
            }
          ]
        },
        "proposerFailure": {
          "value": "Use escape hatch",
          "description": "Users are able to trustlessly exit by submitting a zero knowledge proof of funds.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "ZkSync",
              "references": [
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L600",
                "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L622"
              ]
            }
          ]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 1",
        "missing": {
          "nextStage": "Stage 2",
          "requirements": [
            "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit.",
            "The Security Council's actions are not confined to on-chain provable bugs."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/matter-labs/zksync)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": true,
                "description": "In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."
              },
              {
                "satisfied": true,
                "description": "The Security Council, even though it has a threshold below the recommended 75% (currently 9/15), is considered properly set up since it has been created before the Stages requirement specification and the protocol is extremely ossified. Moreover, the threshold and list of members are hardcoded and not updateable without a contract upgrade."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": null
      },
      "technology": {
        "stateCorrectness": {
          "name": "Validity proofs ensure state correctness",
          "description": "Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.",
          "risks": [],
          "references": [
            {
              "text": "Validity proofs - ZKsync FAQ",
              "href": "https://zksync.io/faq/security.html#validity-proofs"
            },
            {
              "text": "ZkSync.sol#L549 - Etherscan source code, proveBlocks function",
              "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L549"
            }
          ]
        },
        "newCryptography": {
          "name": "Zero knowledge SNARK cryptography is used",
          "description": "Despite their production use zkSNARKs are still new and experimental cryptography. Cryptography has made a lot of advancements in the recent years but all cryptographic solutions rely on time to prove their security. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "the cryptography is broken or implemented incorrectly."
            }
          ],
          "references": [
            {
              "text": "Cryptography used - ZKsync FAQ",
              "href": "https://zksync.io/faq/security.html#cryptography-used"
            },
            {
              "text": "PlonkCore.sol#L1193 - Etherscan source code",
              "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F21#L1193"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap calldata. This ensures that it will always be available when needed.",
          "risks": [],
          "references": [
            {
              "text": "Overview - ZKsync documentation",
              "href": "https://zksync.io/dev/#overview"
            },
            {
              "text": "ZkSync.sol#L44 - Etherscan source code, commitBlockInfo struct",
              "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L44"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "How decentralized is ZKsync - ZKsync FAQ",
              "href": "https://zksync.io/faq/decentralization.html#how-decentralized-is-zksync"
            },
            {
              "text": "ZkSync.sol#L422 - Etherscan source code, requireActiveValidator in commitBlock function",
              "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L427"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force exit the system",
          "description": "Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within a defined time period. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."
            }
          ],
          "references": [
            {
              "text": "Priority queue - ZKsync FAQ",
              "href": "https://zksync.io/faq/security.html#priority-queue"
            },
            {
              "text": "ZkSync.sol#L977 - Etherscan source code, addPriorityRequest function",
              "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L977"
            },
            {
              "text": "ZkSync.sol#L600 - Etherscan source code, activateExodusMode function",
              "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L600"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawing funds - ZKsync documentation",
                "href": "https://docs.lite.zksync.io/dev/payments/basic/#withdrawing-funds"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Withdrawing funds - ZKsync documentation",
                "href": "https://docs.lite.zksync.io/dev/payments/basic/#withdrawing-funds"
              },
              {
                "text": "ZkSync.sol#L325 - Etherscan source code, requestFullExit function",
                "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L325"
              },
              {
                "text": "ZkSync.sol#L360 - Etherscan source code, requestFullExitNFT function",
                "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L360"
              }
            ]
          },
          {
            "name": "Emergency exit",
            "description": "If the enough time deadline passes and the forced exit is still ignored the user can put the system into Exodus Mode, disallowing further state updates. In that case everybody can withdraw by submitting a zero knowledge proof of their funds with their L1 transaction.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the user is unable to generate the non-trivial ZK proof for exodus withdraw."
              }
            ],
            "references": [
              {
                "text": "Withdrawing funds - ZKsync documentation",
                "href": "https://docs.lite.zksync.io/dev/payments/basic/#withdrawing-funds"
              },
              {
                "text": "README.md - ZKsync Exit Tool",
                "href": "https://github.com/matter-labs/zksync/tree/master/infrastructure/exit-tool"
              },
              {
                "text": "ZkSync.sol#L622 - Etherscan source code, performExodus function",
                "href": "https://etherscan.io/address/0x8e972b354e6933275513c355ee14d44a832ad2d9#code#F1#L622"
              }
            ]
          }
        ]
      },
      "contracts": {
        "addresses": [
          {
            "name": "ZkSync",
            "address": "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF",
            "upgradeability": {
              "proxyType": "zkSync Lite proxy",
              "admins": ["0x38A43F4330f24fe920F943409709fc9A6084C939"],
              "implementations": [
                "0x8e972b354E6933275513C355Ee14D44A832aD2d9",
                "0x2eaa1377e0fC95dE998B9fA7611E9D67ebA534fD"
              ]
            },
            "chain": "ethereum",
            "description": "The main Rollup contract. Allows the operator to commit blocks, provide ZK proofs (validated by the Verifier) and processes withdrawals by executing blocks. Users can deposit ETH and ERC20 tokens. This contract also defines the upgrade process for all the other contracts by enforcing an upgrade delay and employing the Security Council which can shorten upgrade times.",
            "upgradableBy": ["ZkSync Multisig"],
            "upgradeDelay": "21d or 0 if overridden by 9 of 15 Security Council",
            "upgradeConsiderations": "When the upgrade process starts only the address of the new implementation is given. The actual upgrade also requires implementation specific calldata which is only provided after the delay has elapsed. Changing the default upgrade delay or the Security Council requires a ZkSync contract upgrade."
          },
          {
            "name": "Verifier",
            "address": "0x5290E9582B4FB706EaDf87BB1c129e897e04d06D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38A43F4330f24fe920F943409709fc9A6084C939"],
              "implementations": ["0x6e95812C432F293b8045811F4B1758285EBDB206"]
            },
            "chain": "ethereum",
            "description": "Implements ZK proof verification logic.",
            "upgradableBy": ["ZkSync Multisig"],
            "upgradeDelay": "21d or 0 if overridden by 9 of 15 Security Council",
            "upgradeConsiderations": "When the upgrade process starts only the address of the new implementation is given. The actual upgrade also requires implementation specific calldata which is only provided after the delay has elapsed. Changing the default upgrade delay or the Security Council requires a ZkSync contract upgrade."
          },
          {
            "name": "Governance",
            "address": "0x34460C0EB5074C29A9F6FE13b8e7E23A0D08aF01",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x38A43F4330f24fe920F943409709fc9A6084C939"],
              "implementations": ["0x3FBc7C6c2437dE24F91b2Ca61Fc7AD3D2D62F4c8"]
            },
            "chain": "ethereum",
            "description": "Keeps a list of block producers, NFT factories and whitelisted tokens.",
            "upgradableBy": ["ZkSync Multisig"],
            "upgradeDelay": "21d or 0 if overridden by 9 of 15 Security Council",
            "upgradeConsiderations": "When the upgrade process starts only the address of the new implementation is given. The actual upgrade also requires implementation specific calldata which is only provided after the delay has elapsed. Changing the default upgrade delay or the Security Council requires a ZkSync contract upgrade."
          },
          {
            "name": "UpgradeGatekeeper",
            "address": "0x38A43F4330f24fe920F943409709fc9A6084C939",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "This is the contract that owns Governance, Verifier and ZkSync and facilitates their upgrades. The upgrade constraints are defined by the ZkSync contract."
          },
          {
            "name": "TokenGovernance",
            "address": "0x35cc31f63deef017c38d51B038891bAE7d614e86",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Allows anyone to add new ERC20 tokens to ZKsync Lite given sufficient payment.",
            "upgradableBy": ["ZkSync Multisig"],
            "upgradeDelay": "No delay",
            "references": [
              {
                "text": "Governance.sol#L93 - Etherscan source code",
                "href": "https://etherscan.io/address/0x3FBc7C6c2437dE24F91b2Ca61Fc7AD3D2D62F4c8#code#F1#L93"
              }
            ]
          },
          {
            "name": "NftFactory",
            "address": "0x7C770595a2Be9A87CF49B35eA9bC534f1a59552D",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Allows for withdrawing NFTs minted on L2 to L1.",
            "upgradableBy": ["ZkSync Multisig"],
            "upgradeDelay": "No delay",
            "references": [
              {
                "text": "Governance.sol#L205 - Etherscan source code",
                "href": "https://etherscan.io/address/0x3FBc7C6c2437dE24F91b2Ca61Fc7AD3D2D62F4c8#code#F1#L"
              }
            ]
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "stateDerivation": {
        "nodeSoftware": "The node software is open-sourced and the source can be found [here](https://github.com/matter-labs/zksync).",
        "compressionScheme": "No compression, transactions are always the same size.",
        "genesisState": "There is no genesis file nor regenesis for ZKsync Lite. By default, all accounts were empty at the beginning.",
        "dataFormat": "The data format documentations can be found [here](https://github.com/matter-labs/zksync/blob/master/docs/protocol.md#data-format)."
      },
      "permissions": [
        {
          "name": "ZkSync Multisig",
          "description": "This is a Gnosis Safe with 4 / 7 threshold.  This Multisig is the owner of Upgrade Gatekeeper contract and therefore is allowed to perform upgrades for Governance, Verifier and ZkSync contracts. It can also change the list of active validators and appoint the security council (by upgrading the ZkSync contract).",
          "accounts": [
            {
              "address": "0xE24f4870Ab85DE8E356C5fC56138587206c70d99",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x050b37a12451F188c7bA53D48b8A1adE6D138E71",
              "type": "EOA"
            },
            {
              "address": "0x37A71E0C1A5808343D893Db40e12A74e0A387908",
              "type": "EOA"
            },
            {
              "address": "0x733F602bB867c643542cc807a3D32AD1A86cacc1",
              "type": "EOA"
            },
            {
              "address": "0xfB42eb487835B01cbF266f66750a7a89a7247F06",
              "type": "EOA"
            },
            {
              "address": "0x702caCafA54B88e9c54449563Fb2e496e85c78b7",
              "type": "EOA"
            },
            {
              "address": "0xD613b3a3924D0dE9B4a352ca0669e743cBC3C4AA",
              "type": "EOA"
            },
            {
              "address": "0x3068415e0F857A5eEd03302A1F7E44f67468d2Bc",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Security Council",
          "accounts": [
            {
              "address": "0xa2602ea835E03fb39CeD30B43d6b6EAf6aDe1769",
              "type": "EOA"
            },
            {
              "address": "0x9D5d6D4BaCCEDf6ECE1883456AA785dc996df607",
              "type": "EOA"
            },
            {
              "address": "0x002A5dc50bbB8d5808e418Aeeb9F060a2Ca17346",
              "type": "MultiSig"
            },
            {
              "address": "0x71E805aB236c945165b9Cd0bf95B9f2F0A0488c3",
              "type": "EOA"
            },
            {
              "address": "0x76C6cE74EAb57254E785d1DcC3f812D274bCcB11",
              "type": "EOA"
            },
            {
              "address": "0xFBfF3FF69D65A9103Bf4fdBf988f5271D12B3190",
              "type": "EOA"
            },
            {
              "address": "0xAfC2F2D803479A2AF3A72022D54cc0901a0ec0d6",
              "type": "Contract"
            },
            {
              "address": "0x4d1E3089042Ab3A93E03CA88B566b99Bd22438C6",
              "type": "EOA"
            },
            {
              "address": "0x19eD6cc20D44e5cF4Bb4894F50162F72402d8567",
              "type": "MultiSig"
            },
            {
              "address": "0x39415255619783A2E71fcF7d8f708A951d92e1b6",
              "type": "EOA"
            },
            {
              "address": "0x399a6a13D298CF3F41a562966C1a450136Ea52C2",
              "type": "EOA"
            },
            {
              "address": "0xee8AE1F1B4B1E1956C8Bda27eeBCE54Cf0bb5eaB",
              "type": "EOA"
            },
            {
              "address": "0xe7CCD4F3feA7df88Cf9B59B30f738ec1E049231f",
              "type": "EOA"
            },
            {
              "address": "0xA093284c707e207C36E3FEf9e0B6325fd9d0e33B",
              "type": "EOA"
            },
            {
              "address": "0x225d3822De44E58eE935440E0c0B829C4232086e",
              "type": "MultiSig"
            }
          ],
          "description": "The Security Council's only role is to reduce the upgrade delay to zero if 9 of its members decide to do so. The council has 15 members which are hardcoded into the ZkSync contract. Changing the council requires a ZkSync contract upgrade.",
          "references": [
            {
              "text": "Security Council Members - Etherscan source code",
              "href": "https://etherscan.io/address/0x2eaa1377e0fc95de998b9fa7611e9d67eba534fd#code#F1#L128"
            },
            {
              "text": "Security Council 2.0 - Matter Labs blog post",
              "href": "https://blog.matter-labs.io/security-council-2-0-2337a555f17a"
            }
          ]
        },
        {
          "name": "Active validators",
          "accounts": [
            {
              "address": "0x01c3A1a6890A146aC187A019F9863B3Ab2BfF91e",
              "type": "EOA"
            }
          ],
          "description": "Those actors are allowed to propose, revert and execute L2 blocks on L1."
        },
        {
          "name": "Token listing beneficiary",
          "accounts": [
            {
              "address": "0x2A0a81e257a2f5D6eD4F07b81DbDa09F107bd027",
              "type": "EOA"
            }
          ],
          "description": "Account receiving fees for listing tokens. Can be updated by ZkSync Multisig."
        }
      ],
      "milestones": [
        {
          "name": "ZKsync 1.0 launch",
          "link": "https://blog.matter-labs.io/zksync-is-live-bringing-trustless-scalable-payments-to-ethereum-9c634b3e6823",
          "date": "2020-06-18T00:00:00Z",
          "description": "ZKsync is live, bringing scalable payments to Ethereum using ZK Rollup technology.",
          "type": "general"
        },
        {
          "name": "Rebranding",
          "link": "https://blog.matter-labs.io/all-aboard-zksync-era-mainnet-8b8964ba7c59#:~:text=ZKsync%201.0%20is%20now%20zkSync%20Lite",
          "date": "2023-02-16T00:00:00Z",
          "description": "ZKsync becomes ZKsync Lite.",
          "type": "general"
        }
      ]
    },
    {
      "type": "layer2",
      "id": "zora",
      "createdAt": "1687459278",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x6F54Ca6F6EdE96662024Ffd61BFd18f3f4e34DFf"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x2D778797049FE9259d947D1ED8e5442226dFB589#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xF243BEd163251380e78068d317ae10f26042B292#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xcA4571b1ecBeC86Ea2E660d242c1c29FcB55Dc72",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
              "type": "Contract"
            },
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x48247032092e7b0ecf5dEF611ad89eaf3fC888Dd",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x625726c858dBF78c0125436C943Bf4b4bE9d9033",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "LivenessModule",
          "accounts": [
            {
              "address": "0x0454092516c9A4d636d3CAfA1e82161376C8a748",
              "type": "Contract"
            }
          ],
          "chain": "ethereum",
          "description": "* Can act on behalf of SecurityCouncilMultisig.\n* Is a Guardian  (acting via SuperchainGuardianMultisig, SecurityCouncilMultisig).\n* used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig\n"
        },
        {
          "name": "SuperchainProxyAdminOwner",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Can act on behalf of SuperchainProxyAdmin, ProxyAdmin.\n* Can change configuration of Lib_AddressManager (acting via SuperchainProxyAdmin) - set and change address mappings.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of OptimismPortal, L1ERC721Bridge, L2OutputOracle, SystemConfig, OptimismMintableERC20Factory (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n* Can upgrade implementation of SuperchainConfig (acting via SuperchainProxyAdmin).\n",
          "accounts": [
            {
              "address": "0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            },
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "FoundationMultisig_2",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Can act on behalf of DeputyGuardianModule.\n* Is a Guardian  (acting via SuperchainGuardianMultisig, DeputyGuardianModule).\n",
          "accounts": [
            {
              "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SecurityCouncilMultisig",
          "description": "* This is a Gnosis Safe with 10 / 13 threshold. It uses the following modules: LivenessModule (used to remove members inactive for 98d while making sure that the threshold remains above 75%. If the number of members falls below 8, the FoundationMultisig_1 takes ownership of the multisig).\n* Member of SuperchainGuardianMultisig, SuperchainProxyAdminOwner.\n* Is a Guardian  (acting via SuperchainGuardianMultisig).\n",
          "accounts": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x07dC0893cAfbF810e3E72505041f2865726Fd073",
              "type": "EOA"
            },
            {
              "address": "0x0a122d8aA40758FBAFf0360BFB391EdFfD9758b8",
              "type": "EOA"
            },
            {
              "address": "0x1822b35B09f5ce1C78ecbC06AC0A4e17885b925e",
              "type": "EOA"
            },
            {
              "address": "0x4A7322258c9E690e4CB8Cea6e5251443E956e61E",
              "type": "EOA"
            },
            {
              "address": "0x51aCb8e1205De850D1b512584FeE9C29C3813dDa",
              "type": "EOA"
            },
            {
              "address": "0x5C0F529d5B025540c54f71d2BcbB4c78F368C47e",
              "type": "EOA"
            },
            {
              "address": "0x6323ef2b80030f3fBc508bFc321Fc71fDB95c865",
              "type": "EOA"
            },
            {
              "address": "0x74FAE9a9fbe31d1F69b95f59CaF12736a8b6B310",
              "type": "EOA"
            },
            {
              "address": "0x7ed8d9Af9eaA194D1A75C67c1475579E42289E39",
              "type": "EOA"
            },
            {
              "address": "0x8Afe777B5A4D1e156435ab44Ad4b73A318cE0EA4",
              "type": "EOA"
            },
            {
              "address": "0x9Eb11A55132c851b9991F148b3Af791ca498fD7A",
              "type": "EOA"
            },
            {
              "address": "0xbfA046B0bc5cEa1596be62B8b3f79f9f41f1E0d9",
              "type": "EOA"
            },
            {
              "address": "0xE895076cD050F1f042d1040E47b5929bE989E514",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ZoraMultisig",
          "description": "* This is a Gnosis Safe with 2 / 8 threshold. \n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n",
          "accounts": [
            {
              "address": "0xC72aE5c7cc9a332699305E29F68Be66c73b60542",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xf2989961Bf987bdD6c86CD6B845B6fACa194a8e4",
              "type": "EOA"
            },
            {
              "address": "0xe7d71aea6FB8248d4fD4D5d5098D201674B531dB",
              "type": "EOA"
            },
            {
              "address": "0xc08C1b8fD69A22a448fC014bEe4A700d70726dA7",
              "type": "EOA"
            },
            {
              "address": "0xD05e9Ab3B6A7F10ec1374bc352854ABA51643E81",
              "type": "EOA"
            },
            {
              "address": "0x5553a23a71Bc7985c8E58Ca08072D2Fa9D1D1F4c",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "ZoraMultisig2",
          "description": "* This is a Gnosis Safe with 4 / 6 threshold. \n* Is a Challenger.\n",
          "accounts": [
            {
              "address": "0xcA4571b1ecBeC86Ea2E660d242c1c29FcB55Dc72",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xf2989961Bf987bdD6c86CD6B845B6fACa194a8e4",
              "type": "EOA"
            },
            {
              "address": "0xe7d71aea6FB8248d4fD4D5d5098D201674B531dB",
              "type": "EOA"
            },
            {
              "address": "0xc08C1b8fD69A22a448fC014bEe4A700d70726dA7",
              "type": "EOA"
            },
            {
              "address": "0xD05e9Ab3B6A7F10ec1374bc352854ABA51643E81",
              "type": "EOA"
            },
            {
              "address": "0x5553a23a71Bc7985c8E58Ca08072D2Fa9D1D1F4c",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SuperchainGuardianMultisig",
          "description": "* This is a Gnosis Safe with 1 / 1 threshold. It uses the following modules: DeputyGuardianModule (allows the FoundationMultisig_2, called the deputy guardian, to act on behalf of the Gnosis Safe).\n* Can act as a Guardian.\n",
          "accounts": [
            {
              "address": "0x09f7150D8c019BeF34450d6920f6B3608ceFdAf2",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xc2819DC788505Aac350142A7A707BF9D03E3Bd03",
              "type": "MultiSig"
            }
          ]
        },
        {
          "name": "GnosisSafe",
          "description": "* This is a Gnosis Safe with 2 / 2 threshold. \n* Member of FoundationMultisig_1, FoundationMultisig_2.\n",
          "accounts": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0xb23794fd6BA1CEAd01Cf54D772b8341F2F0197A5",
              "type": "EOA"
            },
            {
              "address": "0x4665374939642965EfD8357D4568D2A77f677429",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "FoundationMultisig_1",
          "description": "* This is a Gnosis Safe with 5 / 7 threshold. \n* Member of SuperchainProxyAdminOwner.\n",
          "accounts": [
            {
              "address": "0x847B5c174615B1B7fDF770882256e2D3E95b9D92",
              "type": "MultiSig"
            }
          ],
          "chain": "ethereum",
          "references": null,
          "participants": [
            {
              "address": "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
              "type": "MultiSig"
            },
            {
              "address": "0x3041BA32f451F5850c147805F5521AC206421623",
              "type": "EOA"
            },
            {
              "address": "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
              "type": "EOA"
            },
            {
              "address": "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
              "type": "EOA"
            },
            {
              "address": "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
              "type": "EOA"
            },
            {
              "address": "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
              "type": "EOA"
            },
            {
              "address": "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x48247032092e7b0ecf5dEF611ad89eaf3fC888Dd",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x625726c858dBF78c0125436C943Bf4b4bE9d9033",
              "type": "EOA"
            }
          ],
          "chain": "ethereum",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "OptimismPortal",
            "address": "0x1a0ad011913A150f69f6A19DF447A0CfD9551054",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49"],
              "implementations": ["0x2D778797049FE9259d947D1ED8e5442226dFB589"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "LivenessGuard",
            "address": "0x24424336F04440b1c28685a38303aC33C9D14a25",
            "upgradeability": null,
            "chain": "ethereum",
            "description": ""
          },
          {
            "name": "L1StandardBridge",
            "address": "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49"],
              "implementations": ["0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"]
            },
            "chain": "ethereum",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainProxyAdmin",
            "address": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure Lib_AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SuperchainConfig.\n"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x83A4521A3573Ca87f3a971B169C5A0E1d34481c3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49"],
              "implementations": ["0xAE2AF01232a6c4a4d3012C5eC5b1b35059caF10d"]
            },
            "chain": "ethereum",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x543bA4AADBAb8f9025686Bd03993043599c6fB04"],
              "implementations": ["0x53c165169401764778F780a69701385eb0FF19B7"]
            },
            "chain": "ethereum",
            "description": "Used to manage global configuration values for multiple OP Chains within a single Superchain network. The SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the Superchain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0x9E6204F750cD866b299594e2aC9eA824E2e5f95c",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49"],
              "implementations": ["0xF243BEd163251380e78068d317ae10f26042B292"]
            },
            "chain": "ethereum",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0xA3cAB0126d5F504B071b81a3e8A2BBBF17930d86",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49"],
              "implementations": ["0xba2492e52F45651B60B8B38d4Ea5E2390C64Ffb1"]
            },
            "chain": "ethereum",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0xc52BC7344e24e39dF1bf026fe05C4e6E23CfBcFf",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49"],
              "implementations": ["0xE01efbeb1089D1d1dB9c6c8b135C934C0734c846"]
            },
            "chain": "ethereum",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["SuperchainProxyAdminOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of OptimismPortal, L1ERC721Bridge, L2OutputOracle, SystemConfig, OptimismMintableERC20Factory.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0xdC40a14d9abd6F410226f1E6de71aE03441ca506",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"],
              "immutable": false
            },
            "chain": "ethereum",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "Lib_AddressManager",
            "address": "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "AddressManager",
            "address": "0xEF8115F2733fb2033a7c756402Fc1deaa56550Ef",
            "upgradeability": null,
            "chain": "ethereum",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [
        {
          "name": "Zora starts using blobs",
          "link": "https://twitter.com/Optimism/status/1768235284494450922",
          "date": "2024-03-14T00:00:00Z",
          "description": "Zora starts publishing data to blobs.",
          "type": "general"
        },
        {
          "name": "Zora Network Launch",
          "link": "https://twitter.com/ourZORA/status/1671602234994622464",
          "date": "2023-06-21T00:00:00Z",
          "description": "Zora Network is live on mainnet.",
          "type": "general"
        }
      ],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Superchain", "Conduit", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "display": {
        "purposes": ["Universal", "NFT"],
        "architectureImage": "bedrock-superchain",
        "name": "Zora",
        "slug": "zora",
        "description": "Zora is a fast, cost-efficient, and scalable Layer 2 built to help bring media onchain, powered by the OP Stack.",
        "links": {
          "websites": ["https://zora.energy/", "https://zora.co/"],
          "apps": [],
          "documentation": ["https://docs.zora.co/docs/zora-network/intro"],
          "explorers": [
            "https://explorer.zora.energy/",
            "https://zora.superscan.network"
          ],
          "repositories": ["https://github.com/ourzora/optimism"],
          "socialMedia": [
            "https://twitter.com/ourZORA",
            "https://instagram.com/our.zora",
            "https://zora.community"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": null,
        "liveness": {
          "warnings": {
            "stateUpdates": "Please note, for Optimistic rollups the state is not finalized until the challenge period passes."
          },
          "explanation": "Zora is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."
        },
        "finality": {
          "warnings": {
            "timeToInclusion": {
              "sentiment": "neutral",
              "value": "It's assumed that transaction data batches are submitted sequentially."
            }
          },
          "finalizationPeriod": 604800
        }
      },
      "chainConfig": null,
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x1a0ad011913A150f69f6A19DF447A0CfD9551054",
            "newVersion": true,
            "sinceTimestamp": "1686694031",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x1a0ad011913A150f69f6A19DF447A0CfD9551054",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49"],
                "implementations": [
                  "0x2D778797049FE9259d947D1ED8e5442226dFB589"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631",
            "newVersion": true,
            "sinceTimestamp": "1686693995",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49"],
                "implementations": [
                  "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "ethereum",
            "includeInTotal": true,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.zora.energy",
          "defaultCallsPerMinute": 1500
        },
        "trackedTxs": [
          {
            "uses": [
              { "type": "liveness", "subtype": "batchSubmissions" },
              { "type": "l2costs", "subtype": "batchSubmissions" }
            ],
            "query": {
              "formula": "transfer",
              "from": "0x625726c858dBF78c0125436C943Bf4b4bE9d9033",
              "to": "0x6F54Ca6F6EdE96662024Ffd61BFd18f3f4e34DFf",
              "sinceTimestamp": "1686695915"
            }
          },
          {
            "uses": [
              { "type": "liveness", "subtype": "stateUpdates" },
              { "type": "l2costs", "subtype": "stateUpdates" }
            ],
            "query": {
              "formula": "functionCall",
              "address": "0x9E6204F750cD866b299594e2aC9eA824E2e5f95c",
              "selector": "0x9aaab648",
              "functionSignature": "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1Blockhash, uint256 _l1BlockNumber)",
              "sinceTimestamp": "1686694007"
            }
          }
        ],
        "finality": {
          "type": "OPStack-blob",
          "genesisTimestamp": "1686693839",
          "minTimestamp": "1710386579",
          "l2BlockTimeSeconds": 2,
          "lag": 0,
          "stateUpdate": "disabled"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/ethereum-optimism/optimism/tree/develop/op-node)"
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": null
      },
      "stateDerivation": {
        "nodeSoftware": "The rollup node is composed of two software components: [op-node](https://github.com/ethereum-optimism/optimism/tree/develop/op-node), implementing consensus related logic, and [op-geth](https://github.com/ethereum-optimism/op-geth), implementing execution logic. The configuration file can be found [here](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/configs/mainnet/zora.toml).",
        "compressionScheme": "Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.",
        "genesisState": "The genesis file can be found [here](https://github.com/ethereum-optimism/superchain-registry/tree/main/superchain/extra/genesis/mainnet).",
        "dataFormat": "The format specification of Sequencer's data batches can be found [here](https://blog.oplabs.co/reproduce-bedrock-migration/)."
      },
      "upgradesAndGovernance": null
    }
  ],
  "meta": {
    "values": {
      "0.createdAt": [["custom", "UnixTime"]],
      "0.badges": ["undefined"],
      "1.createdAt": [["custom", "UnixTime"]],
      "1.permissions.4.references": ["undefined"],
      "1.nativePermissions": ["undefined"],
      "1.contracts.addresses.1.upgradeability": ["undefined"],
      "1.contracts.addresses.4.upgradeability": ["undefined"],
      "1.contracts.nativeAddresses": ["undefined"],
      "1.display.warning": ["undefined"],
      "1.display.liveness": ["undefined"],
      "1.display.finality": ["undefined"],
      "1.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "1.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "1.config.escrows.0.excludedTokens": ["undefined"],
      "1.config.escrows.0.premintedTokens": ["undefined"],
      "1.config.escrows.0.contract.name": ["undefined"],
      "1.config.escrows.0.isUpcoming": ["undefined"],
      "1.config.escrows.0.source": ["undefined"],
      "1.config.escrows.0.bridgedUsing": ["undefined"],
      "1.config.escrows.0.isHistorical": ["undefined"],
      "1.config.escrows.0.untilTimestamp": ["undefined"],
      "1.config.escrows.0.sharedEscrow": ["undefined"],
      "1.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "1.config.escrows.1.excludedTokens": ["undefined"],
      "1.config.escrows.1.premintedTokens": ["undefined"],
      "1.config.escrows.1.contract.name": ["undefined"],
      "1.config.escrows.1.isUpcoming": ["undefined"],
      "1.config.escrows.1.source": ["undefined"],
      "1.config.escrows.1.bridgedUsing": ["undefined"],
      "1.config.escrows.1.isHistorical": ["undefined"],
      "1.config.escrows.1.untilTimestamp": ["undefined"],
      "1.config.escrows.1.sharedEscrow": ["undefined"],
      "1.config.trackedTxs": ["undefined"],
      "1.config.finality": ["undefined"],
      "1.riskView.stateValidation.definingMetric": ["number"],
      "1.riskView.exitWindow.secondLine": ["undefined"],
      "1.riskView.proposerFailure.definingMetric": ["number"],
      "1.stateDerivation": ["undefined"],
      "1.upgradesAndGovernance": ["undefined"],
      "2.createdAt": [["custom", "UnixTime"]],
      "2.badges": ["undefined"],
      "3.createdAt": [["custom", "UnixTime"]],
      "3.contracts.addresses.7.upgradeability": ["undefined"],
      "3.contracts.addresses.8.upgradeability": ["undefined"],
      "3.contracts.addresses.9.upgradeability": ["undefined"],
      "3.contracts.addresses.10.upgradeability": ["undefined"],
      "3.contracts.addresses.11.upgradeability": ["undefined"],
      "3.contracts.nativeAddresses": ["undefined"],
      "3.chainConfig": ["undefined"],
      "3.technology.stateCorrectness": ["undefined"],
      "3.nativePermissions": ["undefined"],
      "3.stateDerivation": ["undefined"],
      "3.upgradesAndGovernance": ["undefined"],
      "3.knowledgeNuggets": ["undefined"],
      "3.display.liveness": ["undefined"],
      "3.riskView.exitWindow.secondLine": ["undefined"],
      "3.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "3.config.escrows.0.excludedTokens": ["undefined"],
      "3.config.escrows.0.premintedTokens": ["undefined"],
      "3.config.escrows.0.contract.name": ["undefined"],
      "3.config.escrows.0.isUpcoming": ["undefined"],
      "3.config.escrows.0.source": ["undefined"],
      "3.config.escrows.0.bridgedUsing": ["undefined"],
      "3.config.escrows.0.isHistorical": ["undefined"],
      "3.config.escrows.0.untilTimestamp": ["undefined"],
      "3.config.escrows.0.sharedEscrow": ["undefined"],
      "3.config.trackedTxs": ["undefined"],
      "4.createdAt": [["custom", "UnixTime"]],
      "4.badges": ["undefined"],
      "5.createdAt": [["custom", "UnixTime"]],
      "5.permissions.5.references": ["undefined"],
      "5.permissions.6.references": ["undefined"],
      "5.nativePermissions": ["undefined"],
      "5.contracts.nativeAddresses": ["undefined"],
      "5.discoveryDrivenData": ["undefined"],
      "5.display.warning": ["undefined"],
      "5.display.liveness": ["undefined"],
      "5.display.finality": ["undefined"],
      "5.chainConfig": ["undefined"],
      "5.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "5.config.escrows.0.excludedTokens": ["undefined"],
      "5.config.escrows.0.premintedTokens": ["undefined"],
      "5.config.escrows.0.contract.name": ["undefined"],
      "5.config.escrows.0.isUpcoming": ["undefined"],
      "5.config.escrows.0.source": ["undefined"],
      "5.config.escrows.0.bridgedUsing": ["undefined"],
      "5.config.escrows.0.isHistorical": ["undefined"],
      "5.config.escrows.0.untilTimestamp": ["undefined"],
      "5.config.escrows.0.sharedEscrow": ["undefined"],
      "5.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "5.config.escrows.1.excludedTokens": ["undefined"],
      "5.config.escrows.1.premintedTokens": ["undefined"],
      "5.config.escrows.1.contract.name": ["undefined"],
      "5.config.escrows.1.isUpcoming": ["undefined"],
      "5.config.escrows.1.source": ["undefined"],
      "5.config.escrows.1.bridgedUsing": ["undefined"],
      "5.config.escrows.1.isHistorical": ["undefined"],
      "5.config.escrows.1.untilTimestamp": ["undefined"],
      "5.config.escrows.1.sharedEscrow": ["undefined"],
      "5.config.trackedTxs": ["undefined"],
      "5.config.finality": ["undefined"],
      "5.riskView.stateValidation.definingMetric": ["number"],
      "5.riskView.exitWindow.secondLine": ["undefined"],
      "5.riskView.proposerFailure.definingMetric": ["number"],
      "5.stateDerivation": ["undefined"],
      "5.upgradesAndGovernance": ["undefined"],
      "6.createdAt": [["custom", "UnixTime"]],
      "6.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "6.config.escrows.0.excludedTokens": ["undefined"],
      "6.config.escrows.0.premintedTokens": ["undefined"],
      "6.config.escrows.0.contract.name": ["undefined"],
      "6.config.escrows.0.contract.description": ["undefined"],
      "6.config.escrows.0.contract.upgradableBy": ["undefined"],
      "6.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "6.config.escrows.0.isUpcoming": ["undefined"],
      "6.config.escrows.0.source": ["undefined"],
      "6.config.escrows.0.bridgedUsing": ["undefined"],
      "6.config.escrows.0.isHistorical": ["undefined"],
      "6.config.escrows.0.untilTimestamp": ["undefined"],
      "6.config.escrows.0.sharedEscrow": ["undefined"],
      "6.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "6.config.escrows.1.excludedTokens": ["undefined"],
      "6.config.escrows.1.premintedTokens": ["undefined"],
      "6.config.escrows.1.contract.name": ["undefined"],
      "6.config.escrows.1.contract.description": ["undefined"],
      "6.config.escrows.1.contract.upgradableBy": ["undefined"],
      "6.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "6.config.escrows.1.isUpcoming": ["undefined"],
      "6.config.escrows.1.source": ["undefined"],
      "6.config.escrows.1.bridgedUsing": ["undefined"],
      "6.config.escrows.1.isHistorical": ["undefined"],
      "6.config.escrows.1.untilTimestamp": ["undefined"],
      "6.config.escrows.1.sharedEscrow": ["undefined"],
      "6.config.transactionApi.sinceTimestamp": [["custom", "UnixTime"]],
      "6.riskView.stateValidation.definingMetric": ["number"],
      "6.riskView.exitWindow.secondLine": ["undefined"],
      "6.riskView.proposerFailure.definingMetric": ["number"],
      "6.contracts.addresses.2.upgradeability": ["undefined"],
      "6.contracts.addresses.3.upgradeability": ["undefined"],
      "6.contracts.addresses.4.upgradeability": ["undefined"],
      "6.contracts.addresses.5.upgradeability": ["undefined"],
      "6.contracts.addresses.6.upgradeability": ["undefined"],
      "6.contracts.addresses.8.upgradeability": ["undefined"],
      "6.contracts.addresses.9.upgradeability": ["undefined"],
      "6.contracts.addresses.10.upgradeability": ["undefined"],
      "6.contracts.addresses.11.upgradeability": ["undefined"],
      "6.contracts.addresses.12.upgradeability": ["undefined"],
      "6.contracts.addresses.13.upgradeability": ["undefined"],
      "6.permissions.7.references": ["undefined"],
      "7.createdAt": [["custom", "UnixTime"]],
      "7.contracts.addresses.9.upgradeability": ["undefined"],
      "7.contracts.addresses.10.upgradeability": ["undefined"],
      "7.contracts.addresses.11.upgradeability": ["undefined"],
      "7.contracts.addresses.12.upgradeability": ["undefined"],
      "7.contracts.addresses.13.upgradeability": ["undefined"],
      "7.contracts.nativeAddresses.arbitrum.6.upgradeability": ["undefined"],
      "7.contracts.nativeAddresses.arbitrum.7.upgradeability": ["undefined"],
      "7.contracts.nativeAddresses.arbitrum.8.upgradeability": ["undefined"],
      "7.contracts.nativeAddresses.arbitrum.9.upgradeability": ["undefined"],
      "7.contracts.nativeAddresses.arbitrum.10.upgradeability": ["undefined"],
      "7.contracts.nativeAddresses.arbitrum.16.upgradeability": ["undefined"],
      "7.contracts.nativeAddresses.arbitrum.17.upgradeability": ["undefined"],
      "7.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "7.technology.stateCorrectness": ["undefined"],
      "7.permissions.4.references": ["undefined"],
      "7.nativePermissions.arbitrum.0.references": ["undefined"],
      "7.nativePermissions.arbitrum.1.references": ["undefined"],
      "7.stage.message": ["undefined"],
      "7.riskView.dataAvailability.definingMetric": ["number"],
      "7.riskView.exitWindow.secondLine": ["undefined"],
      "7.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.escrows.0.excludedTokens": ["undefined"],
      "7.config.escrows.0.premintedTokens": ["undefined"],
      "7.config.escrows.0.contract.name": ["undefined"],
      "7.config.escrows.0.isUpcoming": ["undefined"],
      "7.config.escrows.0.source": ["undefined"],
      "7.config.escrows.0.bridgedUsing": ["undefined"],
      "7.config.escrows.0.isHistorical": ["undefined"],
      "7.config.escrows.0.untilTimestamp": ["undefined"],
      "7.config.escrows.0.sharedEscrow": ["undefined"],
      "7.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.escrows.1.excludedTokens": ["undefined"],
      "7.config.escrows.1.premintedTokens": ["undefined"],
      "7.config.escrows.1.contract.name": ["undefined"],
      "7.config.escrows.1.isUpcoming": ["undefined"],
      "7.config.escrows.1.source": ["undefined"],
      "7.config.escrows.1.bridgedUsing": ["undefined"],
      "7.config.escrows.1.isHistorical": ["undefined"],
      "7.config.escrows.1.untilTimestamp": ["undefined"],
      "7.config.escrows.1.sharedEscrow": ["undefined"],
      "7.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.escrows.2.premintedTokens": ["undefined"],
      "7.config.escrows.2.contract.name": ["undefined"],
      "7.config.escrows.2.isUpcoming": ["undefined"],
      "7.config.escrows.2.source": ["undefined"],
      "7.config.escrows.2.bridgedUsing": ["undefined"],
      "7.config.escrows.2.isHistorical": ["undefined"],
      "7.config.escrows.2.untilTimestamp": ["undefined"],
      "7.config.escrows.2.sharedEscrow": ["undefined"],
      "7.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.escrows.3.excludedTokens": ["undefined"],
      "7.config.escrows.3.premintedTokens": ["undefined"],
      "7.config.escrows.3.contract.name": ["undefined"],
      "7.config.escrows.3.contract.upgradeability": ["undefined"],
      "7.config.escrows.3.contract.upgradableBy": ["undefined"],
      "7.config.escrows.3.contract.upgradeDelay": ["undefined"],
      "7.config.escrows.3.isUpcoming": ["undefined"],
      "7.config.escrows.3.source": ["undefined"],
      "7.config.escrows.3.bridgedUsing": ["undefined"],
      "7.config.escrows.3.isHistorical": ["undefined"],
      "7.config.escrows.3.untilTimestamp": ["undefined"],
      "7.config.escrows.3.sharedEscrow": ["undefined"],
      "7.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.escrows.4.excludedTokens": ["undefined"],
      "7.config.escrows.4.premintedTokens": ["undefined"],
      "7.config.escrows.4.contract.name": ["undefined"],
      "7.config.escrows.4.contract.upgradableBy": ["undefined"],
      "7.config.escrows.4.contract.upgradeDelay": ["undefined"],
      "7.config.escrows.4.isUpcoming": ["undefined"],
      "7.config.escrows.4.source": ["undefined"],
      "7.config.escrows.4.bridgedUsing": ["undefined"],
      "7.config.escrows.4.isHistorical": ["undefined"],
      "7.config.escrows.4.untilTimestamp": ["undefined"],
      "7.config.escrows.4.sharedEscrow": ["undefined"],
      "7.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.escrows.5.excludedTokens": ["undefined"],
      "7.config.escrows.5.premintedTokens": ["undefined"],
      "7.config.escrows.5.contract.name": ["undefined"],
      "7.config.escrows.5.contract.upgradeability": ["undefined"],
      "7.config.escrows.5.contract.upgradableBy": ["undefined"],
      "7.config.escrows.5.contract.upgradeDelay": ["undefined"],
      "7.config.escrows.5.isUpcoming": ["undefined"],
      "7.config.escrows.5.source": ["undefined"],
      "7.config.escrows.5.bridgedUsing": ["undefined"],
      "7.config.escrows.5.isHistorical": ["undefined"],
      "7.config.escrows.5.untilTimestamp": ["undefined"],
      "7.config.escrows.5.sharedEscrow": ["undefined"],
      "7.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "7.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "8.createdAt": [["custom", "UnixTime"]],
      "8.badges": ["undefined"],
      "9.createdAt": [["custom", "UnixTime"]],
      "9.badges": ["undefined"],
      "10.createdAt": [["custom", "UnixTime"]],
      "10.display.tvlWarning": ["undefined"],
      "10.config.associatedTokens": ["undefined"],
      "10.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "10.config.escrows.0.excludedTokens": ["undefined"],
      "10.config.escrows.0.premintedTokens": ["undefined"],
      "10.config.escrows.0.contract.name": ["undefined"],
      "10.config.escrows.0.contract.description": ["undefined"],
      "10.config.escrows.0.contract.upgradableBy": ["undefined"],
      "10.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "10.config.escrows.0.isUpcoming": ["undefined"],
      "10.config.escrows.0.source": ["undefined"],
      "10.config.escrows.0.bridgedUsing": ["undefined"],
      "10.config.escrows.0.isHistorical": ["undefined"],
      "10.config.escrows.0.untilTimestamp": ["undefined"],
      "10.config.trackedTxs": ["undefined"],
      "10.config.finality": ["undefined"],
      "10.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "10.riskView.stateValidation.definingMetric": ["number"],
      "10.riskView.exitWindow.secondLine": ["undefined"],
      "10.stateValidation": ["undefined"],
      "10.permissions.2.references": ["undefined"],
      "10.permissions.4.references": ["undefined"],
      "10.permissions.5.references": ["undefined"],
      "10.contracts.addresses.2.upgradeability": ["undefined"],
      "10.contracts.addresses.6.upgradeability": ["undefined"],
      "10.upgradesAndGovernance": ["undefined"],
      "11.createdAt": [["custom", "UnixTime"]],
      "11.contracts.addresses.7.upgradeability": ["undefined"],
      "11.contracts.addresses.8.upgradeability": ["undefined"],
      "11.contracts.addresses.9.upgradeability": ["undefined"],
      "11.contracts.addresses.10.upgradeability": ["undefined"],
      "11.contracts.addresses.11.upgradeability": ["undefined"],
      "11.contracts.nativeAddresses": ["undefined"],
      "11.chainConfig": ["undefined"],
      "11.technology.stateCorrectness": ["undefined"],
      "11.permissions.2.references": ["undefined"],
      "11.nativePermissions": ["undefined"],
      "11.stateDerivation": ["undefined"],
      "11.upgradesAndGovernance": ["undefined"],
      "11.knowledgeNuggets": ["undefined"],
      "11.display.liveness": ["undefined"],
      "11.riskView.exitWindow.secondLine": ["undefined"],
      "11.config.associatedTokens": ["undefined"],
      "11.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "11.config.escrows.0.excludedTokens": ["undefined"],
      "11.config.escrows.0.premintedTokens": ["undefined"],
      "11.config.escrows.0.contract.name": ["undefined"],
      "11.config.escrows.0.isUpcoming": ["undefined"],
      "11.config.escrows.0.source": ["undefined"],
      "11.config.escrows.0.bridgedUsing": ["undefined"],
      "11.config.escrows.0.isHistorical": ["undefined"],
      "11.config.escrows.0.untilTimestamp": ["undefined"],
      "11.config.escrows.0.sharedEscrow": ["undefined"],
      "11.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "11.config.escrows.1.excludedTokens": ["undefined"],
      "11.config.escrows.1.premintedTokens": ["undefined"],
      "11.config.escrows.1.contract.name": ["undefined"],
      "11.config.escrows.1.contract.upgradableBy": ["undefined"],
      "11.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "11.config.escrows.1.isUpcoming": ["undefined"],
      "11.config.escrows.1.source": ["undefined"],
      "11.config.escrows.1.bridgedUsing": ["undefined"],
      "11.config.escrows.1.isHistorical": ["undefined"],
      "11.config.escrows.1.untilTimestamp": ["undefined"],
      "11.config.escrows.1.sharedEscrow": ["undefined"],
      "11.config.trackedTxs": ["undefined"],
      "12.createdAt": [["custom", "UnixTime"]],
      "12.badges": ["undefined"],
      "13.createdAt": [["custom", "UnixTime"]],
      "13.badges": ["undefined"],
      "14.createdAt": [["custom", "UnixTime"]],
      "14.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "14.riskView.stateValidation.definingMetric": ["number"],
      "14.riskView.dataAvailability.definingMetric": ["number"],
      "14.riskView.exitWindow.definingMetric": ["number"],
      "14.riskView.sequencerFailure.definingMetric": ["undefined"],
      "14.stage.missing": ["undefined"],
      "14.stage.message": ["undefined"],
      "14.contracts.addresses.0.upgradeability": ["undefined"],
      "14.contracts.addresses.1.upgradeability": ["undefined"],
      "14.contracts.addresses.2.upgradeability": ["undefined"],
      "15.createdAt": [["custom", "UnixTime"]],
      "15.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "15.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "15.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "15.riskView.stateValidation.definingMetric": ["number"],
      "15.riskView.dataAvailability.definingMetric": ["number"],
      "15.riskView.exitWindow.definingMetric": ["number"],
      "15.riskView.sequencerFailure.definingMetric": ["undefined"],
      "15.stage.missing": ["undefined"],
      "15.stage.message": ["undefined"],
      "15.contracts.addresses.2.upgradeability": ["undefined"],
      "15.contracts.addresses.3.upgradeability": ["undefined"],
      "16.createdAt": [["custom", "UnixTime"]],
      "16.badges": ["undefined"],
      "17.createdAt": [["custom", "UnixTime"]],
      "17.permissions.5.references": ["undefined"],
      "17.permissions.6.references": ["undefined"],
      "17.permissions.7.references": ["undefined"],
      "17.permissions.8.references": ["undefined"],
      "17.permissions.9.references": ["undefined"],
      "17.permissions.10.references": ["undefined"],
      "17.permissions.11.references": ["undefined"],
      "17.permissions.12.references": ["undefined"],
      "17.permissions.13.references": ["undefined"],
      "17.nativePermissions": ["undefined"],
      "17.contracts.addresses.0.upgradeability": ["undefined"],
      "17.contracts.addresses.2.upgradeability": ["undefined"],
      "17.contracts.addresses.5.upgradeability": ["undefined"],
      "17.contracts.addresses.8.upgradeability": ["undefined"],
      "17.contracts.addresses.11.upgradeability": ["undefined"],
      "17.contracts.addresses.14.upgradeability": ["undefined"],
      "17.contracts.nativeAddresses": ["undefined"],
      "17.display.warning": ["undefined"],
      "17.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "17.config.associatedTokens": ["undefined"],
      "17.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.0.excludedTokens": ["undefined"],
      "17.config.escrows.0.premintedTokens": ["undefined"],
      "17.config.escrows.0.contract.name": ["undefined"],
      "17.config.escrows.0.isUpcoming": ["undefined"],
      "17.config.escrows.0.source": ["undefined"],
      "17.config.escrows.0.bridgedUsing": ["undefined"],
      "17.config.escrows.0.isHistorical": ["undefined"],
      "17.config.escrows.0.untilTimestamp": ["undefined"],
      "17.config.escrows.0.sharedEscrow": ["undefined"],
      "17.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.1.premintedTokens": ["undefined"],
      "17.config.escrows.1.contract.name": ["undefined"],
      "17.config.escrows.1.isUpcoming": ["undefined"],
      "17.config.escrows.1.source": ["undefined"],
      "17.config.escrows.1.bridgedUsing": ["undefined"],
      "17.config.escrows.1.isHistorical": ["undefined"],
      "17.config.escrows.1.untilTimestamp": ["undefined"],
      "17.config.escrows.1.sharedEscrow": ["undefined"],
      "17.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.2.excludedTokens": ["undefined"],
      "17.config.escrows.2.premintedTokens": ["undefined"],
      "17.config.escrows.2.contract.name": ["undefined"],
      "17.config.escrows.2.contract.upgradableBy": ["undefined"],
      "17.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "17.config.escrows.2.isUpcoming": ["undefined"],
      "17.config.escrows.2.source": ["undefined"],
      "17.config.escrows.2.bridgedUsing": ["undefined"],
      "17.config.escrows.2.isHistorical": ["undefined"],
      "17.config.escrows.2.untilTimestamp": ["undefined"],
      "17.config.escrows.2.sharedEscrow": ["undefined"],
      "17.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "17.config.finality.genesisTimestamp": [["custom", "UnixTime"]],
      "17.riskView.stateValidation.definingMetric": ["number"],
      "17.riskView.dataAvailability.definingMetric": ["number"],
      "17.riskView.exitWindow.secondLine": ["undefined"],
      "17.riskView.proposerFailure.definingMetric": ["number"],
      "17.stage.message": ["undefined"],
      "17.upgradesAndGovernance": ["undefined"],
      "18.createdAt": [["custom", "UnixTime"]],
      "18.permissions.5.references": ["undefined"],
      "18.permissions.6.references": ["undefined"],
      "18.nativePermissions": ["undefined"],
      "18.contracts.addresses.0.upgradeability": ["undefined"],
      "18.contracts.addresses.3.upgradeability": ["undefined"],
      "18.contracts.addresses.13.upgradeability": ["undefined"],
      "18.contracts.nativeAddresses": ["undefined"],
      "18.display.warning": ["undefined"],
      "18.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "18.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "18.config.escrows.0.excludedTokens": ["undefined"],
      "18.config.escrows.0.premintedTokens": ["undefined"],
      "18.config.escrows.0.contract.name": ["undefined"],
      "18.config.escrows.0.isUpcoming": ["undefined"],
      "18.config.escrows.0.source": ["undefined"],
      "18.config.escrows.0.bridgedUsing": ["undefined"],
      "18.config.escrows.0.isHistorical": ["undefined"],
      "18.config.escrows.0.untilTimestamp": ["undefined"],
      "18.config.escrows.0.sharedEscrow": ["undefined"],
      "18.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "18.config.escrows.1.excludedTokens": ["undefined"],
      "18.config.escrows.1.premintedTokens": ["undefined"],
      "18.config.escrows.1.contract.name": ["undefined"],
      "18.config.escrows.1.isUpcoming": ["undefined"],
      "18.config.escrows.1.source": ["undefined"],
      "18.config.escrows.1.bridgedUsing": ["undefined"],
      "18.config.escrows.1.isHistorical": ["undefined"],
      "18.config.escrows.1.untilTimestamp": ["undefined"],
      "18.config.escrows.1.sharedEscrow": ["undefined"],
      "18.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "18.config.escrows.2.excludedTokens": ["undefined"],
      "18.config.escrows.2.premintedTokens": ["undefined"],
      "18.config.escrows.2.contract.upgradableBy": ["undefined"],
      "18.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "18.config.escrows.2.isUpcoming": ["undefined"],
      "18.config.escrows.2.source": ["undefined"],
      "18.config.escrows.2.bridgedUsing": ["undefined"],
      "18.config.escrows.2.isHistorical": ["undefined"],
      "18.config.escrows.2.untilTimestamp": ["undefined"],
      "18.config.escrows.2.sharedEscrow": ["undefined"],
      "18.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "18.config.escrows.3.excludedTokens": ["undefined"],
      "18.config.escrows.3.premintedTokens": ["undefined"],
      "18.config.escrows.3.contract.upgradableBy": ["undefined"],
      "18.config.escrows.3.contract.upgradeDelay": ["undefined"],
      "18.config.escrows.3.isUpcoming": ["undefined"],
      "18.config.escrows.3.source": ["undefined"],
      "18.config.escrows.3.bridgedUsing": ["undefined"],
      "18.config.escrows.3.isHistorical": ["undefined"],
      "18.config.escrows.3.untilTimestamp": ["undefined"],
      "18.config.escrows.3.sharedEscrow": ["undefined"],
      "18.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "18.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "18.riskView.stateValidation.definingMetric": ["number"],
      "18.riskView.dataAvailability.definingMetric": ["number"],
      "18.riskView.exitWindow.secondLine": ["undefined"],
      "18.riskView.proposerFailure.definingMetric": ["number"],
      "18.stage.message": ["undefined"],
      "18.upgradesAndGovernance": ["undefined"],
      "19.createdAt": [["custom", "UnixTime"]],
      "19.permissions.4.references": ["undefined"],
      "19.nativePermissions": ["undefined"],
      "19.contracts.addresses.1.upgradeability": ["undefined"],
      "19.contracts.addresses.8.upgradeability": ["undefined"],
      "19.contracts.nativeAddresses": ["undefined"],
      "19.display.warning": ["undefined"],
      "19.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "19.config.associatedTokens": ["undefined"],
      "19.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.0.excludedTokens": ["undefined"],
      "19.config.escrows.0.premintedTokens": ["undefined"],
      "19.config.escrows.0.contract.name": ["undefined"],
      "19.config.escrows.0.isUpcoming": ["undefined"],
      "19.config.escrows.0.source": ["undefined"],
      "19.config.escrows.0.bridgedUsing": ["undefined"],
      "19.config.escrows.0.isHistorical": ["undefined"],
      "19.config.escrows.0.untilTimestamp": ["undefined"],
      "19.config.escrows.0.sharedEscrow": ["undefined"],
      "19.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.1.premintedTokens": ["undefined"],
      "19.config.escrows.1.contract.name": ["undefined"],
      "19.config.escrows.1.isUpcoming": ["undefined"],
      "19.config.escrows.1.source": ["undefined"],
      "19.config.escrows.1.bridgedUsing": ["undefined"],
      "19.config.escrows.1.isHistorical": ["undefined"],
      "19.config.escrows.1.untilTimestamp": ["undefined"],
      "19.config.escrows.1.sharedEscrow": ["undefined"],
      "19.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.2.excludedTokens": ["undefined"],
      "19.config.escrows.2.premintedTokens": ["undefined"],
      "19.config.escrows.2.contract.name": ["undefined"],
      "19.config.escrows.2.contract.description": ["undefined"],
      "19.config.escrows.2.contract.upgradableBy": ["undefined"],
      "19.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "19.config.escrows.2.isUpcoming": ["undefined"],
      "19.config.escrows.2.source": ["undefined"],
      "19.config.escrows.2.bridgedUsing": ["undefined"],
      "19.config.escrows.2.isHistorical": ["undefined"],
      "19.config.escrows.2.untilTimestamp": ["undefined"],
      "19.config.escrows.2.sharedEscrow": ["undefined"],
      "19.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.3.excludedTokens": ["undefined"],
      "19.config.escrows.3.premintedTokens": ["undefined"],
      "19.config.escrows.3.contract.name": ["undefined"],
      "19.config.escrows.3.contract.description": ["undefined"],
      "19.config.escrows.3.contract.upgradableBy": ["undefined"],
      "19.config.escrows.3.contract.upgradeDelay": ["undefined"],
      "19.config.escrows.3.isUpcoming": ["undefined"],
      "19.config.escrows.3.source": ["undefined"],
      "19.config.escrows.3.bridgedUsing": ["undefined"],
      "19.config.escrows.3.isHistorical": ["undefined"],
      "19.config.escrows.3.untilTimestamp": ["undefined"],
      "19.config.escrows.3.sharedEscrow": ["undefined"],
      "19.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.finality": ["undefined"],
      "19.riskView.stateValidation.definingMetric": ["number"],
      "19.riskView.dataAvailability.definingMetric": ["number"],
      "19.riskView.exitWindow.secondLine": ["undefined"],
      "19.riskView.proposerFailure.definingMetric": ["number"],
      "19.stateDerivation": ["undefined"],
      "19.upgradesAndGovernance": ["undefined"],
      "20.createdAt": [["custom", "UnixTime"]],
      "20.permissions.4.references": ["undefined"],
      "20.nativePermissions": ["undefined"],
      "20.contracts.addresses.3.upgradeability": ["undefined"],
      "20.contracts.addresses.5.upgradeability": ["undefined"],
      "20.contracts.nativeAddresses": ["undefined"],
      "20.display.warning": ["undefined"],
      "20.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "20.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "20.config.escrows.0.excludedTokens": ["undefined"],
      "20.config.escrows.0.premintedTokens": ["undefined"],
      "20.config.escrows.0.contract.name": ["undefined"],
      "20.config.escrows.0.isUpcoming": ["undefined"],
      "20.config.escrows.0.source": ["undefined"],
      "20.config.escrows.0.bridgedUsing": ["undefined"],
      "20.config.escrows.0.isHistorical": ["undefined"],
      "20.config.escrows.0.untilTimestamp": ["undefined"],
      "20.config.escrows.0.sharedEscrow": ["undefined"],
      "20.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "20.config.escrows.1.excludedTokens": ["undefined"],
      "20.config.escrows.1.premintedTokens": ["undefined"],
      "20.config.escrows.1.contract.name": ["undefined"],
      "20.config.escrows.1.isUpcoming": ["undefined"],
      "20.config.escrows.1.source": ["undefined"],
      "20.config.escrows.1.bridgedUsing": ["undefined"],
      "20.config.escrows.1.isHistorical": ["undefined"],
      "20.config.escrows.1.untilTimestamp": ["undefined"],
      "20.config.escrows.1.sharedEscrow": ["undefined"],
      "20.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "20.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "20.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "20.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "20.config.trackedTxs.2.query.untilTimestamp": [["custom", "UnixTime"]],
      "20.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "20.config.finality": ["undefined"],
      "20.riskView.stateValidation.definingMetric": ["number"],
      "20.riskView.dataAvailability.definingMetric": ["number"],
      "20.riskView.exitWindow.secondLine": ["undefined"],
      "20.riskView.proposerFailure.definingMetric": ["number"],
      "20.stateDerivation": ["undefined"],
      "20.upgradesAndGovernance": ["undefined"],
      "21.createdAt": [["custom", "UnixTime"]],
      "21.badges": ["undefined"],
      "22.createdAt": [["custom", "UnixTime"]],
      "22.badges": ["undefined"],
      "23.createdAt": [["custom", "UnixTime"]],
      "23.badges": ["undefined"],
      "24.createdAt": [["custom", "UnixTime"]],
      "24.badges": ["undefined"],
      "25.createdAt": [["custom", "UnixTime"]],
      "25.permissions.5.references": ["undefined"],
      "25.nativePermissions": ["undefined"],
      "25.contracts.nativeAddresses": ["undefined"],
      "25.discoveryDrivenData": ["undefined"],
      "25.display.warning": ["undefined"],
      "25.display.liveness": ["undefined"],
      "25.display.finality": ["undefined"],
      "25.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "25.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "25.config.escrows.0.excludedTokens": ["undefined"],
      "25.config.escrows.0.premintedTokens": ["undefined"],
      "25.config.escrows.0.contract.name": ["undefined"],
      "25.config.escrows.0.isUpcoming": ["undefined"],
      "25.config.escrows.0.source": ["undefined"],
      "25.config.escrows.0.bridgedUsing": ["undefined"],
      "25.config.escrows.0.isHistorical": ["undefined"],
      "25.config.escrows.0.untilTimestamp": ["undefined"],
      "25.config.escrows.0.sharedEscrow": ["undefined"],
      "25.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "25.config.escrows.1.excludedTokens": ["undefined"],
      "25.config.escrows.1.premintedTokens": ["undefined"],
      "25.config.escrows.1.contract.name": ["undefined"],
      "25.config.escrows.1.isUpcoming": ["undefined"],
      "25.config.escrows.1.source": ["undefined"],
      "25.config.escrows.1.bridgedUsing": ["undefined"],
      "25.config.escrows.1.isHistorical": ["undefined"],
      "25.config.escrows.1.untilTimestamp": ["undefined"],
      "25.config.escrows.1.sharedEscrow": ["undefined"],
      "25.config.trackedTxs": ["undefined"],
      "25.config.finality": ["undefined"],
      "25.riskView.stateValidation.definingMetric": ["number"],
      "25.riskView.exitWindow.secondLine": ["undefined"],
      "25.riskView.proposerFailure.definingMetric": ["number"],
      "25.stateDerivation": ["undefined"],
      "25.upgradesAndGovernance": ["undefined"],
      "26.createdAt": [["custom", "UnixTime"]],
      "26.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "26.config.escrows.0.excludedTokens": ["undefined"],
      "26.config.escrows.0.premintedTokens": ["undefined"],
      "26.config.escrows.0.contract.name": ["undefined"],
      "26.config.escrows.0.contract.description": ["undefined"],
      "26.config.escrows.0.contract.upgradableBy": ["undefined"],
      "26.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "26.config.escrows.0.isUpcoming": ["undefined"],
      "26.config.escrows.0.source": ["undefined"],
      "26.config.escrows.0.bridgedUsing": ["undefined"],
      "26.config.escrows.0.isHistorical": ["undefined"],
      "26.config.escrows.0.untilTimestamp": ["undefined"],
      "26.config.escrows.0.sharedEscrow": ["undefined"],
      "26.riskView.stateValidation.definingMetric": ["number"],
      "26.riskView.exitWindow.secondLine": ["undefined"],
      "26.riskView.proposerFailure.definingMetric": ["number"],
      "26.contracts.addresses.1.upgradeability": ["undefined"],
      "26.contracts.addresses.3.upgradeability": ["undefined"],
      "26.contracts.addresses.4.upgradeability": ["undefined"],
      "26.contracts.addresses.5.upgradeability": ["undefined"],
      "26.contracts.addresses.6.upgradeability": ["undefined"],
      "26.contracts.addresses.7.upgradeability": ["undefined"],
      "26.contracts.addresses.8.upgradeability": ["undefined"],
      "26.permissions.3.references": ["undefined"],
      "27.createdAt": [["custom", "UnixTime"]],
      "27.badges": ["undefined"],
      "28.createdAt": [["custom", "UnixTime"]],
      "28.badges": ["undefined"],
      "29.createdAt": [["custom", "UnixTime"]],
      "29.display.tvlWarning": ["undefined"],
      "29.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "29.config.escrows.0.excludedTokens": ["undefined"],
      "29.config.escrows.0.premintedTokens": ["undefined"],
      "29.config.escrows.0.contract.name": ["undefined"],
      "29.config.escrows.0.isUpcoming": ["undefined"],
      "29.config.escrows.0.source": ["undefined"],
      "29.config.escrows.0.bridgedUsing": ["undefined"],
      "29.config.escrows.0.isHistorical": ["undefined"],
      "29.config.escrows.0.untilTimestamp": ["undefined"],
      "29.config.trackedTxs": ["undefined"],
      "29.config.finality": ["undefined"],
      "29.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "29.riskView.stateValidation.definingMetric": ["number"],
      "29.riskView.proposerFailure.definingMetric": ["number"],
      "29.permissions.4.references": ["undefined"],
      "29.permissions.6.references": ["undefined"],
      "29.permissions.11.references": ["undefined"],
      "29.permissions.13.references": ["undefined"],
      "29.contracts.addresses.1.upgradeability": ["undefined"],
      "29.contracts.addresses.2.upgradeability": ["undefined"],
      "29.contracts.addresses.3.upgradeability": ["undefined"],
      "29.contracts.addresses.4.upgradeability": ["undefined"],
      "29.contracts.addresses.5.upgradeability": ["undefined"],
      "29.contracts.addresses.6.upgradeability": ["undefined"],
      "29.contracts.addresses.7.upgradeability": ["undefined"],
      "29.contracts.nativeAddresses.zksync2.0.upgradeability": ["undefined"],
      "29.contracts.nativeAddresses.zksync2.1.upgradeability": ["undefined"],
      "29.contracts.nativeAddresses.zksync2.2.upgradeability": ["undefined"],
      "29.contracts.nativeAddresses.zksync2.3.upgradeability": ["undefined"],
      "29.contracts.nativeAddresses.zksync2.4.upgradeability": ["undefined"],
      "29.contracts.nativeAddresses.zksync2.5.upgradeability": ["undefined"],
      "29.stateDerivation": ["undefined"],
      "30.createdAt": [["custom", "UnixTime"]],
      "30.permissions.4.references": ["undefined"],
      "30.nativePermissions": ["undefined"],
      "30.contracts.addresses.2.upgradeability": ["undefined"],
      "30.contracts.addresses.5.upgradeability": ["undefined"],
      "30.contracts.nativeAddresses": ["undefined"],
      "30.display.warning": ["undefined"],
      "30.chainConfig": ["undefined"],
      "30.config.associatedTokens": ["undefined"],
      "30.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "30.config.escrows.0.excludedTokens": ["undefined"],
      "30.config.escrows.0.premintedTokens": ["undefined"],
      "30.config.escrows.0.contract.name": ["undefined"],
      "30.config.escrows.0.isUpcoming": ["undefined"],
      "30.config.escrows.0.source": ["undefined"],
      "30.config.escrows.0.bridgedUsing": ["undefined"],
      "30.config.escrows.0.isHistorical": ["undefined"],
      "30.config.escrows.0.untilTimestamp": ["undefined"],
      "30.config.escrows.0.sharedEscrow": ["undefined"],
      "30.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "30.config.escrows.1.excludedTokens": ["undefined"],
      "30.config.escrows.1.premintedTokens": ["undefined"],
      "30.config.escrows.1.contract.name": ["undefined"],
      "30.config.escrows.1.isUpcoming": ["undefined"],
      "30.config.escrows.1.source": ["undefined"],
      "30.config.escrows.1.bridgedUsing": ["undefined"],
      "30.config.escrows.1.isHistorical": ["undefined"],
      "30.config.escrows.1.untilTimestamp": ["undefined"],
      "30.config.escrows.1.sharedEscrow": ["undefined"],
      "30.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "30.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "30.config.finality": ["undefined"],
      "30.riskView.stateValidation.definingMetric": ["number"],
      "30.riskView.dataAvailability.definingMetric": ["number"],
      "30.riskView.exitWindow.secondLine": ["undefined"],
      "30.riskView.proposerFailure.definingMetric": ["number"],
      "30.stateDerivation": ["undefined"],
      "30.upgradesAndGovernance": ["undefined"],
      "31.createdAt": [["custom", "UnixTime"]],
      "31.stage.message": ["undefined"],
      "31.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "31.config.escrows.0.excludedTokens": ["undefined"],
      "31.config.escrows.0.premintedTokens": ["undefined"],
      "31.config.escrows.0.contract.name": ["undefined"],
      "31.config.escrows.0.contract.upgradeability": ["undefined"],
      "31.config.escrows.0.contract.upgradableBy": ["undefined"],
      "31.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "31.config.escrows.0.isUpcoming": ["undefined"],
      "31.config.escrows.0.source": ["undefined"],
      "31.config.escrows.0.bridgedUsing": ["undefined"],
      "31.config.escrows.0.isHistorical": ["undefined"],
      "31.config.escrows.0.untilTimestamp": ["undefined"],
      "31.config.escrows.0.sharedEscrow": ["undefined"],
      "31.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "31.riskView.stateValidation.definingMetric": ["number"],
      "31.riskView.dataAvailability.definingMetric": ["number"],
      "31.riskView.exitWindow.definingMetric": ["number"],
      "31.riskView.proposerFailure.definingMetric": ["number"],
      "31.contracts.addresses.0.upgradeability": ["undefined"],
      "31.contracts.addresses.1.upgradeability": ["undefined"],
      "31.contracts.addresses.2.upgradeability": ["undefined"],
      "31.contracts.addresses.3.upgradeability": ["undefined"],
      "31.contracts.addresses.4.upgradeability": ["undefined"],
      "32.createdAt": [["custom", "UnixTime"]],
      "32.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "32.config.escrows.0.excludedTokens": ["undefined"],
      "32.config.escrows.0.premintedTokens": ["undefined"],
      "32.config.escrows.0.contract.name": ["undefined"],
      "32.config.escrows.0.contract.upgradeability": ["undefined"],
      "32.config.escrows.0.contract.description": ["undefined"],
      "32.config.escrows.0.contract.upgradableBy": ["undefined"],
      "32.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "32.config.escrows.0.isUpcoming": ["undefined"],
      "32.config.escrows.0.source": ["undefined"],
      "32.config.escrows.0.bridgedUsing": ["undefined"],
      "32.config.escrows.0.isHistorical": ["undefined"],
      "32.config.escrows.0.untilTimestamp": ["undefined"],
      "32.config.escrows.0.sharedEscrow": ["undefined"],
      "32.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "32.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "32.riskView.stateValidation.definingMetric": ["number"],
      "32.riskView.dataAvailability.definingMetric": ["number"],
      "32.riskView.exitWindow.definingMetric": ["number"],
      "32.riskView.proposerFailure.definingMetric": ["number"],
      "32.stage.missing": ["undefined"],
      "32.stage.message": ["undefined"],
      "32.contracts.addresses.0.upgradeability": ["undefined"],
      "32.contracts.addresses.1.upgradeability": ["undefined"],
      "32.contracts.addresses.2.upgradeability": ["undefined"],
      "32.contracts.addresses.3.upgradeability": ["undefined"],
      "32.contracts.addresses.4.upgradeability": ["undefined"],
      "33.createdAt": [["custom", "UnixTime"]],
      "33.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "33.config.escrows.0.excludedTokens": ["undefined"],
      "33.config.escrows.0.premintedTokens": ["undefined"],
      "33.config.escrows.0.contract.name": ["undefined"],
      "33.config.escrows.0.contract.upgradeability": ["undefined"],
      "33.config.escrows.0.contract.description": ["undefined"],
      "33.config.escrows.0.contract.upgradableBy": ["undefined"],
      "33.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "33.config.escrows.0.isUpcoming": ["undefined"],
      "33.config.escrows.0.source": ["undefined"],
      "33.config.escrows.0.bridgedUsing": ["undefined"],
      "33.config.escrows.0.isHistorical": ["undefined"],
      "33.config.escrows.0.untilTimestamp": ["undefined"],
      "33.config.escrows.0.sharedEscrow": ["undefined"],
      "33.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "33.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "33.riskView.stateValidation.definingMetric": ["number"],
      "33.riskView.dataAvailability.definingMetric": ["number"],
      "33.riskView.exitWindow.definingMetric": ["number"],
      "33.riskView.proposerFailure.definingMetric": ["number"],
      "33.stage.missing": ["undefined"],
      "33.contracts.addresses.0.upgradeability": ["undefined"],
      "33.contracts.addresses.1.upgradeability": ["undefined"],
      "33.contracts.addresses.2.upgradeability": ["undefined"],
      "33.contracts.addresses.3.upgradeability": ["undefined"],
      "33.contracts.addresses.4.upgradeability": ["undefined"],
      "34.createdAt": [["custom", "UnixTime"]],
      "34.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "34.config.escrows.0.excludedTokens": ["undefined"],
      "34.config.escrows.0.premintedTokens": ["undefined"],
      "34.config.escrows.0.contract.name": ["undefined"],
      "34.config.escrows.0.contract.description": ["undefined"],
      "34.config.escrows.0.contract.upgradableBy": ["undefined"],
      "34.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "34.config.escrows.0.isUpcoming": ["undefined"],
      "34.config.escrows.0.source": ["undefined"],
      "34.config.escrows.0.bridgedUsing": ["undefined"],
      "34.config.escrows.0.isHistorical": ["undefined"],
      "34.config.escrows.0.untilTimestamp": ["undefined"],
      "34.config.escrows.0.sharedEscrow": ["undefined"],
      "34.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "34.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "34.riskView.stateValidation.definingMetric": ["number"],
      "34.riskView.dataAvailability.definingMetric": ["number"],
      "34.riskView.exitWindow.secondLine": ["undefined"],
      "34.riskView.proposerFailure.definingMetric": ["number"],
      "34.stage.missing": ["undefined"],
      "34.stage.message": ["undefined"],
      "34.contracts.addresses.1.upgradeability": ["undefined"],
      "34.contracts.addresses.3.upgradeability": ["undefined"],
      "34.contracts.addresses.4.upgradeability": ["undefined"],
      "34.contracts.addresses.5.upgradeability": ["undefined"],
      "34.contracts.addresses.6.upgradeability": ["undefined"],
      "35.createdAt": [["custom", "UnixTime"]],
      "35.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "35.config.escrows.0.excludedTokens": ["undefined"],
      "35.config.escrows.0.premintedTokens": ["undefined"],
      "35.config.escrows.0.contract.name": ["undefined"],
      "35.config.escrows.0.contract.description": ["undefined"],
      "35.config.escrows.0.isUpcoming": ["undefined"],
      "35.config.escrows.0.source": ["undefined"],
      "35.config.escrows.0.bridgedUsing": ["undefined"],
      "35.config.escrows.0.isHistorical": ["undefined"],
      "35.config.escrows.0.untilTimestamp": ["undefined"],
      "35.config.escrows.0.sharedEscrow": ["undefined"],
      "35.config.transactionApi.sinceTimestamp": [["custom", "UnixTime"]],
      "35.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "35.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "35.riskView.stateValidation.definingMetric": ["number"],
      "35.riskView.dataAvailability.definingMetric": ["number"],
      "35.riskView.exitWindow.secondLine": ["undefined"],
      "35.riskView.proposerFailure.definingMetric": ["number"],
      "35.stage.message": ["undefined"],
      "35.contracts.addresses.1.upgradeability": ["undefined"],
      "35.contracts.addresses.2.upgradeability": ["undefined"],
      "35.contracts.addresses.3.upgradeability": ["undefined"],
      "35.contracts.addresses.4.upgradeability": ["undefined"],
      "35.contracts.addresses.5.upgradeability": ["undefined"],
      "35.contracts.addresses.6.upgradeability": ["undefined"],
      "35.contracts.addresses.7.upgradeability": ["undefined"],
      "35.contracts.addresses.11.upgradeability": ["undefined"],
      "35.contracts.addresses.12.upgradeability": ["undefined"],
      "35.contracts.addresses.13.upgradeability": ["undefined"],
      "36.createdAt": [["custom", "UnixTime"]],
      "36.contracts.addresses.11.upgradeability": ["undefined"],
      "36.contracts.addresses.12.upgradeability": ["undefined"],
      "36.contracts.addresses.13.upgradeability": ["undefined"],
      "36.contracts.addresses.14.upgradeability": ["undefined"],
      "36.contracts.addresses.15.upgradeability": ["undefined"],
      "36.contracts.nativeAddresses": ["undefined"],
      "36.chainConfig": ["undefined"],
      "36.technology.stateCorrectness": ["undefined"],
      "36.permissions.3.references": ["undefined"],
      "36.nativePermissions": ["undefined"],
      "36.stateDerivation": ["undefined"],
      "36.upgradesAndGovernance": ["undefined"],
      "36.milestones": ["undefined"],
      "36.knowledgeNuggets": ["undefined"],
      "36.display.liveness": ["undefined"],
      "36.riskView.exitWindow.secondLine": ["undefined"],
      "36.config.associatedTokens": ["undefined"],
      "36.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "36.config.escrows.0.excludedTokens": ["undefined"],
      "36.config.escrows.0.premintedTokens": ["undefined"],
      "36.config.escrows.0.contract.name": ["undefined"],
      "36.config.escrows.0.isUpcoming": ["undefined"],
      "36.config.escrows.0.source": ["undefined"],
      "36.config.escrows.0.bridgedUsing": ["undefined"],
      "36.config.escrows.0.isHistorical": ["undefined"],
      "36.config.escrows.0.untilTimestamp": ["undefined"],
      "36.config.escrows.0.sharedEscrow": ["undefined"],
      "36.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "36.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "36.config.trackedTxs": ["undefined"],
      "37.createdAt": [["custom", "UnixTime"]],
      "37.badges": ["undefined"],
      "38.createdAt": [["custom", "UnixTime"]],
      "38.contracts.addresses.7.upgradeability": ["undefined"],
      "38.contracts.addresses.8.upgradeability": ["undefined"],
      "38.contracts.addresses.9.upgradeability": ["undefined"],
      "38.contracts.addresses.10.upgradeability": ["undefined"],
      "38.contracts.addresses.11.upgradeability": ["undefined"],
      "38.contracts.nativeAddresses": ["undefined"],
      "38.chainConfig": ["undefined"],
      "38.technology.stateCorrectness": ["undefined"],
      "38.nativePermissions": ["undefined"],
      "38.stateDerivation": ["undefined"],
      "38.upgradesAndGovernance": ["undefined"],
      "38.knowledgeNuggets": ["undefined"],
      "38.display.liveness": ["undefined"],
      "38.riskView.exitWindow.secondLine": ["undefined"],
      "38.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "38.config.escrows.0.excludedTokens": ["undefined"],
      "38.config.escrows.0.premintedTokens": ["undefined"],
      "38.config.escrows.0.contract.name": ["undefined"],
      "38.config.escrows.0.isUpcoming": ["undefined"],
      "38.config.escrows.0.source": ["undefined"],
      "38.config.escrows.0.bridgedUsing": ["undefined"],
      "38.config.escrows.0.isHistorical": ["undefined"],
      "38.config.escrows.0.untilTimestamp": ["undefined"],
      "38.config.escrows.0.sharedEscrow": ["undefined"],
      "38.config.trackedTxs": ["undefined"],
      "39.createdAt": [["custom", "UnixTime"]],
      "39.badges": ["undefined"],
      "40.createdAt": [["custom", "UnixTime"]],
      "40.badges": ["undefined"],
      "41.createdAt": [["custom", "UnixTime"]],
      "41.badges": ["undefined"],
      "42.createdAt": [["custom", "UnixTime"]],
      "42.badges": ["undefined"],
      "43.createdAt": [["custom", "UnixTime"]],
      "43.permissions.4.references": ["undefined"],
      "43.permissions.6.references": ["undefined"],
      "43.permissions.7.references": ["undefined"],
      "43.nativePermissions": ["undefined"],
      "43.contracts.addresses.2.upgradeability": ["undefined"],
      "43.contracts.addresses.6.upgradeability": ["undefined"],
      "43.contracts.addresses.9.upgradeability": ["undefined"],
      "43.contracts.addresses.10.upgradeability": ["undefined"],
      "43.contracts.addresses.12.upgradeability": ["undefined"],
      "43.contracts.nativeAddresses": ["undefined"],
      "43.display.warning": ["undefined"],
      "43.display.liveness": ["undefined"],
      "43.display.finality": ["undefined"],
      "43.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "43.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "43.config.escrows.0.excludedTokens": ["undefined"],
      "43.config.escrows.0.premintedTokens": ["undefined"],
      "43.config.escrows.0.contract.name": ["undefined"],
      "43.config.escrows.0.isUpcoming": ["undefined"],
      "43.config.escrows.0.source": ["undefined"],
      "43.config.escrows.0.bridgedUsing": ["undefined"],
      "43.config.escrows.0.isHistorical": ["undefined"],
      "43.config.escrows.0.untilTimestamp": ["undefined"],
      "43.config.escrows.0.sharedEscrow": ["undefined"],
      "43.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "43.config.escrows.1.excludedTokens": ["undefined"],
      "43.config.escrows.1.premintedTokens": ["undefined"],
      "43.config.escrows.1.contract.name": ["undefined"],
      "43.config.escrows.1.isUpcoming": ["undefined"],
      "43.config.escrows.1.source": ["undefined"],
      "43.config.escrows.1.bridgedUsing": ["undefined"],
      "43.config.escrows.1.isHistorical": ["undefined"],
      "43.config.escrows.1.untilTimestamp": ["undefined"],
      "43.config.escrows.1.sharedEscrow": ["undefined"],
      "43.config.trackedTxs": ["undefined"],
      "43.config.finality": ["undefined"],
      "43.riskView.stateValidation.definingMetric": ["number"],
      "43.riskView.exitWindow.secondLine": ["undefined"],
      "43.riskView.proposerFailure.definingMetric": ["number"],
      "43.stateDerivation": ["undefined"],
      "43.upgradesAndGovernance": ["undefined"],
      "44.createdAt": [["custom", "UnixTime"]],
      "44.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "44.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "44.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "44.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "44.riskView.stateValidation.definingMetric": ["number"],
      "44.riskView.dataAvailability.definingMetric": ["number"],
      "44.riskView.exitWindow.secondLine": ["undefined"],
      "44.riskView.sequencerFailure.definingMetric": ["undefined"],
      "44.riskView.proposerFailure.definingMetric": ["number"],
      "44.permissions.5.references": ["undefined"],
      "45.createdAt": [["custom", "UnixTime"]],
      "45.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "45.riskView.stateValidation.definingMetric": ["number"],
      "45.riskView.dataAvailability.definingMetric": ["number"],
      "45.riskView.exitWindow.definingMetric": ["number"],
      "45.riskView.sequencerFailure.definingMetric": ["undefined"],
      "45.stage.missing": ["undefined"],
      "45.stage.message": ["undefined"],
      "46.createdAt": [["custom", "UnixTime"]],
      "46.config.associatedTokens": ["undefined"],
      "46.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "46.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "46.config.transactionApi": ["undefined"],
      "46.chainConfig": ["undefined"],
      "46.badges": ["undefined"],
      "47.createdAt": [["custom", "UnixTime"]],
      "47.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "47.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "47.riskView.exitWindow.secondLine": ["undefined"],
      "47.riskView.sequencerFailure.definingMetric": ["undefined"],
      "47.riskView.proposerFailure.definingMetric": ["number"],
      "48.createdAt": [["custom", "UnixTime"]],
      "48.display.tvlWarning": ["undefined"],
      "48.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "48.config.escrows.0.excludedTokens": ["undefined"],
      "48.config.escrows.0.premintedTokens": ["undefined"],
      "48.config.escrows.0.contract.name": ["undefined"],
      "48.config.escrows.0.contract.description": ["undefined"],
      "48.config.escrows.0.contract.upgradableBy": ["undefined"],
      "48.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "48.config.escrows.0.isUpcoming": ["undefined"],
      "48.config.escrows.0.source": ["undefined"],
      "48.config.escrows.0.bridgedUsing": ["undefined"],
      "48.config.escrows.0.isHistorical": ["undefined"],
      "48.config.escrows.0.untilTimestamp": ["undefined"],
      "48.config.trackedTxs": ["undefined"],
      "48.config.finality": ["undefined"],
      "48.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "48.riskView.stateValidation.definingMetric": ["number"],
      "48.riskView.exitWindow.secondLine": ["undefined"],
      "48.stateValidation": ["undefined"],
      "48.permissions.2.references": ["undefined"],
      "48.permissions.4.references": ["undefined"],
      "48.contracts.addresses.2.upgradeability": ["undefined"],
      "48.contracts.addresses.6.upgradeability": ["undefined"],
      "48.upgradesAndGovernance": ["undefined"],
      "49.createdAt": [["custom", "UnixTime"]],
      "49.contracts.addresses.7.upgradeability": ["undefined"],
      "49.contracts.addresses.8.upgradeability": ["undefined"],
      "49.contracts.addresses.9.upgradeability": ["undefined"],
      "49.contracts.addresses.10.upgradeability": ["undefined"],
      "49.contracts.addresses.11.upgradeability": ["undefined"],
      "49.contracts.nativeAddresses": ["undefined"],
      "49.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "49.technology.stateCorrectness": ["undefined"],
      "49.permissions.2.references": ["undefined"],
      "49.nativePermissions": ["undefined"],
      "49.stateDerivation": ["undefined"],
      "49.upgradesAndGovernance": ["undefined"],
      "49.milestones": ["undefined"],
      "49.knowledgeNuggets": ["undefined"],
      "49.display.liveness": ["undefined"],
      "49.riskView.exitWindow.secondLine": ["undefined"],
      "49.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "49.config.escrows.0.excludedTokens": ["undefined"],
      "49.config.escrows.0.premintedTokens": ["undefined"],
      "49.config.escrows.0.contract.name": ["undefined"],
      "49.config.escrows.0.isUpcoming": ["undefined"],
      "49.config.escrows.0.source": ["undefined"],
      "49.config.escrows.0.bridgedUsing": ["undefined"],
      "49.config.escrows.0.isHistorical": ["undefined"],
      "49.config.escrows.0.untilTimestamp": ["undefined"],
      "49.config.escrows.0.sharedEscrow": ["undefined"],
      "49.config.trackedTxs": ["undefined"],
      "50.createdAt": [["custom", "UnixTime"]],
      "50.badges": ["undefined"],
      "51.createdAt": [["custom", "UnixTime"]],
      "51.badges": ["undefined"],
      "52.createdAt": [["custom", "UnixTime"]],
      "52.badges": ["undefined"],
      "53.createdAt": [["custom", "UnixTime"]],
      "53.badges": ["undefined"],
      "54.createdAt": [["custom", "UnixTime"]],
      "54.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "54.riskView.stateValidation.definingMetric": ["number"],
      "54.riskView.dataAvailability.definingMetric": ["number"],
      "54.riskView.exitWindow.secondLine": ["undefined"],
      "54.riskView.sequencerFailure.definingMetric": ["undefined"],
      "55.createdAt": [["custom", "UnixTime"]],
      "55.badges": ["undefined"],
      "56.createdAt": [["custom", "UnixTime"]],
      "56.contracts.addresses.7.upgradeability": ["undefined"],
      "56.contracts.addresses.8.upgradeability": ["undefined"],
      "56.contracts.addresses.9.upgradeability": ["undefined"],
      "56.contracts.addresses.10.upgradeability": ["undefined"],
      "56.contracts.addresses.11.upgradeability": ["undefined"],
      "56.contracts.nativeAddresses": ["undefined"],
      "56.chainConfig": ["undefined"],
      "56.technology.stateCorrectness": ["undefined"],
      "56.permissions.3.references": ["undefined"],
      "56.nativePermissions": ["undefined"],
      "56.stateDerivation": ["undefined"],
      "56.upgradesAndGovernance": ["undefined"],
      "56.milestones": ["undefined"],
      "56.knowledgeNuggets": ["undefined"],
      "56.display.liveness": ["undefined"],
      "56.riskView.exitWindow.secondLine": ["undefined"],
      "56.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "56.config.escrows.0.excludedTokens": ["undefined"],
      "56.config.escrows.0.premintedTokens": ["undefined"],
      "56.config.escrows.0.contract.name": ["undefined"],
      "56.config.escrows.0.isUpcoming": ["undefined"],
      "56.config.escrows.0.source": ["undefined"],
      "56.config.escrows.0.bridgedUsing": ["undefined"],
      "56.config.escrows.0.isHistorical": ["undefined"],
      "56.config.escrows.0.untilTimestamp": ["undefined"],
      "56.config.escrows.0.sharedEscrow": ["undefined"],
      "56.config.trackedTxs": ["undefined"],
      "57.createdAt": [["custom", "UnixTime"]],
      "57.permissions.4.references": ["undefined"],
      "57.permissions.5.references": ["undefined"],
      "57.nativePermissions": ["undefined"],
      "57.contracts.addresses.1.upgradeability": ["undefined"],
      "57.contracts.addresses.8.upgradeability": ["undefined"],
      "57.contracts.nativeAddresses": ["undefined"],
      "57.display.warning": ["undefined"],
      "57.display.liveness": ["undefined"],
      "57.display.finality": ["undefined"],
      "57.chainConfig": ["undefined"],
      "57.config.associatedTokens": ["undefined"],
      "57.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "57.config.escrows.0.excludedTokens": ["undefined"],
      "57.config.escrows.0.premintedTokens": ["undefined"],
      "57.config.escrows.0.contract.name": ["undefined"],
      "57.config.escrows.0.isUpcoming": ["undefined"],
      "57.config.escrows.0.source": ["undefined"],
      "57.config.escrows.0.bridgedUsing": ["undefined"],
      "57.config.escrows.0.isHistorical": ["undefined"],
      "57.config.escrows.0.untilTimestamp": ["undefined"],
      "57.config.escrows.0.sharedEscrow": ["undefined"],
      "57.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "57.config.escrows.1.excludedTokens": ["undefined"],
      "57.config.escrows.1.premintedTokens": ["undefined"],
      "57.config.escrows.1.contract.name": ["undefined"],
      "57.config.escrows.1.isUpcoming": ["undefined"],
      "57.config.escrows.1.source": ["undefined"],
      "57.config.escrows.1.bridgedUsing": ["undefined"],
      "57.config.escrows.1.isHistorical": ["undefined"],
      "57.config.escrows.1.untilTimestamp": ["undefined"],
      "57.config.escrows.1.sharedEscrow": ["undefined"],
      "57.config.transactionApi": ["undefined"],
      "57.config.trackedTxs": ["undefined"],
      "57.config.finality": ["undefined"],
      "57.riskView.stateValidation.definingMetric": ["number"],
      "57.riskView.exitWindow.secondLine": ["undefined"],
      "57.riskView.proposerFailure.definingMetric": ["number"],
      "57.stateDerivation": ["undefined"],
      "57.upgradesAndGovernance": ["undefined"],
      "58.createdAt": [["custom", "UnixTime"]],
      "58.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "58.config.escrows.0.excludedTokens": ["undefined"],
      "58.config.escrows.0.premintedTokens": ["undefined"],
      "58.config.escrows.0.contract.name": ["undefined"],
      "58.config.escrows.0.contract.upgradableBy": ["undefined"],
      "58.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "58.config.escrows.0.isUpcoming": ["undefined"],
      "58.config.escrows.0.source": ["undefined"],
      "58.config.escrows.0.bridgedUsing": ["undefined"],
      "58.config.escrows.0.isHistorical": ["undefined"],
      "58.config.escrows.0.untilTimestamp": ["undefined"],
      "58.config.escrows.0.sharedEscrow": ["undefined"],
      "58.config.transactionApi.sinceTimestamp": [["custom", "UnixTime"]],
      "58.riskView.stateValidation.definingMetric": ["number"],
      "58.riskView.exitWindow.secondLine": ["undefined"],
      "58.riskView.proposerFailure.definingMetric": ["number"],
      "58.contracts.addresses.1.upgradeability": ["undefined"],
      "58.contracts.addresses.3.upgradeability": ["undefined"],
      "58.contracts.addresses.4.upgradeability": ["undefined"],
      "58.contracts.addresses.5.upgradeability": ["undefined"],
      "58.contracts.addresses.6.upgradeability": ["undefined"],
      "58.contracts.addresses.7.upgradeability": ["undefined"],
      "58.contracts.addresses.8.upgradeability": ["undefined"],
      "58.permissions.3.references": ["undefined"],
      "59.createdAt": [["custom", "UnixTime"]],
      "59.badges": ["undefined"],
      "60.createdAt": [["custom", "UnixTime"]],
      "60.badges": ["undefined"],
      "61.createdAt": [["custom", "UnixTime"]],
      "61.permissions.4.references": ["undefined"],
      "61.nativePermissions": ["undefined"],
      "61.contracts.addresses.1.upgradeability": ["undefined"],
      "61.contracts.addresses.8.upgradeability": ["undefined"],
      "61.contracts.nativeAddresses": ["undefined"],
      "61.display.warning": ["undefined"],
      "61.display.liveness": ["undefined"],
      "61.display.finality": ["undefined"],
      "61.chainConfig": ["undefined"],
      "61.config.associatedTokens": ["undefined"],
      "61.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "61.config.escrows.0.excludedTokens": ["undefined"],
      "61.config.escrows.0.premintedTokens": ["undefined"],
      "61.config.escrows.0.contract.name": ["undefined"],
      "61.config.escrows.0.isUpcoming": ["undefined"],
      "61.config.escrows.0.source": ["undefined"],
      "61.config.escrows.0.bridgedUsing": ["undefined"],
      "61.config.escrows.0.isHistorical": ["undefined"],
      "61.config.escrows.0.untilTimestamp": ["undefined"],
      "61.config.escrows.0.sharedEscrow": ["undefined"],
      "61.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "61.config.escrows.1.excludedTokens": ["undefined"],
      "61.config.escrows.1.premintedTokens": ["undefined"],
      "61.config.escrows.1.contract.name": ["undefined"],
      "61.config.escrows.1.isUpcoming": ["undefined"],
      "61.config.escrows.1.source": ["undefined"],
      "61.config.escrows.1.bridgedUsing": ["undefined"],
      "61.config.escrows.1.isHistorical": ["undefined"],
      "61.config.escrows.1.untilTimestamp": ["undefined"],
      "61.config.escrows.1.sharedEscrow": ["undefined"],
      "61.config.trackedTxs": ["undefined"],
      "61.config.finality": ["undefined"],
      "61.riskView.stateValidation.definingMetric": ["number"],
      "61.riskView.exitWindow.secondLine": ["undefined"],
      "61.riskView.proposerFailure.definingMetric": ["number"],
      "61.stateDerivation": ["undefined"],
      "61.upgradesAndGovernance": ["undefined"],
      "62.createdAt": [["custom", "UnixTime"]],
      "62.contracts.addresses.7.upgradeability": ["undefined"],
      "62.contracts.addresses.8.upgradeability": ["undefined"],
      "62.contracts.addresses.9.upgradeability": ["undefined"],
      "62.contracts.addresses.10.upgradeability": ["undefined"],
      "62.contracts.addresses.11.upgradeability": ["undefined"],
      "62.contracts.nativeAddresses": ["undefined"],
      "62.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "62.technology.stateCorrectness": ["undefined"],
      "62.permissions.2.references": ["undefined"],
      "62.permissions.3.references": ["undefined"],
      "62.nativePermissions": ["undefined"],
      "62.stateDerivation": ["undefined"],
      "62.upgradesAndGovernance": ["undefined"],
      "62.knowledgeNuggets": ["undefined"],
      "62.riskView.dataAvailability.definingMetric": ["number"],
      "62.riskView.exitWindow.secondLine": ["undefined"],
      "62.config.associatedTokens": ["undefined"],
      "62.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.0.excludedTokens": ["undefined"],
      "62.config.escrows.0.premintedTokens": ["undefined"],
      "62.config.escrows.0.contract.name": ["undefined"],
      "62.config.escrows.0.isUpcoming": ["undefined"],
      "62.config.escrows.0.source": ["undefined"],
      "62.config.escrows.0.bridgedUsing": ["undefined"],
      "62.config.escrows.0.isHistorical": ["undefined"],
      "62.config.escrows.0.untilTimestamp": ["undefined"],
      "62.config.escrows.0.sharedEscrow": ["undefined"],
      "62.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.1.excludedTokens": ["undefined"],
      "62.config.escrows.1.premintedTokens": ["undefined"],
      "62.config.escrows.1.contract.name": ["undefined"],
      "62.config.escrows.1.contract.upgradableBy": ["undefined"],
      "62.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "62.config.escrows.1.isUpcoming": ["undefined"],
      "62.config.escrows.1.source": ["undefined"],
      "62.config.escrows.1.bridgedUsing": ["undefined"],
      "62.config.escrows.1.isHistorical": ["undefined"],
      "62.config.escrows.1.untilTimestamp": ["undefined"],
      "62.config.escrows.1.sharedEscrow": ["undefined"],
      "62.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.7.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.8.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.9.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.10.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.11.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.12.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.13.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.14.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.15.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.16.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.17.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.18.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.19.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.20.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.21.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.22.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.23.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.24.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.25.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.26.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.27.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.28.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.escrows.29.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.1.query.untilTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.2.query.untilTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.5.query.sinceTimestamp": [["custom", "UnixTime"]],
      "62.config.trackedTxs.6.query.sinceTimestamp": [["custom", "UnixTime"]],
      "63.createdAt": [["custom", "UnixTime"]],
      "63.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "63.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "63.config.escrows.0.excludedTokens": ["undefined"],
      "63.config.escrows.0.premintedTokens": ["undefined"],
      "63.config.escrows.0.contract.name": ["undefined"],
      "63.config.escrows.0.contract.upgradableBy": ["undefined"],
      "63.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "63.config.escrows.0.isUpcoming": ["undefined"],
      "63.config.escrows.0.source": ["undefined"],
      "63.config.escrows.0.bridgedUsing": ["undefined"],
      "63.config.escrows.0.isHistorical": ["undefined"],
      "63.config.escrows.0.untilTimestamp": ["undefined"],
      "63.config.escrows.0.sharedEscrow": ["undefined"],
      "63.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "63.config.escrows.1.excludedTokens": ["undefined"],
      "63.config.escrows.1.premintedTokens": ["undefined"],
      "63.config.escrows.1.contract.name": ["undefined"],
      "63.config.escrows.1.contract.upgradableBy": ["undefined"],
      "63.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "63.config.escrows.1.isUpcoming": ["undefined"],
      "63.config.escrows.1.source": ["undefined"],
      "63.config.escrows.1.bridgedUsing": ["undefined"],
      "63.config.escrows.1.isHistorical": ["undefined"],
      "63.config.escrows.1.untilTimestamp": ["undefined"],
      "63.config.escrows.1.sharedEscrow": ["undefined"],
      "63.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "63.config.escrows.2.excludedTokens": ["undefined"],
      "63.config.escrows.2.premintedTokens": ["undefined"],
      "63.config.escrows.2.contract.name": ["undefined"],
      "63.config.escrows.2.contract.upgradableBy": ["undefined"],
      "63.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "63.config.escrows.2.isUpcoming": ["undefined"],
      "63.config.escrows.2.source": ["undefined"],
      "63.config.escrows.2.bridgedUsing": ["undefined"],
      "63.config.escrows.2.isHistorical": ["undefined"],
      "63.config.escrows.2.untilTimestamp": ["undefined"],
      "63.config.escrows.2.sharedEscrow": ["undefined"],
      "63.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "63.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "63.riskView.stateValidation.definingMetric": ["number"],
      "63.riskView.dataAvailability.definingMetric": ["number"],
      "63.riskView.exitWindow.secondLine": ["undefined"],
      "63.stage.message": ["undefined"],
      "63.contracts.addresses.8.upgradeability": ["undefined"],
      "63.contracts.addresses.11.upgradeability": ["undefined"],
      "63.contracts.addresses.13.upgradeability": ["undefined"],
      "64.createdAt": [["custom", "UnixTime"]],
      "64.permissions.4.references": ["undefined"],
      "64.nativePermissions": ["undefined"],
      "64.contracts.addresses.1.upgradeability": ["undefined"],
      "64.contracts.addresses.4.upgradeability": ["undefined"],
      "64.contracts.nativeAddresses": ["undefined"],
      "64.display.warning": ["undefined"],
      "64.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "64.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "64.config.escrows.0.excludedTokens": ["undefined"],
      "64.config.escrows.0.premintedTokens": ["undefined"],
      "64.config.escrows.0.contract.name": ["undefined"],
      "64.config.escrows.0.isUpcoming": ["undefined"],
      "64.config.escrows.0.source": ["undefined"],
      "64.config.escrows.0.bridgedUsing": ["undefined"],
      "64.config.escrows.0.isHistorical": ["undefined"],
      "64.config.escrows.0.untilTimestamp": ["undefined"],
      "64.config.escrows.0.sharedEscrow": ["undefined"],
      "64.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "64.config.escrows.1.excludedTokens": ["undefined"],
      "64.config.escrows.1.premintedTokens": ["undefined"],
      "64.config.escrows.1.contract.name": ["undefined"],
      "64.config.escrows.1.isUpcoming": ["undefined"],
      "64.config.escrows.1.source": ["undefined"],
      "64.config.escrows.1.bridgedUsing": ["undefined"],
      "64.config.escrows.1.isHistorical": ["undefined"],
      "64.config.escrows.1.untilTimestamp": ["undefined"],
      "64.config.escrows.1.sharedEscrow": ["undefined"],
      "64.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "64.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "64.config.finality": ["undefined"],
      "64.riskView.stateValidation.definingMetric": ["number"],
      "64.riskView.dataAvailability.definingMetric": ["number"],
      "64.riskView.exitWindow.secondLine": ["undefined"],
      "64.riskView.proposerFailure.definingMetric": ["number"],
      "64.stage.message": ["undefined"],
      "64.stateDerivation": ["undefined"],
      "64.upgradesAndGovernance": ["undefined"],
      "65.createdAt": [["custom", "UnixTime"]],
      "65.badges": ["undefined"],
      "66.createdAt": [["custom", "UnixTime"]],
      "66.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "67.createdAt": [["custom", "UnixTime"]],
      "67.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "67.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "67.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "67.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "67.riskView.stateValidation.definingMetric": ["number"],
      "67.riskView.dataAvailability.definingMetric": ["number"],
      "67.riskView.exitWindow.secondLine": ["undefined"],
      "67.riskView.sequencerFailure.definingMetric": ["undefined"],
      "67.riskView.proposerFailure.definingMetric": ["number"],
      "67.contracts.addresses.7.upgradeability": ["undefined"],
      "67.contracts.addresses.8.upgradeability": ["undefined"],
      "67.contracts.addresses.9.upgradeability": ["undefined"],
      "67.contracts.addresses.10.upgradeability": ["undefined"],
      "67.contracts.addresses.11.upgradeability": ["undefined"],
      "67.contracts.addresses.12.upgradeability": ["undefined"],
      "68.createdAt": [["custom", "UnixTime"]],
      "68.badges": ["undefined"],
      "69.createdAt": [["custom", "UnixTime"]],
      "69.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.escrows.0.excludedTokens": ["undefined"],
      "69.config.escrows.0.premintedTokens": ["undefined"],
      "69.config.escrows.0.contract.name": ["undefined"],
      "69.config.escrows.0.contract.description": ["undefined"],
      "69.config.escrows.0.contract.upgradableBy": ["undefined"],
      "69.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "69.config.escrows.0.isUpcoming": ["undefined"],
      "69.config.escrows.0.source": ["undefined"],
      "69.config.escrows.0.bridgedUsing": ["undefined"],
      "69.config.escrows.0.isHistorical": ["undefined"],
      "69.config.escrows.0.untilTimestamp": ["undefined"],
      "69.config.escrows.0.sharedEscrow": ["undefined"],
      "69.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.escrows.1.excludedTokens": ["undefined"],
      "69.config.escrows.1.premintedTokens": ["undefined"],
      "69.config.escrows.1.contract.name": ["undefined"],
      "69.config.escrows.1.contract.description": ["undefined"],
      "69.config.escrows.1.contract.upgradableBy": ["undefined"],
      "69.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "69.config.escrows.1.isUpcoming": ["undefined"],
      "69.config.escrows.1.source": ["undefined"],
      "69.config.escrows.1.bridgedUsing": ["undefined"],
      "69.config.escrows.1.isHistorical": ["undefined"],
      "69.config.escrows.1.untilTimestamp": ["undefined"],
      "69.config.escrows.1.sharedEscrow": ["undefined"],
      "69.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.escrows.2.excludedTokens": ["undefined"],
      "69.config.escrows.2.premintedTokens": ["undefined"],
      "69.config.escrows.2.contract.name": ["undefined"],
      "69.config.escrows.2.contract.description": ["undefined"],
      "69.config.escrows.2.contract.upgradableBy": ["undefined"],
      "69.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "69.config.escrows.2.isUpcoming": ["undefined"],
      "69.config.escrows.2.source": ["undefined"],
      "69.config.escrows.2.bridgedUsing": ["undefined"],
      "69.config.escrows.2.isHistorical": ["undefined"],
      "69.config.escrows.2.untilTimestamp": ["undefined"],
      "69.config.escrows.2.sharedEscrow": ["undefined"],
      "69.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.trackedTxs.1.query.untilTimestamp": [["custom", "UnixTime"]],
      "69.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.trackedTxs.3.query.untilTimestamp": [["custom", "UnixTime"]],
      "69.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.trackedTxs.4.query.untilTimestamp": [["custom", "UnixTime"]],
      "69.config.trackedTxs.5.query.sinceTimestamp": [["custom", "UnixTime"]],
      "69.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "69.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "69.riskView.stateValidation.definingMetric": ["number"],
      "69.riskView.dataAvailability.definingMetric": ["number"],
      "69.riskView.exitWindow.secondLine": ["undefined"],
      "69.riskView.proposerFailure.definingMetric": ["number"],
      "69.permissions.0.references": ["undefined"],
      "69.contracts.addresses.1.upgradeability": ["undefined"],
      "69.contracts.addresses.2.upgradeability": ["undefined"],
      "70.createdAt": [["custom", "UnixTime"]],
      "70.permissions.4.references": ["undefined"],
      "70.permissions.5.references": ["undefined"],
      "70.nativePermissions": ["undefined"],
      "70.contracts.addresses.5.upgradeability": ["undefined"],
      "70.contracts.addresses.9.upgradeability": ["undefined"],
      "70.contracts.nativeAddresses": ["undefined"],
      "70.display.warning": ["undefined"],
      "70.chainConfig": ["undefined"],
      "70.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "70.config.escrows.0.excludedTokens": ["undefined"],
      "70.config.escrows.0.premintedTokens": ["undefined"],
      "70.config.escrows.0.contract.name": ["undefined"],
      "70.config.escrows.0.isUpcoming": ["undefined"],
      "70.config.escrows.0.source": ["undefined"],
      "70.config.escrows.0.bridgedUsing": ["undefined"],
      "70.config.escrows.0.isHistorical": ["undefined"],
      "70.config.escrows.0.untilTimestamp": ["undefined"],
      "70.config.escrows.0.sharedEscrow": ["undefined"],
      "70.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "70.config.escrows.1.excludedTokens": ["undefined"],
      "70.config.escrows.1.contract.name": ["undefined"],
      "70.config.escrows.1.isUpcoming": ["undefined"],
      "70.config.escrows.1.source": ["undefined"],
      "70.config.escrows.1.bridgedUsing": ["undefined"],
      "70.config.escrows.1.isHistorical": ["undefined"],
      "70.config.escrows.1.untilTimestamp": ["undefined"],
      "70.config.escrows.1.sharedEscrow": ["undefined"],
      "70.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "70.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "70.config.finality.genesisTimestamp": [["custom", "UnixTime"]],
      "70.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "70.riskView.stateValidation.definingMetric": ["number"],
      "70.riskView.dataAvailability.definingMetric": ["number"],
      "70.riskView.exitWindow.secondLine": ["undefined"],
      "70.riskView.proposerFailure.definingMetric": ["number"],
      "70.stage.message": ["undefined"],
      "70.stateDerivation": ["undefined"],
      "70.upgradesAndGovernance": ["undefined"],
      "71.createdAt": [["custom", "UnixTime"]],
      "71.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "71.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "71.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "71.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "71.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "71.riskView.stateValidation.definingMetric": ["number"],
      "71.riskView.dataAvailability.definingMetric": ["number"],
      "71.riskView.exitWindow.secondLine": ["undefined"],
      "71.riskView.proposerFailure.definingMetric": ["number"],
      "71.stage.message": ["undefined"],
      "71.permissions.0.references": ["undefined"],
      "71.contracts.addresses.1.upgradeability": ["undefined"],
      "71.contracts.addresses.2.upgradeability": ["undefined"],
      "71.contracts.addresses.3.upgradeability": ["undefined"],
      "71.contracts.addresses.4.upgradeability": ["undefined"],
      "71.contracts.addresses.5.upgradeability": ["undefined"],
      "71.contracts.addresses.6.upgradeability": ["undefined"],
      "71.contracts.addresses.7.upgradeability": ["undefined"],
      "72.createdAt": [["custom", "UnixTime"]],
      "73.createdAt": [["custom", "UnixTime"]],
      "73.permissions.4.references": ["undefined"],
      "73.permissions.5.references": ["undefined"],
      "73.nativePermissions": ["undefined"],
      "73.contracts.addresses.3.upgradeability": ["undefined"],
      "73.contracts.addresses.8.upgradeability": ["undefined"],
      "73.contracts.nativeAddresses": ["undefined"],
      "73.display.warning": ["undefined"],
      "73.display.liveness": ["undefined"],
      "73.display.finality": ["undefined"],
      "73.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "73.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.0.excludedTokens": ["undefined"],
      "73.config.escrows.0.premintedTokens": ["undefined"],
      "73.config.escrows.0.contract.name": ["undefined"],
      "73.config.escrows.0.isUpcoming": ["undefined"],
      "73.config.escrows.0.source": ["undefined"],
      "73.config.escrows.0.bridgedUsing": ["undefined"],
      "73.config.escrows.0.isHistorical": ["undefined"],
      "73.config.escrows.0.untilTimestamp": ["undefined"],
      "73.config.escrows.0.sharedEscrow": ["undefined"],
      "73.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.1.excludedTokens": ["undefined"],
      "73.config.escrows.1.premintedTokens": ["undefined"],
      "73.config.escrows.1.contract.name": ["undefined"],
      "73.config.escrows.1.isUpcoming": ["undefined"],
      "73.config.escrows.1.source": ["undefined"],
      "73.config.escrows.1.bridgedUsing": ["undefined"],
      "73.config.escrows.1.isHistorical": ["undefined"],
      "73.config.escrows.1.untilTimestamp": ["undefined"],
      "73.config.escrows.1.sharedEscrow": ["undefined"],
      "73.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.7.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.8.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.9.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.10.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.11.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.12.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.13.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.14.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.15.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.16.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.17.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.18.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.19.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.20.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.21.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.22.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.23.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.24.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.25.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.26.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.27.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.28.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.29.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.30.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.31.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.32.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.escrows.33.sinceTimestamp": [["custom", "UnixTime"]],
      "73.config.trackedTxs": ["undefined"],
      "73.config.finality": ["undefined"],
      "73.riskView.stateValidation.definingMetric": ["number"],
      "73.riskView.exitWindow.secondLine": ["undefined"],
      "73.riskView.proposerFailure.definingMetric": ["number"],
      "73.stateDerivation": ["undefined"],
      "73.upgradesAndGovernance": ["undefined"],
      "74.createdAt": [["custom", "UnixTime"]],
      "74.config.associatedTokens": ["undefined"],
      "74.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "74.chainConfig": ["undefined"],
      "75.createdAt": [["custom", "UnixTime"]],
      "75.config.associatedTokens": ["undefined"],
      "75.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "75.chainConfig": ["undefined"],
      "76.createdAt": [["custom", "UnixTime"]],
      "76.permissions.4.references": ["undefined"],
      "76.nativePermissions": ["undefined"],
      "76.contracts.addresses.1.upgradeability": ["undefined"],
      "76.contracts.addresses.6.upgradeability": ["undefined"],
      "76.contracts.nativeAddresses": ["undefined"],
      "76.display.warning": ["undefined"],
      "76.display.liveness": ["undefined"],
      "76.display.finality": ["undefined"],
      "76.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "76.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "76.config.escrows.0.excludedTokens": ["undefined"],
      "76.config.escrows.0.premintedTokens": ["undefined"],
      "76.config.escrows.0.contract.name": ["undefined"],
      "76.config.escrows.0.isUpcoming": ["undefined"],
      "76.config.escrows.0.source": ["undefined"],
      "76.config.escrows.0.bridgedUsing": ["undefined"],
      "76.config.escrows.0.isHistorical": ["undefined"],
      "76.config.escrows.0.untilTimestamp": ["undefined"],
      "76.config.escrows.0.sharedEscrow": ["undefined"],
      "76.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "76.config.escrows.1.excludedTokens": ["undefined"],
      "76.config.escrows.1.premintedTokens": ["undefined"],
      "76.config.escrows.1.contract.name": ["undefined"],
      "76.config.escrows.1.isUpcoming": ["undefined"],
      "76.config.escrows.1.source": ["undefined"],
      "76.config.escrows.1.bridgedUsing": ["undefined"],
      "76.config.escrows.1.isHistorical": ["undefined"],
      "76.config.escrows.1.untilTimestamp": ["undefined"],
      "76.config.escrows.1.sharedEscrow": ["undefined"],
      "76.config.trackedTxs": ["undefined"],
      "76.config.finality": ["undefined"],
      "76.riskView.stateValidation.definingMetric": ["number"],
      "76.riskView.exitWindow.secondLine": ["undefined"],
      "76.riskView.proposerFailure.definingMetric": ["number"],
      "76.stateDerivation": ["undefined"],
      "76.upgradesAndGovernance": ["undefined"],
      "77.createdAt": [["custom", "UnixTime"]],
      "77.permissions.4.references": ["undefined"],
      "77.permissions.5.references": ["undefined"],
      "77.permissions.6.references": ["undefined"],
      "77.nativePermissions": ["undefined"],
      "77.contracts.addresses.0.upgradeability": ["undefined"],
      "77.contracts.addresses.1.upgradeability": ["undefined"],
      "77.contracts.addresses.4.upgradeability": ["undefined"],
      "77.contracts.addresses.8.upgradeability": ["undefined"],
      "77.contracts.addresses.9.upgradeability": ["undefined"],
      "77.contracts.addresses.13.upgradeability": ["undefined"],
      "77.contracts.addresses.20.upgradeability": ["undefined"],
      "77.contracts.nativeAddresses": ["undefined"],
      "77.display.warning": ["undefined"],
      "77.display.liveness": ["undefined"],
      "77.display.finality": ["undefined"],
      "77.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "77.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "77.config.escrows.0.excludedTokens": ["undefined"],
      "77.config.escrows.0.premintedTokens": ["undefined"],
      "77.config.escrows.0.contract.name": ["undefined"],
      "77.config.escrows.0.isUpcoming": ["undefined"],
      "77.config.escrows.0.source": ["undefined"],
      "77.config.escrows.0.bridgedUsing": ["undefined"],
      "77.config.escrows.0.isHistorical": ["undefined"],
      "77.config.escrows.0.untilTimestamp": ["undefined"],
      "77.config.escrows.0.sharedEscrow": ["undefined"],
      "77.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "77.config.escrows.1.premintedTokens": ["undefined"],
      "77.config.escrows.1.contract.name": ["undefined"],
      "77.config.escrows.1.isUpcoming": ["undefined"],
      "77.config.escrows.1.source": ["undefined"],
      "77.config.escrows.1.bridgedUsing": ["undefined"],
      "77.config.escrows.1.isHistorical": ["undefined"],
      "77.config.escrows.1.untilTimestamp": ["undefined"],
      "77.config.escrows.1.sharedEscrow": ["undefined"],
      "77.config.trackedTxs": ["undefined"],
      "77.config.finality": ["undefined"],
      "77.riskView.stateValidation.definingMetric": ["number"],
      "77.riskView.exitWindow.secondLine": ["undefined"],
      "77.riskView.proposerFailure.definingMetric": ["number"],
      "77.stateDerivation": ["undefined"],
      "77.upgradesAndGovernance": ["undefined"],
      "78.createdAt": [["custom", "UnixTime"]],
      "78.permissions.5.references": ["undefined"],
      "78.permissions.6.references": ["undefined"],
      "78.permissions.7.references": ["undefined"],
      "78.permissions.8.references": ["undefined"],
      "78.permissions.9.references": ["undefined"],
      "78.permissions.10.references": ["undefined"],
      "78.permissions.11.references": ["undefined"],
      "78.nativePermissions": ["undefined"],
      "78.contracts.addresses.2.upgradeability": ["undefined"],
      "78.contracts.addresses.3.upgradeability": ["undefined"],
      "78.contracts.addresses.7.upgradeability": ["undefined"],
      "78.contracts.addresses.11.upgradeability": ["undefined"],
      "78.contracts.addresses.12.upgradeability": ["undefined"],
      "78.contracts.nativeAddresses": ["undefined"],
      "78.display.warning": ["undefined"],
      "78.chainConfig": ["undefined"],
      "78.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "78.config.escrows.0.excludedTokens": ["undefined"],
      "78.config.escrows.0.premintedTokens": ["undefined"],
      "78.config.escrows.0.contract.name": ["undefined"],
      "78.config.escrows.0.isUpcoming": ["undefined"],
      "78.config.escrows.0.source": ["undefined"],
      "78.config.escrows.0.bridgedUsing": ["undefined"],
      "78.config.escrows.0.isHistorical": ["undefined"],
      "78.config.escrows.0.untilTimestamp": ["undefined"],
      "78.config.escrows.0.sharedEscrow": ["undefined"],
      "78.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "78.config.escrows.1.excludedTokens": ["undefined"],
      "78.config.escrows.1.premintedTokens": ["undefined"],
      "78.config.escrows.1.contract.name": ["undefined"],
      "78.config.escrows.1.isUpcoming": ["undefined"],
      "78.config.escrows.1.source": ["undefined"],
      "78.config.escrows.1.bridgedUsing": ["undefined"],
      "78.config.escrows.1.isHistorical": ["undefined"],
      "78.config.escrows.1.untilTimestamp": ["undefined"],
      "78.config.escrows.1.sharedEscrow": ["undefined"],
      "78.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "78.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "78.config.finality": ["undefined"],
      "78.riskView.stateValidation.definingMetric": ["number"],
      "78.riskView.dataAvailability.definingMetric": ["number"],
      "78.riskView.exitWindow.secondLine": ["undefined"],
      "78.riskView.proposerFailure.definingMetric": ["number"],
      "78.stateDerivation": ["undefined"],
      "78.upgradesAndGovernance": ["undefined"],
      "79.createdAt": [["custom", "UnixTime"]],
      "79.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "79.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "79.riskView.stateValidation.definingMetric": ["number"],
      "79.riskView.dataAvailability.definingMetric": ["number"],
      "79.riskView.exitWindow.secondLine": ["undefined"],
      "79.riskView.proposerFailure.definingMetric": ["number"],
      "79.permissions.1.references": ["undefined"],
      "79.contracts.addresses.1.upgradeability": ["undefined"],
      "79.contracts.addresses.6.upgradeability": ["undefined"],
      "79.contracts.addresses.8.upgradeability": ["undefined"],
      "79.contracts.addresses.9.upgradeability": ["undefined"],
      "80.createdAt": [["custom", "UnixTime"]],
      "80.permissions.4.references": ["undefined"],
      "80.nativePermissions": ["undefined"],
      "80.contracts.addresses.3.upgradeability": ["undefined"],
      "80.contracts.addresses.5.upgradeability": ["undefined"],
      "80.contracts.nativeAddresses": ["undefined"],
      "80.display.warning": ["undefined"],
      "80.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "80.config.associatedTokens": ["undefined"],
      "80.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "80.config.escrows.0.excludedTokens": ["undefined"],
      "80.config.escrows.0.premintedTokens": ["undefined"],
      "80.config.escrows.0.contract.name": ["undefined"],
      "80.config.escrows.0.isUpcoming": ["undefined"],
      "80.config.escrows.0.source": ["undefined"],
      "80.config.escrows.0.bridgedUsing": ["undefined"],
      "80.config.escrows.0.isHistorical": ["undefined"],
      "80.config.escrows.0.untilTimestamp": ["undefined"],
      "80.config.escrows.0.sharedEscrow": ["undefined"],
      "80.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "80.config.escrows.1.excludedTokens": ["undefined"],
      "80.config.escrows.1.premintedTokens": ["undefined"],
      "80.config.escrows.1.contract.name": ["undefined"],
      "80.config.escrows.1.isUpcoming": ["undefined"],
      "80.config.escrows.1.source": ["undefined"],
      "80.config.escrows.1.bridgedUsing": ["undefined"],
      "80.config.escrows.1.isHistorical": ["undefined"],
      "80.config.escrows.1.untilTimestamp": ["undefined"],
      "80.config.escrows.1.sharedEscrow": ["undefined"],
      "80.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "80.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "80.config.finality": ["undefined"],
      "80.riskView.stateValidation.definingMetric": ["number"],
      "80.riskView.dataAvailability.definingMetric": ["number"],
      "80.riskView.exitWindow.secondLine": ["undefined"],
      "80.riskView.proposerFailure.definingMetric": ["number"],
      "80.stage.message": ["undefined"],
      "80.stateDerivation": ["undefined"],
      "80.upgradesAndGovernance": ["undefined"],
      "81.createdAt": [["custom", "UnixTime"]],
      "81.badges": ["undefined"],
      "82.createdAt": [["custom", "UnixTime"]],
      "82.permissions.5.references": ["undefined"],
      "82.permissions.6.references": ["undefined"],
      "82.permissions.7.references": ["undefined"],
      "82.permissions.8.references": ["undefined"],
      "82.permissions.9.references": ["undefined"],
      "82.permissions.10.references": ["undefined"],
      "82.permissions.11.references": ["undefined"],
      "82.permissions.12.references": ["undefined"],
      "82.nativePermissions": ["undefined"],
      "82.contracts.addresses.0.upgradeability": ["undefined"],
      "82.contracts.addresses.3.upgradeability": ["undefined"],
      "82.contracts.addresses.4.upgradeability": ["undefined"],
      "82.contracts.addresses.5.upgradeability": ["undefined"],
      "82.contracts.addresses.12.upgradeability": ["undefined"],
      "82.contracts.nativeAddresses": ["undefined"],
      "82.display.warning": ["undefined"],
      "82.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "82.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "82.config.escrows.0.excludedTokens": ["undefined"],
      "82.config.escrows.0.premintedTokens": ["undefined"],
      "82.config.escrows.0.contract.name": ["undefined"],
      "82.config.escrows.0.isUpcoming": ["undefined"],
      "82.config.escrows.0.source": ["undefined"],
      "82.config.escrows.0.bridgedUsing": ["undefined"],
      "82.config.escrows.0.isHistorical": ["undefined"],
      "82.config.escrows.0.untilTimestamp": ["undefined"],
      "82.config.escrows.0.sharedEscrow": ["undefined"],
      "82.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "82.config.escrows.1.excludedTokens": ["undefined"],
      "82.config.escrows.1.premintedTokens": ["undefined"],
      "82.config.escrows.1.contract.name": ["undefined"],
      "82.config.escrows.1.isUpcoming": ["undefined"],
      "82.config.escrows.1.source": ["undefined"],
      "82.config.escrows.1.bridgedUsing": ["undefined"],
      "82.config.escrows.1.isHistorical": ["undefined"],
      "82.config.escrows.1.untilTimestamp": ["undefined"],
      "82.config.escrows.1.sharedEscrow": ["undefined"],
      "82.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "82.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "82.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "82.config.finality.genesisTimestamp": [["custom", "UnixTime"]],
      "82.riskView.stateValidation.definingMetric": ["number"],
      "82.riskView.dataAvailability.definingMetric": ["number"],
      "82.riskView.exitWindow.secondLine": ["undefined"],
      "82.riskView.proposerFailure.definingMetric": ["number"],
      "82.stage.message": ["undefined"],
      "82.upgradesAndGovernance": ["undefined"],
      "83.createdAt": [["custom", "UnixTime"]],
      "83.badges": ["undefined"],
      "84.createdAt": [["custom", "UnixTime"]],
      "84.badges": ["undefined"],
      "85.createdAt": [["custom", "UnixTime"]],
      "85.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "85.config.escrows.0.excludedTokens": ["undefined"],
      "85.config.escrows.0.premintedTokens": ["undefined"],
      "85.config.escrows.0.contract.name": ["undefined"],
      "85.config.escrows.0.contract.description": ["undefined"],
      "85.config.escrows.0.contract.upgradableBy": ["undefined"],
      "85.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "85.config.escrows.0.isUpcoming": ["undefined"],
      "85.config.escrows.0.source": ["undefined"],
      "85.config.escrows.0.bridgedUsing": ["undefined"],
      "85.config.escrows.0.isHistorical": ["undefined"],
      "85.config.escrows.0.untilTimestamp": ["undefined"],
      "85.config.escrows.0.sharedEscrow": ["undefined"],
      "85.config.transactionApi.sinceTimestamp": [["custom", "UnixTime"]],
      "85.riskView.stateValidation.definingMetric": ["number"],
      "85.riskView.exitWindow.secondLine": ["undefined"],
      "85.riskView.proposerFailure.definingMetric": ["number"],
      "85.contracts.addresses.1.upgradeability": ["undefined"],
      "85.contracts.addresses.3.upgradeability": ["undefined"],
      "85.contracts.addresses.4.upgradeability": ["undefined"],
      "85.contracts.addresses.5.upgradeability": ["undefined"],
      "85.contracts.addresses.6.upgradeability": ["undefined"],
      "85.contracts.addresses.7.upgradeability": ["undefined"],
      "85.contracts.addresses.8.upgradeability": ["undefined"],
      "85.permissions.3.references": ["undefined"],
      "86.createdAt": [["custom", "UnixTime"]],
      "86.badges": ["undefined"],
      "87.createdAt": [["custom", "UnixTime"]],
      "87.config.associatedTokens": ["undefined"],
      "87.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "87.chainConfig": ["undefined"],
      "87.badges": ["undefined"],
      "88.createdAt": [["custom", "UnixTime"]],
      "88.badges": ["undefined"],
      "89.createdAt": [["custom", "UnixTime"]],
      "89.badges": ["undefined"],
      "90.createdAt": [["custom", "UnixTime"]],
      "90.badges": ["undefined"],
      "91.createdAt": [["custom", "UnixTime"]],
      "91.contracts.addresses.9.upgradeability": ["undefined"],
      "91.contracts.addresses.10.upgradeability": ["undefined"],
      "91.contracts.addresses.11.upgradeability": ["undefined"],
      "91.contracts.addresses.12.upgradeability": ["undefined"],
      "91.contracts.addresses.13.upgradeability": ["undefined"],
      "91.contracts.nativeAddresses.nova.1.upgradeability": ["undefined"],
      "91.contracts.nativeAddresses.nova.2.upgradeability": ["undefined"],
      "91.contracts.nativeAddresses.nova.3.upgradeability": ["undefined"],
      "91.contracts.nativeAddresses.nova.4.upgradeability": ["undefined"],
      "91.contracts.nativeAddresses.nova.5.upgradeability": ["undefined"],
      "91.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "91.technology.stateCorrectness": ["undefined"],
      "91.permissions.4.references": ["undefined"],
      "91.nativePermissions.nova.0.references": ["undefined"],
      "91.stateDerivation": ["undefined"],
      "91.display.liveness": ["undefined"],
      "91.riskView.exitWindow.secondLine": ["undefined"],
      "91.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "91.config.escrows.0.excludedTokens": ["undefined"],
      "91.config.escrows.0.premintedTokens": ["undefined"],
      "91.config.escrows.0.contract.name": ["undefined"],
      "91.config.escrows.0.isUpcoming": ["undefined"],
      "91.config.escrows.0.source": ["undefined"],
      "91.config.escrows.0.bridgedUsing": ["undefined"],
      "91.config.escrows.0.isHistorical": ["undefined"],
      "91.config.escrows.0.untilTimestamp": ["undefined"],
      "91.config.escrows.0.sharedEscrow": ["undefined"],
      "91.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "91.config.escrows.1.excludedTokens": ["undefined"],
      "91.config.escrows.1.premintedTokens": ["undefined"],
      "91.config.escrows.1.contract.name": ["undefined"],
      "91.config.escrows.1.contract.upgradeability": ["undefined"],
      "91.config.escrows.1.isUpcoming": ["undefined"],
      "91.config.escrows.1.source": ["undefined"],
      "91.config.escrows.1.bridgedUsing": ["undefined"],
      "91.config.escrows.1.isHistorical": ["undefined"],
      "91.config.escrows.1.untilTimestamp": ["undefined"],
      "91.config.escrows.1.sharedEscrow": ["undefined"],
      "91.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "91.config.escrows.2.excludedTokens": ["undefined"],
      "91.config.escrows.2.premintedTokens": ["undefined"],
      "91.config.escrows.2.contract.name": ["undefined"],
      "91.config.escrows.2.isUpcoming": ["undefined"],
      "91.config.escrows.2.source": ["undefined"],
      "91.config.escrows.2.bridgedUsing": ["undefined"],
      "91.config.escrows.2.isHistorical": ["undefined"],
      "91.config.escrows.2.untilTimestamp": ["undefined"],
      "91.config.escrows.2.sharedEscrow": ["undefined"],
      "91.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "91.config.escrows.3.excludedTokens": ["undefined"],
      "91.config.escrows.3.premintedTokens": ["undefined"],
      "91.config.escrows.3.contract.name": ["undefined"],
      "91.config.escrows.3.isUpcoming": ["undefined"],
      "91.config.escrows.3.source": ["undefined"],
      "91.config.escrows.3.bridgedUsing": ["undefined"],
      "91.config.escrows.3.isHistorical": ["undefined"],
      "91.config.escrows.3.untilTimestamp": ["undefined"],
      "91.config.escrows.3.sharedEscrow": ["undefined"],
      "91.config.trackedTxs": ["undefined"],
      "92.createdAt": [["custom", "UnixTime"]],
      "92.config.associatedTokens": ["undefined"],
      "92.config.transactionApi": ["undefined"],
      "92.chainConfig": ["undefined"],
      "92.badges": ["undefined"],
      "93.createdAt": [["custom", "UnixTime"]],
      "93.badges": ["undefined"],
      "94.createdAt": [["custom", "UnixTime"]],
      "94.badges": ["undefined"],
      "95.createdAt": [["custom", "UnixTime"]],
      "95.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "95.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "95.riskView.stateValidation.definingMetric": ["number"],
      "95.riskView.exitWindow.secondLine": ["undefined"],
      "95.riskView.sequencerFailure.definingMetric": ["undefined"],
      "95.riskView.proposerFailure.definingMetric": ["number"],
      "95.contracts.addresses.0.upgradeability": ["undefined"],
      "95.contracts.addresses.1.upgradeability": ["undefined"],
      "95.contracts.addresses.2.upgradeability": ["undefined"],
      "95.contracts.addresses.3.upgradeability": ["undefined"],
      "95.contracts.addresses.4.upgradeability": ["undefined"],
      "95.contracts.addresses.5.upgradeability": ["undefined"],
      "96.createdAt": [["custom", "UnixTime"]],
      "96.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.escrows.0.excludedTokens": ["undefined"],
      "96.config.escrows.0.premintedTokens": ["undefined"],
      "96.config.escrows.0.contract.name": ["undefined"],
      "96.config.escrows.0.contract.description": ["undefined"],
      "96.config.escrows.0.contract.upgradableBy": ["undefined"],
      "96.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "96.config.escrows.0.isUpcoming": ["undefined"],
      "96.config.escrows.0.source": ["undefined"],
      "96.config.escrows.0.bridgedUsing": ["undefined"],
      "96.config.escrows.0.isHistorical": ["undefined"],
      "96.config.escrows.0.untilTimestamp": ["undefined"],
      "96.config.escrows.0.sharedEscrow": ["undefined"],
      "96.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.escrows.1.excludedTokens": ["undefined"],
      "96.config.escrows.1.premintedTokens": ["undefined"],
      "96.config.escrows.1.contract.name": ["undefined"],
      "96.config.escrows.1.contract.description": ["undefined"],
      "96.config.escrows.1.contract.upgradableBy": ["undefined"],
      "96.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "96.config.escrows.1.isUpcoming": ["undefined"],
      "96.config.escrows.1.source": ["undefined"],
      "96.config.escrows.1.bridgedUsing": ["undefined"],
      "96.config.escrows.1.isHistorical": ["undefined"],
      "96.config.escrows.1.untilTimestamp": ["undefined"],
      "96.config.escrows.1.sharedEscrow": ["undefined"],
      "96.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.escrows.2.excludedTokens": ["undefined"],
      "96.config.escrows.2.premintedTokens": ["undefined"],
      "96.config.escrows.2.contract.name": ["undefined"],
      "96.config.escrows.2.contract.upgradeability": ["undefined"],
      "96.config.escrows.2.contract.upgradableBy": ["undefined"],
      "96.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "96.config.escrows.2.isUpcoming": ["undefined"],
      "96.config.escrows.2.source": ["undefined"],
      "96.config.escrows.2.bridgedUsing": ["undefined"],
      "96.config.escrows.2.isHistorical": ["undefined"],
      "96.config.escrows.2.untilTimestamp": ["undefined"],
      "96.config.escrows.2.sharedEscrow": ["undefined"],
      "96.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.escrows.3.excludedTokens": ["undefined"],
      "96.config.escrows.3.premintedTokens": ["undefined"],
      "96.config.escrows.3.contract.name": ["undefined"],
      "96.config.escrows.3.contract.upgradeability": ["undefined"],
      "96.config.escrows.3.contract.upgradableBy": ["undefined"],
      "96.config.escrows.3.contract.upgradeDelay": ["undefined"],
      "96.config.escrows.3.isUpcoming": ["undefined"],
      "96.config.escrows.3.source": ["undefined"],
      "96.config.escrows.3.bridgedUsing": ["undefined"],
      "96.config.escrows.3.isHistorical": ["undefined"],
      "96.config.escrows.3.untilTimestamp": ["undefined"],
      "96.config.escrows.3.sharedEscrow": ["undefined"],
      "96.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.escrows.6.excludedTokens": ["undefined"],
      "96.config.escrows.6.premintedTokens": ["undefined"],
      "96.config.escrows.6.contract.name": ["undefined"],
      "96.config.escrows.6.contract.upgradableBy": ["undefined"],
      "96.config.escrows.6.contract.upgradeDelay": ["undefined"],
      "96.config.escrows.6.isUpcoming": ["undefined"],
      "96.config.escrows.6.source": ["undefined"],
      "96.config.escrows.6.bridgedUsing": ["undefined"],
      "96.config.escrows.6.isHistorical": ["undefined"],
      "96.config.escrows.6.untilTimestamp": ["undefined"],
      "96.config.escrows.6.sharedEscrow": ["undefined"],
      "96.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "96.config.finality.genesisTimestamp": [["custom", "UnixTime"]],
      "96.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "96.config.trackedTxs.1.query.untilTimestamp": [["custom", "UnixTime"]],
      "96.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "96.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "96.riskView.stateValidation.definingMetric": ["number"],
      "96.riskView.dataAvailability.definingMetric": ["number"],
      "96.stage.message": ["undefined"],
      "96.permissions.2.references": ["undefined"],
      "96.permissions.3.references": ["undefined"],
      "96.permissions.4.references": ["undefined"],
      "96.permissions.6.references": ["undefined"],
      "96.nativePermissions.optimism.2.references": ["undefined"],
      "96.contracts.addresses.6.upgradeability": ["undefined"],
      "96.contracts.addresses.7.upgradeability": ["undefined"],
      "96.contracts.addresses.8.upgradeability": ["undefined"],
      "96.contracts.addresses.10.upgradeability": ["undefined"],
      "96.contracts.addresses.14.upgradeability": ["undefined"],
      "96.contracts.addresses.15.upgradeability": ["undefined"],
      "96.contracts.nativeAddresses.optimism.0.upgradeability": ["undefined"],
      "96.contracts.nativeAddresses.optimism.1.upgradeability": ["undefined"],
      "97.createdAt": [["custom", "UnixTime"]],
      "97.permissions.4.references": ["undefined"],
      "97.nativePermissions": ["undefined"],
      "97.contracts.addresses.0.upgradeability": ["undefined"],
      "97.contracts.addresses.2.upgradeability": ["undefined"],
      "97.contracts.nativeAddresses": ["undefined"],
      "97.display.warning": ["undefined"],
      "97.chainConfig": ["undefined"],
      "97.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "97.config.escrows.0.excludedTokens": ["undefined"],
      "97.config.escrows.0.premintedTokens": ["undefined"],
      "97.config.escrows.0.contract.name": ["undefined"],
      "97.config.escrows.0.isUpcoming": ["undefined"],
      "97.config.escrows.0.source": ["undefined"],
      "97.config.escrows.0.bridgedUsing": ["undefined"],
      "97.config.escrows.0.isHistorical": ["undefined"],
      "97.config.escrows.0.untilTimestamp": ["undefined"],
      "97.config.escrows.0.sharedEscrow": ["undefined"],
      "97.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "97.config.escrows.1.excludedTokens": ["undefined"],
      "97.config.escrows.1.premintedTokens": ["undefined"],
      "97.config.escrows.1.contract.name": ["undefined"],
      "97.config.escrows.1.isUpcoming": ["undefined"],
      "97.config.escrows.1.source": ["undefined"],
      "97.config.escrows.1.bridgedUsing": ["undefined"],
      "97.config.escrows.1.isHistorical": ["undefined"],
      "97.config.escrows.1.untilTimestamp": ["undefined"],
      "97.config.escrows.1.sharedEscrow": ["undefined"],
      "97.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "97.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "97.config.finality": ["undefined"],
      "97.riskView.stateValidation.definingMetric": ["number"],
      "97.riskView.dataAvailability.definingMetric": ["number"],
      "97.riskView.exitWindow.secondLine": ["undefined"],
      "97.riskView.proposerFailure.definingMetric": ["number"],
      "97.stage.message": ["undefined"],
      "97.stateDerivation": ["undefined"],
      "97.upgradesAndGovernance": ["undefined"],
      "98.createdAt": [["custom", "UnixTime"]],
      "98.permissions.4.references": ["undefined"],
      "98.permissions.5.references": ["undefined"],
      "98.nativePermissions": ["undefined"],
      "98.contracts.addresses.1.upgradeability": ["undefined"],
      "98.contracts.addresses.5.upgradeability": ["undefined"],
      "98.contracts.nativeAddresses": ["undefined"],
      "98.display.warning": ["undefined"],
      "98.display.liveness": ["undefined"],
      "98.display.finality": ["undefined"],
      "98.chainConfig": ["undefined"],
      "98.config.associatedTokens": ["undefined"],
      "98.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "98.config.escrows.0.excludedTokens": ["undefined"],
      "98.config.escrows.0.premintedTokens": ["undefined"],
      "98.config.escrows.0.contract.name": ["undefined"],
      "98.config.escrows.0.isUpcoming": ["undefined"],
      "98.config.escrows.0.source": ["undefined"],
      "98.config.escrows.0.bridgedUsing": ["undefined"],
      "98.config.escrows.0.isHistorical": ["undefined"],
      "98.config.escrows.0.untilTimestamp": ["undefined"],
      "98.config.escrows.0.sharedEscrow": ["undefined"],
      "98.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "98.config.escrows.1.excludedTokens": ["undefined"],
      "98.config.escrows.1.premintedTokens": ["undefined"],
      "98.config.escrows.1.contract.name": ["undefined"],
      "98.config.escrows.1.isUpcoming": ["undefined"],
      "98.config.escrows.1.source": ["undefined"],
      "98.config.escrows.1.bridgedUsing": ["undefined"],
      "98.config.escrows.1.isHistorical": ["undefined"],
      "98.config.escrows.1.untilTimestamp": ["undefined"],
      "98.config.escrows.1.sharedEscrow": ["undefined"],
      "98.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "98.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "98.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "98.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "98.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "98.config.trackedTxs": ["undefined"],
      "98.config.finality": ["undefined"],
      "98.riskView.stateValidation.definingMetric": ["number"],
      "98.riskView.exitWindow.secondLine": ["undefined"],
      "98.riskView.proposerFailure.definingMetric": ["number"],
      "98.stateDerivation": ["undefined"],
      "98.upgradesAndGovernance": ["undefined"],
      "99.createdAt": [["custom", "UnixTime"]],
      "99.badges": ["undefined"],
      "100.createdAt": [["custom", "UnixTime"]],
      "100.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.escrows.0.excludedTokens": ["undefined"],
      "100.config.escrows.0.premintedTokens": ["undefined"],
      "100.config.escrows.0.contract.name": ["undefined"],
      "100.config.escrows.0.isUpcoming": ["undefined"],
      "100.config.escrows.0.source": ["undefined"],
      "100.config.escrows.0.bridgedUsing": ["undefined"],
      "100.config.escrows.0.isHistorical": ["undefined"],
      "100.config.escrows.0.untilTimestamp": ["undefined"],
      "100.config.escrows.0.sharedEscrow": ["undefined"],
      "100.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.1.query.untilTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.2.query.untilTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.3.query.untilTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.4.query.untilTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.5.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.6.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.7.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.8.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.8.query.untilTimestamp": [["custom", "UnixTime"]],
      "100.config.trackedTxs.9.query.sinceTimestamp": [["custom", "UnixTime"]],
      "100.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "100.riskView.stateValidation.definingMetric": ["number"],
      "100.riskView.dataAvailability.definingMetric": ["number"],
      "100.riskView.exitWindow.secondLine": ["undefined"],
      "100.riskView.proposerFailure.definingMetric": ["number"],
      "100.contracts.addresses.2.upgradeability": ["undefined"],
      "100.contracts.addresses.3.upgradeability": ["undefined"],
      "100.contracts.addresses.4.upgradeability": ["undefined"],
      "100.contracts.addresses.5.upgradeability": ["undefined"],
      "100.contracts.addresses.6.upgradeability": ["undefined"],
      "100.contracts.addresses.7.upgradeability": ["undefined"],
      "100.permissions.3.references": ["undefined"],
      "101.createdAt": [["custom", "UnixTime"]],
      "101.contracts.addresses.8.upgradeability": ["undefined"],
      "101.contracts.addresses.9.upgradeability": ["undefined"],
      "101.contracts.addresses.10.upgradeability": ["undefined"],
      "101.contracts.addresses.11.upgradeability": ["undefined"],
      "101.contracts.addresses.12.upgradeability": ["undefined"],
      "101.contracts.nativeAddresses": ["undefined"],
      "101.chainConfig": ["undefined"],
      "101.technology.stateCorrectness": ["undefined"],
      "101.permissions.3.references": ["undefined"],
      "101.nativePermissions": ["undefined"],
      "101.stateDerivation": ["undefined"],
      "101.upgradesAndGovernance": ["undefined"],
      "101.knowledgeNuggets": ["undefined"],
      "101.riskView.dataAvailability.definingMetric": ["number"],
      "101.riskView.exitWindow.secondLine": ["undefined"],
      "101.config.associatedTokens": ["undefined"],
      "101.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "101.config.escrows.0.excludedTokens": ["undefined"],
      "101.config.escrows.0.premintedTokens": ["undefined"],
      "101.config.escrows.0.contract.name": ["undefined"],
      "101.config.escrows.0.isUpcoming": ["undefined"],
      "101.config.escrows.0.source": ["undefined"],
      "101.config.escrows.0.bridgedUsing": ["undefined"],
      "101.config.escrows.0.isHistorical": ["undefined"],
      "101.config.escrows.0.untilTimestamp": ["undefined"],
      "101.config.escrows.0.sharedEscrow": ["undefined"],
      "101.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "101.config.escrows.1.excludedTokens": ["undefined"],
      "101.config.escrows.1.premintedTokens": ["undefined"],
      "101.config.escrows.1.contract.name": ["undefined"],
      "101.config.escrows.1.contract.upgradableBy": ["undefined"],
      "101.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "101.config.escrows.1.isUpcoming": ["undefined"],
      "101.config.escrows.1.source": ["undefined"],
      "101.config.escrows.1.bridgedUsing": ["undefined"],
      "101.config.escrows.1.isHistorical": ["undefined"],
      "101.config.escrows.1.untilTimestamp": ["undefined"],
      "101.config.escrows.1.sharedEscrow": ["undefined"],
      "101.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "101.config.escrows.2.excludedTokens": ["undefined"],
      "101.config.escrows.2.premintedTokens": ["undefined"],
      "101.config.escrows.2.contract.name": ["undefined"],
      "101.config.escrows.2.contract.upgradableBy": ["undefined"],
      "101.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "101.config.escrows.2.isUpcoming": ["undefined"],
      "101.config.escrows.2.source": ["undefined"],
      "101.config.escrows.2.bridgedUsing": ["undefined"],
      "101.config.escrows.2.isHistorical": ["undefined"],
      "101.config.escrows.2.untilTimestamp": ["undefined"],
      "101.config.escrows.2.sharedEscrow": ["undefined"],
      "101.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "101.config.escrows.3.excludedTokens": ["undefined"],
      "101.config.escrows.3.premintedTokens": ["undefined"],
      "101.config.escrows.3.contract.name": ["undefined"],
      "101.config.escrows.3.contract.upgradableBy": ["undefined"],
      "101.config.escrows.3.contract.upgradeDelay": ["undefined"],
      "101.config.escrows.3.isUpcoming": ["undefined"],
      "101.config.escrows.3.source": ["undefined"],
      "101.config.escrows.3.bridgedUsing": ["undefined"],
      "101.config.escrows.3.isHistorical": ["undefined"],
      "101.config.escrows.3.untilTimestamp": ["undefined"],
      "101.config.escrows.3.sharedEscrow": ["undefined"],
      "101.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "101.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "101.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "101.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "101.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "102.createdAt": [["custom", "UnixTime"]],
      "102.config.associatedTokens": ["undefined"],
      "102.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "102.chainConfig": ["undefined"],
      "102.badges": ["undefined"],
      "103.createdAt": [["custom", "UnixTime"]],
      "103.badges": ["undefined"],
      "104.createdAt": [["custom", "UnixTime"]],
      "104.badges": ["undefined"],
      "105.createdAt": [["custom", "UnixTime"]],
      "105.badges": ["undefined"],
      "106.createdAt": [["custom", "UnixTime"]],
      "106.badges": ["undefined"],
      "107.createdAt": [["custom", "UnixTime"]],
      "107.display.tvlWarning": ["undefined"],
      "107.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "107.config.escrows.0.excludedTokens": ["undefined"],
      "107.config.escrows.0.premintedTokens": ["undefined"],
      "107.config.escrows.0.contract.name": ["undefined"],
      "107.config.escrows.0.contract.description": ["undefined"],
      "107.config.escrows.0.contract.upgradableBy": ["undefined"],
      "107.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "107.config.escrows.0.isUpcoming": ["undefined"],
      "107.config.escrows.0.source": ["undefined"],
      "107.config.escrows.0.bridgedUsing": ["undefined"],
      "107.config.escrows.0.isHistorical": ["undefined"],
      "107.config.escrows.0.untilTimestamp": ["undefined"],
      "107.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.2.query.untilTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.3.query.untilTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.4.query.untilTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.5.query.sinceTimestamp": [["custom", "UnixTime"]],
      "107.config.trackedTxs.6.query.sinceTimestamp": [["custom", "UnixTime"]],
      "107.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "107.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "107.riskView.stateValidation.definingMetric": ["number"],
      "107.riskView.dataAvailability.definingMetric": ["number"],
      "107.riskView.exitWindow.secondLine": ["undefined"],
      "107.stage.message": ["undefined"],
      "107.permissions.2.references": ["undefined"],
      "107.permissions.4.references": ["undefined"],
      "107.permissions.5.references": ["undefined"],
      "107.contracts.addresses.1.upgradeability": ["undefined"],
      "107.contracts.addresses.5.upgradeability": ["undefined"],
      "108.createdAt": [["custom", "UnixTime"]],
      "108.badges": ["undefined"],
      "109.createdAt": [["custom", "UnixTime"]],
      "109.permissions.4.references": ["undefined"],
      "109.nativePermissions": ["undefined"],
      "109.contracts.addresses.1.upgradeability": ["undefined"],
      "109.contracts.addresses.4.upgradeability": ["undefined"],
      "109.contracts.nativeAddresses": ["undefined"],
      "109.display.warning": ["undefined"],
      "109.chainConfig": ["undefined"],
      "109.config.associatedTokens": ["undefined"],
      "109.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.escrows.0.excludedTokens": ["undefined"],
      "109.config.escrows.0.premintedTokens": ["undefined"],
      "109.config.escrows.0.contract.name": ["undefined"],
      "109.config.escrows.0.isUpcoming": ["undefined"],
      "109.config.escrows.0.source": ["undefined"],
      "109.config.escrows.0.bridgedUsing": ["undefined"],
      "109.config.escrows.0.isHistorical": ["undefined"],
      "109.config.escrows.0.untilTimestamp": ["undefined"],
      "109.config.escrows.0.sharedEscrow": ["undefined"],
      "109.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.escrows.1.excludedTokens": ["undefined"],
      "109.config.escrows.1.premintedTokens": ["undefined"],
      "109.config.escrows.1.contract.name": ["undefined"],
      "109.config.escrows.1.isUpcoming": ["undefined"],
      "109.config.escrows.1.source": ["undefined"],
      "109.config.escrows.1.bridgedUsing": ["undefined"],
      "109.config.escrows.1.isHistorical": ["undefined"],
      "109.config.escrows.1.untilTimestamp": ["undefined"],
      "109.config.escrows.1.sharedEscrow": ["undefined"],
      "109.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.escrows.7.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "109.config.finality.genesisTimestamp": [["custom", "UnixTime"]],
      "109.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "109.riskView.stateValidation.definingMetric": ["number"],
      "109.riskView.dataAvailability.definingMetric": ["number"],
      "109.riskView.exitWindow.secondLine": ["undefined"],
      "109.riskView.proposerFailure.definingMetric": ["number"],
      "109.stateDerivation": ["undefined"],
      "109.upgradesAndGovernance": ["undefined"],
      "110.createdAt": [["custom", "UnixTime"]],
      "110.permissions.4.references": ["undefined"],
      "110.permissions.5.references": ["undefined"],
      "110.nativePermissions": ["undefined"],
      "110.contracts.addresses.0.upgradeability": ["undefined"],
      "110.contracts.addresses.5.upgradeability": ["undefined"],
      "110.contracts.nativeAddresses": ["undefined"],
      "110.display.warning": ["undefined"],
      "110.display.liveness": ["undefined"],
      "110.display.finality": ["undefined"],
      "110.chainConfig": ["undefined"],
      "110.config.associatedTokens": ["undefined"],
      "110.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "110.config.escrows.0.excludedTokens": ["undefined"],
      "110.config.escrows.0.premintedTokens": ["undefined"],
      "110.config.escrows.0.contract.name": ["undefined"],
      "110.config.escrows.0.isUpcoming": ["undefined"],
      "110.config.escrows.0.source": ["undefined"],
      "110.config.escrows.0.bridgedUsing": ["undefined"],
      "110.config.escrows.0.isHistorical": ["undefined"],
      "110.config.escrows.0.untilTimestamp": ["undefined"],
      "110.config.escrows.0.sharedEscrow": ["undefined"],
      "110.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "110.config.escrows.1.excludedTokens": ["undefined"],
      "110.config.escrows.1.premintedTokens": ["undefined"],
      "110.config.escrows.1.contract.name": ["undefined"],
      "110.config.escrows.1.isUpcoming": ["undefined"],
      "110.config.escrows.1.source": ["undefined"],
      "110.config.escrows.1.bridgedUsing": ["undefined"],
      "110.config.escrows.1.isHistorical": ["undefined"],
      "110.config.escrows.1.untilTimestamp": ["undefined"],
      "110.config.escrows.1.sharedEscrow": ["undefined"],
      "110.config.trackedTxs": ["undefined"],
      "110.config.finality": ["undefined"],
      "110.riskView.stateValidation.definingMetric": ["number"],
      "110.riskView.exitWindow.secondLine": ["undefined"],
      "110.riskView.proposerFailure.definingMetric": ["number"],
      "110.upgradesAndGovernance": ["undefined"],
      "111.createdAt": [["custom", "UnixTime"]],
      "111.badges": ["undefined"],
      "112.createdAt": [["custom", "UnixTime"]],
      "112.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "112.config.escrows.0.excludedTokens": ["undefined"],
      "112.config.escrows.0.premintedTokens": ["undefined"],
      "112.config.escrows.0.contract.name": ["undefined"],
      "112.config.escrows.0.contract.upgradableBy": ["undefined"],
      "112.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "112.config.escrows.0.isUpcoming": ["undefined"],
      "112.config.escrows.0.source": ["undefined"],
      "112.config.escrows.0.bridgedUsing": ["undefined"],
      "112.config.escrows.0.isHistorical": ["undefined"],
      "112.config.escrows.0.untilTimestamp": ["undefined"],
      "112.config.escrows.0.sharedEscrow": ["undefined"],
      "112.riskView.stateValidation.definingMetric": ["number"],
      "112.riskView.exitWindow.secondLine": ["undefined"],
      "112.riskView.proposerFailure.definingMetric": ["number"],
      "112.contracts.addresses.1.upgradeability": ["undefined"],
      "112.contracts.addresses.3.upgradeability": ["undefined"],
      "112.contracts.addresses.4.upgradeability": ["undefined"],
      "112.contracts.addresses.5.upgradeability": ["undefined"],
      "112.contracts.addresses.6.upgradeability": ["undefined"],
      "112.contracts.addresses.7.upgradeability": ["undefined"],
      "112.contracts.addresses.8.upgradeability": ["undefined"],
      "112.permissions.3.references": ["undefined"],
      "113.createdAt": [["custom", "UnixTime"]],
      "114.createdAt": [["custom", "UnixTime"]],
      "114.permissions.5.references": ["undefined"],
      "114.nativePermissions": ["undefined"],
      "114.contracts.nativeAddresses": ["undefined"],
      "114.discoveryDrivenData": ["undefined"],
      "114.display.warning": ["undefined"],
      "114.display.liveness": ["undefined"],
      "114.display.finality": ["undefined"],
      "114.chainConfig": ["undefined"],
      "114.config.associatedTokens": ["undefined"],
      "114.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "114.config.escrows.0.excludedTokens": ["undefined"],
      "114.config.escrows.0.premintedTokens": ["undefined"],
      "114.config.escrows.0.contract.name": ["undefined"],
      "114.config.escrows.0.isUpcoming": ["undefined"],
      "114.config.escrows.0.source": ["undefined"],
      "114.config.escrows.0.bridgedUsing": ["undefined"],
      "114.config.escrows.0.isHistorical": ["undefined"],
      "114.config.escrows.0.untilTimestamp": ["undefined"],
      "114.config.escrows.0.sharedEscrow": ["undefined"],
      "114.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "114.config.escrows.1.excludedTokens": ["undefined"],
      "114.config.escrows.1.premintedTokens": ["undefined"],
      "114.config.escrows.1.contract.name": ["undefined"],
      "114.config.escrows.1.isUpcoming": ["undefined"],
      "114.config.escrows.1.source": ["undefined"],
      "114.config.escrows.1.bridgedUsing": ["undefined"],
      "114.config.escrows.1.isHistorical": ["undefined"],
      "114.config.escrows.1.untilTimestamp": ["undefined"],
      "114.config.escrows.1.sharedEscrow": ["undefined"],
      "114.config.trackedTxs": ["undefined"],
      "114.config.finality": ["undefined"],
      "114.riskView.stateValidation.definingMetric": ["number"],
      "114.riskView.exitWindow.secondLine": ["undefined"],
      "114.riskView.proposerFailure.definingMetric": ["number"],
      "114.stateDerivation": ["undefined"],
      "114.upgradesAndGovernance": ["undefined"],
      "115.createdAt": [["custom", "UnixTime"]],
      "115.contracts.addresses.0.upgradeability": ["undefined"],
      "115.contracts.addresses.1.upgradeability": ["undefined"],
      "115.contracts.addresses.2.upgradeability": ["undefined"],
      "115.contracts.addresses.3.upgradeability": ["undefined"],
      "115.contracts.addresses.12.upgradeability": ["undefined"],
      "115.contracts.addresses.13.upgradeability": ["undefined"],
      "115.contracts.addresses.14.upgradeability": ["undefined"],
      "115.contracts.addresses.15.upgradeability": ["undefined"],
      "115.contracts.addresses.16.upgradeability": ["undefined"],
      "115.contracts.nativeAddresses": ["undefined"],
      "115.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "115.technology.stateCorrectness": ["undefined"],
      "115.permissions.2.references": ["undefined"],
      "115.permissions.3.references": ["undefined"],
      "115.nativePermissions": ["undefined"],
      "115.stateDerivation": ["undefined"],
      "115.upgradesAndGovernance": ["undefined"],
      "115.knowledgeNuggets": ["undefined"],
      "115.display.liveness": ["undefined"],
      "115.riskView.exitWindow.secondLine": ["undefined"],
      "115.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "115.config.escrows.0.excludedTokens": ["undefined"],
      "115.config.escrows.0.premintedTokens": ["undefined"],
      "115.config.escrows.0.contract.name": ["undefined"],
      "115.config.escrows.0.isUpcoming": ["undefined"],
      "115.config.escrows.0.source": ["undefined"],
      "115.config.escrows.0.bridgedUsing": ["undefined"],
      "115.config.escrows.0.isHistorical": ["undefined"],
      "115.config.escrows.0.untilTimestamp": ["undefined"],
      "115.config.escrows.0.sharedEscrow": ["undefined"],
      "115.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "115.config.escrows.1.excludedTokens": ["undefined"],
      "115.config.escrows.1.premintedTokens": ["undefined"],
      "115.config.escrows.1.contract.name": ["undefined"],
      "115.config.escrows.1.contract.upgradableBy": ["undefined"],
      "115.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "115.config.escrows.1.isUpcoming": ["undefined"],
      "115.config.escrows.1.source": ["undefined"],
      "115.config.escrows.1.bridgedUsing": ["undefined"],
      "115.config.escrows.1.isHistorical": ["undefined"],
      "115.config.escrows.1.untilTimestamp": ["undefined"],
      "115.config.escrows.1.sharedEscrow": ["undefined"],
      "115.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "115.config.escrows.2.excludedTokens": ["undefined"],
      "115.config.escrows.2.premintedTokens": ["undefined"],
      "115.config.escrows.2.contract.name": ["undefined"],
      "115.config.escrows.2.contract.upgradeability": ["undefined"],
      "115.config.escrows.2.contract.upgradableBy": ["undefined"],
      "115.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "115.config.escrows.2.isUpcoming": ["undefined"],
      "115.config.escrows.2.source": ["undefined"],
      "115.config.escrows.2.bridgedUsing": ["undefined"],
      "115.config.escrows.2.isHistorical": ["undefined"],
      "115.config.escrows.2.untilTimestamp": ["undefined"],
      "115.config.escrows.2.sharedEscrow": ["undefined"],
      "115.config.trackedTxs": ["undefined"],
      "116.createdAt": [["custom", "UnixTime"]],
      "116.contracts.addresses.7.upgradeability": ["undefined"],
      "116.contracts.addresses.8.upgradeability": ["undefined"],
      "116.contracts.addresses.9.upgradeability": ["undefined"],
      "116.contracts.addresses.10.upgradeability": ["undefined"],
      "116.contracts.addresses.11.upgradeability": ["undefined"],
      "116.contracts.nativeAddresses": ["undefined"],
      "116.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "116.technology.stateCorrectness": ["undefined"],
      "116.permissions.2.references": ["undefined"],
      "116.nativePermissions": ["undefined"],
      "116.stateDerivation": ["undefined"],
      "116.upgradesAndGovernance": ["undefined"],
      "116.knowledgeNuggets": ["undefined"],
      "116.display.liveness": ["undefined"],
      "116.riskView.exitWindow.secondLine": ["undefined"],
      "116.config.associatedTokens": ["undefined"],
      "116.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "116.config.escrows.0.excludedTokens": ["undefined"],
      "116.config.escrows.0.premintedTokens": ["undefined"],
      "116.config.escrows.0.contract.name": ["undefined"],
      "116.config.escrows.0.isUpcoming": ["undefined"],
      "116.config.escrows.0.source": ["undefined"],
      "116.config.escrows.0.bridgedUsing": ["undefined"],
      "116.config.escrows.0.isHistorical": ["undefined"],
      "116.config.escrows.0.untilTimestamp": ["undefined"],
      "116.config.escrows.0.sharedEscrow": ["undefined"],
      "116.config.trackedTxs": ["undefined"],
      "117.createdAt": [["custom", "UnixTime"]],
      "117.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "117.config.transactionApi.sinceTimestamp": [["custom", "UnixTime"]],
      "117.riskView.stateValidation.definingMetric": ["number"],
      "117.riskView.exitWindow.secondLine": ["undefined"],
      "117.riskView.proposerFailure.definingMetric": ["number"],
      "117.contracts.addresses.1.upgradeability": ["undefined"],
      "117.contracts.addresses.3.upgradeability": ["undefined"],
      "117.contracts.addresses.4.upgradeability": ["undefined"],
      "117.contracts.addresses.5.upgradeability": ["undefined"],
      "117.contracts.addresses.6.upgradeability": ["undefined"],
      "117.contracts.addresses.7.upgradeability": ["undefined"],
      "117.contracts.addresses.8.upgradeability": ["undefined"],
      "117.permissions.1.references": ["undefined"],
      "117.permissions.4.references": ["undefined"],
      "118.createdAt": [["custom", "UnixTime"]],
      "118.badges": ["undefined"],
      "119.createdAt": [["custom", "UnixTime"]],
      "119.permissions.4.references": ["undefined"],
      "119.nativePermissions": ["undefined"],
      "119.contracts.addresses.0.upgradeability": ["undefined"],
      "119.contracts.addresses.5.upgradeability": ["undefined"],
      "119.contracts.nativeAddresses": ["undefined"],
      "119.display.warning": ["undefined"],
      "119.display.liveness": ["undefined"],
      "119.display.finality": ["undefined"],
      "119.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "119.config.escrows.0.excludedTokens": ["undefined"],
      "119.config.escrows.0.premintedTokens": ["undefined"],
      "119.config.escrows.0.contract.name": ["undefined"],
      "119.config.escrows.0.isUpcoming": ["undefined"],
      "119.config.escrows.0.source": ["undefined"],
      "119.config.escrows.0.bridgedUsing": ["undefined"],
      "119.config.escrows.0.isHistorical": ["undefined"],
      "119.config.escrows.0.untilTimestamp": ["undefined"],
      "119.config.escrows.0.sharedEscrow": ["undefined"],
      "119.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "119.config.escrows.1.excludedTokens": ["undefined"],
      "119.config.escrows.1.premintedTokens": ["undefined"],
      "119.config.escrows.1.contract.name": ["undefined"],
      "119.config.escrows.1.isUpcoming": ["undefined"],
      "119.config.escrows.1.source": ["undefined"],
      "119.config.escrows.1.bridgedUsing": ["undefined"],
      "119.config.escrows.1.isHistorical": ["undefined"],
      "119.config.escrows.1.untilTimestamp": ["undefined"],
      "119.config.escrows.1.sharedEscrow": ["undefined"],
      "119.config.trackedTxs": ["undefined"],
      "119.config.finality": ["undefined"],
      "119.riskView.stateValidation.definingMetric": ["number"],
      "119.riskView.exitWindow.secondLine": ["undefined"],
      "119.riskView.proposerFailure.definingMetric": ["number"],
      "119.stateDerivation": ["undefined"],
      "119.upgradesAndGovernance": ["undefined"],
      "120.createdAt": [["custom", "UnixTime"]],
      "120.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "120.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.escrows.0.excludedTokens": ["undefined"],
      "120.config.escrows.0.premintedTokens": ["undefined"],
      "120.config.escrows.0.contract.name": ["undefined"],
      "120.config.escrows.0.contract.description": ["undefined"],
      "120.config.escrows.0.isUpcoming": ["undefined"],
      "120.config.escrows.0.source": ["undefined"],
      "120.config.escrows.0.bridgedUsing": ["undefined"],
      "120.config.escrows.0.isHistorical": ["undefined"],
      "120.config.escrows.0.untilTimestamp": ["undefined"],
      "120.config.escrows.0.sharedEscrow": ["undefined"],
      "120.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.escrows.1.excludedTokens": ["undefined"],
      "120.config.escrows.1.premintedTokens": ["undefined"],
      "120.config.escrows.1.contract.name": ["undefined"],
      "120.config.escrows.1.contract.description": ["undefined"],
      "120.config.escrows.1.isUpcoming": ["undefined"],
      "120.config.escrows.1.source": ["undefined"],
      "120.config.escrows.1.bridgedUsing": ["undefined"],
      "120.config.escrows.1.isHistorical": ["undefined"],
      "120.config.escrows.1.untilTimestamp": ["undefined"],
      "120.config.escrows.1.sharedEscrow": ["undefined"],
      "120.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.escrows.2.excludedTokens": ["undefined"],
      "120.config.escrows.2.premintedTokens": ["undefined"],
      "120.config.escrows.2.contract.name": ["undefined"],
      "120.config.escrows.2.contract.description": ["undefined"],
      "120.config.escrows.2.isUpcoming": ["undefined"],
      "120.config.escrows.2.source": ["undefined"],
      "120.config.escrows.2.bridgedUsing": ["undefined"],
      "120.config.escrows.2.isHistorical": ["undefined"],
      "120.config.escrows.2.untilTimestamp": ["undefined"],
      "120.config.escrows.2.sharedEscrow": ["undefined"],
      "120.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.escrows.3.excludedTokens": ["undefined"],
      "120.config.escrows.3.premintedTokens": ["undefined"],
      "120.config.escrows.3.contract.name": ["undefined"],
      "120.config.escrows.3.contract.description": ["undefined"],
      "120.config.escrows.3.isUpcoming": ["undefined"],
      "120.config.escrows.3.source": ["undefined"],
      "120.config.escrows.3.bridgedUsing": ["undefined"],
      "120.config.escrows.3.isHistorical": ["undefined"],
      "120.config.escrows.3.untilTimestamp": ["undefined"],
      "120.config.escrows.3.sharedEscrow": ["undefined"],
      "120.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.escrows.4.excludedTokens": ["undefined"],
      "120.config.escrows.4.premintedTokens": ["undefined"],
      "120.config.escrows.4.contract.name": ["undefined"],
      "120.config.escrows.4.contract.description": ["undefined"],
      "120.config.escrows.4.isUpcoming": ["undefined"],
      "120.config.escrows.4.source": ["undefined"],
      "120.config.escrows.4.bridgedUsing": ["undefined"],
      "120.config.escrows.4.isHistorical": ["undefined"],
      "120.config.escrows.4.untilTimestamp": ["undefined"],
      "120.config.escrows.4.sharedEscrow": ["undefined"],
      "120.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.escrows.5.excludedTokens": ["undefined"],
      "120.config.escrows.5.premintedTokens": ["undefined"],
      "120.config.escrows.5.contract.name": ["undefined"],
      "120.config.escrows.5.contract.upgradableBy": ["undefined"],
      "120.config.escrows.5.contract.upgradeDelay": ["undefined"],
      "120.config.escrows.5.isUpcoming": ["undefined"],
      "120.config.escrows.5.source": ["undefined"],
      "120.config.escrows.5.bridgedUsing": ["undefined"],
      "120.config.escrows.5.isHistorical": ["undefined"],
      "120.config.escrows.5.untilTimestamp": ["undefined"],
      "120.config.escrows.5.sharedEscrow": ["undefined"],
      "120.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.escrows.6.excludedTokens": ["undefined"],
      "120.config.escrows.6.premintedTokens": ["undefined"],
      "120.config.escrows.6.contract.name": ["undefined"],
      "120.config.escrows.6.contract.upgradableBy": ["undefined"],
      "120.config.escrows.6.contract.upgradeDelay": ["undefined"],
      "120.config.escrows.6.isUpcoming": ["undefined"],
      "120.config.escrows.6.source": ["undefined"],
      "120.config.escrows.6.bridgedUsing": ["undefined"],
      "120.config.escrows.6.isHistorical": ["undefined"],
      "120.config.escrows.6.untilTimestamp": ["undefined"],
      "120.config.escrows.6.sharedEscrow": ["undefined"],
      "120.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "120.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.trackedTxs.3.query.untilTimestamp": [["custom", "UnixTime"]],
      "120.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "120.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "120.riskView.stateValidation.definingMetric": ["number"],
      "120.riskView.dataAvailability.definingMetric": ["number"],
      "120.riskView.exitWindow.secondLine": ["undefined"],
      "120.riskView.proposerFailure.definingMetric": ["number"],
      "120.contracts.addresses.3.upgradeability": ["undefined"],
      "120.contracts.addresses.4.upgradeability": ["undefined"],
      "120.contracts.addresses.5.upgradeability": ["undefined"],
      "120.contracts.addresses.6.upgradeability": ["undefined"],
      "120.contracts.addresses.7.upgradeability": ["undefined"],
      "120.contracts.addresses.8.upgradeability": ["undefined"],
      "120.contracts.addresses.9.upgradeability": ["undefined"],
      "120.contracts.addresses.10.upgradeability": ["undefined"],
      "120.contracts.addresses.11.upgradeability": ["undefined"],
      "120.contracts.addresses.12.upgradeability": ["undefined"],
      "120.contracts.addresses.13.upgradeability": ["undefined"],
      "120.contracts.addresses.14.upgradeability": ["undefined"],
      "120.contracts.addresses.15.upgradeability": ["undefined"],
      "120.contracts.addresses.16.upgradeability": ["undefined"],
      "120.contracts.addresses.17.upgradeability": ["undefined"],
      "120.contracts.addresses.18.upgradeability": ["undefined"],
      "120.permissions.0.references": ["undefined"],
      "120.permissions.1.references": ["undefined"],
      "120.permissions.2.references": ["undefined"],
      "121.createdAt": [["custom", "UnixTime"]],
      "121.display.tvlWarning": ["undefined"],
      "121.config.associatedTokens": ["undefined"],
      "121.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "121.config.escrows.0.excludedTokens": ["undefined"],
      "121.config.escrows.0.premintedTokens": ["undefined"],
      "121.config.escrows.0.contract.name": ["undefined"],
      "121.config.escrows.0.contract.description": ["undefined"],
      "121.config.escrows.0.contract.upgradableBy": ["undefined"],
      "121.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "121.config.escrows.0.isUpcoming": ["undefined"],
      "121.config.escrows.0.source": ["undefined"],
      "121.config.escrows.0.bridgedUsing": ["undefined"],
      "121.config.escrows.0.isHistorical": ["undefined"],
      "121.config.escrows.0.untilTimestamp": ["undefined"],
      "121.config.trackedTxs": ["undefined"],
      "121.config.finality": ["undefined"],
      "121.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "121.riskView.stateValidation.definingMetric": ["number"],
      "121.riskView.exitWindow.secondLine": ["undefined"],
      "121.stateValidation": ["undefined"],
      "121.permissions.2.references": ["undefined"],
      "121.permissions.4.references": ["undefined"],
      "121.contracts.addresses.2.upgradeability": ["undefined"],
      "121.contracts.addresses.6.upgradeability": ["undefined"],
      "121.upgradesAndGovernance": ["undefined"],
      "122.createdAt": [["custom", "UnixTime"]],
      "122.badges": ["undefined"],
      "123.createdAt": [["custom", "UnixTime"]],
      "123.badges": ["undefined"],
      "124.createdAt": [["custom", "UnixTime"]],
      "124.badges": ["undefined"],
      "125.createdAt": [["custom", "UnixTime"]],
      "125.badges": ["undefined"],
      "126.createdAt": [["custom", "UnixTime"]],
      "126.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "126.config.escrows.0.excludedTokens": ["undefined"],
      "126.config.escrows.0.premintedTokens": ["undefined"],
      "126.config.escrows.0.contract.name": ["undefined"],
      "126.config.escrows.0.contract.description": ["undefined"],
      "126.config.escrows.0.contract.upgradableBy": ["undefined"],
      "126.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "126.config.escrows.0.isUpcoming": ["undefined"],
      "126.config.escrows.0.source": ["undefined"],
      "126.config.escrows.0.bridgedUsing": ["undefined"],
      "126.config.escrows.0.isHistorical": ["undefined"],
      "126.config.escrows.0.untilTimestamp": ["undefined"],
      "126.config.escrows.0.sharedEscrow": ["undefined"],
      "126.config.transactionApi.sinceTimestamp": [["custom", "UnixTime"]],
      "126.riskView.stateValidation.definingMetric": ["number"],
      "126.riskView.exitWindow.secondLine": ["undefined"],
      "126.riskView.proposerFailure.definingMetric": ["number"],
      "126.contracts.addresses.1.upgradeability": ["undefined"],
      "126.contracts.addresses.3.upgradeability": ["undefined"],
      "126.contracts.addresses.4.upgradeability": ["undefined"],
      "126.contracts.addresses.5.upgradeability": ["undefined"],
      "126.contracts.addresses.6.upgradeability": ["undefined"],
      "126.contracts.addresses.7.upgradeability": ["undefined"],
      "126.contracts.addresses.8.upgradeability": ["undefined"],
      "126.permissions.3.references": ["undefined"],
      "127.createdAt": [["custom", "UnixTime"]],
      "127.badges": ["undefined"],
      "128.createdAt": [["custom", "UnixTime"]],
      "128.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.0.excludedTokens": ["undefined"],
      "128.config.escrows.0.premintedTokens": ["undefined"],
      "128.config.escrows.0.contract.name": ["undefined"],
      "128.config.escrows.0.isUpcoming": ["undefined"],
      "128.config.escrows.0.source": ["undefined"],
      "128.config.escrows.0.bridgedUsing": ["undefined"],
      "128.config.escrows.0.isHistorical": ["undefined"],
      "128.config.escrows.0.untilTimestamp": ["undefined"],
      "128.config.escrows.0.sharedEscrow": ["undefined"],
      "128.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.1.excludedTokens": ["undefined"],
      "128.config.escrows.1.premintedTokens": ["undefined"],
      "128.config.escrows.1.contract.name": ["undefined"],
      "128.config.escrows.1.contract.upgradeability": ["undefined"],
      "128.config.escrows.1.contract.upgradableBy": ["undefined"],
      "128.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "128.config.escrows.1.isUpcoming": ["undefined"],
      "128.config.escrows.1.source": ["undefined"],
      "128.config.escrows.1.bridgedUsing": ["undefined"],
      "128.config.escrows.1.isHistorical": ["undefined"],
      "128.config.escrows.1.untilTimestamp": ["undefined"],
      "128.config.escrows.1.sharedEscrow": ["undefined"],
      "128.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.2.excludedTokens": ["undefined"],
      "128.config.escrows.2.premintedTokens": ["undefined"],
      "128.config.escrows.2.contract.name": ["undefined"],
      "128.config.escrows.2.isUpcoming": ["undefined"],
      "128.config.escrows.2.source": ["undefined"],
      "128.config.escrows.2.bridgedUsing": ["undefined"],
      "128.config.escrows.2.isHistorical": ["undefined"],
      "128.config.escrows.2.untilTimestamp": ["undefined"],
      "128.config.escrows.2.sharedEscrow": ["undefined"],
      "128.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.3.excludedTokens": ["undefined"],
      "128.config.escrows.3.premintedTokens": ["undefined"],
      "128.config.escrows.3.contract.name": ["undefined"],
      "128.config.escrows.3.contract.upgradeDelay": ["undefined"],
      "128.config.escrows.3.isUpcoming": ["undefined"],
      "128.config.escrows.3.source": ["undefined"],
      "128.config.escrows.3.bridgedUsing": ["undefined"],
      "128.config.escrows.3.isHistorical": ["undefined"],
      "128.config.escrows.3.untilTimestamp": ["undefined"],
      "128.config.escrows.3.sharedEscrow": ["undefined"],
      "128.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.4.excludedTokens": ["undefined"],
      "128.config.escrows.4.premintedTokens": ["undefined"],
      "128.config.escrows.4.contract.name": ["undefined"],
      "128.config.escrows.4.isUpcoming": ["undefined"],
      "128.config.escrows.4.source": ["undefined"],
      "128.config.escrows.4.bridgedUsing": ["undefined"],
      "128.config.escrows.4.isHistorical": ["undefined"],
      "128.config.escrows.4.untilTimestamp": ["undefined"],
      "128.config.escrows.4.sharedEscrow": ["undefined"],
      "128.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.5.excludedTokens": ["undefined"],
      "128.config.escrows.5.premintedTokens": ["undefined"],
      "128.config.escrows.5.contract.name": ["undefined"],
      "128.config.escrows.5.isUpcoming": ["undefined"],
      "128.config.escrows.5.source": ["undefined"],
      "128.config.escrows.5.bridgedUsing": ["undefined"],
      "128.config.escrows.5.isHistorical": ["undefined"],
      "128.config.escrows.5.untilTimestamp": ["undefined"],
      "128.config.escrows.5.sharedEscrow": ["undefined"],
      "128.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.6.excludedTokens": ["undefined"],
      "128.config.escrows.6.premintedTokens": ["undefined"],
      "128.config.escrows.6.contract.name": ["undefined"],
      "128.config.escrows.6.isUpcoming": ["undefined"],
      "128.config.escrows.6.source": ["undefined"],
      "128.config.escrows.6.bridgedUsing": ["undefined"],
      "128.config.escrows.6.isHistorical": ["undefined"],
      "128.config.escrows.6.untilTimestamp": ["undefined"],
      "128.config.escrows.6.sharedEscrow": ["undefined"],
      "128.config.escrows.7.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.7.excludedTokens": ["undefined"],
      "128.config.escrows.7.premintedTokens": ["undefined"],
      "128.config.escrows.7.contract.name": ["undefined"],
      "128.config.escrows.7.isUpcoming": ["undefined"],
      "128.config.escrows.7.source": ["undefined"],
      "128.config.escrows.7.bridgedUsing": ["undefined"],
      "128.config.escrows.7.isHistorical": ["undefined"],
      "128.config.escrows.7.untilTimestamp": ["undefined"],
      "128.config.escrows.7.sharedEscrow": ["undefined"],
      "128.config.escrows.8.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.8.excludedTokens": ["undefined"],
      "128.config.escrows.8.premintedTokens": ["undefined"],
      "128.config.escrows.8.contract.name": ["undefined"],
      "128.config.escrows.8.isUpcoming": ["undefined"],
      "128.config.escrows.8.source": ["undefined"],
      "128.config.escrows.8.bridgedUsing": ["undefined"],
      "128.config.escrows.8.isHistorical": ["undefined"],
      "128.config.escrows.8.untilTimestamp": ["undefined"],
      "128.config.escrows.8.sharedEscrow": ["undefined"],
      "128.config.escrows.9.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.9.excludedTokens": ["undefined"],
      "128.config.escrows.9.premintedTokens": ["undefined"],
      "128.config.escrows.9.contract.name": ["undefined"],
      "128.config.escrows.9.isUpcoming": ["undefined"],
      "128.config.escrows.9.source": ["undefined"],
      "128.config.escrows.9.bridgedUsing": ["undefined"],
      "128.config.escrows.9.isHistorical": ["undefined"],
      "128.config.escrows.9.untilTimestamp": ["undefined"],
      "128.config.escrows.9.sharedEscrow": ["undefined"],
      "128.config.escrows.10.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.10.excludedTokens": ["undefined"],
      "128.config.escrows.10.premintedTokens": ["undefined"],
      "128.config.escrows.10.contract.name": ["undefined"],
      "128.config.escrows.10.isUpcoming": ["undefined"],
      "128.config.escrows.10.source": ["undefined"],
      "128.config.escrows.10.bridgedUsing": ["undefined"],
      "128.config.escrows.10.isHistorical": ["undefined"],
      "128.config.escrows.10.untilTimestamp": ["undefined"],
      "128.config.escrows.10.sharedEscrow": ["undefined"],
      "128.config.escrows.11.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.11.excludedTokens": ["undefined"],
      "128.config.escrows.11.premintedTokens": ["undefined"],
      "128.config.escrows.11.contract.name": ["undefined"],
      "128.config.escrows.11.isUpcoming": ["undefined"],
      "128.config.escrows.11.source": ["undefined"],
      "128.config.escrows.11.bridgedUsing": ["undefined"],
      "128.config.escrows.11.isHistorical": ["undefined"],
      "128.config.escrows.11.untilTimestamp": ["undefined"],
      "128.config.escrows.11.sharedEscrow": ["undefined"],
      "128.config.escrows.12.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.12.excludedTokens": ["undefined"],
      "128.config.escrows.12.premintedTokens": ["undefined"],
      "128.config.escrows.12.contract.name": ["undefined"],
      "128.config.escrows.12.contract.upgradeability": ["undefined"],
      "128.config.escrows.12.contract.upgradableBy": ["undefined"],
      "128.config.escrows.12.contract.upgradeDelay": ["undefined"],
      "128.config.escrows.12.isUpcoming": ["undefined"],
      "128.config.escrows.12.source": ["undefined"],
      "128.config.escrows.12.bridgedUsing": ["undefined"],
      "128.config.escrows.12.isHistorical": ["undefined"],
      "128.config.escrows.12.untilTimestamp": ["undefined"],
      "128.config.escrows.12.sharedEscrow": ["undefined"],
      "128.config.escrows.13.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.13.excludedTokens": ["undefined"],
      "128.config.escrows.13.premintedTokens": ["undefined"],
      "128.config.escrows.13.contract.name": ["undefined"],
      "128.config.escrows.13.isUpcoming": ["undefined"],
      "128.config.escrows.13.source": ["undefined"],
      "128.config.escrows.13.bridgedUsing": ["undefined"],
      "128.config.escrows.13.isHistorical": ["undefined"],
      "128.config.escrows.13.untilTimestamp": ["undefined"],
      "128.config.escrows.13.sharedEscrow": ["undefined"],
      "128.config.escrows.14.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.escrows.14.excludedTokens": ["undefined"],
      "128.config.escrows.14.premintedTokens": ["undefined"],
      "128.config.escrows.14.contract.name": ["undefined"],
      "128.config.escrows.14.isUpcoming": ["undefined"],
      "128.config.escrows.14.source": ["undefined"],
      "128.config.escrows.14.bridgedUsing": ["undefined"],
      "128.config.escrows.14.isHistorical": ["undefined"],
      "128.config.escrows.14.untilTimestamp": ["undefined"],
      "128.config.escrows.14.sharedEscrow": ["undefined"],
      "128.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.1.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.2.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.3.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.4.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.5.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.6.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.7.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.8.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.8.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.9.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.10.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.10.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.11.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.11.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.12.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.12.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.13.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.14.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.15.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.15.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.16.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.16.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.17.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.18.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.18.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.19.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.19.query.untilTimestamp": [["custom", "UnixTime"]],
      "128.config.trackedTxs.20.query.sinceTimestamp": [["custom", "UnixTime"]],
      "128.riskView.stateValidation.definingMetric": ["number"],
      "128.riskView.dataAvailability.definingMetric": ["number"],
      "128.riskView.exitWindow.secondLine": ["undefined"],
      "128.riskView.proposerFailure.definingMetric": ["number"],
      "128.stage.message": ["undefined"],
      "128.contracts.addresses.2.upgradeability": ["undefined"],
      "128.contracts.addresses.3.upgradeability": ["undefined"],
      "128.contracts.addresses.4.upgradeability": ["undefined"],
      "128.contracts.addresses.5.upgradeability": ["undefined"],
      "128.contracts.addresses.6.upgradeability": ["undefined"],
      "128.contracts.addresses.7.upgradeability": ["undefined"],
      "128.contracts.addresses.8.upgradeability": ["undefined"],
      "128.permissions.1.references": ["undefined"],
      "128.permissions.4.references": ["undefined"],
      "128.permissions.8.references": ["undefined"],
      "128.permissions.20.references": ["undefined"],
      "129.createdAt": [["custom", "UnixTime"]],
      "129.badges": ["undefined"],
      "130.createdAt": [["custom", "UnixTime"]],
      "130.permissions.4.references": ["undefined"],
      "130.nativePermissions": ["undefined"],
      "130.contracts.addresses.3.upgradeability": ["undefined"],
      "130.contracts.addresses.4.upgradeability": ["undefined"],
      "130.contracts.nativeAddresses": ["undefined"],
      "130.display.warning": ["undefined"],
      "130.chainConfig": ["undefined"],
      "130.config.associatedTokens": ["undefined"],
      "130.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "130.config.escrows.0.excludedTokens": ["undefined"],
      "130.config.escrows.0.premintedTokens": ["undefined"],
      "130.config.escrows.0.contract.name": ["undefined"],
      "130.config.escrows.0.isUpcoming": ["undefined"],
      "130.config.escrows.0.source": ["undefined"],
      "130.config.escrows.0.bridgedUsing": ["undefined"],
      "130.config.escrows.0.isHistorical": ["undefined"],
      "130.config.escrows.0.untilTimestamp": ["undefined"],
      "130.config.escrows.0.sharedEscrow": ["undefined"],
      "130.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "130.config.escrows.1.excludedTokens": ["undefined"],
      "130.config.escrows.1.premintedTokens": ["undefined"],
      "130.config.escrows.1.contract.name": ["undefined"],
      "130.config.escrows.1.isUpcoming": ["undefined"],
      "130.config.escrows.1.source": ["undefined"],
      "130.config.escrows.1.bridgedUsing": ["undefined"],
      "130.config.escrows.1.isHistorical": ["undefined"],
      "130.config.escrows.1.untilTimestamp": ["undefined"],
      "130.config.escrows.1.sharedEscrow": ["undefined"],
      "130.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "130.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "130.config.finality.genesisTimestamp": [["custom", "UnixTime"]],
      "130.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "130.riskView.stateValidation.definingMetric": ["number"],
      "130.riskView.dataAvailability.definingMetric": ["number"],
      "130.riskView.exitWindow.secondLine": ["undefined"],
      "130.riskView.proposerFailure.definingMetric": ["number"],
      "130.stateDerivation": ["undefined"],
      "130.upgradesAndGovernance": ["undefined"],
      "131.createdAt": [["custom", "UnixTime"]],
      "131.badges": ["undefined"],
      "132.createdAt": [["custom", "UnixTime"]],
      "132.permissions.4.references": ["undefined"],
      "132.nativePermissions": ["undefined"],
      "132.contracts.addresses.4.upgradeability": ["undefined"],
      "132.contracts.addresses.7.upgradeability": ["undefined"],
      "132.contracts.nativeAddresses": ["undefined"],
      "132.display.warning": ["undefined"],
      "132.chainConfig": ["undefined"],
      "132.config.associatedTokens": ["undefined"],
      "132.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "132.config.escrows.0.excludedTokens": ["undefined"],
      "132.config.escrows.0.premintedTokens": ["undefined"],
      "132.config.escrows.0.contract.name": ["undefined"],
      "132.config.escrows.0.isUpcoming": ["undefined"],
      "132.config.escrows.0.source": ["undefined"],
      "132.config.escrows.0.bridgedUsing": ["undefined"],
      "132.config.escrows.0.isHistorical": ["undefined"],
      "132.config.escrows.0.untilTimestamp": ["undefined"],
      "132.config.escrows.0.sharedEscrow": ["undefined"],
      "132.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "132.config.escrows.1.excludedTokens": ["undefined"],
      "132.config.escrows.1.premintedTokens": ["undefined"],
      "132.config.escrows.1.contract.name": ["undefined"],
      "132.config.escrows.1.isUpcoming": ["undefined"],
      "132.config.escrows.1.source": ["undefined"],
      "132.config.escrows.1.bridgedUsing": ["undefined"],
      "132.config.escrows.1.isHistorical": ["undefined"],
      "132.config.escrows.1.untilTimestamp": ["undefined"],
      "132.config.escrows.1.sharedEscrow": ["undefined"],
      "132.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "132.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "132.config.finality": ["undefined"],
      "132.riskView.stateValidation.definingMetric": ["number"],
      "132.riskView.dataAvailability.definingMetric": ["number"],
      "132.riskView.exitWindow.secondLine": ["undefined"],
      "132.riskView.proposerFailure.definingMetric": ["number"],
      "132.stage.message": ["undefined"],
      "132.stateDerivation": ["undefined"],
      "132.upgradesAndGovernance": ["undefined"],
      "133.createdAt": [["custom", "UnixTime"]],
      "133.badges": ["undefined"],
      "134.createdAt": [["custom", "UnixTime"]],
      "134.badges": ["undefined"],
      "135.createdAt": [["custom", "UnixTime"]],
      "135.contracts.addresses.7.upgradeability": ["undefined"],
      "135.contracts.addresses.8.upgradeability": ["undefined"],
      "135.contracts.addresses.9.upgradeability": ["undefined"],
      "135.contracts.addresses.10.upgradeability": ["undefined"],
      "135.contracts.addresses.11.upgradeability": ["undefined"],
      "135.contracts.nativeAddresses": ["undefined"],
      "135.chainConfig": ["undefined"],
      "135.technology.stateCorrectness": ["undefined"],
      "135.nativePermissions": ["undefined"],
      "135.stateDerivation": ["undefined"],
      "135.upgradesAndGovernance": ["undefined"],
      "135.milestones": ["undefined"],
      "135.knowledgeNuggets": ["undefined"],
      "135.display.liveness": ["undefined"],
      "135.riskView.exitWindow.secondLine": ["undefined"],
      "135.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "135.config.escrows.0.excludedTokens": ["undefined"],
      "135.config.escrows.0.premintedTokens": ["undefined"],
      "135.config.escrows.0.contract.name": ["undefined"],
      "135.config.escrows.0.isUpcoming": ["undefined"],
      "135.config.escrows.0.source": ["undefined"],
      "135.config.escrows.0.bridgedUsing": ["undefined"],
      "135.config.escrows.0.isHistorical": ["undefined"],
      "135.config.escrows.0.untilTimestamp": ["undefined"],
      "135.config.escrows.0.sharedEscrow": ["undefined"],
      "135.config.trackedTxs": ["undefined"],
      "136.createdAt": [["custom", "UnixTime"]],
      "136.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "136.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "136.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "136.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "136.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "136.riskView.dataAvailability.definingMetric": ["number"],
      "136.stage.message": ["undefined"],
      "136.contracts.addresses.2.upgradeability": ["undefined"],
      "136.contracts.addresses.3.upgradeability": ["undefined"],
      "136.permissions.0.references": ["undefined"],
      "137.createdAt": [["custom", "UnixTime"]],
      "137.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "137.config.escrows.0.excludedTokens": ["undefined"],
      "137.config.escrows.0.premintedTokens": ["undefined"],
      "137.config.escrows.0.contract.name": ["undefined"],
      "137.config.escrows.0.contract.upgradableBy": ["undefined"],
      "137.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "137.config.escrows.0.isUpcoming": ["undefined"],
      "137.config.escrows.0.source": ["undefined"],
      "137.config.escrows.0.bridgedUsing": ["undefined"],
      "137.config.escrows.0.isHistorical": ["undefined"],
      "137.config.escrows.0.untilTimestamp": ["undefined"],
      "137.config.escrows.0.sharedEscrow": ["undefined"],
      "137.config.transactionApi.sinceTimestamp": [["custom", "UnixTime"]],
      "137.riskView.stateValidation.definingMetric": ["number"],
      "137.riskView.exitWindow.secondLine": ["undefined"],
      "137.riskView.proposerFailure.definingMetric": ["number"],
      "137.contracts.addresses.1.upgradeability": ["undefined"],
      "137.contracts.addresses.3.upgradeability": ["undefined"],
      "137.contracts.addresses.4.upgradeability": ["undefined"],
      "137.contracts.addresses.5.upgradeability": ["undefined"],
      "137.contracts.addresses.6.upgradeability": ["undefined"],
      "137.contracts.addresses.7.upgradeability": ["undefined"],
      "137.contracts.addresses.8.upgradeability": ["undefined"],
      "137.permissions.3.references": ["undefined"],
      "138.createdAt": [["custom", "UnixTime"]],
      "138.badges": ["undefined"],
      "139.createdAt": [["custom", "UnixTime"]],
      "139.badges": ["undefined"],
      "140.createdAt": [["custom", "UnixTime"]],
      "140.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "140.config.escrows.0.excludedTokens": ["undefined"],
      "140.config.escrows.0.premintedTokens": ["undefined"],
      "140.config.escrows.0.contract.name": ["undefined"],
      "140.config.escrows.0.contract.description": ["undefined"],
      "140.config.escrows.0.contract.upgradableBy": ["undefined"],
      "140.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "140.config.escrows.0.isUpcoming": ["undefined"],
      "140.config.escrows.0.source": ["undefined"],
      "140.config.escrows.0.bridgedUsing": ["undefined"],
      "140.config.escrows.0.isHistorical": ["undefined"],
      "140.config.escrows.0.untilTimestamp": ["undefined"],
      "140.config.escrows.0.sharedEscrow": ["undefined"],
      "140.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "140.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "140.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "140.riskView.stateValidation.definingMetric": ["number"],
      "140.riskView.dataAvailability.definingMetric": ["number"],
      "140.riskView.exitWindow.secondLine": ["undefined"],
      "140.riskView.proposerFailure.definingMetric": ["number"],
      "140.permissions.1.references": ["undefined"],
      "140.permissions.6.references": ["undefined"],
      "140.permissions.7.references": ["undefined"],
      "140.permissions.8.references": ["undefined"],
      "140.contracts.addresses.1.upgradeability": ["undefined"],
      "141.createdAt": [["custom", "UnixTime"]],
      "142.createdAt": [["custom", "UnixTime"]],
      "142.permissions.4.references": ["undefined"],
      "142.nativePermissions": ["undefined"],
      "142.contracts.addresses.3.upgradeability": ["undefined"],
      "142.contracts.addresses.7.upgradeability": ["undefined"],
      "142.contracts.nativeAddresses": ["undefined"],
      "142.display.warning": ["undefined"],
      "142.chainConfig": ["undefined"],
      "142.config.associatedTokens": ["undefined"],
      "142.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "142.config.escrows.0.excludedTokens": ["undefined"],
      "142.config.escrows.0.premintedTokens": ["undefined"],
      "142.config.escrows.0.contract.name": ["undefined"],
      "142.config.escrows.0.isUpcoming": ["undefined"],
      "142.config.escrows.0.source": ["undefined"],
      "142.config.escrows.0.bridgedUsing": ["undefined"],
      "142.config.escrows.0.isHistorical": ["undefined"],
      "142.config.escrows.0.untilTimestamp": ["undefined"],
      "142.config.escrows.0.sharedEscrow": ["undefined"],
      "142.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "142.config.escrows.1.excludedTokens": ["undefined"],
      "142.config.escrows.1.premintedTokens": ["undefined"],
      "142.config.escrows.1.contract.name": ["undefined"],
      "142.config.escrows.1.isUpcoming": ["undefined"],
      "142.config.escrows.1.source": ["undefined"],
      "142.config.escrows.1.bridgedUsing": ["undefined"],
      "142.config.escrows.1.isHistorical": ["undefined"],
      "142.config.escrows.1.untilTimestamp": ["undefined"],
      "142.config.escrows.1.sharedEscrow": ["undefined"],
      "142.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "142.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "142.config.finality.genesisTimestamp": [["custom", "UnixTime"]],
      "142.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "142.riskView.stateValidation.definingMetric": ["number"],
      "142.riskView.dataAvailability.definingMetric": ["number"],
      "142.riskView.exitWindow.secondLine": ["undefined"],
      "142.riskView.proposerFailure.definingMetric": ["number"],
      "142.stateDerivation": ["undefined"],
      "142.upgradesAndGovernance": ["undefined"],
      "143.createdAt": [["custom", "UnixTime"]],
      "143.badges": ["undefined"],
      "144.createdAt": [["custom", "UnixTime"]],
      "144.badges": ["undefined"],
      "145.createdAt": [["custom", "UnixTime"]],
      "145.badges": ["undefined"],
      "146.createdAt": [["custom", "UnixTime"]],
      "146.badges": ["undefined"],
      "147.createdAt": [["custom", "UnixTime"]],
      "147.display.tvlWarning": ["undefined"],
      "147.config.associatedTokens": ["undefined"],
      "147.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "147.config.escrows.0.excludedTokens": ["undefined"],
      "147.config.escrows.0.premintedTokens": ["undefined"],
      "147.config.escrows.0.contract.name": ["undefined"],
      "147.config.escrows.0.contract.description": ["undefined"],
      "147.config.escrows.0.contract.upgradableBy": ["undefined"],
      "147.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "147.config.escrows.0.isUpcoming": ["undefined"],
      "147.config.escrows.0.source": ["undefined"],
      "147.config.escrows.0.bridgedUsing": ["undefined"],
      "147.config.escrows.0.isHistorical": ["undefined"],
      "147.config.escrows.0.untilTimestamp": ["undefined"],
      "147.config.trackedTxs": ["undefined"],
      "147.config.finality": ["undefined"],
      "147.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "147.riskView.stateValidation.definingMetric": ["number"],
      "147.riskView.exitWindow.secondLine": ["undefined"],
      "147.stateValidation": ["undefined"],
      "147.permissions.2.references": ["undefined"],
      "147.permissions.4.references": ["undefined"],
      "147.contracts.addresses.2.upgradeability": ["undefined"],
      "147.contracts.addresses.6.upgradeability": ["undefined"],
      "147.upgradesAndGovernance": ["undefined"],
      "148.createdAt": [["custom", "UnixTime"]],
      "148.display.tvlWarning": ["undefined"],
      "148.config.associatedTokens": ["undefined"],
      "148.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "148.config.escrows.0.excludedTokens": ["undefined"],
      "148.config.escrows.0.premintedTokens": ["undefined"],
      "148.config.escrows.0.contract.name": ["undefined"],
      "148.config.escrows.0.contract.description": ["undefined"],
      "148.config.escrows.0.contract.upgradableBy": ["undefined"],
      "148.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "148.config.escrows.0.isUpcoming": ["undefined"],
      "148.config.escrows.0.source": ["undefined"],
      "148.config.escrows.0.bridgedUsing": ["undefined"],
      "148.config.escrows.0.isHistorical": ["undefined"],
      "148.config.escrows.0.untilTimestamp": ["undefined"],
      "148.config.trackedTxs": ["undefined"],
      "148.config.finality": ["undefined"],
      "148.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "148.riskView.stateValidation.definingMetric": ["number"],
      "148.riskView.exitWindow.secondLine": ["undefined"],
      "148.stateDerivation": ["undefined"],
      "148.stateValidation": ["undefined"],
      "148.permissions.2.references": ["undefined"],
      "148.permissions.4.references": ["undefined"],
      "148.contracts.addresses.2.upgradeability": ["undefined"],
      "148.contracts.addresses.6.upgradeability": ["undefined"],
      "148.upgradesAndGovernance": ["undefined"],
      "149.createdAt": [["custom", "UnixTime"]],
      "149.permissions.4.references": ["undefined"],
      "149.nativePermissions": ["undefined"],
      "149.contracts.addresses.4.upgradeability": ["undefined"],
      "149.contracts.addresses.9.upgradeability": ["undefined"],
      "149.contracts.nativeAddresses": ["undefined"],
      "149.display.warning": ["undefined"],
      "149.chainConfig": ["undefined"],
      "149.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "149.config.escrows.0.excludedTokens": ["undefined"],
      "149.config.escrows.0.premintedTokens": ["undefined"],
      "149.config.escrows.0.contract.name": ["undefined"],
      "149.config.escrows.0.isUpcoming": ["undefined"],
      "149.config.escrows.0.source": ["undefined"],
      "149.config.escrows.0.bridgedUsing": ["undefined"],
      "149.config.escrows.0.isHistorical": ["undefined"],
      "149.config.escrows.0.untilTimestamp": ["undefined"],
      "149.config.escrows.0.sharedEscrow": ["undefined"],
      "149.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "149.config.escrows.1.excludedTokens": ["undefined"],
      "149.config.escrows.1.premintedTokens": ["undefined"],
      "149.config.escrows.1.contract.name": ["undefined"],
      "149.config.escrows.1.isUpcoming": ["undefined"],
      "149.config.escrows.1.source": ["undefined"],
      "149.config.escrows.1.bridgedUsing": ["undefined"],
      "149.config.escrows.1.isHistorical": ["undefined"],
      "149.config.escrows.1.untilTimestamp": ["undefined"],
      "149.config.escrows.1.sharedEscrow": ["undefined"],
      "149.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "149.config.escrows.2.excludedTokens": ["undefined"],
      "149.config.escrows.2.premintedTokens": ["undefined"],
      "149.config.escrows.2.contract.upgradableBy": ["undefined"],
      "149.config.escrows.2.contract.upgradeDelay": ["undefined"],
      "149.config.escrows.2.isUpcoming": ["undefined"],
      "149.config.escrows.2.source": ["undefined"],
      "149.config.escrows.2.bridgedUsing": ["undefined"],
      "149.config.escrows.2.isHistorical": ["undefined"],
      "149.config.escrows.2.untilTimestamp": ["undefined"],
      "149.config.escrows.2.sharedEscrow": ["undefined"],
      "149.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "149.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "149.config.finality": ["undefined"],
      "149.riskView.stateValidation.definingMetric": ["number"],
      "149.riskView.dataAvailability.definingMetric": ["number"],
      "149.riskView.exitWindow.secondLine": ["undefined"],
      "149.riskView.proposerFailure.definingMetric": ["number"],
      "149.stateDerivation": ["undefined"],
      "149.upgradesAndGovernance": ["undefined"],
      "150.createdAt": [["custom", "UnixTime"]],
      "150.contracts.addresses.7.upgradeability": ["undefined"],
      "150.contracts.addresses.8.upgradeability": ["undefined"],
      "150.contracts.addresses.9.upgradeability": ["undefined"],
      "150.contracts.addresses.10.upgradeability": ["undefined"],
      "150.contracts.addresses.11.upgradeability": ["undefined"],
      "150.contracts.nativeAddresses": ["undefined"],
      "150.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "150.technology.stateCorrectness": ["undefined"],
      "150.permissions.2.references": ["undefined"],
      "150.nativePermissions": ["undefined"],
      "150.stateDerivation": ["undefined"],
      "150.upgradesAndGovernance": ["undefined"],
      "150.knowledgeNuggets": ["undefined"],
      "150.display.liveness": ["undefined"],
      "150.riskView.exitWindow.secondLine": ["undefined"],
      "150.config.associatedTokens": ["undefined"],
      "150.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "150.config.escrows.0.excludedTokens": ["undefined"],
      "150.config.escrows.0.premintedTokens": ["undefined"],
      "150.config.escrows.0.contract.name": ["undefined"],
      "150.config.escrows.0.isUpcoming": ["undefined"],
      "150.config.escrows.0.source": ["undefined"],
      "150.config.escrows.0.bridgedUsing": ["undefined"],
      "150.config.escrows.0.isHistorical": ["undefined"],
      "150.config.escrows.0.untilTimestamp": ["undefined"],
      "150.config.escrows.0.sharedEscrow": ["undefined"],
      "150.config.trackedTxs": ["undefined"],
      "151.createdAt": [["custom", "UnixTime"]],
      "151.display.tvlWarning": ["undefined"],
      "151.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "151.config.escrows.0.excludedTokens": ["undefined"],
      "151.config.escrows.0.premintedTokens": ["undefined"],
      "151.config.escrows.0.contract.name": ["undefined"],
      "151.config.escrows.0.contract.description": ["undefined"],
      "151.config.escrows.0.contract.upgradableBy": ["undefined"],
      "151.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "151.config.escrows.0.isUpcoming": ["undefined"],
      "151.config.escrows.0.source": ["undefined"],
      "151.config.escrows.0.bridgedUsing": ["undefined"],
      "151.config.escrows.0.isHistorical": ["undefined"],
      "151.config.escrows.0.untilTimestamp": ["undefined"],
      "151.config.trackedTxs": ["undefined"],
      "151.config.finality": ["undefined"],
      "151.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "151.riskView.stateValidation.definingMetric": ["number"],
      "151.riskView.exitWindow.secondLine": ["undefined"],
      "151.stateDerivation": ["undefined"],
      "151.stateValidation": ["undefined"],
      "151.permissions.2.references": ["undefined"],
      "151.permissions.4.references": ["undefined"],
      "151.contracts.addresses.2.upgradeability": ["undefined"],
      "151.contracts.addresses.6.upgradeability": ["undefined"],
      "151.upgradesAndGovernance": ["undefined"],
      "152.createdAt": [["custom", "UnixTime"]],
      "152.badges": ["undefined"],
      "153.createdAt": [["custom", "UnixTime"]],
      "153.permissions.5.references": ["undefined"],
      "153.nativePermissions": ["undefined"],
      "153.contracts.nativeAddresses": ["undefined"],
      "153.discoveryDrivenData": ["undefined"],
      "153.display.warning": ["undefined"],
      "153.display.liveness": ["undefined"],
      "153.display.finality": ["undefined"],
      "153.chainConfig": ["undefined"],
      "153.config.associatedTokens": ["undefined"],
      "153.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "153.config.escrows.0.excludedTokens": ["undefined"],
      "153.config.escrows.0.premintedTokens": ["undefined"],
      "153.config.escrows.0.contract.name": ["undefined"],
      "153.config.escrows.0.isUpcoming": ["undefined"],
      "153.config.escrows.0.source": ["undefined"],
      "153.config.escrows.0.bridgedUsing": ["undefined"],
      "153.config.escrows.0.isHistorical": ["undefined"],
      "153.config.escrows.0.untilTimestamp": ["undefined"],
      "153.config.escrows.0.sharedEscrow": ["undefined"],
      "153.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "153.config.escrows.1.excludedTokens": ["undefined"],
      "153.config.escrows.1.premintedTokens": ["undefined"],
      "153.config.escrows.1.contract.name": ["undefined"],
      "153.config.escrows.1.isUpcoming": ["undefined"],
      "153.config.escrows.1.source": ["undefined"],
      "153.config.escrows.1.bridgedUsing": ["undefined"],
      "153.config.escrows.1.isHistorical": ["undefined"],
      "153.config.escrows.1.untilTimestamp": ["undefined"],
      "153.config.escrows.1.sharedEscrow": ["undefined"],
      "153.config.trackedTxs": ["undefined"],
      "153.config.finality": ["undefined"],
      "153.riskView.stateValidation.definingMetric": ["number"],
      "153.riskView.exitWindow.secondLine": ["undefined"],
      "153.riskView.proposerFailure.definingMetric": ["number"],
      "153.stateDerivation": ["undefined"],
      "153.upgradesAndGovernance": ["undefined"],
      "154.createdAt": [["custom", "UnixTime"]],
      "154.badges": ["undefined"],
      "155.createdAt": [["custom", "UnixTime"]],
      "155.badges": ["undefined"],
      "156.createdAt": [["custom", "UnixTime"]],
      "156.permissions.6.references": ["undefined"],
      "156.permissions.7.references": ["undefined"],
      "156.nativePermissions": ["undefined"],
      "156.contracts.nativeAddresses": ["undefined"],
      "156.discoveryDrivenData": ["undefined"],
      "156.chainConfig": ["undefined"],
      "156.config.associatedTokens": ["undefined"],
      "156.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "156.config.escrows.0.excludedTokens": ["undefined"],
      "156.config.escrows.0.premintedTokens": ["undefined"],
      "156.config.escrows.0.contract.name": ["undefined"],
      "156.config.escrows.0.isUpcoming": ["undefined"],
      "156.config.escrows.0.source": ["undefined"],
      "156.config.escrows.0.bridgedUsing": ["undefined"],
      "156.config.escrows.0.isHistorical": ["undefined"],
      "156.config.escrows.0.untilTimestamp": ["undefined"],
      "156.config.escrows.0.sharedEscrow": ["undefined"],
      "156.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "156.config.escrows.1.excludedTokens": ["undefined"],
      "156.config.escrows.1.premintedTokens": ["undefined"],
      "156.config.escrows.1.contract.name": ["undefined"],
      "156.config.escrows.1.isUpcoming": ["undefined"],
      "156.config.escrows.1.source": ["undefined"],
      "156.config.escrows.1.bridgedUsing": ["undefined"],
      "156.config.escrows.1.isHistorical": ["undefined"],
      "156.config.escrows.1.untilTimestamp": ["undefined"],
      "156.config.escrows.1.sharedEscrow": ["undefined"],
      "156.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "156.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "156.config.finality": ["undefined"],
      "156.riskView.stateValidation.definingMetric": ["number"],
      "156.riskView.dataAvailability.definingMetric": ["number"],
      "156.riskView.exitWindow.secondLine": ["undefined"],
      "156.riskView.proposerFailure.definingMetric": ["number"],
      "156.stateDerivation": ["undefined"],
      "156.upgradesAndGovernance": ["undefined"],
      "157.createdAt": [["custom", "UnixTime"]],
      "157.badges": ["undefined"],
      "158.createdAt": [["custom", "UnixTime"]],
      "158.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "158.config.escrows.0.excludedTokens": ["undefined"],
      "158.config.escrows.0.premintedTokens": ["undefined"],
      "158.config.escrows.0.contract.name": ["undefined"],
      "158.config.escrows.0.contract.description": ["undefined"],
      "158.config.escrows.0.contract.upgradableBy": ["undefined"],
      "158.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "158.config.escrows.0.isUpcoming": ["undefined"],
      "158.config.escrows.0.source": ["undefined"],
      "158.config.escrows.0.bridgedUsing": ["undefined"],
      "158.config.escrows.0.isHistorical": ["undefined"],
      "158.config.escrows.0.untilTimestamp": ["undefined"],
      "158.config.escrows.0.sharedEscrow": ["undefined"],
      "158.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "158.riskView.stateValidation.definingMetric": ["number"],
      "158.riskView.exitWindow.secondLine": ["undefined"],
      "158.permissions.0.references": ["undefined"],
      "158.permissions.3.references": ["undefined"],
      "158.permissions.4.references": ["undefined"],
      "158.contracts.addresses.3.upgradeability": ["undefined"],
      "159.createdAt": [["custom", "UnixTime"]],
      "159.badges": ["undefined"],
      "160.createdAt": [["custom", "UnixTime"]],
      "160.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "160.config.escrows.0.excludedTokens": ["undefined"],
      "160.config.escrows.0.premintedTokens": ["undefined"],
      "160.config.escrows.0.contract.name": ["undefined"],
      "160.config.escrows.0.contract.description": ["undefined"],
      "160.config.escrows.0.contract.upgradableBy": ["undefined"],
      "160.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "160.config.escrows.0.isUpcoming": ["undefined"],
      "160.config.escrows.0.source": ["undefined"],
      "160.config.escrows.0.bridgedUsing": ["undefined"],
      "160.config.escrows.0.isHistorical": ["undefined"],
      "160.config.escrows.0.untilTimestamp": ["undefined"],
      "160.config.escrows.0.sharedEscrow": ["undefined"],
      "160.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "160.riskView.stateValidation.definingMetric": ["number"],
      "160.riskView.dataAvailability.definingMetric": ["number"],
      "160.riskView.exitWindow.secondLine": ["undefined"],
      "160.riskView.proposerFailure.definingMetric": ["number"],
      "160.contracts.addresses.6.upgradeability": ["undefined"],
      "161.createdAt": [["custom", "UnixTime"]],
      "161.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "161.riskView.stateValidation.definingMetric": ["number"],
      "161.riskView.dataAvailability.definingMetric": ["number"],
      "161.riskView.exitWindow.definingMetric": ["number"],
      "161.riskView.sequencerFailure.definingMetric": ["undefined"],
      "161.riskView.proposerFailure.definingMetric": ["number"],
      "161.contracts.addresses.1.upgradeability": ["undefined"],
      "161.contracts.addresses.2.upgradeability": ["undefined"],
      "161.contracts.addresses.7.upgradeability": ["undefined"],
      "162.createdAt": [["custom", "UnixTime"]],
      "162.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "162.riskView.stateValidation.definingMetric": ["number"],
      "162.riskView.dataAvailability.definingMetric": ["number"],
      "162.riskView.exitWindow.definingMetric": ["number"],
      "162.riskView.sequencerFailure.definingMetric": ["undefined"],
      "162.riskView.proposerFailure.definingMetric": ["number"],
      "162.contracts.addresses.1.upgradeability": ["undefined"],
      "162.contracts.addresses.2.upgradeability": ["undefined"],
      "162.contracts.addresses.7.upgradeability": ["undefined"],
      "163.createdAt": [["custom", "UnixTime"]],
      "163.display.tvlWarning": ["undefined"],
      "163.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.escrows.0.excludedTokens": ["undefined"],
      "163.config.escrows.0.premintedTokens": ["undefined"],
      "163.config.escrows.0.contract.name": ["undefined"],
      "163.config.escrows.0.isUpcoming": ["undefined"],
      "163.config.escrows.0.source": ["undefined"],
      "163.config.escrows.0.bridgedUsing": ["undefined"],
      "163.config.escrows.0.isHistorical": ["undefined"],
      "163.config.escrows.0.untilTimestamp": ["undefined"],
      "163.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.escrows.1.excludedTokens": ["undefined"],
      "163.config.escrows.1.premintedTokens": ["undefined"],
      "163.config.escrows.1.contract.name": ["undefined"],
      "163.config.escrows.1.isUpcoming": ["undefined"],
      "163.config.escrows.1.source": ["undefined"],
      "163.config.escrows.1.bridgedUsing": ["undefined"],
      "163.config.escrows.1.isHistorical": ["undefined"],
      "163.config.escrows.1.untilTimestamp": ["undefined"],
      "163.config.escrows.1.sharedEscrow": ["undefined"],
      "163.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.escrows.2.excludedTokens": ["undefined"],
      "163.config.escrows.2.premintedTokens": ["undefined"],
      "163.config.escrows.2.contract.name": ["undefined"],
      "163.config.escrows.2.isUpcoming": ["undefined"],
      "163.config.escrows.2.source": ["undefined"],
      "163.config.escrows.2.bridgedUsing": ["undefined"],
      "163.config.escrows.2.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.escrows.2.sharedEscrow": ["undefined"],
      "163.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.escrows.3.excludedTokens": ["undefined"],
      "163.config.escrows.3.premintedTokens": ["undefined"],
      "163.config.escrows.3.contract.name": ["undefined"],
      "163.config.escrows.3.isUpcoming": ["undefined"],
      "163.config.escrows.3.source": ["undefined"],
      "163.config.escrows.3.bridgedUsing": ["undefined"],
      "163.config.escrows.3.isHistorical": ["undefined"],
      "163.config.escrows.3.untilTimestamp": ["undefined"],
      "163.config.escrows.3.sharedEscrow": ["undefined"],
      "163.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.0.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.1.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.2.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.3.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.4.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.4.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.5.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.5.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.6.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.6.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.7.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.7.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.8.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.9.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.9.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.10.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.10.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.11.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.11.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.12.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.12.query.untilTimestamp": [["custom", "UnixTime"]],
      "163.config.trackedTxs.13.query.sinceTimestamp": [["custom", "UnixTime"]],
      "163.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "163.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "163.riskView.stateValidation.definingMetric": ["number"],
      "163.riskView.dataAvailability.definingMetric": ["number"],
      "163.riskView.proposerFailure.definingMetric": ["number"],
      "163.stage.message": ["undefined"],
      "163.permissions.4.references": ["undefined"],
      "163.permissions.6.references": ["undefined"],
      "163.contracts.addresses.1.upgradeability": ["undefined"],
      "163.contracts.addresses.2.upgradeability": ["undefined"],
      "163.contracts.addresses.3.upgradeability": ["undefined"],
      "163.contracts.addresses.4.upgradeability": ["undefined"],
      "163.contracts.addresses.5.upgradeability": ["undefined"],
      "163.contracts.addresses.6.upgradeability": ["undefined"],
      "163.contracts.addresses.7.upgradeability": ["undefined"],
      "163.contracts.nativeAddresses.zksync2.0.upgradeability": ["undefined"],
      "163.contracts.nativeAddresses.zksync2.1.upgradeability": ["undefined"],
      "163.contracts.nativeAddresses.zksync2.2.upgradeability": ["undefined"],
      "163.contracts.nativeAddresses.zksync2.3.upgradeability": ["undefined"],
      "163.contracts.nativeAddresses.zksync2.4.upgradeability": ["undefined"],
      "163.contracts.nativeAddresses.zksync2.5.upgradeability": ["undefined"],
      "164.createdAt": [["custom", "UnixTime"]],
      "164.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "164.config.escrows.0.excludedTokens": ["undefined"],
      "164.config.escrows.0.premintedTokens": ["undefined"],
      "164.config.escrows.0.contract.name": ["undefined"],
      "164.config.escrows.0.contract.description": ["undefined"],
      "164.config.escrows.0.contract.upgradableBy": ["undefined"],
      "164.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "164.config.escrows.0.isUpcoming": ["undefined"],
      "164.config.escrows.0.source": ["undefined"],
      "164.config.escrows.0.bridgedUsing": ["undefined"],
      "164.config.escrows.0.isHistorical": ["undefined"],
      "164.config.escrows.0.untilTimestamp": ["undefined"],
      "164.config.escrows.0.sharedEscrow": ["undefined"],
      "164.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "164.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "164.config.trackedTxs.2.query.sinceTimestamp": [["custom", "UnixTime"]],
      "164.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "164.riskView.stateValidation.definingMetric": ["number"],
      "164.riskView.dataAvailability.definingMetric": ["number"],
      "164.riskView.exitWindow.secondLine": ["undefined"],
      "164.riskView.proposerFailure.definingMetric": ["number"],
      "164.stage.message": ["undefined"],
      "164.contracts.addresses.3.upgradeability": ["undefined"],
      "164.contracts.addresses.4.upgradeability": ["undefined"],
      "164.contracts.addresses.5.upgradeability": ["undefined"],
      "164.permissions.0.references": ["undefined"],
      "165.createdAt": [["custom", "UnixTime"]],
      "165.permissions.5.references": ["undefined"],
      "165.permissions.6.references": ["undefined"],
      "165.permissions.7.references": ["undefined"],
      "165.permissions.8.references": ["undefined"],
      "165.permissions.9.references": ["undefined"],
      "165.permissions.10.references": ["undefined"],
      "165.permissions.11.references": ["undefined"],
      "165.permissions.12.references": ["undefined"],
      "165.nativePermissions": ["undefined"],
      "165.contracts.addresses.1.upgradeability": ["undefined"],
      "165.contracts.addresses.3.upgradeability": ["undefined"],
      "165.contracts.addresses.9.upgradeability": ["undefined"],
      "165.contracts.addresses.11.upgradeability": ["undefined"],
      "165.contracts.addresses.12.upgradeability": ["undefined"],
      "165.contracts.nativeAddresses": ["undefined"],
      "165.display.warning": ["undefined"],
      "165.chainConfig": ["undefined"],
      "165.config.associatedTokens": ["undefined"],
      "165.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "165.config.escrows.0.excludedTokens": ["undefined"],
      "165.config.escrows.0.premintedTokens": ["undefined"],
      "165.config.escrows.0.contract.name": ["undefined"],
      "165.config.escrows.0.isUpcoming": ["undefined"],
      "165.config.escrows.0.source": ["undefined"],
      "165.config.escrows.0.bridgedUsing": ["undefined"],
      "165.config.escrows.0.isHistorical": ["undefined"],
      "165.config.escrows.0.untilTimestamp": ["undefined"],
      "165.config.escrows.0.sharedEscrow": ["undefined"],
      "165.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "165.config.escrows.1.excludedTokens": ["undefined"],
      "165.config.escrows.1.premintedTokens": ["undefined"],
      "165.config.escrows.1.contract.name": ["undefined"],
      "165.config.escrows.1.isUpcoming": ["undefined"],
      "165.config.escrows.1.source": ["undefined"],
      "165.config.escrows.1.bridgedUsing": ["undefined"],
      "165.config.escrows.1.isHistorical": ["undefined"],
      "165.config.escrows.1.untilTimestamp": ["undefined"],
      "165.config.escrows.1.sharedEscrow": ["undefined"],
      "165.config.trackedTxs.0.query.sinceTimestamp": [["custom", "UnixTime"]],
      "165.config.trackedTxs.1.query.sinceTimestamp": [["custom", "UnixTime"]],
      "165.config.finality.genesisTimestamp": [["custom", "UnixTime"]],
      "165.config.finality.minTimestamp": [["custom", "UnixTime"]],
      "165.riskView.stateValidation.definingMetric": ["number"],
      "165.riskView.dataAvailability.definingMetric": ["number"],
      "165.riskView.exitWindow.secondLine": ["undefined"],
      "165.riskView.proposerFailure.definingMetric": ["number"],
      "165.stage.message": ["undefined"],
      "165.upgradesAndGovernance": ["undefined"]
    },
    "referentialEqualities": {
      "0.riskView": [
        "2.riskView",
        "4.riskView",
        "8.riskView",
        "9.riskView",
        "12.riskView",
        "13.riskView",
        "16.riskView",
        "21.riskView",
        "22.riskView",
        "23.riskView",
        "24.riskView",
        "27.riskView",
        "28.riskView",
        "37.riskView",
        "39.riskView",
        "40.riskView",
        "41.riskView",
        "42.riskView",
        "50.riskView",
        "51.riskView",
        "52.riskView",
        "53.riskView",
        "55.riskView",
        "59.riskView",
        "60.riskView",
        "65.riskView",
        "68.riskView",
        "72.riskView",
        "81.riskView",
        "83.riskView",
        "84.riskView",
        "86.riskView",
        "88.riskView",
        "89.riskView",
        "90.riskView",
        "93.riskView",
        "94.riskView",
        "99.riskView",
        "103.riskView",
        "104.riskView",
        "105.riskView",
        "106.riskView",
        "108.riskView",
        "111.riskView",
        "113.riskView",
        "118.riskView",
        "122.riskView",
        "123.riskView",
        "124.riskView",
        "125.riskView",
        "127.riskView",
        "129.riskView",
        "131.riskView",
        "133.riskView",
        "134.riskView",
        "138.riskView",
        "139.riskView",
        "141.riskView",
        "143.riskView",
        "144.riskView",
        "145.riskView",
        "146.riskView",
        "152.riskView",
        "154.riskView",
        "155.riskView",
        "157.riskView",
        "159.riskView"
      ],
      "0.riskView.stateValidation": [
        "0.riskView.dataAvailability",
        "0.riskView.exitWindow",
        "0.riskView.sequencerFailure",
        "0.riskView.proposerFailure",
        "0.riskView.destinationToken",
        "0.riskView.validatedBy"
      ],
      "0.technology": [
        "2.technology",
        "4.technology",
        "8.technology",
        "9.technology",
        "12.technology",
        "13.technology",
        "16.technology",
        "21.technology",
        "22.technology",
        "23.technology",
        "24.technology",
        "27.technology",
        "28.technology",
        "37.technology",
        "39.technology",
        "40.technology",
        "41.technology",
        "42.technology",
        "50.technology",
        "51.technology",
        "52.technology",
        "53.technology",
        "55.technology",
        "59.technology",
        "60.technology",
        "65.technology",
        "68.technology",
        "72.technology",
        "81.technology",
        "83.technology",
        "84.technology",
        "86.technology",
        "88.technology",
        "89.technology",
        "90.technology",
        "93.technology",
        "94.technology",
        "99.technology",
        "103.technology",
        "104.technology",
        "105.technology",
        "106.technology",
        "108.technology",
        "111.technology",
        "113.technology",
        "118.technology",
        "122.technology",
        "123.technology",
        "124.technology",
        "125.technology",
        "127.technology",
        "129.technology",
        "131.technology",
        "133.technology",
        "134.technology",
        "138.technology",
        "139.technology",
        "141.technology",
        "143.technology",
        "144.technology",
        "145.technology",
        "146.technology",
        "152.technology",
        "154.technology",
        "155.technology",
        "157.technology",
        "159.technology"
      ],
      "0.technology.stateCorrectness": [
        "0.technology.dataAvailability",
        "0.technology.operator",
        "0.technology.forceTransactions",
        "46.technology.stateCorrectness",
        "46.technology.dataAvailability",
        "46.technology.operator",
        "46.technology.forceTransactions"
      ],
      "0.technology.exitMechanisms": ["46.technology.exitMechanisms"],
      "0.contracts": [
        "2.contracts",
        "4.contracts",
        "8.contracts",
        "9.contracts",
        "12.contracts",
        "13.contracts",
        "16.contracts",
        "21.contracts",
        "22.contracts",
        "23.contracts",
        "24.contracts",
        "27.contracts",
        "28.contracts",
        "37.contracts",
        "39.contracts",
        "40.contracts",
        "41.contracts",
        "42.contracts",
        "50.contracts",
        "51.contracts",
        "52.contracts",
        "53.contracts",
        "55.contracts",
        "59.contracts",
        "60.contracts",
        "65.contracts",
        "68.contracts",
        "72.contracts",
        "81.contracts",
        "83.contracts",
        "84.contracts",
        "86.contracts",
        "88.contracts",
        "89.contracts",
        "90.contracts",
        "93.contracts",
        "94.contracts",
        "99.contracts",
        "103.contracts",
        "104.contracts",
        "105.contracts",
        "106.contracts",
        "108.contracts",
        "111.contracts",
        "113.contracts",
        "118.contracts",
        "122.contracts",
        "123.contracts",
        "124.contracts",
        "125.contracts",
        "127.contracts",
        "129.contracts",
        "131.contracts",
        "133.contracts",
        "134.contracts",
        "138.contracts",
        "139.contracts",
        "141.contracts",
        "143.contracts",
        "144.contracts",
        "145.contracts",
        "146.contracts",
        "152.contracts",
        "154.contracts",
        "155.contracts",
        "157.contracts",
        "159.contracts"
      ],
      "1.technology.dataAvailability.risks": [
        "5.technology.dataAvailability.risks",
        "57.technology.dataAvailability.risks",
        "61.technology.dataAvailability.risks",
        "73.technology.dataAvailability.risks",
        "76.technology.dataAvailability.risks",
        "98.technology.dataAvailability.risks",
        "110.technology.dataAvailability.risks"
      ],
      "1.technology.dataAvailability.references.0": [
        "5.technology.dataAvailability.references.0",
        "57.technology.dataAvailability.references.0",
        "61.technology.dataAvailability.references.0",
        "73.technology.dataAvailability.references.0",
        "76.technology.dataAvailability.references.0",
        "98.technology.dataAvailability.references.0",
        "110.technology.dataAvailability.references.0"
      ],
      "1.technology.operator.risks": [
        "5.technology.operator.risks",
        "6.technology.operator.risks",
        "17.technology.operator.risks",
        "18.technology.operator.risks",
        "19.technology.operator.risks",
        "20.technology.operator.risks",
        "25.technology.operator.risks",
        "29.technology.operator.risks",
        "30.technology.operator.risks",
        "31.technology.operator.risks",
        "32.technology.operator.risks",
        "33.technology.operator.risks",
        "34.technology.operator.risks",
        "35.technology.operator.risks",
        "43.technology.operator.risks",
        "47.technology.operator.risks",
        "57.technology.operator.risks",
        "61.technology.operator.risks",
        "64.technology.operator.risks",
        "70.technology.operator.risks",
        "71.technology.operator.risks",
        "73.technology.operator.risks",
        "76.technology.operator.risks",
        "77.technology.operator.risks",
        "78.technology.operator.risks",
        "80.technology.operator.risks",
        "82.technology.operator.risks",
        "95.technology.operator.risks",
        "97.technology.operator.risks",
        "98.technology.operator.risks",
        "109.technology.operator.risks",
        "110.technology.operator.risks",
        "114.technology.operator.risks",
        "119.technology.operator.risks",
        "120.technology.operator.risks",
        "128.technology.operator.risks",
        "130.technology.operator.risks",
        "132.technology.operator.risks",
        "140.technology.operator.risks",
        "142.technology.operator.risks",
        "149.technology.operator.risks",
        "153.technology.operator.risks",
        "156.technology.operator.risks",
        "160.technology.operator.risks",
        "164.technology.operator.risks",
        "165.technology.operator.risks"
      ],
      "1.technology.operator.risks.0": [
        "3.technology.operator.risks.0",
        "10.technology.operator.risks.0",
        "48.technology.operator.risks.0",
        "69.technology.operator.risks.0",
        "79.technology.operator.risks.0",
        "107.technology.operator.risks.0",
        "121.technology.operator.risks.0",
        "147.technology.operator.risks.0",
        "148.technology.operator.risks.0",
        "151.technology.operator.risks.0",
        "158.technology.operator.risks.0"
      ],
      "1.technology.forceTransactions.risks": [
        "3.technology.forceTransactions.risks",
        "5.technology.forceTransactions.risks",
        "7.technology.forceTransactions.risks",
        "11.technology.forceTransactions.risks",
        "17.technology.forceTransactions.risks",
        "18.technology.forceTransactions.risks",
        "19.technology.forceTransactions.risks",
        "20.technology.forceTransactions.risks",
        "25.technology.forceTransactions.risks",
        "30.technology.forceTransactions.risks",
        "31.technology.forceTransactions.risks",
        "36.technology.forceTransactions.risks",
        "38.technology.forceTransactions.risks",
        "43.technology.forceTransactions.risks",
        "44.technology.forceTransactions.risks",
        "49.technology.forceTransactions.risks",
        "56.technology.forceTransactions.risks",
        "57.technology.forceTransactions.risks",
        "61.technology.forceTransactions.risks",
        "62.technology.forceTransactions.risks",
        "63.technology.forceTransactions.risks",
        "64.technology.forceTransactions.risks",
        "70.technology.forceTransactions.risks",
        "73.technology.forceTransactions.risks",
        "76.technology.forceTransactions.risks",
        "77.technology.forceTransactions.risks",
        "78.technology.forceTransactions.risks",
        "80.technology.forceTransactions.risks",
        "82.technology.forceTransactions.risks",
        "91.technology.forceTransactions.risks",
        "96.technology.forceTransactions.risks",
        "97.technology.forceTransactions.risks",
        "98.technology.forceTransactions.risks",
        "101.technology.forceTransactions.risks",
        "109.technology.forceTransactions.risks",
        "110.technology.forceTransactions.risks",
        "114.technology.forceTransactions.risks",
        "115.technology.forceTransactions.risks",
        "116.technology.forceTransactions.risks",
        "119.technology.forceTransactions.risks",
        "130.technology.forceTransactions.risks",
        "132.technology.forceTransactions.risks",
        "135.technology.forceTransactions.risks",
        "142.technology.forceTransactions.risks",
        "149.technology.forceTransactions.risks",
        "150.technology.forceTransactions.risks",
        "153.technology.forceTransactions.risks",
        "156.technology.forceTransactions.risks",
        "165.technology.forceTransactions.risks"
      ],
      "1.technology.exitMechanisms.0.risks.0": [
        "5.technology.exitMechanisms.0.risks.0",
        "17.technology.exitMechanisms.0.risks.0",
        "19.technology.exitMechanisms.0.risks.0",
        "20.technology.exitMechanisms.0.risks.0",
        "25.technology.exitMechanisms.0.risks.0",
        "30.technology.exitMechanisms.0.risks.0",
        "31.technology.exitMechanisms.0.risks.0",
        "43.technology.exitMechanisms.0.risks.0",
        "57.technology.exitMechanisms.0.risks.0",
        "61.technology.exitMechanisms.0.risks.0",
        "64.technology.exitMechanisms.0.risks.0",
        "70.technology.exitMechanisms.0.risks.0",
        "73.technology.exitMechanisms.0.risks.0",
        "76.technology.exitMechanisms.0.risks.0",
        "77.technology.exitMechanisms.0.risks.0",
        "78.technology.exitMechanisms.0.risks.0",
        "79.technology.exitMechanisms.0.risks.0",
        "80.technology.exitMechanisms.0.risks.0",
        "82.technology.exitMechanisms.0.risks.0",
        "97.technology.exitMechanisms.0.risks.0",
        "98.technology.exitMechanisms.0.risks.0",
        "109.technology.exitMechanisms.0.risks.0",
        "110.technology.exitMechanisms.0.risks.0",
        "114.technology.exitMechanisms.0.risks.0",
        "119.technology.exitMechanisms.0.risks.0",
        "130.technology.exitMechanisms.0.risks.0",
        "132.technology.exitMechanisms.0.risks.0",
        "142.technology.exitMechanisms.0.risks.0",
        "149.technology.exitMechanisms.0.risks.0",
        "153.technology.exitMechanisms.0.risks.0",
        "156.technology.exitMechanisms.0.risks.0",
        "165.technology.exitMechanisms.0.risks.0"
      ],
      "1.contracts.risks.0": [
        "3.contracts.risks.0",
        "5.contracts.risks.0",
        "6.contracts.risks.0",
        "11.contracts.risks.0",
        "17.contracts.risks.0",
        "18.contracts.risks.0",
        "19.contracts.risks.0",
        "20.contracts.risks.0",
        "25.contracts.risks.0",
        "26.contracts.risks.0",
        "30.contracts.risks.0",
        "36.contracts.risks.0",
        "38.contracts.risks.0",
        "43.contracts.risks.0",
        "47.contracts.risks.0",
        "49.contracts.risks.0",
        "56.contracts.risks.0",
        "57.contracts.risks.0",
        "58.contracts.risks.0",
        "61.contracts.risks.0",
        "62.contracts.risks.0",
        "64.contracts.risks.0",
        "67.contracts.risks.0",
        "70.contracts.risks.0",
        "71.contracts.risks.0",
        "73.contracts.risks.0",
        "76.contracts.risks.0",
        "77.contracts.risks.0",
        "78.contracts.risks.0",
        "79.contracts.risks.0",
        "80.contracts.risks.0",
        "82.contracts.risks.0",
        "85.contracts.risks.0",
        "91.contracts.risks.0",
        "97.contracts.risks.0",
        "98.contracts.risks.0",
        "100.contracts.risks.0",
        "101.contracts.risks.0",
        "109.contracts.risks.0",
        "110.contracts.risks.0",
        "112.contracts.risks.0",
        "114.contracts.risks.0",
        "115.contracts.risks.0",
        "116.contracts.risks.0",
        "117.contracts.risks.0",
        "119.contracts.risks.0",
        "126.contracts.risks.0",
        "128.contracts.risks.0",
        "130.contracts.risks.0",
        "132.contracts.risks.0",
        "135.contracts.risks.0",
        "136.contracts.risks.0",
        "137.contracts.risks.0",
        "140.contracts.risks.0",
        "142.contracts.risks.0",
        "149.contracts.risks.0",
        "150.contracts.risks.0",
        "153.contracts.risks.0",
        "156.contracts.risks.0",
        "164.contracts.risks.0",
        "165.contracts.risks.0"
      ],
      "1.config.escrows.0.contract.upgradableBy": [
        "1.config.escrows.1.contract.upgradableBy"
      ],
      "1.config.transactionApi.assessCount": [
        "3.config.transactionApi.assessCount",
        "5.config.transactionApi.assessCount",
        "7.config.transactionApi.assessCount",
        "11.config.transactionApi.assessCount",
        "17.config.transactionApi.assessCount",
        "18.config.transactionApi.assessCount",
        "19.config.transactionApi.assessCount",
        "25.config.transactionApi.assessCount",
        "30.config.transactionApi.assessCount",
        "36.config.transactionApi.assessCount",
        "38.config.transactionApi.assessCount",
        "43.config.transactionApi.assessCount",
        "49.config.transactionApi.assessCount",
        "56.config.transactionApi.assessCount",
        "61.config.transactionApi.assessCount",
        "62.config.transactionApi.assessCount",
        "63.config.transactionApi.assessCount",
        "64.config.transactionApi.assessCount",
        "70.config.transactionApi.assessCount",
        "73.config.transactionApi.assessCount",
        "74.config.transactionApi.assessCount",
        "75.config.transactionApi.assessCount",
        "76.config.transactionApi.assessCount",
        "77.config.transactionApi.assessCount",
        "78.config.transactionApi.assessCount",
        "80.config.transactionApi.assessCount",
        "82.config.transactionApi.assessCount",
        "87.config.transactionApi.assessCount",
        "91.config.transactionApi.assessCount",
        "97.config.transactionApi.assessCount",
        "98.config.transactionApi.assessCount",
        "101.config.transactionApi.assessCount",
        "109.config.transactionApi.assessCount",
        "110.config.transactionApi.assessCount",
        "114.config.transactionApi.assessCount",
        "115.config.transactionApi.assessCount",
        "116.config.transactionApi.assessCount",
        "119.config.transactionApi.assessCount",
        "130.config.transactionApi.assessCount",
        "132.config.transactionApi.assessCount",
        "135.config.transactionApi.assessCount",
        "142.config.transactionApi.assessCount",
        "149.config.transactionApi.assessCount",
        "150.config.transactionApi.assessCount",
        "153.config.transactionApi.assessCount",
        "156.config.transactionApi.assessCount",
        "165.config.transactionApi.assessCount"
      ],
      "1.riskView.validatedBy": [
        "3.riskView.validatedBy",
        "5.riskView.validatedBy",
        "6.riskView.validatedBy",
        "7.riskView.validatedBy",
        "10.riskView.validatedBy",
        "11.riskView.validatedBy",
        "14.riskView.validatedBy",
        "15.riskView.validatedBy",
        "17.riskView.validatedBy",
        "18.riskView.validatedBy",
        "19.riskView.validatedBy",
        "20.riskView.validatedBy",
        "25.riskView.validatedBy",
        "26.riskView.validatedBy",
        "29.riskView.validatedBy",
        "30.riskView.validatedBy",
        "31.riskView.validatedBy",
        "32.riskView.validatedBy",
        "33.riskView.validatedBy",
        "34.riskView.validatedBy",
        "35.riskView.validatedBy",
        "36.riskView.validatedBy",
        "38.riskView.validatedBy",
        "43.riskView.validatedBy",
        "44.riskView.validatedBy",
        "45.riskView.validatedBy",
        "47.riskView.validatedBy",
        "48.riskView.validatedBy",
        "49.riskView.validatedBy",
        "54.riskView.validatedBy",
        "56.riskView.validatedBy",
        "57.riskView.validatedBy",
        "58.riskView.validatedBy",
        "61.riskView.validatedBy",
        "62.riskView.validatedBy",
        "63.riskView.validatedBy",
        "64.riskView.validatedBy",
        "67.riskView.validatedBy",
        "69.riskView.validatedBy",
        "70.riskView.validatedBy",
        "71.riskView.validatedBy",
        "73.riskView.validatedBy",
        "76.riskView.validatedBy",
        "77.riskView.validatedBy",
        "78.riskView.validatedBy",
        "79.riskView.validatedBy",
        "80.riskView.validatedBy",
        "82.riskView.validatedBy",
        "85.riskView.validatedBy",
        "91.riskView.validatedBy",
        "95.riskView.validatedBy",
        "96.riskView.validatedBy",
        "97.riskView.validatedBy",
        "98.riskView.validatedBy",
        "100.riskView.validatedBy",
        "101.riskView.validatedBy",
        "107.riskView.validatedBy",
        "109.riskView.validatedBy",
        "110.riskView.validatedBy",
        "112.riskView.validatedBy",
        "114.riskView.validatedBy",
        "115.riskView.validatedBy",
        "116.riskView.validatedBy",
        "117.riskView.validatedBy",
        "119.riskView.validatedBy",
        "120.riskView.validatedBy",
        "121.riskView.validatedBy",
        "126.riskView.validatedBy",
        "128.riskView.validatedBy",
        "130.riskView.validatedBy",
        "132.riskView.validatedBy",
        "135.riskView.validatedBy",
        "136.riskView.validatedBy",
        "137.riskView.validatedBy",
        "140.riskView.validatedBy",
        "142.riskView.validatedBy",
        "147.riskView.validatedBy",
        "148.riskView.validatedBy",
        "149.riskView.validatedBy",
        "150.riskView.validatedBy",
        "151.riskView.validatedBy",
        "153.riskView.validatedBy",
        "156.riskView.validatedBy",
        "158.riskView.validatedBy",
        "160.riskView.validatedBy",
        "161.riskView.validatedBy",
        "162.riskView.validatedBy",
        "163.riskView.validatedBy",
        "164.riskView.validatedBy",
        "165.riskView.validatedBy"
      ],
      "3.technology.dataAvailability.risks.0": [
        "6.technology.dataAvailability.risks.0",
        "11.technology.dataAvailability.risks.0",
        "36.technology.dataAvailability.risks.0",
        "38.technology.dataAvailability.risks.0",
        "47.technology.dataAvailability.risks.0",
        "49.technology.dataAvailability.risks.0",
        "56.technology.dataAvailability.risks.0",
        "91.technology.dataAvailability.risks.0",
        "115.technology.dataAvailability.risks.0",
        "116.technology.dataAvailability.risks.0",
        "135.technology.dataAvailability.risks.0",
        "150.technology.dataAvailability.risks.0"
      ],
      "3.technology.operator.risks": [
        "7.technology.operator.risks",
        "11.technology.operator.risks",
        "36.technology.operator.risks",
        "38.technology.operator.risks",
        "44.technology.operator.risks",
        "45.technology.operator.risks",
        "49.technology.operator.risks",
        "56.technology.operator.risks",
        "62.technology.operator.risks",
        "63.technology.operator.risks",
        "91.technology.operator.risks",
        "101.technology.operator.risks",
        "115.technology.operator.risks",
        "116.technology.operator.risks",
        "135.technology.operator.risks",
        "150.technology.operator.risks"
      ],
      "3.technology.exitMechanisms.2": [
        "7.technology.exitMechanisms.2",
        "11.technology.exitMechanisms.2",
        "36.technology.exitMechanisms.2",
        "38.technology.exitMechanisms.2",
        "49.technology.exitMechanisms.2",
        "56.technology.exitMechanisms.2",
        "62.technology.exitMechanisms.2",
        "63.technology.exitMechanisms.1",
        "91.technology.exitMechanisms.2",
        "101.technology.exitMechanisms.2",
        "115.technology.exitMechanisms.2",
        "116.technology.exitMechanisms.2",
        "135.technology.exitMechanisms.2",
        "150.technology.exitMechanisms.2"
      ],
      "3.technology.otherConsiderations": [
        "11.technology.otherConsiderations",
        "36.technology.otherConsiderations",
        "38.technology.otherConsiderations",
        "49.technology.otherConsiderations",
        "56.technology.otherConsiderations",
        "62.technology.otherConsiderations",
        "101.technology.otherConsiderations",
        "115.technology.otherConsiderations",
        "116.technology.otherConsiderations",
        "135.technology.otherConsiderations",
        "150.technology.otherConsiderations"
      ],
      "5.contracts.addresses.0.upgradableBy": [
        "5.contracts.addresses.1.upgradableBy",
        "5.contracts.addresses.2.upgradableBy",
        "5.contracts.addresses.3.upgradableBy",
        "5.contracts.addresses.4.upgradableBy",
        "5.contracts.addresses.5.upgradableBy",
        "5.config.escrows.0.contract.upgradableBy",
        "5.config.escrows.1.contract.upgradableBy"
      ],
      "6.riskView.stateValidation": [
        "26.riskView.stateValidation",
        "58.riskView.stateValidation",
        "67.riskView.stateValidation",
        "85.riskView.stateValidation",
        "112.riskView.stateValidation",
        "117.riskView.stateValidation",
        "126.riskView.stateValidation",
        "137.riskView.stateValidation"
      ],
      "6.riskView.destinationToken": [
        "35.riskView.destinationToken",
        "100.riskView.destinationToken"
      ],
      "6.technology.stateCorrectness": [
        "26.technology.stateCorrectness",
        "58.technology.stateCorrectness",
        "67.technology.stateCorrectness",
        "85.technology.stateCorrectness",
        "112.technology.stateCorrectness",
        "117.technology.stateCorrectness",
        "126.technology.stateCorrectness",
        "137.technology.stateCorrectness"
      ],
      "6.technology.stateCorrectness.risks": [
        "10.technology.stateCorrectness.risks",
        "14.technology.stateCorrectness.risks",
        "15.technology.stateCorrectness.risks",
        "32.technology.stateCorrectness.risks",
        "33.technology.stateCorrectness.risks",
        "34.technology.stateCorrectness.risks",
        "35.technology.stateCorrectness.risks",
        "48.technology.stateCorrectness.risks",
        "54.technology.stateCorrectness.risks",
        "71.technology.stateCorrectness.risks",
        "100.technology.stateCorrectness.risks",
        "107.technology.stateCorrectness.risks",
        "120.technology.stateCorrectness.risks",
        "121.technology.stateCorrectness.risks",
        "128.technology.stateCorrectness.risks",
        "140.technology.stateCorrectness.risks",
        "147.technology.stateCorrectness.risks",
        "148.technology.stateCorrectness.risks",
        "151.technology.stateCorrectness.risks",
        "158.technology.stateCorrectness.risks",
        "160.technology.stateCorrectness.risks",
        "164.technology.stateCorrectness.risks"
      ],
      "6.technology.stateCorrectness.references.0": [
        "35.technology.stateCorrectness.references.0"
      ],
      "6.technology.newCryptography": [
        "26.technology.newCryptography",
        "35.technology.newCryptography",
        "58.technology.newCryptography",
        "67.technology.newCryptography",
        "85.technology.newCryptography",
        "100.technology.newCryptography",
        "112.technology.newCryptography",
        "117.technology.newCryptography",
        "126.technology.newCryptography",
        "128.technology.newCryptography"
      ],
      "6.technology.dataAvailability": [
        "26.technology.dataAvailability",
        "58.technology.dataAvailability",
        "67.technology.dataAvailability",
        "85.technology.dataAvailability",
        "112.technology.dataAvailability",
        "117.technology.dataAvailability",
        "126.technology.dataAvailability",
        "137.technology.dataAvailability"
      ],
      "6.technology.operator": [
        "26.technology.operator",
        "58.technology.operator",
        "67.technology.operator",
        "85.technology.operator",
        "112.technology.operator",
        "117.technology.operator",
        "126.technology.operator",
        "137.technology.operator"
      ],
      "6.technology.operator.references.0": [
        "35.technology.operator.references.0"
      ],
      "6.technology.forceTransactions.risks.0": [
        "26.technology.forceTransactions.risks.0",
        "32.technology.forceTransactions.risks.0",
        "33.technology.forceTransactions.risks.0",
        "34.technology.forceTransactions.risks.0",
        "35.technology.forceTransactions.risks.0",
        "47.technology.forceTransactions.risks.0",
        "58.technology.forceTransactions.risks.0",
        "67.technology.forceTransactions.risks.0",
        "71.technology.forceTransactions.risks.0",
        "85.technology.forceTransactions.risks.0",
        "112.technology.forceTransactions.risks.0",
        "117.technology.forceTransactions.risks.0",
        "126.technology.forceTransactions.risks.0",
        "137.technology.forceTransactions.risks.0",
        "140.technology.forceTransactions.risks.0",
        "160.technology.forceTransactions.risks.0",
        "164.technology.forceTransactions.risks.0"
      ],
      "6.technology.exitMechanisms": [
        "35.technology.exitMechanisms",
        "67.technology.exitMechanisms"
      ],
      "6.technology.exitMechanisms.0": ["117.technology.exitMechanisms.0"],
      "6.technology.exitMechanisms.1": ["117.technology.exitMechanisms.1"],
      "6.technology.exitMechanisms.1.references.0": [
        "6.technology.exitMechanisms.2.references.0"
      ],
      "6.technology.exitMechanisms.1.references.1": [
        "6.technology.exitMechanisms.2.references.1"
      ],
      "6.technology.exitMechanisms.1.references.2": [
        "6.technology.exitMechanisms.2.references.2"
      ],
      "6.technology.exitMechanisms.2": ["117.technology.exitMechanisms.2"],
      "6.contracts.addresses.7": [
        "26.contracts.addresses.2",
        "58.contracts.addresses.2",
        "67.contracts.addresses.6",
        "85.contracts.addresses.2",
        "100.contracts.addresses.1",
        "112.contracts.addresses.2",
        "117.contracts.addresses.2",
        "126.contracts.addresses.2",
        "128.contracts.addresses.1",
        "137.contracts.addresses.2"
      ],
      "6.contracts.addresses.8": [
        "26.contracts.addresses.3",
        "58.contracts.addresses.3",
        "67.contracts.addresses.7",
        "85.contracts.addresses.3",
        "100.contracts.addresses.2",
        "112.contracts.addresses.3",
        "117.contracts.addresses.3",
        "126.contracts.addresses.3",
        "128.contracts.addresses.2",
        "137.contracts.addresses.3"
      ],
      "6.contracts.addresses.9": [
        "26.contracts.addresses.4",
        "58.contracts.addresses.4",
        "67.contracts.addresses.8",
        "85.contracts.addresses.4",
        "100.contracts.addresses.3",
        "112.contracts.addresses.4",
        "117.contracts.addresses.4",
        "126.contracts.addresses.4",
        "128.contracts.addresses.3",
        "137.contracts.addresses.4"
      ],
      "6.contracts.addresses.10": [
        "26.contracts.addresses.5",
        "58.contracts.addresses.5",
        "67.contracts.addresses.9",
        "85.contracts.addresses.5",
        "100.contracts.addresses.4",
        "112.contracts.addresses.5",
        "117.contracts.addresses.5",
        "126.contracts.addresses.5",
        "128.contracts.addresses.4",
        "137.contracts.addresses.5"
      ],
      "6.contracts.addresses.11": [
        "26.contracts.addresses.6",
        "58.contracts.addresses.6",
        "67.contracts.addresses.10",
        "85.contracts.addresses.6",
        "100.contracts.addresses.5",
        "112.contracts.addresses.6",
        "117.contracts.addresses.6",
        "126.contracts.addresses.6",
        "128.contracts.addresses.5",
        "137.contracts.addresses.6"
      ],
      "6.contracts.addresses.12": [
        "26.contracts.addresses.7",
        "58.contracts.addresses.7",
        "67.contracts.addresses.11",
        "85.contracts.addresses.7",
        "100.contracts.addresses.6",
        "112.contracts.addresses.7",
        "117.contracts.addresses.7",
        "126.contracts.addresses.7",
        "128.contracts.addresses.6",
        "137.contracts.addresses.7"
      ],
      "6.contracts.addresses.13": [
        "26.contracts.addresses.8",
        "58.contracts.addresses.8",
        "67.contracts.addresses.12",
        "85.contracts.addresses.8",
        "100.contracts.addresses.7",
        "112.contracts.addresses.8",
        "117.contracts.addresses.8",
        "126.contracts.addresses.8",
        "128.contracts.addresses.7",
        "137.contracts.addresses.8"
      ],
      "6.knowledgeNuggets.0": [
        "26.knowledgeNuggets.0",
        "35.knowledgeNuggets.1",
        "58.knowledgeNuggets.0",
        "85.knowledgeNuggets.0",
        "100.knowledgeNuggets.0",
        "112.knowledgeNuggets.0",
        "117.knowledgeNuggets.0",
        "126.knowledgeNuggets.0",
        "128.knowledgeNuggets.0",
        "137.knowledgeNuggets.0"
      ],
      "6.knowledgeNuggets.1": [
        "26.knowledgeNuggets.1",
        "35.knowledgeNuggets.2",
        "58.knowledgeNuggets.1",
        "85.knowledgeNuggets.1",
        "100.knowledgeNuggets.1",
        "112.knowledgeNuggets.1",
        "117.knowledgeNuggets.1",
        "126.knowledgeNuggets.1",
        "128.knowledgeNuggets.1",
        "137.knowledgeNuggets.1"
      ],
      "6.knowledgeNuggets.2": [
        "26.knowledgeNuggets.2",
        "35.knowledgeNuggets.3",
        "58.knowledgeNuggets.2",
        "85.knowledgeNuggets.2",
        "100.knowledgeNuggets.2",
        "112.knowledgeNuggets.2",
        "117.knowledgeNuggets.2",
        "126.knowledgeNuggets.2",
        "128.knowledgeNuggets.2",
        "137.knowledgeNuggets.2"
      ],
      "6.knowledgeNuggets.3": [
        "26.knowledgeNuggets.3",
        "35.knowledgeNuggets.4",
        "58.knowledgeNuggets.3",
        "85.knowledgeNuggets.3",
        "100.knowledgeNuggets.3",
        "112.knowledgeNuggets.3",
        "117.knowledgeNuggets.3",
        "126.knowledgeNuggets.3",
        "128.knowledgeNuggets.3",
        "137.knowledgeNuggets.3"
      ],
      "7.contracts.addresses.0.upgradableBy": [
        "7.contracts.addresses.1.upgradableBy",
        "7.contracts.addresses.2.upgradableBy",
        "7.contracts.addresses.3.upgradableBy",
        "7.contracts.addresses.4.upgradableBy",
        "7.contracts.addresses.5.upgradableBy",
        "7.contracts.addresses.6.upgradableBy",
        "7.contracts.addresses.7.upgradableBy",
        "7.contracts.addresses.8.upgradableBy",
        "7.config.escrows.1.contract.upgradableBy",
        "7.config.escrows.2.contract.upgradableBy"
      ],
      "7.contracts.nativeAddresses.arbitrum.0.upgradableBy": [
        "7.contracts.nativeAddresses.arbitrum.1.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.2.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.3.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.4.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.5.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.11.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.12.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.13.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.14.upgradableBy",
        "7.contracts.nativeAddresses.arbitrum.15.upgradableBy"
      ],
      "7.technology.dataAvailability.risks": [
        "17.technology.dataAvailability.risks",
        "18.technology.dataAvailability.risks",
        "19.technology.dataAvailability.risks",
        "20.technology.dataAvailability.risks",
        "30.technology.dataAvailability.risks",
        "62.technology.dataAvailability.risks",
        "64.technology.dataAvailability.risks",
        "69.technology.dataAvailability.risks",
        "70.technology.dataAvailability.risks",
        "78.technology.dataAvailability.risks",
        "80.technology.dataAvailability.risks",
        "82.technology.dataAvailability.risks",
        "96.technology.dataAvailability.risks",
        "97.technology.dataAvailability.risks",
        "109.technology.dataAvailability.risks",
        "120.technology.dataAvailability.risks",
        "130.technology.dataAvailability.risks",
        "132.technology.dataAvailability.risks",
        "142.technology.dataAvailability.risks",
        "149.technology.dataAvailability.risks",
        "156.technology.dataAvailability.risks",
        "163.technology.dataAvailability.risks",
        "165.technology.dataAvailability.risks"
      ],
      "7.technology.otherConsiderations.0": [
        "91.technology.otherConsiderations.0"
      ],
      "7.riskView.dataAvailability": [
        "32.riskView.dataAvailability",
        "33.riskView.dataAvailability",
        "34.riskView.dataAvailability",
        "44.riskView.dataAvailability",
        "45.riskView.dataAvailability",
        "54.riskView.dataAvailability",
        "62.riskView.dataAvailability",
        "71.riskView.dataAvailability",
        "96.riskView.dataAvailability",
        "101.riskView.dataAvailability",
        "161.riskView.dataAvailability",
        "162.riskView.dataAvailability"
      ],
      "10.technology.newCryptography.risks": [
        "29.technology.newCryptography.risks",
        "48.technology.newCryptography.risks",
        "107.technology.newCryptography.risks",
        "121.technology.newCryptography.risks",
        "147.technology.newCryptography.risks",
        "148.technology.newCryptography.risks",
        "151.technology.newCryptography.risks"
      ],
      "10.technology.newCryptography.references": [
        "29.technology.newCryptography.references",
        "48.technology.newCryptography.references",
        "121.technology.newCryptography.references",
        "147.technology.newCryptography.references",
        "148.technology.newCryptography.references",
        "151.technology.newCryptography.references"
      ],
      "10.technology.forceTransactions.risks": [
        "48.technology.forceTransactions.risks",
        "69.technology.forceTransactions.risks",
        "100.technology.forceTransactions.risks",
        "107.technology.forceTransactions.risks",
        "120.technology.forceTransactions.risks",
        "121.technology.forceTransactions.risks",
        "128.technology.forceTransactions.risks",
        "147.technology.forceTransactions.risks",
        "148.technology.forceTransactions.risks",
        "151.technology.forceTransactions.risks",
        "158.technology.forceTransactions.risks"
      ],
      "10.technology.forceTransactions.risks.0": [
        "29.technology.forceTransactions.risks.0",
        "163.technology.forceTransactions.risks.0"
      ],
      "10.contracts.addresses.1.upgradableBy": [
        "10.contracts.addresses.3.upgradableBy",
        "10.contracts.addresses.4.upgradableBy",
        "10.contracts.addresses.5.upgradableBy"
      ],
      "14.riskView.exitWindow": [
        "15.riskView.exitWindow",
        "31.riskView.exitWindow",
        "32.riskView.exitWindow",
        "33.riskView.exitWindow",
        "45.riskView.exitWindow"
      ],
      "14.technology.newCryptography.risks": [
        "15.technology.newCryptography.risks",
        "32.technology.newCryptography.risks",
        "33.technology.newCryptography.risks",
        "34.technology.newCryptography.risks",
        "54.technology.newCryptography.risks",
        "69.technology.newCryptography.risks",
        "71.technology.newCryptography.risks",
        "120.technology.newCryptography.risks",
        "140.technology.newCryptography.risks",
        "160.technology.newCryptography.risks",
        "161.technology.newCryptography.risks",
        "162.technology.newCryptography.risks",
        "164.technology.newCryptography.risks"
      ],
      "14.technology.dataAvailability.risks": [
        "15.technology.dataAvailability.risks",
        "32.technology.dataAvailability.risks",
        "33.technology.dataAvailability.risks",
        "34.technology.dataAvailability.risks",
        "45.technology.dataAvailability.risks",
        "54.technology.dataAvailability.risks",
        "71.technology.dataAvailability.risks",
        "140.technology.dataAvailability.risks",
        "160.technology.dataAvailability.risks",
        "164.technology.dataAvailability.risks"
      ],
      "14.technology.forceTransactions.risks": [
        "45.technology.forceTransactions.risks",
        "54.technology.forceTransactions.risks"
      ],
      "17.config.escrows.0.contract.upgradableBy": [
        "17.config.escrows.1.contract.upgradableBy"
      ],
      "18.config.escrows.0.contract.upgradableBy": [
        "18.config.escrows.1.contract.upgradableBy"
      ],
      "19.config.escrows.0.contract.upgradableBy": [
        "19.config.escrows.1.contract.upgradableBy"
      ],
      "20.config.escrows.0.contract.upgradableBy": [
        "20.config.escrows.1.contract.upgradableBy"
      ],
      "25.contracts.addresses.0.upgradableBy": [
        "25.contracts.addresses.1.upgradableBy",
        "25.contracts.addresses.2.upgradableBy",
        "25.contracts.addresses.3.upgradableBy",
        "25.contracts.addresses.4.upgradableBy",
        "25.contracts.addresses.5.upgradableBy"
      ],
      "25.config.escrows.0.contract.upgradableBy": [
        "25.config.escrows.1.contract.upgradableBy"
      ],
      "26.riskView.proposerFailure": [
        "58.riskView.proposerFailure",
        "85.riskView.proposerFailure",
        "112.riskView.proposerFailure",
        "126.riskView.proposerFailure"
      ],
      "26.riskView.destinationToken": [
        "31.riskView.destinationToken",
        "47.riskView.destinationToken",
        "54.riskView.destinationToken",
        "58.riskView.destinationToken",
        "67.riskView.destinationToken",
        "85.riskView.destinationToken",
        "112.riskView.destinationToken",
        "117.riskView.destinationToken",
        "126.riskView.destinationToken",
        "137.riskView.destinationToken"
      ],
      "26.technology.exitMechanisms": [
        "58.technology.exitMechanisms",
        "85.technology.exitMechanisms",
        "112.technology.exitMechanisms",
        "126.technology.exitMechanisms",
        "137.technology.exitMechanisms"
      ],
      "26.technology.exitMechanisms.1.references.0": [
        "26.technology.exitMechanisms.2.references.0"
      ],
      "26.technology.exitMechanisms.1.references.1": [
        "26.technology.exitMechanisms.2.references.1"
      ],
      "29.contracts.addresses.0.upgradableBy": [
        "29.contracts.addresses.8.upgradableBy",
        "29.contracts.addresses.9.upgradableBy",
        "29.contracts.addresses.10.upgradableBy",
        "29.config.escrows.0.contract.upgradableBy",
        "29.contracts.nativeAddresses.zksync2.6.upgradableBy"
      ],
      "29.technology.newCryptography": ["163.technology.newCryptography"],
      "29.technology.operator": [
        "100.technology.operator",
        "163.technology.operator"
      ],
      "29.technology.operator.references": [
        "47.technology.operator.references",
        "95.technology.operator.references",
        "128.technology.operator.references"
      ],
      "30.config.escrows.0.contract.upgradableBy": [
        "30.config.escrows.1.contract.upgradableBy"
      ],
      "31.riskView.proposerFailure": [
        "44.riskView.proposerFailure",
        "69.riskView.proposerFailure",
        "79.riskView.proposerFailure",
        "100.riskView.proposerFailure",
        "128.riskView.proposerFailure"
      ],
      "31.technology.dataAvailability.risks": [
        "44.technology.dataAvailability.risks",
        "63.technology.dataAvailability.risks",
        "101.technology.dataAvailability.risks",
        "107.technology.dataAvailability.risks"
      ],
      "32.riskView.stateValidation": [
        "33.riskView.stateValidation",
        "34.riskView.stateValidation",
        "54.riskView.stateValidation",
        "71.riskView.stateValidation",
        "161.riskView.stateValidation",
        "162.riskView.stateValidation"
      ],
      "35.contracts.addresses.0.upgradableBy": [
        "35.config.escrows.0.contract.upgradableBy"
      ],
      "35.contracts.addresses.8.upgradableBy": [
        "35.contracts.addresses.9.upgradableBy"
      ],
      "36.contracts.addresses.0.upgradableBy": [
        "36.contracts.addresses.1.upgradableBy",
        "36.contracts.addresses.2.upgradableBy",
        "36.contracts.addresses.3.upgradableBy"
      ],
      "43.config.escrows.0.contract.upgradableBy": [
        "43.config.escrows.1.contract.upgradableBy"
      ],
      "44.technology.operator": ["96.technology.operator"],
      "45.riskView.proposerFailure": ["96.riskView.proposerFailure"],
      "45.technology.stateCorrectness.risks": [
        "47.technology.stateCorrectness.risks"
      ],
      "46.riskView": [
        "66.riskView",
        "74.riskView",
        "75.riskView",
        "87.riskView",
        "92.riskView",
        "102.riskView"
      ],
      "46.riskView.stateValidation": [
        "46.riskView.dataAvailability",
        "46.riskView.exitWindow",
        "46.riskView.sequencerFailure",
        "46.riskView.proposerFailure",
        "46.riskView.destinationToken",
        "46.riskView.validatedBy"
      ],
      "46.technology": [
        "66.technology",
        "74.technology",
        "75.technology",
        "87.technology",
        "92.technology",
        "102.technology"
      ],
      "46.contracts": [
        "74.contracts",
        "75.contracts",
        "87.contracts",
        "92.contracts",
        "102.contracts"
      ],
      "47.riskView.dataAvailability": ["95.riskView.dataAvailability"],
      "47.riskView.proposerFailure": [
        "67.riskView.proposerFailure",
        "117.riskView.proposerFailure",
        "137.riskView.proposerFailure"
      ],
      "47.technology.dataAvailability.risks": [
        "95.technology.dataAvailability.risks",
        "158.technology.dataAvailability.risks"
      ],
      "47.technology.dataAvailability.references": [
        "95.technology.dataAvailability.references"
      ],
      "47.technology.forceTransactions.risks": [
        "95.technology.forceTransactions.risks"
      ],
      "47.technology.forceTransactions.references": [
        "95.technology.forceTransactions.references"
      ],
      "47.technology.exitMechanisms.0.risks": [
        "95.technology.exitMechanisms.0.risks"
      ],
      "47.technology.exitMechanisms.0.references": [
        "95.technology.exitMechanisms.0.references"
      ],
      "48.contracts.addresses.1.upgradableBy": [
        "48.contracts.addresses.3.upgradableBy",
        "48.contracts.addresses.4.upgradableBy",
        "48.contracts.addresses.5.upgradableBy"
      ],
      "57.config.escrows.0.contract.upgradableBy": [
        "57.config.escrows.1.contract.upgradableBy"
      ],
      "61.config.escrows.0.contract.upgradableBy": [
        "61.config.escrows.1.contract.upgradableBy"
      ],
      "63.contracts.addresses.0.upgradableBy": [
        "63.contracts.addresses.1.upgradableBy",
        "63.contracts.addresses.2.upgradableBy",
        "63.contracts.addresses.3.upgradableBy",
        "63.contracts.addresses.4.upgradableBy",
        "63.contracts.addresses.6.upgradableBy",
        "63.contracts.addresses.9.upgradableBy",
        "63.contracts.addresses.10.upgradableBy",
        "63.contracts.addresses.12.upgradableBy"
      ],
      "64.config.escrows.0.contract.upgradableBy": [
        "64.config.escrows.1.contract.upgradableBy"
      ],
      "69.technology.newCryptography.references": [
        "120.technology.newCryptography.references"
      ],
      "69.technology.exitMechanisms.0.risks.0": [
        "100.technology.exitMechanisms.0.risks.0",
        "120.technology.exitMechanisms.0.risks.0"
      ],
      "69.contracts.addresses.3.upgradableBy": [
        "69.contracts.addresses.4.upgradableBy"
      ],
      "70.config.escrows.0.contract.upgradableBy": [
        "70.config.escrows.1.contract.upgradableBy"
      ],
      "71.contracts.addresses.0.upgradableBy": [
        "71.contracts.addresses.6.upgradableBy"
      ],
      "73.config.escrows.0.contract.upgradableBy": [
        "73.config.escrows.1.contract.upgradableBy"
      ],
      "76.config.escrows.0.contract.upgradableBy": [
        "76.config.escrows.1.contract.upgradableBy"
      ],
      "77.config.escrows.0.contract.upgradableBy": [
        "77.config.escrows.1.contract.upgradableBy"
      ],
      "78.config.escrows.0.contract.upgradableBy": [
        "78.config.escrows.1.contract.upgradableBy"
      ],
      "80.config.escrows.0.contract.upgradableBy": [
        "80.config.escrows.1.contract.upgradableBy"
      ],
      "82.config.escrows.0.contract.upgradableBy": [
        "82.config.escrows.1.contract.upgradableBy"
      ],
      "91.contracts.addresses.0.upgradableBy": [
        "91.contracts.addresses.1.upgradableBy",
        "91.contracts.addresses.2.upgradableBy",
        "91.contracts.addresses.3.upgradableBy",
        "91.contracts.addresses.4.upgradableBy",
        "91.contracts.addresses.5.upgradableBy",
        "91.contracts.addresses.6.upgradableBy",
        "91.contracts.addresses.7.upgradableBy",
        "91.contracts.addresses.8.upgradableBy",
        "91.config.escrows.1.contract.upgradableBy",
        "91.config.escrows.2.contract.upgradableBy",
        "91.config.escrows.3.contract.upgradableBy"
      ],
      "91.contracts.nativeAddresses.nova.0.upgradableBy": [
        "91.contracts.nativeAddresses.nova.6.upgradableBy",
        "91.contracts.nativeAddresses.nova.7.upgradableBy",
        "91.contracts.nativeAddresses.nova.8.upgradableBy",
        "91.contracts.nativeAddresses.nova.9.upgradableBy",
        "91.contracts.nativeAddresses.nova.10.upgradableBy"
      ],
      "96.contracts.addresses.0.upgradableBy": [
        "96.contracts.addresses.1.upgradableBy",
        "96.contracts.addresses.2.upgradableBy",
        "96.contracts.addresses.3.upgradableBy",
        "96.contracts.addresses.4.upgradableBy",
        "96.contracts.addresses.5.upgradableBy",
        "96.contracts.addresses.9.upgradableBy",
        "96.contracts.addresses.11.upgradableBy",
        "96.contracts.addresses.12.upgradableBy",
        "96.contracts.addresses.13.upgradableBy",
        "96.contracts.addresses.14.upgradableBy",
        "96.contracts.addresses.15.upgradableBy"
      ],
      "96.contracts.nativeAddresses.optimism.2.upgradableBy": [
        "96.contracts.nativeAddresses.optimism.3.upgradableBy",
        "96.contracts.nativeAddresses.optimism.4.upgradableBy",
        "96.contracts.nativeAddresses.optimism.5.upgradableBy",
        "96.contracts.nativeAddresses.optimism.6.upgradableBy",
        "96.contracts.nativeAddresses.optimism.7.upgradableBy",
        "96.contracts.nativeAddresses.optimism.8.upgradableBy",
        "96.contracts.nativeAddresses.optimism.9.upgradableBy",
        "96.contracts.nativeAddresses.optimism.10.upgradableBy",
        "96.contracts.nativeAddresses.optimism.11.upgradableBy",
        "96.contracts.nativeAddresses.optimism.12.upgradableBy",
        "96.contracts.nativeAddresses.optimism.13.upgradableBy",
        "96.contracts.nativeAddresses.optimism.14.upgradableBy",
        "96.contracts.nativeAddresses.optimism.15.upgradableBy"
      ],
      "97.config.escrows.0.contract.upgradableBy": [
        "97.config.escrows.1.contract.upgradableBy"
      ],
      "98.config.escrows.0.contract.upgradableBy": [
        "98.config.escrows.1.contract.upgradableBy"
      ],
      "100.technology.exitMechanisms": ["128.technology.exitMechanisms"],
      "107.contracts.addresses.0.upgradableBy": [
        "107.contracts.addresses.2.upgradableBy",
        "107.contracts.addresses.3.upgradableBy",
        "107.contracts.addresses.4.upgradableBy"
      ],
      "109.config.escrows.0.contract.upgradableBy": [
        "109.config.escrows.1.contract.upgradableBy"
      ],
      "110.config.escrows.0.contract.upgradableBy": [
        "110.config.escrows.1.contract.upgradableBy"
      ],
      "114.contracts.addresses.0.upgradableBy": [
        "114.contracts.addresses.1.upgradableBy",
        "114.contracts.addresses.2.upgradableBy",
        "114.contracts.addresses.3.upgradableBy",
        "114.contracts.addresses.4.upgradableBy",
        "114.contracts.addresses.5.upgradableBy"
      ],
      "114.config.escrows.0.contract.upgradableBy": [
        "114.config.escrows.1.contract.upgradableBy"
      ],
      "119.config.escrows.0.contract.upgradableBy": [
        "119.config.escrows.1.contract.upgradableBy"
      ],
      "120.contracts.addresses.0.upgradableBy": [
        "120.contracts.addresses.1.upgradableBy",
        "120.contracts.addresses.19.upgradableBy",
        "120.contracts.addresses.20.upgradableBy",
        "120.contracts.addresses.21.upgradableBy",
        "120.contracts.addresses.22.upgradableBy",
        "120.contracts.addresses.23.upgradableBy",
        "120.contracts.addresses.24.upgradableBy",
        "120.contracts.addresses.25.upgradableBy",
        "120.contracts.addresses.26.upgradableBy",
        "120.contracts.addresses.27.upgradableBy",
        "120.contracts.addresses.29.upgradableBy",
        "120.contracts.addresses.30.upgradableBy",
        "120.config.escrows.0.contract.upgradableBy",
        "120.config.escrows.1.contract.upgradableBy",
        "120.config.escrows.2.contract.upgradableBy",
        "120.config.escrows.3.contract.upgradableBy",
        "120.config.escrows.4.contract.upgradableBy"
      ],
      "121.contracts.addresses.1.upgradableBy": [
        "121.contracts.addresses.3.upgradableBy",
        "121.contracts.addresses.4.upgradableBy",
        "121.contracts.addresses.5.upgradableBy"
      ],
      "130.config.escrows.0.contract.upgradableBy": [
        "130.config.escrows.1.contract.upgradableBy"
      ],
      "132.config.escrows.0.contract.upgradableBy": [
        "132.config.escrows.1.contract.upgradableBy"
      ],
      "136.contracts.addresses.0.upgradableBy": [
        "136.contracts.addresses.1.upgradableBy",
        "136.contracts.addresses.4.upgradableBy",
        "136.contracts.addresses.5.upgradableBy",
        "136.contracts.addresses.6.upgradableBy",
        "136.contracts.addresses.7.upgradableBy",
        "136.contracts.addresses.8.upgradableBy",
        "136.contracts.addresses.9.upgradableBy",
        "136.contracts.addresses.10.upgradableBy",
        "136.contracts.addresses.11.upgradableBy",
        "136.contracts.addresses.12.upgradableBy"
      ],
      "140.riskView.proposerFailure": [
        "161.riskView.proposerFailure",
        "162.riskView.proposerFailure"
      ],
      "140.contracts.addresses.0.upgradableBy": [
        "140.contracts.addresses.1.upgradableBy"
      ],
      "142.config.escrows.0.contract.upgradableBy": [
        "142.config.escrows.1.contract.upgradableBy"
      ],
      "147.contracts.addresses.1.upgradableBy": [
        "147.contracts.addresses.3.upgradableBy",
        "147.contracts.addresses.4.upgradableBy",
        "147.contracts.addresses.5.upgradableBy"
      ],
      "148.contracts.addresses.1.upgradableBy": [
        "148.contracts.addresses.3.upgradableBy",
        "148.contracts.addresses.4.upgradableBy",
        "148.contracts.addresses.5.upgradableBy"
      ],
      "149.config.escrows.0.contract.upgradableBy": [
        "149.config.escrows.1.contract.upgradableBy"
      ],
      "151.contracts.addresses.1.upgradableBy": [
        "151.contracts.addresses.3.upgradableBy",
        "151.contracts.addresses.4.upgradableBy",
        "151.contracts.addresses.5.upgradableBy"
      ],
      "153.contracts.addresses.0.upgradableBy": [
        "153.contracts.addresses.1.upgradableBy",
        "153.contracts.addresses.2.upgradableBy",
        "153.contracts.addresses.3.upgradableBy",
        "153.contracts.addresses.4.upgradableBy",
        "153.contracts.addresses.5.upgradableBy"
      ],
      "153.config.escrows.0.contract.upgradableBy": [
        "153.config.escrows.1.contract.upgradableBy"
      ],
      "156.contracts.addresses.0.upgradableBy": [
        "156.contracts.addresses.1.upgradableBy",
        "156.contracts.addresses.2.upgradableBy",
        "156.contracts.addresses.3.upgradableBy",
        "156.contracts.addresses.4.upgradableBy",
        "156.contracts.addresses.5.upgradableBy"
      ],
      "156.contracts.addresses.6.upgradableBy": [
        "156.contracts.addresses.7.upgradableBy"
      ],
      "156.config.escrows.0.contract.upgradableBy": [
        "156.config.escrows.1.contract.upgradableBy"
      ],
      "158.contracts.addresses.0.upgradableBy": [
        "158.contracts.addresses.1.upgradableBy",
        "158.contracts.addresses.2.upgradableBy",
        "158.contracts.addresses.4.upgradableBy"
      ],
      "160.technology.stateCorrectness": [
        "161.technology.stateCorrectness",
        "162.technology.stateCorrectness"
      ],
      "160.technology.dataAvailability": [
        "161.technology.dataAvailability",
        "162.technology.dataAvailability"
      ],
      "160.technology.operator": [
        "161.technology.operator",
        "162.technology.operator"
      ],
      "160.technology.forceTransactions": [
        "161.technology.forceTransactions",
        "162.technology.forceTransactions"
      ],
      "160.technology.exitMechanisms": [
        "161.technology.exitMechanisms",
        "162.technology.exitMechanisms"
      ],
      "160.contracts.addresses.0.upgradableBy": [
        "160.contracts.addresses.1.upgradableBy",
        "160.contracts.addresses.2.upgradableBy",
        "160.contracts.addresses.3.upgradableBy",
        "160.contracts.addresses.4.upgradableBy",
        "160.contracts.addresses.5.upgradableBy"
      ],
      "161.riskView.exitWindow": ["162.riskView.exitWindow"],
      "163.contracts.addresses.0.upgradableBy": [
        "163.contracts.addresses.8.upgradableBy",
        "163.contracts.addresses.9.upgradableBy",
        "163.contracts.addresses.10.upgradableBy",
        "163.config.escrows.0.contract.upgradableBy",
        "163.config.escrows.2.contract.upgradableBy",
        "163.config.escrows.3.contract.upgradableBy",
        "163.contracts.nativeAddresses.zksync2.6.upgradableBy"
      ],
      "164.contracts.addresses.0.upgradableBy": [
        "164.contracts.addresses.1.upgradableBy",
        "164.contracts.addresses.2.upgradableBy"
      ],
      "165.config.escrows.0.contract.upgradableBy": [
        "165.config.escrows.1.contract.upgradableBy"
      ]
    }
  }
}
