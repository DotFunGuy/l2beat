{
  "json": [
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "anomaly",
      "createdAt": "1719939717",
      "display": {
        "name": "Anomaly Network",
        "slug": "anomaly",
        "description": "Anomaly Chain is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It focuses on reimagining a decentralized AI gaming world and cultivates an ecosystem where boundless development results in players experiencing games that are as intelligent as they are thrilling.",
        "purposes": ["Gaming", "AI"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://anomalygames.ai/"],
          "apps": [],
          "documentation": ["https://docs.anomalygames.ai/"],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://twitter.com/anomalygamesinc"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "animechain",
      "createdAt": "1720191862",
      "display": {
        "name": "AnimeChain",
        "slug": "animechain",
        "description": "AnimeChain is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It aims to provide the infrastructure to enable the global anime network to live onchain, governed by creators and participants.",
        "purposes": ["Gaming", "Universal"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://anime.xyz/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/animecoin"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "alphadune",
      "createdAt": "1720191862",
      "display": {
        "name": "AlphaDune",
        "slug": "alphadune",
        "description": "AlphaDune is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It is a loyalty-driven network for GameFi and GambleFi.",
        "purposes": ["Universal", "Gaming"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://alphadune.com/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/alphadune"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "apechain",
      "createdAt": "1719939717",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x374de579AE15aD59eD0519aeAf1A23F348Df259c",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xe032d15909e90f9A36901abB08944653e9E87d72"],
              "implementations": [
                "0x2733fc1C97f6562466E9B29D64bCc6dC833cC88d",
                "0x230cf5A0FE4cC58deaf8a147A42ACF3f3C20A8C4"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x6B71AFb4b7725227ab944c96FE018AB9dc0434b8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1E5f8ff72895aEa53DD62b590dA51E92dC75b507"],
              "implementations": ["0x20B3C55fe4ecd989beB56E13b2A726110f0c3619"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xE6a92Ae29E24C343eE66A2B3D3ECB783d65E4a3C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1E5f8ff72895aEa53DD62b590dA51E92dC75b507"],
              "implementations": ["0x51120FA6D564A70E9F80874c0a55A4ee0c7396Fe"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x1B98e4ED82Ee1a91A65a38C690e2266364064D15",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1E5f8ff72895aEa53DD62b590dA51E92dC75b507"],
              "implementations": ["0xCd26Db56B29e88b5394063aEA727DB1a03E961a7"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x4F405BA65291063d8A524c2bDf55d4e67405c2aF",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1E5f8ff72895aEa53DD62b590dA51E92dC75b507"],
              "implementations": ["0x4D92EE5cCA2A93b30549a6398C063861F18B6726"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xe032d15909e90f9A36901abB08944653e9E87d72",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1E5f8ff72895aEa53DD62b590dA51E92dC75b507"],
              "implementations": ["0xdbE68E9e47c4AC96Ab1300902b4B87A7E6470786"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0xAB2182C8c9a9d853Cf06A77967D2b3971A453ee1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x1E5f8ff72895aEa53DD62b590dA51E92dC75b507"],
              "implementations": ["0x6Feb471ce7D32ee16047F1A983ac4f592df96526"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xa3180c7a17dd46DEf808477093592D8231e024a8",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x550B7B23Ed78BA25B3aBCBb290ADf1190aC28E19",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x8A4ed18B4d31bCeA908B0f96B4347a9F99e816b3",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x4aBF0E8C011142bAb19ff3C921880B71E68150Ca",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xa301f8EdD4Cdf10553b6aB39d9724c56d7ab582F",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 5 out of 7.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 3d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x51120FA6D564A70E9F80874c0a55A4ee0c7396Fe#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x845205C0F5109282954Bba4217aDA2a27Fdd89fF",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xAcB7D670bb95144B88a5Cd1883B87bC5021FD10a",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "ApeChainMultisig",
          "description": "This is a Gnosis Safe with 3 / 4 threshold.  Can upgrade any system contract and potentially steal all funds.",
          "accounts": [
            {
              "address": "0x2B1FbeE3c7D278bFD9E179893FF304fE49FA7DDF",
              "type": "MultiSig"
            }
          ],
          "chain": "arbitrum",
          "references": null,
          "participants": [
            {
              "address": "0x83F58bBB1a940E364ED2dE775D1FD5218135cCE3",
              "type": "EOA"
            },
            {
              "address": "0x651cF50272Ffa8f6D954080DF743410Bb0aa7AFa",
              "type": "EOA"
            },
            {
              "address": "0x8765bb776b00A14198025283988c23F72D330E2a",
              "type": "EOA"
            },
            {
              "address": "0x65c10dD3d50B10D0E1Bb459675b03367B1b52eD1",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Caldera", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "name": "ApeChain",
        "slug": "apechain",
        "description": "ApeChain is an Optimium on Arbitrum, built on the Orbit stack. It is built to support the ApeCoin ecosystem. Powered by $APE as gas token it aims to host assets and games of the ApeCoin ecosystem with development and growth led by Horizen Labs.",
        "links": {
          "websites": ["https://apechain.com/"],
          "apps": ["https://apechain.com/portal"],
          "documentation": ["https://docs.apechain.com/"],
          "explorers": ["https://apescan.io/"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/apecoin",
            "https://discord.gg/apecoindao",
            "https://t.me/apechainofficial"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "5/7 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 5/7 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 5/7 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.7142857142857143
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -259200
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 4d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 345600
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 25d 10h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 2199264
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 5/7 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.7142857142857143
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -259200
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 3d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 259200
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.apechain.com/http",
          "defaultCallsPerMinute": 1500
        }
      }
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "aviveworld",
      "createdAt": "1719939717",
      "display": {
        "name": "Avive World",
        "slug": "avive-world",
        "description": "Avive World is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It focuses on creating a new decentralized social world by empowering geonetworking depin protocols and onboarding millions to Web3.",
        "purposes": ["Social"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://avive.world/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://twitter.com/Avive_World"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "bugbuster",
      "createdAt": "1723722996",
      "hostChain": "optimism",
      "badges": [
        "Cartesi",
        "AppChain",
        "CartesiVM",
        "EthereumCalldata",
        "Optimism"
      ],
      "display": {
        "name": "Bug Buster",
        "slug": "bugbuster",
        "description": "Bug Buster is an open source bug bounty platform for web3, powered by Cartesi.",
        "purposes": ["Bug bounty"],
        "category": "Optimistic Rollup",
        "provider": "Cartesi Rollups",
        "redWarning": "Critical contract references can be changed by an EOA which could result in the loss of all funds.",
        "links": {
          "documentation": [
            "https://github.com/crypto-bug-hunters/bug-buster/blob/main/README.md"
          ],
          "repositories": ["https://github.com/crypto-bug-hunters/bug-buster"],
          "socialMedia": [
            "https://x.com/BugBusterApp",
            "https://t.me/+G_CPMEhCHC04MzA5"
          ],
          "websites": ["https://bugbuster.app/"],
          "apps": [],
          "explorers": [
            "https://optimism.cartesiscan.io/applications/0x3ff5c7383f614256053c3f6b86a47ba974937299"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "config": {
        "escrows": [
          {
            "address": "0x3FF5C7383F614256053c3F6B86A47bA974937299",
            "newVersion": true,
            "sinceTimestamp": "1726799059",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x3FF5C7383F614256053c3F6B86A47bA974937299",
              "upgradeability": null,
              "chain": "optimism",
              "description": "DApp Contract storing bounties funds.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "optimism",
            "includeInTotal": null,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ]
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are in development",
          "description": "Ultimately, Cartesi DApps will use interactive fraud proofs to enforce state correctness. This feature is currently in development and the Bug Buster DApp permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system by the configured Authority.",
              "isCritical": true
            },
            {
              "category": "Funds can be stolen if",
              "text": "the DApp owner changes the consensus implementation maliciously.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Authority.sol#L48 - Optimism Etherscan source code, submitClaim function",
              "href": "https://optimistic.etherscan.io/address/0x4246F5b1E52Fef1C52c96a9b1B679AE818d4fb35#code#F1#L48"
            },
            {
              "text": "CartesiDApp.sol#L201 - Optimism Etherscan source code, migrateToConsensus function",
              "href": "https://optimistic.etherscan.io/address/0x3ff5c7383f614256053c3f6b86a47ba974937299#code#F1#L201"
            }
          ]
        },
        "dataAvailability": {
          "name": "All transaction data is recorded on chain",
          "description": "All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.",
          "risks": [],
          "references": [
            {
              "text": "InputBox.sol#30 - Optimism Etherscan source code, addInput function",
              "href": "https://optimistic.etherscan.io/address/0x59b22D57D4f067708AB0c00552767405926dc768#code#F1#L30"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": []
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": []
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data"
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "InputBox",
              "references": [
                "https://optimistic.etherscan.io/address/0x59b22D57D4f067708AB0c00552767405926dc768#code#F1#L30"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is no delay on this operation.",
          "sentiment": "good",
          "definingMetric": 0
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on the base chain, which ultimately gets published on Ethereum.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "destinationToken": {
          "value": "Canonical",
          "description": "Tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "permissions": [
        {
          "name": "BugBuster Owner",
          "accounts": [
            {
              "address": "0x7f9e54fEa7F266bcE775DbC3E34061D9407b1ed3",
              "type": "EOA"
            }
          ],
          "description": "Owner of the Bug Buster Cartesi DApp. Can change the consensus reference and therefore steal all funds."
        },
        {
          "name": "Authority Owner",
          "accounts": [
            {
              "address": "0xD330C12e8DBD00570616D9406614106e2B3A1cf5",
              "type": "EOA"
            }
          ],
          "description": "Owner of the Authority contract - the current consensus implementation. Can make arbitrary claims about the current state of Bug Buster and steal all funds in the absence of fraud proofs."
        }
      ],
      "contracts": {
        "addresses": [
          {
            "name": "BugBuster",
            "address": "0x3FF5C7383F614256053c3F6B86A47bA974937299",
            "upgradeability": null,
            "chain": "optimism",
            "description": "CartesiDApp instance for the Bug Buster DApp, responsible for holding assets and allowing the DApp to interact with other smart contracts."
          },
          {
            "name": "InputBox",
            "address": "0x59b22D57D4f067708AB0c00552767405926dc768",
            "upgradeability": null,
            "chain": "optimism",
            "description": "Contract that receives arbitrary blobs as inputs to Cartesi DApps."
          },
          {
            "name": "ERC20Portal",
            "address": "0x9C21AEb2093C32DDbC53eEF24B873BDCd1aDa1DB",
            "upgradeability": null,
            "chain": "optimism",
            "description": "Contract that allows anyone to perform transfers of ERC-20 tokens to Cartesi DApps (like e.g. Bug Buster)."
          },
          {
            "name": "Authority",
            "address": "0x4246F5b1E52Fef1C52c96a9b1B679AE818d4fb35",
            "upgradeability": null,
            "chain": "optimism",
            "description": "Simple consensus model controlled by a single address, the owner."
          },
          {
            "name": "History",
            "address": "0x04395d494624D2B6e30C0dfDB74498a2839f805d",
            "upgradeability": null,
            "chain": "optimism",
            "description": "Contract that stores claims for Cartesi DApps."
          }
        ],
        "risks": []
      }
    },
    {
      "type": "layer3",
      "isUnderReview": true,
      "id": "cheese",
      "createdAt": "1722512887",
      "hostChain": "arbitrum",
      "display": {
        "category": "Optimium",
        "provider": "Arbitrum",
        "name": "CheeseChain",
        "slug": "cheese",
        "description": "CheeseChain is an Orbit stack Optimium using $CHEESE.",
        "purposes": ["Universal"],
        "links": {
          "websites": ["https://docs.cheesechain.lol/"],
          "apps": [
            "https://cheesechain.bridge.caldera.xyz/",
            "https://bridge.cheesechain.lol/"
          ],
          "documentation": ["https://docs.cheesechain.lol/"],
          "explorers": ["https://fetascan.io/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/layerofcheese",
            "https://t.me/cheesegateway"
          ]
        }
      },
      "config": {
        "associatedTokens": ["CHEESE"],
        "escrows": [
          {
            "chain": "arbitrum",
            "address": "0xA337997ab18164Dfe1e8A94E8D912e8d4e2ce173",
            "sinceTimestamp": "1717552278",
            "tokens": "*"
          }
        ],
        "transactionApi": null
      },
      "stage": { "stage": "NotApplicable" },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": ["Arbitrum", "Celestia", "Orbit", "EVM", "Caldera"]
    },
    {
      "type": "layer3",
      "isUnderReview": true,
      "id": "clique",
      "createdAt": "1726595996",
      "hostChain": "base",
      "display": {
        "name": "Clique",
        "slug": "clique",
        "category": "Optimium",
        "provider": "OP Stack",
        "description": "Clique is an OP stack Optimium built on Base and using Celestia for DA. The project aims to provide an environment that meets the needs of both onchain gaming and AI technologies. The team is also building their own onchain game called Eternal Legacy.",
        "purposes": ["AI", "Gaming"],
        "links": {
          "websites": ["https://clique.stp.network/"],
          "apps": ["https://bridge.myclique.io/", "https://awns.stp.network/"],
          "documentation": ["https://stpdao.gitbook.io/whitepaper"],
          "explorers": ["https://explorer.myclique.io/"],
          "repositories": ["https://github.com/STPDevteam/"],
          "socialMedia": [
            "https://x.com/STP_Network",
            "https://t.me/STPofficial"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x29e464A7E6331E80f0E707E2cbDbaFb1a6aF0a76",
            "sinceTimestamp": "1710831600",
            "includeInTotal": false,
            "tokens": ["ETH"],
            "chain": "base"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.myclique.io/",
          "defaultCallsPerMinute": 1500
        }
      },
      "stage": { "stage": "NotApplicable" },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": ["Base", "Celestia", "OPStack", "EVM", "Conduit"]
    },
    {
      "type": "layer3",
      "id": "degen",
      "createdAt": "1712135735",
      "contracts": {
        "addresses": [
          {
            "name": "UTBDecent",
            "address": "0x43019F8BE1F192587883b67dEA2994999f5a2de2",
            "upgradeability": null,
            "chain": "base",
            "description": "The UTB contract serves as an L2<->L3 gateway by integrating with Decent (LayerZero app) to allow bridging and swapping in- and out of Degen L3. This is achieved using external modules (smart contracts) like swappers and bridgers that can be registered in the UTB contract."
          },
          {
            "name": "RollupProxy",
            "address": "0xD34F3a11F10DB069173b32d84F02eDA578709143",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xaA3A7A2ec2477A61082E1C41a2c6710587917028"],
              "implementations": [
                "0x3A59b13eB3F661DE35a1e203Bd12b3B4123976cf",
                "0xB7202d306936B79Ba29907b391faA87D3BEec33A"
              ]
            },
            "chain": "base",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0xEfEf4558802bF373Ce3307189C79a9cAb0a4Cb9C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xFB48D385Fa3da33762B350e1d705b9E46054E677"],
              "implementations": ["0xc00336Cdf86AE7AD58D8773B0114082C190D28D5"]
            },
            "chain": "base",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x6216dD1EE27C5aCEC7427052d3eCDc98E2bc2221",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xFB48D385Fa3da33762B350e1d705b9E46054E677"],
              "implementations": ["0x98DB769A9E15D66EA04665da0dF616596c296BA8"]
            },
            "chain": "base",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x21A1e2BFC61F30F2E81E0b08cd37c1FC7ef776E7",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xFB48D385Fa3da33762B350e1d705b9E46054E677"],
              "implementations": ["0xcA00Db0289131B71A6624f62666bd54305697BB2"]
            },
            "chain": "base",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xe63ddb12FBb6211a73F12a4367b10dA0834B82da",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xFB48D385Fa3da33762B350e1d705b9E46054E677"],
              "implementations": ["0x20fA6358f89Ed16d48F6588a8f500887354Ff56c"]
            },
            "chain": "base",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xaA3A7A2ec2477A61082E1C41a2c6710587917028",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xFB48D385Fa3da33762B350e1d705b9E46054E677"],
              "implementations": ["0x3C4DF76De31816443C207E49F9fE48737C8F2746"]
            },
            "chain": "base",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x67812161Bbb6aCF891aA6028BC614a660961ceD8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xFB48D385Fa3da33762B350e1d705b9E46054E677"],
              "implementations": ["0x377A5b786E94cAcdcB2B309451C373c8F2166A79"]
            },
            "chain": "base",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xC17A41629Cd100c74B1Bed7b49D2E0517EfDeaeb",
            "upgradeability": null,
            "chain": "base",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x2Bb71AE6f5Bb52de5F535efD804e156ed2a35a8f",
            "upgradeability": null,
            "chain": "base",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x764cDAAc715ef3e29B3c8D28A1261AD9B7eD206D",
            "upgradeability": null,
            "chain": "base",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0xF4AA217a96c205df7B0D081DC95385B701eFE9b0",
            "upgradeability": null,
            "chain": "base",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xBa04bD4aDa714b0cb3B87784dc9F20620aF37428",
            "upgradeability": null,
            "chain": "base",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1000d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://basescan.org/address/0x98DB769A9E15D66EA04665da0dF616596c296BA8#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xa3582189403F67a9CDB1CE0Ac066c954FFd3f205",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "base"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x1BCdC0eCc1e4A31E5dB0542f81895d8319A757Ca",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "base"
        },
        {
          "name": "RollupOwnerMultisig",
          "description": "This is a Gnosis Safe with 3 / 5 threshold.  Has the executor role of the UpgradeExecutor and indirectly owns the ProxyAdmin (can upgrade the whole system).",
          "accounts": [
            {
              "address": "0x7dCe2FEE5e30EFf298cD3d9B92649f00EBDfc104",
              "type": "MultiSig"
            }
          ],
          "chain": "base",
          "references": null,
          "participants": [
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "UTBAdmin",
          "accounts": [
            {
              "address": "0x690f4e2f19717A06E1C146B2dCE68c2d23e36f4c",
              "type": "EOA"
            }
          ],
          "description": "The UTBAdmin directly controls the UTB contracts critical functions like updating all roles and modules."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 5d 14h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Base", "Conduit", "Orbit", "EVM"],
      "hostChain": "base",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Social"],
        "name": "Degen Chain",
        "slug": "degen",
        "description": "Degen Chain is an ultra-low-cost L3 for the Degen community built with Arbitrum Orbit, Base for settlement, and AnyTrust for data availability. DEGEN is the native gas token.",
        "links": {
          "websites": ["https://syndicate.io/blog/degen-chain"],
          "apps": ["https://bridge.degen.tips/", "https://degen.tips/"],
          "documentation": [
            "https://docs.syndicate.io/get-started/introduction"
          ],
          "explorers": ["https://explorer.degen.tips/"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/degentokenbase",
            "https://warpcast.com/~/channel/degen"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400000
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1000d 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86443200
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "validatedBy": {
          "value": "Base",
          "description": "Smart contracts on base validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400000
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1000d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400000
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 6d 15h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 575476
        },
        "validatedBy": {
          "value": "Base",
          "description": "Smart contracts on base validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["DEGEN"],
        "escrows": [
          {
            "address": "0xEfEf4558802bF373Ce3307189C79a9cAb0a4Cb9C",
            "newVersion": true,
            "sinceTimestamp": "1710087441",
            "tokens": ["DEGEN"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xEfEf4558802bF373Ce3307189C79a9cAb0a4Cb9C",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xFB48D385Fa3da33762B350e1d705b9E46054E677"],
                "implementations": [
                  "0xc00336Cdf86AE7AD58D8773B0114082C190D28D5"
                ]
              },
              "chain": "base",
              "description": "Contract managing Inboxes and Outboxes. It escrows DEGEN sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "base",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.degen.tips",
          "defaultCallsPerMinute": 5000,
          "startBlock": 1
        }
      }
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "dcamonster",
      "createdAt": "1712577740",
      "display": {
        "name": "DCA.Monster",
        "slug": "dcamonster",
        "description": "DCA.Monster is an innovative AMM that utilizes ERC20 streams for precise and efficient on-chain Dollar Cost Averaging (DCA), powered by Cartesi Rollups.",
        "purposes": ["Exchange"],
        "category": "Optimistic Rollup",
        "provider": "Cartesi Rollups",
        "links": {
          "documentation": [
            "https://github.com/dcamonster/cartesi-defi-modular-components/blob/master/readme.md"
          ],
          "repositories": ["https://github.com/dcamonster"],
          "socialMedia": ["https://twitter.com/dca_monster"],
          "websites": ["https://dca.monster"],
          "apps": [],
          "explorers": []
        }
      },
      "hostChain": "Multiple",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "deri",
      "createdAt": "1701958025",
      "contracts": {
        "addresses": [
          {
            "name": "L1GatewayRouter",
            "address": "0xe507b9EF563DB6CcFDcE270160C50b2005BeED20",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x2fB33D8e4a8E989E7814D914973096736ed718b5"]
            },
            "chain": "arbitrum",
            "description": "Router managing token <--> gateway mapping."
          },
          {
            "name": "RollupProxy",
            "address": "0x846387C3D6001F74170455B1074D01f05eB3067a",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x0611b78A42903a537BE7a2f9a8783BE39AC63cD9"],
              "implementations": [
                "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0xD4FE46D2533E7d03382ac6cACF0547F336e59DC0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0xB23214f241bdEb275f7dCBfbb1EA79349101d4B0"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xe347C1223381b9Dcd6c0F61cf81c90175A7Bae77",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xFF55fB76F5671dD9eB6c62EffF8D693Bb161a3ad",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x8f6406781cC955398C45a48DcEfeEBDb2c8e2CaA"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xA597e0212971e65f53f288Ff1fFd26A6C8201f83",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x13BE515E44Eefaf3eBEFAD684F1FBB574Ac0A494"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x0611b78A42903a537BE7a2f9a8783BE39AC63cD9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x383eFE8D410285c5CbE1B4F296022640759aA834",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x09824fe72BFF474d16D9c2774432E381BBD60662"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0xDf94F0474F205D086dbc2e66D69a856FCf520622",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x1135265fE014D3FA32B3507E325642B92aFFeAEb",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing followed by deterministic execution - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/#sequencing-followed-by-deterministic-execution"
            },
            {
              "text": "SequencerInbox.sol - Etherscan source code, addSequencerL2BatchFromOrigin function",
              "href": "https://arbiscan.io/address/0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x02c903F5c76F3f00c1F659702Bd76DF30470bBEE",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xD217853C6A59e51dC1a48CEF21d9E53FCaA8a3f0",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "OwnerEOA",
          "accounts": [
            {
              "address": "0x46A78349aBA0369D18292a285DE6d5FC5CC2de5c",
              "type": "EOA"
            }
          ],
          "description": "EOA that can execute upgrade via the UpgradeExecutor."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 1d, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["Arbitrum", "Orbit", "EthereumBlobs", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "name": "Deri",
        "slug": "deri",
        "description": "Deri is an Ethereum Layer-3 that leverages Arbitrum Nitro to enable efficient cross-chain futures, options, and derivatives.",
        "links": {
          "websites": ["https://deri.io/"],
          "apps": [],
          "documentation": ["https://docs.deri.io/"],
          "explorers": ["https://explorer-dchain.deri.io/"],
          "repositories": ["https://github.com/OffchainLabs/nitro"],
          "socialMedia": [
            "https://twitter.com/DeriProtocol",
            "https://t.me/DeriProtocol",
            "https://discord.com/invite/kb8ZbYgp8M"
          ]
        },
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimistic Rollup"
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "Fraud proof submission is not sufficiently decentralized.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.",
            "The Security Council is not properly set up."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": true,
                "description": "A complete and functional proof system is deployed."
              },
              {
                "satisfied": false,
                "description": "Fraud proof submission is not sufficiently decentralized."
              },
              {
                "satisfied": true,
                "description": "Users are able to exit without the help of the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              },
              {
                "satisfied": false,
                "description": "The Security Council is not properly set up."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Fraud proof submission is open only to whitelisted actors."
              },
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              },
              {
                "satisfied": false,
                "description": "The Security Council's actions are not confined to on-chain provable bugs."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 1d challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "1d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 20d 2h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1735848
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 1d challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "1d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on the base chain, which ultimately gets published on Ethereum.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 7d 8h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 636216
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xD4FE46D2533E7d03382ac6cACF0547F336e59DC0",
            "newVersion": true,
            "sinceTimestamp": "1700367819",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xD4FE46D2533E7d03382ac6cACF0547F336e59DC0",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
                "implementations": [
                  "0xB23214f241bdEb275f7dCBfbb1EA79349101d4B0"
                ]
              },
              "chain": "arbitrum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": null
      }
    },
    {
      "type": "layer3",
      "isUnderReview": true,
      "id": "dodochain",
      "createdAt": "1719224565",
      "hostChain": "arbitrum",
      "display": {
        "name": "DODOchain",
        "slug": "dodochain",
        "category": "Optimium",
        "description": "DODOchain is an Omni-Trading Layer-3 connecting liquidity from all chains including BTC and ETH L2s.",
        "purposes": ["Universal", "Interoperability"],
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://dodochain.com/"],
          "apps": [],
          "documentation": ["https://docs.dodochain.com/en/dodochain"],
          "explorers": [],
          "repositories": ["https://github.com/DODOEX"],
          "socialMedia": [
            "https://x.com/DODO_Chain",
            "https://medium.com/@DODOchain",
            "https://t.me/dodoex_official",
            "https://discord.com/invite/tyKReUK"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [],
        "transactionApi": null
      },
      "stage": { "stage": "NotApplicable" },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": null
    },
    {
      "type": "layer3",
      "isUnderReview": true,
      "id": "donatuz",
      "createdAt": "1726497628",
      "hostChain": "base",
      "display": {
        "name": "Donatuz",
        "slug": "donatuz",
        "category": "Optimium",
        "description": "Donatuz is a Layer-3 that aims at providing social media creators with innovative monetization tools to earn money from their content.",
        "purposes": ["Social"],
        "provider": "OP Stack",
        "links": {
          "websites": ["https://donatuz.org/"],
          "apps": ["https://bridge.donatuz.com"],
          "documentation": [],
          "explorers": ["https://explorer.donatuz.com/"],
          "repositories": ["https://github.com/Donatuz-Labs"],
          "socialMedia": [
            "https://x.com/Donatuz_",
            "https://t.me/donatuzz",
            "https://linkedin.com/company/donatuz/"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "chain": "base",
            "address": "0xb765Df9d2925a82678F4B7bc60eF5294c1604514",
            "sinceTimestamp": "1719319541",
            "tokens": "*"
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.donatuz.com",
          "defaultCallsPerMinute": 1500,
          "startBlock": 1
        }
      },
      "stage": { "stage": "NotApplicable" },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": ["Base", "EigenDA", "OPStack", "EVM", "Conduit", "Superchain"]
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "educhain",
      "createdAt": "1720082709",
      "display": {
        "name": "EDU",
        "slug": "edu-chain",
        "description": "EDU Chain is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It is designed to onboard real-world educational economies to blockchain and establish an innovative “Learn Own Earn” model for education.",
        "purposes": ["Social"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://opencampus.xyz/"],
          "apps": [],
          "documentation": ["https://userdocs.opencampus.xyz"],
          "explorers": [],
          "repositories": ["https://github.com/opencampus-xyz"],
          "socialMedia": ["https://x.com/opencampus_xyz"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "fiefdom",
      "createdAt": "1720082709",
      "display": {
        "name": "Fiefdom",
        "slug": "fiefdom",
        "description": "Fiefdom is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It is dedicated to gaming and trading in the metaverse. Fiefdom is host to Fiefverse, a voxel game universe built by the Fief team, in addition to providing a permissionless environment for third-party game and DeFi developers.",
        "purposes": ["Gaming", "Universal"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://fief.gg/fiefdom"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://twitter.com/fiefdomgg"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "invm",
      "createdAt": "1720191862",
      "display": {
        "name": "inVM",
        "slug": "invm",
        "description": "inVM is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It aims to give users access to cross-chain compatibility with Ethereum, Arbitrum, Injective and Cosmos. Powered by the INJ token, inEVM transactions qualify for the Injective burn auction.",
        "purposes": ["Universal"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://injective.com/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://twitter.com/injective"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "ham",
      "createdAt": "1722499160",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x19652082F846171168Daf378C4fD3ee85a0D4A60#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x115Fc56fFcdE2A24100524a610b89040cb29D501"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xCEa36be2e9724d88cB107C552c602a8025DB88bA#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x19652082F846171168Daf378C4fD3ee85a0D4A60#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x19652082F846171168Daf378C4fD3ee85a0D4A60#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0xCEa36be2e9724d88cB107C552c602a8025DB88bA#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xCEa36be2e9724d88cB107C552c602a8025DB88bA#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0xCEa36be2e9724d88cB107C552c602a8025DB88bA#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x19652082F846171168Daf378C4fD3ee85a0D4A60#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x0458F33fEE56BE44f3e8482eE3009aAB27a19022",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x78c6285Cc98Ec52De9Cf2E40b763D509489C47fB",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x0A6F4A53a014774da6698Ed6C90b8c7a4f934eDC",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "HamMultisig1",
          "description": "* This is a Gnosis Safe with 3 / 4 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L2OutputOracle, OptimismMintableERC20Factory, L1ERC721Bridge, SystemConfig, OptimismPortal, SuperchainConfig (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x211A8defcF685E0Ef5Ed8eEf0c43dc1B0ba56aEA",
              "type": "MultiSig"
            }
          ],
          "chain": "base",
          "references": null,
          "participants": [
            {
              "address": "0xD61640d06dC7A61C46d9515680b4DDd2AC51E9A9",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x4919167EA334BE84B1604Cbc82A26A7746D5943e",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "HamMultisig2",
          "description": "* This is a Gnosis Safe with 3 / 4 threshold. \n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n",
          "accounts": [
            {
              "address": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
              "type": "MultiSig"
            }
          ],
          "chain": "base",
          "references": null,
          "participants": [
            {
              "address": "0xD61640d06dC7A61C46d9515680b4DDd2AC51E9A9",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x4919167EA334BE84B1604Cbc82A26A7746D5943e",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x0458F33fEE56BE44f3e8482eE3009aAB27a19022",
              "type": "EOA"
            }
          ],
          "chain": "base",
          "description": "Is a Challenger."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0x0A6F4A53a014774da6698Ed6C90b8c7a4f934eDC",
              "type": "EOA"
            }
          ],
          "chain": "base",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0x78c6285Cc98Ec52De9Cf2E40b763D509489C47fB",
              "type": "EOA"
            }
          ],
          "chain": "base",
          "description": "Is a Proposer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L2OutputOracle",
            "address": "0x38893659CF2b4b3E02B2dC93fe9A55Ea155a3daF",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
              "implementations": ["0x19652082F846171168Daf378C4fD3ee85a0D4A60"]
            },
            "chain": "base",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["HamMultisig1"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismMintableERC20Factory",
            "address": "0x3c69dcFF018766c72449cd460Cc7AF8863056a43",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
              "implementations": ["0x39Aea2Dd53f2d01c15877aCc2791af6BDD7aD567"]
            },
            "chain": "base",
            "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
            "upgradableBy": ["HamMultisig1"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x3Ef6ce577FC438591d6C683E7a6Ea9e14A8f2d36",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x71fA82Ea96672797954C28032b337aA40AAFC99f"],
              "immutable": false
            },
            "chain": "base",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "ProxyAdmin",
            "address": "0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49",
            "upgradeability": null,
            "chain": "base",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, OptimismMintableERC20Factory, L1ERC721Bridge, SystemConfig, OptimismPortal, SuperchainConfig.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L1ERC721Bridge",
            "address": "0x80292D35789462aeD1D694899f1FaAE184Fe3E5b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
              "implementations": ["0x44637A4292E0CD2B17A55d5F6B2F05AFcAcD0586"]
            },
            "chain": "base",
            "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
            "upgradableBy": ["HamMultisig1"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0x936c137699230c4732d534c7E968cC7cEAa6Cf45",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
              "implementations": ["0x0Da314776B267D898dEE57F6Ede357ae28b3b83c"]
            },
            "chain": "base",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["HamMultisig1"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SystemConfig",
            "address": "0xad22377De22537e4e6bd192AeBCa524a79B0d3Fd",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
              "implementations": ["0xffbA8944650e26653823658d76A122946F27e2f2"]
            },
            "chain": "base",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["HamMultisig1"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0xd2e0532f8AE8DeDA4b9Ad2CB79f008C97c9C25eE",
            "upgradeability": null,
            "chain": "base",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "OptimismPortal",
            "address": "0xdD83c537B35d98776913D7ab60EBaA5c28F9dD01",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
              "implementations": ["0xCEa36be2e9724d88cB107C552c602a8025DB88bA"]
            },
            "chain": "base",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["HamMultisig1"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SuperchainConfig",
            "address": "0xFC57b0947C079073A1C5Fe61887Eb3495972EE72",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
              "implementations": ["0x068E44eB31e111028c41598E4535be7468674D0A"]
            },
            "chain": "base",
            "description": "This is NOT the shared SuperchainConfig of the OP stack Superchain. This SuperchainConfig contract manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
            "upgradableBy": ["HamMultisig1"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Base", "Superchain", "OPStack", "Celestia", "EVM"],
      "discoveryDrivenData": true,
      "hostChain": "base",
      "display": {
        "architectureImage": "bedrock-superchain",
        "purposes": ["Universal", "Social"],
        "name": "Ham",
        "slug": "ham",
        "description": "Ham Chain is an OP stack Optimium L3 on Base enabling Tips and SocialFi on the Farcaster social network.",
        "links": {
          "websites": ["https://ham.fun/"],
          "apps": [
            "https://ham.bridge.caldera.xyz/",
            "https://ham.fun/bridge",
            "https://relay.link/ham"
          ],
          "documentation": [
            "https://docs.ham.fun/",
            "https://stack.optimism.io/",
            "https://ham.fun/developers"
          ],
          "explorers": ["https://explorer.ham.fun/"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/HamOnWarpcast",
            "https://warpcast.com/~/channel/lp",
            "https://t.me/+B93fbhulpb5iYWYx"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": "Fraud proof system is currently under development. Users need to trust the block proposer to submit correct L1 state roots."
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xdD83c537B35d98776913D7ab60EBaA5c28F9dD01",
            "newVersion": true,
            "sinceTimestamp": "1716592039",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xdD83c537B35d98776913D7ab60EBaA5c28F9dD01",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
                "implementations": [
                  "0xCEa36be2e9724d88cB107C552c602a8025DB88bA"
                ]
              },
              "chain": "base",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "base",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x936c137699230c4732d534c7E968cC7cEAa6Cf45",
            "newVersion": true,
            "sinceTimestamp": "1716592053",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x936c137699230c4732d534c7E968cC7cEAa6Cf45",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x5eC25263F8a79F8D5fF7bD5F493640b6E2627B49"],
                "implementations": [
                  "0x0Da314776B267D898dEE57F6Ede357ae28b3b83c"
                ]
              },
              "chain": "base",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "base",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.ham.fun",
          "defaultCallsPerMinute": 1500
        }
      },
      "stateDerivation": null
    },
    {
      "type": "layer3",
      "isUnderReview": true,
      "id": "hook",
      "createdAt": "1719928126",
      "hostChain": "arbitrum",
      "display": {
        "name": "Hook",
        "slug": "hook",
        "category": "Optimistic Rollup",
        "provider": "Arbitrum",
        "description": "Hook is an Orbit stack L3 Appchain on Arbitrum powering a perpetuals DEX for tokens and NFTs.",
        "purposes": ["Universal", "NFT", "Exchange"],
        "links": {
          "websites": ["https://hook.xyz/"],
          "apps": ["https://hook.xyz/trade/"],
          "documentation": ["https://odysseydocumentation.hook.xyz/"],
          "explorers": ["https://hook.calderaexplorer.xyz/"],
          "repositories": [],
          "socialMedia": [
            "https://twitter.com/HookProtocol",
            "https://discord.com/invite/8Hqw76DHQm",
            "https://blog.hook.xyz/",
            "https://warpcast.com/hookprotocol"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x6BC4F2698cd385a04ee0B1805D15E995c45476F6",
            "sinceTimestamp": "1706232795",
            "includeInTotal": false,
            "tokens": ["ETH"],
            "chain": "arbitrum"
          },
          {
            "address": "0xB39DF6BBB1Cf2B609DeE43F109caFEFF1A7CCBEa",
            "sinceTimestamp": "1709063015",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WETH"],
            "chain": "ethereum"
          },
          {
            "address": "0x855Aaf2f690Ef6e5EF451D7AE73EC3fa61c50981",
            "sinceTimestamp": "1712179919",
            "tokens": ["USDC"],
            "chain": "ethereum",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            }
          },
          {
            "address": "0xCa34d7cc253b47E0248b80c859F38a658db7BcCC",
            "sinceTimestamp": "1707792505",
            "includeInTotal": false,
            "tokens": ["WETH"],
            "chain": "arbitrum",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            }
          },
          {
            "address": "0x7b017d4fcC370D32Fe13e60cA7424037BDEEcba6",
            "sinceTimestamp": "1712179761",
            "includeInTotal": false,
            "tokens": ["USDC"],
            "chain": "arbitrum",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            }
          },
          {
            "address": "0xB39DF6BBB1Cf2B609DeE43F109caFEFF1A7CCBEa",
            "sinceTimestamp": "1712177617",
            "includeInTotal": false,
            "tokens": ["WETH"],
            "chain": "base",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            }
          },
          {
            "address": "0x3411942F8FdAd5995Fbecb66bc07aA839D738500",
            "sinceTimestamp": "1712179763",
            "includeInTotal": false,
            "tokens": ["USDC"],
            "chain": "base",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            }
          },
          {
            "address": "0xB39DF6BBB1Cf2B609DeE43F109caFEFF1A7CCBEa",
            "sinceTimestamp": "1707792507",
            "includeInTotal": false,
            "tokens": ["WETH"],
            "chain": "optimism",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            }
          },
          {
            "address": "0xdBfE75271E3427D5b5480A1B4a4279e92518AB39",
            "sinceTimestamp": "1712179763",
            "includeInTotal": false,
            "tokens": ["USDC"],
            "chain": "optimism",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            }
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://hook.calderachain.xyz/http",
          "defaultCallsPerMinute": 1500
        }
      },
      "stage": { "stage": "UnderReview" },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": null
    },
    {
      "type": "layer3",
      "id": "rari",
      "createdAt": "1706285474",
      "contracts": {
        "addresses": [
          {
            "name": "L1GatewayRouter",
            "address": "0x2623C144B4d167f70893f6A8968B98c89a6C5F97",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
              "implementations": ["0x532Ba80626DF9042353fa9509A66a25eE90fc51B"]
            },
            "chain": "arbitrum",
            "description": "Router managing token <--> gateway mapping."
          },
          {
            "name": "RollupProxy",
            "address": "0x2e988Ea0873C9d712628F0bf38DAFdE754927C89",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x139C5A235632EDdad741ff380112B3161d31a21C"],
              "implementations": [
                "0xc326D023758d7D212d529D1E58D7f271CAe49fcf",
                "0xD92D49e8A2230E2C7a73c3ff4Df1AED09dA32a07"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x255f80Ef2F09FCE0944faBb292b8510F01316Cf0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
              "implementations": ["0x74faA20aE77FFAb036369b24066Cc5d4251900D2"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xA436f1867adD490BF1530c636f2FB090758bB6B3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
              "implementations": ["0x1d182075d07744D71E37f77f1654165f6DAFad08"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x37e60F80d921dc5E7f501a7130F31f6548dBa564",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
              "implementations": ["0x198792E7e60688FEeB0b89f0ABD3b85953Dd05Cd"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x91591BB66075BCfF94AA128B003134165C3Ab83a",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
              "implementations": ["0x84Cf78b9573daDb2FBa3028e49e0B5F785134360"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x139C5A235632EDdad741ff380112B3161d31a21C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
              "implementations": ["0x20C6be2A0429A82a7bF113905a29d36CF6753B10"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0xa9064FebD91E9Ab4c49C8989926Cada18bc9C8FF",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
              "implementations": ["0x935239e066F4F449D87D600e6d7c1a4F24c50f97"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xD16048EC58016FAbaC4d4E4C1203e49c0d9090E4",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x0aE035b3aAFFd8419d043920635Fe9CAdf179615",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0xF07A4a947E1ca7B9e46D99Dbe625C30f5b60C706",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x8D90460169D34d34a441F765A246a3C7f54C77C1",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xd49141eB2c63D210b70542D6CE8453b049aab03A",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "rari",
        "chainId": 1380012617,
        "explorerUrl": "https://mainnet.explorer.rarichain.org",
        "explorerApi": {
          "url": "https://rari.calderaexplorer.xyz/api",
          "type": "blockscout"
        },
        "blockscoutV2ApiUrl": "https://rari.calderaexplorer.xyz/api/v2",
        "minTimestampForTvl": "1705716145"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x1d182075d07744D71E37f77f1654165f6DAFad08#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x974533F82B7BADF54Fb91C15f07F3f095e35321C",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xeCebCfC101c3a1c4dB99902cE1Df914dCAd50a65",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "Caldera Multisig",
          "description": "This is a Gnosis Safe with 3 / 5 threshold.  Rollup Owner: Can execute upgrades for the entire rollup system via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0x6FD149B3d41fd860B9Da1A6fE54e902eF41F68BF",
              "type": "MultiSig"
            }
          ],
          "chain": "arbitrum",
          "references": null,
          "participants": [
            {
              "address": "0xD61640d06dC7A61C46d9515680b4DDd2AC51E9A9",
              "type": "EOA"
            },
            {
              "address": "0xbf853295743511e8DC5F03809d209C33fC136d24",
              "type": "EOA"
            },
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x4919167EA334BE84B1604Cbc82A26A7746D5943e",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Caldera", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "NFT"],
        "name": "RARI Chain",
        "slug": "rari",
        "description": "RARI Chain embeds royalties on the node level to guarantee royalty payments. A secure, low-cost, decentralized Ethereum L3 blockchain powered by Arbitrum.",
        "links": {
          "websites": ["https://rarichain.org/"],
          "apps": [
            "https://bridge.arbitrum.io/?destinationChain=rari-mainnet&sourceChain=arbitrum-one"
          ],
          "documentation": ["https://rari.docs.caldera.dev/"],
          "explorers": ["https://mainnet.explorer.rarichain.org/"],
          "repositories": ["https://github.com/OffchainLabs/nitro"],
          "socialMedia": ["https://twitter.com/RariChain"]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 25d 10h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 2199264
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x46406c88285AD9BE2fB23D9aD96Cb578d824cAb6",
            "newVersion": true,
            "sinceTimestamp": "1705716148",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x46406c88285AD9BE2fB23D9aD96Cb578d824cAb6",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
                "implementations": [
                  "0xcc6DcB3FaA2436270E696994f326426B76A9f731"
                ]
              },
              "chain": "arbitrum",
              "description": "Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x8bE956aB42274056ef4471BEb211b33e258b7324",
            "newVersion": true,
            "sinceTimestamp": "1705716148",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x8bE956aB42274056ef4471BEb211b33e258b7324",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
                "implementations": [
                  "0x0987F33E1d59ECcedbDd6356ED34F06dd7baDcF8"
                ]
              },
              "chain": "arbitrum",
              "description": "Main entry point for users depositing ERC20 tokens that require minting custom token on L2.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x255f80Ef2F09FCE0944faBb292b8510F01316Cf0",
            "newVersion": true,
            "sinceTimestamp": "1705716145",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x255f80Ef2F09FCE0944faBb292b8510F01316Cf0",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x003e70B041abb993006C03E56c8515622a02928C"],
                "implementations": [
                  "0x74faA20aE77FFAb036369b24066Cc5d4251900D2"
                ]
              },
              "chain": "arbitrum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://mainnet.rpc.rarichain.org/http",
          "defaultCallsPerMinute": 1500
        }
      }
    },
    {
      "type": "layer3",
      "id": "zklinknova",
      "createdAt": "1705330478",
      "hostChain": "linea",
      "badges": ["EVM", "DAC", "Linea"],
      "display": {
        "name": "zkLink Nova",
        "slug": "zklinknova",
        "description": "zkLink Nova is a Layer 3 zkEVM Validium network leveraging ZK Stack that allows for scattered assets across Ethereum Layer 2s to be aggregated for interoperable trade and transactions.",
        "purposes": ["Universal", "Interoperability"],
        "category": "Validium",
        "provider": "zkLink Nexus",
        "links": {
          "websites": ["https://zklink.io", "https://zk.link"],
          "apps": [
            "https://portal.zklink.io",
            "https://zklink.io/merge",
            "https://app.zklink.io"
          ],
          "documentation": ["https://docs.zklink.io"],
          "explorers": ["https://explorer.zklink.io"],
          "repositories": ["https://github.com/zkLinkProtocol"],
          "socialMedia": [
            "https://blog.zk.link",
            "https://x.com/zkLink_Official",
            "http://discord.gg/zklink",
            "https://t.me/zkLinkorg"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "chainConfig": {
        "name": "zklinknova",
        "chainId": 810180,
        "explorerUrl": "https://explorer.zklink.io",
        "explorerApi": {
          "url": "https://explorer-api.zklink.io/api",
          "type": "etherscan"
        },
        "minTimestampForTvl": "1709273393"
      },
      "config": {
        "transactionApi": {
          "type": "rpc",
          "defaultUrl": "https://rpc.zklink.io",
          "defaultCallsPerMinute": 1500,
          "startBlock": 1
        },
        "associatedTokens": ["ZKL"],
        "escrows": [
          {
            "chain": "optimism",
            "includeInTotal": false,
            "address": "0x46C8D02E93d5a03899dFa7Cf8A40A07589A3fA1b",
            "sinceTimestamp": "1711092485",
            "tokens": ["ETH"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Optimism" }]
            }
          },
          {
            "chain": "optimism",
            "includeInTotal": false,
            "address": "0x5Bd51296423A9079b931414C1De65e7057326EaA",
            "sinceTimestamp": "1711095511",
            "tokens": "*",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Optimism" }]
            }
          },
          {
            "chain": "linea",
            "includeInTotal": false,
            "address": "0x5Cb18b6e4e6F3b46Ce646b0f4704D53724C5Df05",
            "sinceTimestamp": "1709218085",
            "tokens": ["ETH"]
          },
          {
            "chain": "linea",
            "includeInTotal": false,
            "address": "0x62cE247f34dc316f93D3830e4Bf10959FCe630f8",
            "sinceTimestamp": "1709218113",
            "tokens": "*"
          },
          {
            "chain": "ethereum",
            "includeInTotal": false,
            "address": "0x5fD9F73286b7E8683Bab45019C94553b93e015Cf",
            "sinceTimestamp": "1709278799",
            "tokens": ["ETH"],
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Ethereum" }]
            }
          },
          {
            "chain": "ethereum",
            "includeInTotal": false,
            "address": "0xAd16eDCF7DEB7e90096A259c81269d811544B6B6",
            "sinceTimestamp": "1709295323",
            "tokens": "*",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Ethereum" }]
            },
            "premintedTokens": ["ZKL"]
          },
          {
            "chain": "mantapacific",
            "includeInTotal": false,
            "address": "0xD784d7128B46B60Ca7d8BdC17dCEC94917455657",
            "sinceTimestamp": "1709279099",
            "tokens": ["ETH"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Mantapacific" }]
            }
          },
          {
            "chain": "mantapacific",
            "includeInTotal": false,
            "address": "0x44a65dc12865A1e5249b45b4868f32b0E37168FF",
            "sinceTimestamp": "1709295839",
            "tokens": "*",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Mantapacific" }]
            }
          },
          {
            "chain": "mantle",
            "includeInTotal": false,
            "address": "0xD784d7128B46B60Ca7d8BdC17dCEC94917455657",
            "sinceTimestamp": "1709279309",
            "tokens": ["MNT"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Mantle" }]
            }
          },
          {
            "chain": "mantle",
            "includeInTotal": false,
            "address": "0x62351b47e060c61868Ab7E05920Cb42bD9A5f2B2",
            "sinceTimestamp": "1709296907",
            "tokens": "*",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Mantle" }]
            }
          },
          {
            "chain": "zksync2",
            "includeInTotal": false,
            "address": "0xaFe8C7Cf33eD0fee179DFF20ae174C660883273A",
            "sinceTimestamp": "1709280600",
            "tokens": ["ETH"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from ZKsync Era" }]
            }
          },
          {
            "chain": "zksync2",
            "includeInTotal": false,
            "address": "0xaB3DDB86072a35d74beD49AA0f9210098ebf2D08",
            "sinceTimestamp": "1709297040",
            "tokens": "*",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from ZKsync Era" }]
            }
          },
          {
            "chain": "arbitrum",
            "includeInTotal": false,
            "address": "0xFF73a1a1d27951A005eb23276dc99CB7F8d5420A",
            "sinceTimestamp": "1709280428",
            "tokens": ["ETH"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Arbitrum" }]
            }
          },
          {
            "chain": "arbitrum",
            "includeInTotal": false,
            "address": "0xfB0Ad0B3C2605A7CA33d6badd0C685E11b8F5585",
            "sinceTimestamp": "1709296973",
            "tokens": "*",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Arbitrum" }]
            }
          },
          {
            "chain": "blast",
            "includeInTotal": false,
            "address": "0x29BA92Fe724beD5c5EBfd0099F2F64a6DC5078FD",
            "sinceTimestamp": "1710417729",
            "tokens": ["ETH"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Blast" }]
            }
          },
          {
            "chain": "blast",
            "includeInTotal": false,
            "address": "0x8Df0c2bA3916bF4789c50dEc5A79b2fc719F500b",
            "sinceTimestamp": "1710427013",
            "tokens": "*",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Blast" }]
            }
          },
          {
            "chain": "base",
            "includeInTotal": false,
            "address": "0xE473ce141b1416Fe526eb63Cf7433b7B8d7264Dd",
            "sinceTimestamp": "1711095697",
            "tokens": ["ETH"],
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Base" }]
            }
          },
          {
            "chain": "base",
            "includeInTotal": false,
            "address": "0x80d12A78EfE7604F00ed07aB2f16F643301674D5",
            "sinceTimestamp": "1711098033",
            "tokens": "*",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "zkLink Nova Bridge from Base" }]
            }
          }
        ]
      },
      "riskView": {
        "validatedBy": {
          "value": "Linea",
          "description": "Smart contracts on linea validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "stateValidation": {
          "value": "ZK proofs (ST, SN)",
          "description": "STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [
            {
              "contract": "zkLink",
              "references": [
                "https://lineascan.build/address/0x9f2E11F287733c4EF5B9A6ED923b780c28062727#code"
              ]
            }
          ]
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely fully on data that is NOT published onchain.",
          "sentiment": "bad",
          "sources": [
            {
              "contract": "zkLink",
              "references": [
                "https://lineascan.build/address/0x9f2E11F287733c4EF5B9A6ED923b780c28062727#code"
              ]
            }
          ]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "Enqueue via L2",
          "description": "Users can submit transactions to an L2 queue, but can't force them. The sequencer cannot selectively skip transactions but can stop processing the queue entirely. In other words, if the sequencer censors or is down, it is so for everyone.",
          "sentiment": "warning"
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        }
      },
      "stackedRiskView": {
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "stateValidation": {
          "value": "ZK proofs",
          "description": "Zero knowledge cryptography is used to ensure state correctness. Proofs are first verified on Linea and finally on Ethereum.",
          "sentiment": "good",
          "definingMetric": "Infinity"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation rely fully on data that is ultimately NOT published on Ethereum.",
          "sentiment": "bad"
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": 0
        },
        "sequencerFailure": {
          "value": "No mechanism",
          "description": "There is no mechanism to have transactions be included if the sequencer is down or censoring.",
          "sentiment": "bad"
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        }
      },
      "technology": {
        "newCryptography": {
          "name": "Zero knowledge STARK and SNARK cryptography is used",
          "description": "Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the proof system is implemented incorrectly."
            }
          ],
          "references": []
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "The transaction data is not recorded on the Ethereum main chain.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            }
          ],
          "references": []
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The validators are the only entities that can propose blocks and process transactions. Moreover, they are trusted to only relay valid messages using the fast path. Fast path messages are eventually checked against the slow path, and if they are invalid, the system halts.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            },
            {
              "category": "Funds can be lost if",
              "text": "the operator relays invalid messages using the fast path.",
              "isCritical": true
            }
          ],
          "references": []
        },
        "forceTransactions": {
          "name": "Users can force any transaction via L2",
          "description": "If a user is censored by L3 Sequencer, they can try to force transaction via L2 queue. Right now there is no mechanism that forces L3 Sequencer to include        transactions from L2 queue in an L3 block.",
          "risks": [
            {
              "category": "Users can be censored if",
              "text": "the operator refuses to include their transactions."
            }
          ],
          "references": []
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": []
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all messages from L1, including all forced withdrawals and deposits. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "Bridging from multiple chains",
            "description": "zkLink allows users to bridge assets from multiple chains, not just the base chain Linea. To do this, messages are sent through the canonical bridges of each respective chain to the main zkLink contract on Linea. To withdraw, state updates are relayed back to each chain with the respective canonical bridges. Since deposits in this way are processed quite slowly, the system allows validators to relay messages directly to the main zkLink contract in a trusted way. These messages are then checked against the slow path, and if they are invalid, the system eventually halts.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "the canonical bridges of the secondary chains are compromised."
              }
            ],
            "references": []
          }
        ]
      },
      "dataAvailability": {
        "layer": {
          "value": "External",
          "sentiment": "warning",
          "description": "The data is posted off chain."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "State diffs (compressed)"
      },
      "contracts": {
        "addresses": [
          {
            "name": "L1ERC20Bridge",
            "address": "0x62cE247f34dc316f93D3830e4Bf10959FCe630f8",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xeF528a8Ca4B6aFDB6716Ef9f11bCa0c5C47454ec"],
              "implementations": ["0xDe1d7311d3eb7bc94f7EBAEd86978d3a82d5328A"]
            },
            "chain": "linea",
            "description": "Main entry point for depositing ERC20 tokens from Linea to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
            "upgradableBy": ["LineaOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "zkLink",
            "address": "0x5Cb18b6e4e6F3b46Ce646b0f4704D53724C5Df05",
            "upgradeability": {
              "proxyType": "EIP2535 diamond proxy",
              "admins": [],
              "implementations": [
                "0xB76Ee80B3344D86580C990638bDE1915E58d2c6f",
                "0xF3d053C29666D653Fa8629190579844BffE9FB92",
                "0x495220D99B432b0de3e1F1fe206AA0E26A051C63",
                "0x9f2E11F287733c4EF5B9A6ED923b780c28062727"
              ],
              "immutable": false
            },
            "chain": "linea",
            "description": "Main contract of the system where blocks are committed, proven and executed. It syncs messages from secondary chains (\"slow\" path) and accepts \"fast\" forwarded requests from permissioned validators that are later cross-checked with the slow path. ETH coming from secondary chains are transferred and escrowed here. State roots are then synced back to the secondary chains.",
            "upgradableBy": ["LineaOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "LineaL2Gateway",
            "address": "0x7b5780d6df85A7dF96a3e1A019639a1dbDe937dB",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x0Bff4B38792a95314b3463E1Bf9831BDa1995391"],
              "implementations": ["0x0C25f3ACCB17a9D60408D1c79bD7218073DAd518"]
            },
            "chain": "linea",
            "description": "High level interface between the main zkLink contract and Linea's message service.",
            "upgradableBy": ["LineaOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ValidatorTimelock",
            "address": "0x509ff56c152315EdeE91A2e0f059195519507e01",
            "upgradeability": null,
            "chain": "linea",
            "description": "Intermediary contract between the one of the validators and the ZKsync Era diamond that can delay block execution (ie withdrawals and other L3 --> L2 messages). Currently, the delay is set to 0s."
          },
          {
            "name": "Verifier",
            "address": "0x902C3806A84f4e855a8746e92d7F1C9a51400458",
            "upgradeability": null,
            "chain": "linea",
            "description": "Implements ZK proof verification logic.",
            "upgradableBy": ["LineaOwner"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "Governance",
            "address": "0xeF528a8Ca4B6aFDB6716Ef9f11bCa0c5C47454ec",
            "upgradeability": null,
            "chain": "linea",
            "description": "Intermediary governance contract with two roles and a customizable delay. This delay is only mandatory for transactions scheduled by the Owner role and can be set by the SecurityCouncil role. The SecurityCouncil role can execute arbitrary upgrade transactions immediately. Currently the delay is set to 0s and the SecurityCouncil role is not used."
          }
        ],
        "nativeAddresses": {
          "ethereum": [
            {
              "name": "L1ERC20Bridge",
              "address": "0xAd16eDCF7DEB7e90096A259c81269d811544B6B6",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x315255c1bA35A1DdAc48CF054bc4e3a0929160b2"],
                "implementations": [
                  "0x3203E813930bD710043c1d899fE38dD359307352"
                ]
              },
              "chain": "ethereum",
              "description": "Main entry point for depositing ERC20 tokens from Ethereum to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0x5fD9F73286b7E8683Bab45019C94553b93e015Cf",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0xeaC8E6c1acBabC7135Fc8357FF2D718a36177Ab7"
                ]
              },
              "chain": "ethereum",
              "description": "Main messaging contract on Ethereum and ETH escrow. Outgoing messages (like deposits) are sent through the EthereumL2Gateway which ultimately makes use of Ethereum's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "EthereumL1Gateway",
              "address": "0x83Bc7394738A7A084081aF22EEC0051908c0055c",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0x65c7B3E1B877131986247B49474834b0347eF332"
                ]
              },
              "chain": "ethereum",
              "description": "High level interface between the local zkLink contract and Ethereum's message service.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "Arbitrator",
              "address": "0x1Ee09A2cAa0813A5183f90F5a6d0E4871f4C6002",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0x7a0Bb4805EcB7fD3C8DAbbE4AFa0E91cB1761E34"
                ]
              },
              "chain": "ethereum",
              "description": "Contract storing the mapping between secondary chain bridges and acts as an intermediary to receive and relay messages to and from the main zkLink contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "LineaL1Gateway",
              "address": "0x803460416C2682Ac54FccF03eF77b10A12f2809b",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0xD2ED3FA35be899fe850075946Fc7320bB4c18C29"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the LineaL2Gateway on Linea. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "MantaL1Gateway",
              "address": "0x649Dfa2c4d09D877419fA1eDC4005BfbEF7CD82D",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0x6d6Ce5A491cC2BE2f56AA02aa68AaE8acE927962"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the MantaL2Gateway on Manta Pacific. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "MantleL1Gateway",
              "address": "0xdE1Ce751405Fe6D836349226EEdCDFFE1C3BE269",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0xe98EDDAd1f49abc7586eE516d019D834FBDc2951"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the MantleL2Gateway on Mantle. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "EraL1Gateway",
              "address": "0xeCD189e0f390826E137496a4e4a23ACf76c942Ab",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0x59Ad3580c9e0992D474954327f5879AF5B3e4a22"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the EraL2Gateway on ZKsync Era. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "ArbitrumL1Gateway",
              "address": "0x273D59aed2d793167c162E64b9162154B07583C0",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0xF69302b6fF21116F9266bFA2fbE4ee23f6292875"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the ArbitrumL2Gateway on Arbitrum One. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "BlastL1Gateway",
              "address": "0x41FaF46Ca4Dfd912B65B66D29BdD432782BB1158",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0x01334Df58feE28db184ae9D11467F38F7437FD80"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the BlastL2Gateway on Blast. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "OptimismL1Gateway",
              "address": "0x668e8F67adB8219e1816C2E5bBEa055A78AF3026",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x344A908d1a7b7d06B7AD7169C1db81fc9d496dE9"],
                "implementations": [
                  "0x2e8AD1434663b209EE59eF1a6612114239F4a190"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the OptimismL2Gateway on OP Mainnet. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "BaseL1Gateway",
              "address": "0x4eEA93966AA5cd658225E0D43b665A5a491d2b7E",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x344A908d1a7b7d06B7AD7169C1db81fc9d496dE9"],
                "implementations": [
                  "0x0C25f3ACCB17a9D60408D1c79bD7218073DAd518"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the BaseL2Gateway on Base. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "ScrollL1Gateway",
              "address": "0x986c905087a663db3C81ad319b94c1E9dd388e92",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xdb4D755E3b8735314147b9bB146327C269701E2D"],
                "implementations": [
                  "0xdB97dBF9c0A20aA8B4787563B6bE04e83E7ECDFB"
                ]
              },
              "chain": "ethereum",
              "description": "L1 counterpart receiving messages from the ScrollL2Gateway on Scroll. It redirects them to the Arbitrator contract.",
              "upgradableBy": ["zkLinkOwner"],
              "upgradeDelay": "No delay"
            }
          ],
          "optimism": [
            {
              "name": "L1ERC20Bridge",
              "address": "0x5Bd51296423A9079b931414C1De65e7057326EaA",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xA688B4E1375Ed6b9129dF4959da4a271B33e50a4"],
                "implementations": [
                  "0x21Fe89FfB96d4092b42c8ab35dcFEee50a86C3B8"
                ]
              },
              "chain": "optimism",
              "description": "Main entry point for depositing ERC20 tokens from OP Mainnet to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["OptimismOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0x46C8D02E93d5a03899dFa7Cf8A40A07589A3fA1b",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x2c3FF918E3925CC3ba95f41307D1cfBEFDF93dB9"],
                "implementations": [
                  "0xe71A6Cfb42D0398f6d6aeD8a19987C83bbE3B86E"
                ]
              },
              "chain": "optimism",
              "description": "Main messaging contract on OP Mainnet and ETH escrow. Outgoing messages (like deposits) are sent through the OptimismL2Gateway which ultimately makes use of OP Mainnet's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["OptimismOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "OptimismL2Gateway",
              "address": "0xaD5d729291C0d6A299E370814CA6Ce1c8C25b51c",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x344A908d1a7b7d06B7AD7169C1db81fc9d496dE9"],
                "implementations": [
                  "0x3C3f4b866f8c6F0D2c912feE36D5Ad337a9AA98e"
                ]
              },
              "chain": "optimism",
              "description": "High level interface between the local zkLink contract and OP's message service.",
              "upgradableBy": ["OptimismOwner"],
              "upgradeDelay": "No delay"
            }
          ],
          "arbitrum": [
            {
              "name": "L1ERC20Bridge",
              "address": "0xfB0Ad0B3C2605A7CA33d6badd0C685E11b8F5585",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x48698A17D193bFc882395AC06a1DEdbb222F2917"],
                "implementations": [
                  "0x1202e0557A23531D09015C802e993d6423685FfB"
                ]
              },
              "chain": "arbitrum",
              "description": "Main entry point for depositing ERC20 tokens from Arbitrum One to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["ArbitrumOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0xFF73a1a1d27951A005eb23276dc99CB7F8d5420A",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xa29fFe244898CBec19DFEaAfB5cE671389FfF60F"],
                "implementations": [
                  "0xe2cd603BFAe63EEFBDf0C51485f835D8B419A305"
                ]
              },
              "chain": "arbitrum",
              "description": "Main messaging contract on Arbitrum One and ETH escrow. Outgoing messages (like deposits) are sent through the ArbitrumL2Gateway which ultimately makes use of Arbitrum One's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["ArbitrumOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "ArbitrumL2Gateway",
              "address": "0x7bd79DEd935B542fb22c74305a4d2A293C18483a",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xa29fFe244898CBec19DFEaAfB5cE671389FfF60F"],
                "implementations": [
                  "0x413552461b0b2c13f117d885b52AaA2f23374B1D"
                ]
              },
              "chain": "arbitrum",
              "description": "High level interface between the local zkLink contract and Arbitrum's message service.",
              "upgradableBy": ["ArbitrumOwner"],
              "upgradeDelay": "No delay"
            }
          ],
          "base": [
            {
              "name": "L1ERC20Bridge",
              "address": "0x80d12A78EfE7604F00ed07aB2f16F643301674D5",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x85F0d9da054C5FE399E079Cc0b47de74be5b22AE"],
                "implementations": [
                  "0xA89aa7e3D34516EAB7129E401215d5d1239Ce715"
                ]
              },
              "chain": "base",
              "description": "Main entry point for depositing ERC20 tokens from Base to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["BaseOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0xE473ce141b1416Fe526eb63Cf7433b7B8d7264Dd",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xEf1c84A2fdCE663b75dB3F822cBe1cFddaaa162C"],
                "implementations": [
                  "0x08Ca9154DA9318323D3f6DFd872f5cDC4C85E388"
                ]
              },
              "chain": "base",
              "description": "Main messaging contract on Base and ETH escrow. Outgoing messages (like deposits) are sent through the BaseL2Gateway which ultimately makes use of Base's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["BaseOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "BaseL2Gateway",
              "address": "0x1054Ff8B3B7B9F68d2e55C4A42E8952332c69011",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x344A908d1a7b7d06B7AD7169C1db81fc9d496dE9"],
                "implementations": [
                  "0x7f00134427437b2883F59EF3880597FDc836E356"
                ]
              },
              "chain": "base",
              "description": "High level interface between the local zkLink contract and Base's message service.",
              "upgradableBy": ["BaseOwner"],
              "upgradeDelay": "No delay"
            }
          ],
          "mantapacific": [
            {
              "name": "L1ERC20Bridge",
              "address": "0x44a65dc12865A1e5249b45b4868f32b0E37168FF",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x01aFbE3D5DC8A0C8271de9bCB091224f037EfE05"],
                "implementations": [
                  "0x5f58BcCE409CDaFBbD705e720743b1EfF9fef28c"
                ]
              },
              "chain": "mantapacific",
              "description": "Main entry point for depositing ERC20 tokens from Manta Pacific to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["MantaOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0xD784d7128B46B60Ca7d8BdC17dCEC94917455657",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x6ed8745d9ad0EE1fEeB060d63c7cf78A7E4c2dE3"],
                "implementations": [
                  "0xfB0Ad0B3C2605A7CA33d6badd0C685E11b8F5585"
                ]
              },
              "chain": "mantapacific",
              "description": "Main messaging contract on Manta Pacific and ETH escrow. Outgoing messages (like deposits) are sent through the MantaPacificL2Gateway which ultimately makes use of Manta Pacific's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["MantaOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "MantaL2Gateway",
              "address": "0xe946aBB40928326ce5bFF303E7B8f0f253EA39D0",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x6ed8745d9ad0EE1fEeB060d63c7cf78A7E4c2dE3"],
                "implementations": [
                  "0x50efC7f1290479cb879473512D89fDC80B726211"
                ]
              },
              "chain": "mantapacific",
              "description": "High level interface between the local zkLink contract and Manta Pacific's message service.",
              "upgradableBy": ["MantaOwner"],
              "upgradeDelay": "No delay"
            }
          ],
          "mantle": [
            {
              "name": "L1ERC20Bridge",
              "address": "0x62351b47e060c61868Ab7E05920Cb42bD9A5f2B2",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xeAe8e5180EAE503E4Ffef2F5D48E20164eD41b82"],
                "implementations": [
                  "0x7769C18828569692Dfb65affa0856533613ea458"
                ]
              },
              "chain": "mantle",
              "description": "Main entry point for depositing ERC20 tokens from Mantle to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["MantleOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0xD784d7128B46B60Ca7d8BdC17dCEC94917455657",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x1aB4D3cfcCCB28DBc8993454f461f3565281BB60"],
                "implementations": [
                  "0x0C04046546C46652969Aa9eB4BFB758cFDf1e821"
                ]
              },
              "chain": "mantle",
              "description": "Main messaging contract on Mantle and ETH escrow. Outgoing messages (like deposits) are sent through the MantleL2Gateway which ultimately makes use of Mantle's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["MantleOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "MantleL2Gateway",
              "address": "0xe946aBB40928326ce5bFF303E7B8f0f253EA39D0",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x1aB4D3cfcCCB28DBc8993454f461f3565281BB60"],
                "implementations": [
                  "0xCdcDF691aF3e3717A35A2352aB7e34fd2980613D"
                ]
              },
              "chain": "mantle",
              "description": "High level interface between the local zkLink contract and Mantle's message service.",
              "upgradableBy": ["MantleOwner"],
              "upgradeDelay": "No delay"
            }
          ],
          "scroll": [
            {
              "name": "L1ERC20Bridge",
              "address": "0x3C7c0ebFCD5786ef48df5ed127cdDEb806db976c",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xC4673dAbfAf04D2A430e244B63F040D27199102f"],
                "implementations": [
                  "0x067c7126a83560Ed2Fc345d25799F696B7Ea47Ca"
                ]
              },
              "chain": "scroll",
              "description": "Main entry point for depositing ERC20 tokens from Scroll to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["ScrollOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0x119B9459D9119D07c23aD06778AeaBec804Fd1a2",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xeCa8EB8B909A29C2F912d5b0cBB153a43c860c77"],
                "implementations": [
                  "0xCdcDF691aF3e3717A35A2352aB7e34fd2980613D"
                ]
              },
              "chain": "scroll",
              "description": "Main messaging contract on Scroll and ETH escrow. Outgoing messages (like deposits) are sent through the ScrollL2Gateway which ultimately makes use of Scroll's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["ScrollOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "ScrollL2Gateway",
              "address": "0xd8428A59B60Df2d81514D429D57DF23293f1bCe7",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xeCa8EB8B909A29C2F912d5b0cBB153a43c860c77"],
                "implementations": [
                  "0xe469c1330cEEcC375fE17E7D649eA270186D344F"
                ]
              },
              "chain": "scroll",
              "description": "High level interface between the local zkLink contract and Scroll's message service.",
              "upgradableBy": ["ScrollOwner"],
              "upgradeDelay": "No delay"
            }
          ],
          "blast": [
            {
              "name": "L1ERC20Bridge",
              "address": "0x8Df0c2bA3916bF4789c50dEc5A79b2fc719F500b",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xB5111Bda1E59b220d0Cf8D519CEDac46cb3B4c19"],
                "implementations": [
                  "0xc24864769346073f5fEf0386A18734F0eF5503F5"
                ]
              },
              "chain": "blast",
              "description": "Main entry point for depositing ERC20 tokens from Blast to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["BlastOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0x29BA92Fe724beD5c5EBfd0099F2F64a6DC5078FD",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x730200f698cc8Ff16C00F4E8520Fd780B916D50E"],
                "implementations": [
                  "0xDe4Be50Bfe9503180231357Eab19d709F8F73C66"
                ]
              },
              "chain": "blast",
              "description": "Main messaging contract on Blast and ETH escrow. Outgoing messages (like deposits) are sent through the BlastL2Gateway which ultimately makes use of Blast's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["BlastOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "BlastL2Gateway",
              "address": "0x3f64e2e09732969813904a8473074CFADeE66AF1",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x730200f698cc8Ff16C00F4E8520Fd780B916D50E"],
                "implementations": [
                  "0xd1dCd063A4e650DCECd8BD211fe6D18a934ecCaD"
                ]
              },
              "chain": "blast",
              "description": "High level interface between the local zkLink contract and Blast's message service.",
              "upgradableBy": ["BlastOwner"],
              "upgradeDelay": "No delay"
            }
          ],
          "zksync2": [
            {
              "name": "L1ERC20Bridge",
              "address": "0xaB3DDB86072a35d74beD49AA0f9210098ebf2D08",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xe8184919c7200EF09e7007DFaB89BA4a99CeDc98"],
                "implementations": [
                  "0xdBA32e62e929a7e2Fa65782F812416CA65208E40"
                ]
              },
              "chain": "zksync2",
              "description": "Main entry point for depositing ERC20 tokens from ZKsync Era to zkLink Nova. Outgoing messages and incoming withdrawal validation is delegated to the zkLink contract.",
              "upgradableBy": ["EraOwner"],
              "upgradeDelay": "No delay"
            },
            {
              "name": "zkLink",
              "address": "0xaFe8C7Cf33eD0fee179DFF20ae174C660883273A",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x3334552599C9aA1FE08CfF276A02033FF37646ca"],
                "implementations": [
                  "0xC9bBbdCf1778A4aA86544F02CccBf09fd3A0706E"
                ]
              },
              "chain": "zksync2",
              "description": "Main messaging contract on ZKsync Era and ETH escrow. Outgoing messages (like deposits) are sent through the ZKsync2L2Gateway which ultimately makes use of ZKsync Era's canonical messaging bridge to reach the Arbitrator on L1. Only whitelisted validators can sync messages with zkLink Nova, which also transfer the ETH to it via the respective canonical bridges. Incoming messages (like withdrawals) are validated on Linea first and then sent to this contract through the same path. Whitelisted validators can also relay messages to zkLink without going through the canonical bridge (fast path), which are later cross-checked with the slow path. If the check fails, the system halts.",
              "upgradableBy": ["EraOwner"],
              "upgradeDelay": "No delay"
            }
          ]
        },
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "permissions": [
        {
          "name": "LineaOwner",
          "description": "This is a Gnosis Safe with 5 / 8 threshold.  Admin of the main zkLink contract, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
          "accounts": [
            {
              "address": "0x0Bff4B38792a95314b3463E1Bf9831BDa1995391",
              "type": "MultiSig"
            }
          ],
          "chain": "linea",
          "references": null,
          "participants": [
            {
              "address": "0xd30898ECdc21C72250a5fd1dbD37FF7D63237Db5",
              "type": "EOA"
            },
            {
              "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
              "type": "EOA"
            },
            {
              "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
              "type": "EOA"
            },
            {
              "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
              "type": "EOA"
            },
            {
              "address": "0xC75EFCffEE930706daec5CaCA012551f6a1845D7",
              "type": "EOA"
            },
            {
              "address": "0x24a257B7D975E7ec6219C4cFCbcF6E504253c7A9",
              "type": "EOA"
            },
            {
              "address": "0xd8F26118505417Ef6468Ac8A2AE1E5117245Db92",
              "type": "EOA"
            },
            {
              "address": "0xcC1A2bd1a459be0C7fAd3B7F9Fa9a6CBBFE9BFa5",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "Validators",
          "accounts": [
            {
              "address": "0x54B39C0e4089f0789b9f8EdE20D725e1AFF805Cb",
              "type": "EOA"
            },
            {
              "address": "0x509ff56c152315EdeE91A2e0f059195519507e01",
              "type": "Contract"
            }
          ],
          "chain": "linea",
          "description": "Permissioned actors that can commit, prove and execute blocks. It can also \"fast\" relay messages to zkLink Nova without going through the canonical bridges, meaning it can potentially relay invalid messages and mint tokens out of thin air. In that case, since the system checks such messages against the slow path, after some time the system would halt."
        }
      ],
      "nativePermissions": {
        "optimism": [
          {
            "name": "OptimismProxyAdmin",
            "accounts": [
              {
                "address": "0xA688B4E1375Ed6b9129dF4959da4a271B33e50a4",
                "type": "Contract"
              }
            ],
            "chain": "optimism",
            "description": "Owner of the L1ERC20Bridge on OP Mainnet."
          },
          {
            "name": "OptimismOwner",
            "description": "This is a Gnosis Safe with 5 / 8 threshold.  Admin of the zkLink contract on OP Mainnet and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
            "accounts": [
              {
                "address": "0x2c3FF918E3925CC3ba95f41307D1cfBEFDF93dB9",
                "type": "MultiSig"
              }
            ],
            "chain": "optimism",
            "references": null,
            "participants": [
              {
                "address": "0xd30898ECdc21C72250a5fd1dbD37FF7D63237Db5",
                "type": "EOA"
              },
              {
                "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
                "type": "EOA"
              },
              {
                "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
                "type": "EOA"
              },
              {
                "address": "0x24a257B7D975E7ec6219C4cFCbcF6E504253c7A9",
                "type": "EOA"
              },
              {
                "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
                "type": "EOA"
              },
              {
                "address": "0x824C9364A6CF8f5EB542ad2ca8F5705561C8b1db",
                "type": "EOA"
              },
              {
                "address": "0xd8F26118505417Ef6468Ac8A2AE1E5117245Db92",
                "type": "EOA"
              },
              {
                "address": "0xcC1A2bd1a459be0C7fAd3B7F9Fa9a6CBBFE9BFa5",
                "type": "EOA"
              }
            ]
          }
        ],
        "arbitrum": [
          {
            "name": "ArbitrumProxyAdmin",
            "accounts": [
              {
                "address": "0x48698A17D193bFc882395AC06a1DEdbb222F2917",
                "type": "Contract"
              }
            ],
            "chain": "arbitrum",
            "description": "Owner of the L1ERC20Bridge on Arbitrum One."
          },
          {
            "name": "ArbitrumOwner",
            "description": "This is a Gnosis Safe with 5 / 8 threshold.  Admin of the zkLink contract on Arbitrum One and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
            "accounts": [
              {
                "address": "0xa29fFe244898CBec19DFEaAfB5cE671389FfF60F",
                "type": "MultiSig"
              }
            ],
            "chain": "arbitrum",
            "references": null,
            "participants": [
              {
                "address": "0xd30898ECdc21C72250a5fd1dbD37FF7D63237Db5",
                "type": "EOA"
              },
              {
                "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
                "type": "EOA"
              },
              {
                "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
                "type": "EOA"
              },
              {
                "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
                "type": "EOA"
              },
              {
                "address": "0x24a257B7D975E7ec6219C4cFCbcF6E504253c7A9",
                "type": "EOA"
              },
              {
                "address": "0xC75EFCffEE930706daec5CaCA012551f6a1845D7",
                "type": "EOA"
              },
              {
                "address": "0xd8F26118505417Ef6468Ac8A2AE1E5117245Db92",
                "type": "EOA"
              },
              {
                "address": "0xcC1A2bd1a459be0C7fAd3B7F9Fa9a6CBBFE9BFa5",
                "type": "EOA"
              }
            ]
          }
        ],
        "base": [
          {
            "name": "BaseProxyAdmin",
            "accounts": [
              {
                "address": "0x85F0d9da054C5FE399E079Cc0b47de74be5b22AE",
                "type": "Contract"
              }
            ],
            "chain": "base",
            "description": "Owner of the L1ERC20Bridge on Base."
          },
          {
            "name": "BaseOwner",
            "description": "This is a Gnosis Safe with 5 / 8 threshold.  Admin of the zkLink contract on Base and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
            "accounts": [
              {
                "address": "0xEf1c84A2fdCE663b75dB3F822cBe1cFddaaa162C",
                "type": "MultiSig"
              }
            ],
            "chain": "base",
            "references": null,
            "participants": [
              {
                "address": "0xd30898ECdc21C72250a5fd1dbD37FF7D63237Db5",
                "type": "EOA"
              },
              {
                "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
                "type": "EOA"
              },
              {
                "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
                "type": "EOA"
              },
              {
                "address": "0x24a257B7D975E7ec6219C4cFCbcF6E504253c7A9",
                "type": "EOA"
              },
              {
                "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
                "type": "EOA"
              },
              {
                "address": "0x824C9364A6CF8f5EB542ad2ca8F5705561C8b1db",
                "type": "EOA"
              },
              {
                "address": "0xd8F26118505417Ef6468Ac8A2AE1E5117245Db92",
                "type": "EOA"
              },
              {
                "address": "0xcC1A2bd1a459be0C7fAd3B7F9Fa9a6CBBFE9BFa5",
                "type": "EOA"
              }
            ]
          }
        ],
        "mantapacific": [
          {
            "name": "MantaProxyAdmin",
            "accounts": [
              {
                "address": "0x01aFbE3D5DC8A0C8271de9bCB091224f037EfE05",
                "type": "Contract"
              }
            ],
            "chain": "mantapacific",
            "description": "Owner of the L1ERC20Bridge on Manta Pacific."
          },
          {
            "name": "MantaOwner",
            "accounts": [
              {
                "address": "0x6ed8745d9ad0EE1fEeB060d63c7cf78A7E4c2dE3",
                "type": "MultiSig"
              }
            ],
            "description": "Admin of the zkLink contract on Manta Pacific and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gaining access to all funds."
          }
        ],
        "mantle": [
          {
            "name": "MantleProxyAdmin",
            "accounts": [
              {
                "address": "0xeAe8e5180EAE503E4Ffef2F5D48E20164eD41b82",
                "type": "Contract"
              }
            ],
            "chain": "mantle",
            "description": "Owner of the L1ERC20Bridge on Mantle."
          },
          {
            "name": "MantleOwner",
            "description": "This is a Gnosis Safe with 5 / 8 threshold.  Admin of the zkLink contract on Mantle and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
            "accounts": [
              {
                "address": "0x1aB4D3cfcCCB28DBc8993454f461f3565281BB60",
                "type": "MultiSig"
              }
            ],
            "chain": "mantle",
            "references": null,
            "participants": [
              {
                "address": "0xd30898ECdc21C72250a5fd1dbD37FF7D63237Db5",
                "type": "EOA"
              },
              {
                "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
                "type": "EOA"
              },
              {
                "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
                "type": "EOA"
              },
              {
                "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
                "type": "EOA"
              },
              {
                "address": "0xd8F26118505417Ef6468Ac8A2AE1E5117245Db92",
                "type": "EOA"
              },
              {
                "address": "0x824C9364A6CF8f5EB542ad2ca8F5705561C8b1db",
                "type": "EOA"
              },
              {
                "address": "0x24a257B7D975E7ec6219C4cFCbcF6E504253c7A9",
                "type": "EOA"
              },
              {
                "address": "0xcC1A2bd1a459be0C7fAd3B7F9Fa9a6CBBFE9BFa5",
                "type": "EOA"
              }
            ]
          }
        ],
        "scroll": [
          {
            "name": "ScrollProxyAdmin",
            "accounts": [
              {
                "address": "0xC4673dAbfAf04D2A430e244B63F040D27199102f",
                "type": "Contract"
              }
            ],
            "chain": "scroll",
            "description": "Owner of the L1ERC20Bridge on Scroll."
          },
          {
            "name": "AdminMultisig",
            "description": "This is a Gnosis Safe with 5 / 7 threshold.  Admin of the zkLink contract on Scroll and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
            "accounts": [
              {
                "address": "0xeCa8EB8B909A29C2F912d5b0cBB153a43c860c77",
                "type": "MultiSig"
              }
            ],
            "chain": "scroll",
            "references": null,
            "participants": [
              {
                "address": "0xd30898ECdc21C72250a5fd1dbD37FF7D63237Db5",
                "type": "EOA"
              },
              {
                "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
                "type": "EOA"
              },
              {
                "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
                "type": "EOA"
              },
              {
                "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
                "type": "EOA"
              },
              {
                "address": "0xb2c9E9a8eDEF1488E75F9E5b65Be14751733B144",
                "type": "EOA"
              },
              {
                "address": "0xda9f561F0d8d7061fa47e47E352eAD6844Ae3272",
                "type": "EOA"
              },
              {
                "address": "0x45b62A07c525278F2ecd7915130E797B04B05C48",
                "type": "EOA"
              }
            ]
          }
        ],
        "blast": [
          {
            "name": "BlastProxyAdmin",
            "accounts": [
              {
                "address": "0xB5111Bda1E59b220d0Cf8D519CEDac46cb3B4c19",
                "type": "Contract"
              }
            ],
            "chain": "blast",
            "description": "Owner of the L1ERC20Bridge on Blast."
          },
          {
            "name": "BlastOwner",
            "description": "This is a Gnosis Safe with 6 / 8 threshold.  Admin of the zkLink contract on Blast and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
            "accounts": [
              {
                "address": "0x730200f698cc8Ff16C00F4E8520Fd780B916D50E",
                "type": "MultiSig"
              }
            ],
            "chain": "blast",
            "references": null,
            "participants": [
              {
                "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
                "type": "EOA"
              },
              {
                "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
                "type": "EOA"
              },
              {
                "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
                "type": "EOA"
              },
              {
                "address": "0xcC1A2bd1a459be0C7fAd3B7F9Fa9a6CBBFE9BFa5",
                "type": "EOA"
              },
              {
                "address": "0xC75EFCffEE930706daec5CaCA012551f6a1845D7",
                "type": "EOA"
              },
              {
                "address": "0x24a257B7D975E7ec6219C4cFCbcF6E504253c7A9",
                "type": "EOA"
              },
              {
                "address": "0x824C9364A6CF8f5EB542ad2ca8F5705561C8b1db",
                "type": "EOA"
              },
              {
                "address": "0xd8F26118505417Ef6468Ac8A2AE1E5117245Db92",
                "type": "EOA"
              }
            ]
          }
        ],
        "zksync2": [
          {
            "name": "EraProxyAdmin",
            "accounts": [
              {
                "address": "0xe8184919c7200EF09e7007DFaB89BA4a99CeDc98",
                "type": "Contract"
              }
            ],
            "chain": "zksync2",
            "description": "Owner of the L1ERC20Bridge on ZKsync Era."
          },
          {
            "name": "EraOwner",
            "description": "This is a Gnosis Safe with 5 / 8 threshold.  Admin of the zkLink contract on ZKsync Era and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
            "accounts": [
              {
                "address": "0x3334552599C9aA1FE08CfF276A02033FF37646ca",
                "type": "MultiSig"
              }
            ],
            "chain": "zksync2",
            "references": null,
            "participants": [
              {
                "address": "0xd30898ECdc21C72250a5fd1dbD37FF7D63237Db5",
                "type": "EOA"
              },
              {
                "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
                "type": "EOA"
              },
              {
                "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
                "type": "EOA"
              },
              {
                "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
                "type": "EOA"
              },
              {
                "address": "0xC75EFCffEE930706daec5CaCA012551f6a1845D7",
                "type": "EOA"
              },
              {
                "address": "0x24a257B7D975E7ec6219C4cFCbcF6E504253c7A9",
                "type": "EOA"
              },
              {
                "address": "0xd8F26118505417Ef6468Ac8A2AE1E5117245Db92",
                "type": "EOA"
              },
              {
                "address": "0xcC1A2bd1a459be0C7fAd3B7F9Fa9a6CBBFE9BFa5",
                "type": "EOA"
              }
            ]
          }
        ],
        "ethereum": [
          {
            "name": "EthereumProxyAdmin",
            "accounts": [
              {
                "address": "0x315255c1bA35A1DdAc48CF054bc4e3a0929160b2",
                "type": "Contract"
              }
            ],
            "chain": "ethereum",
            "description": "Owner of the L1ERC20Bridge on Ethereum."
          },
          {
            "name": "EthereumOwner",
            "description": "This is a Gnosis Safe with 5 / 8 threshold.  Admin of the zkLink contract on Ethereum and the ProxyAdmin, meaning it can upgrade the bridge implementation and potentially gain access to all funds.",
            "accounts": [
              {
                "address": "0xdb4D755E3b8735314147b9bB146327C269701E2D",
                "type": "MultiSig"
              }
            ],
            "chain": "ethereum",
            "references": null,
            "participants": [
              {
                "address": "0xd30898ECdc21C72250a5fd1dbD37FF7D63237Db5",
                "type": "EOA"
              },
              {
                "address": "0x7785bccF9110C188Dad39bE49D4Cdf6c6CC03F10",
                "type": "EOA"
              },
              {
                "address": "0x4D9b22B92Ff9faFAc013f82faCA88BDa8E778cb5",
                "type": "EOA"
              },
              {
                "address": "0xF801886AE2e127A269B0F11892edb54F692d02dF",
                "type": "EOA"
              },
              {
                "address": "0xC75EFCffEE930706daec5CaCA012551f6a1845D7",
                "type": "EOA"
              },
              {
                "address": "0x24a257B7D975E7ec6219C4cFCbcF6E504253c7A9",
                "type": "EOA"
              },
              {
                "address": "0xd8F26118505417Ef6468Ac8A2AE1E5117245Db92",
                "type": "EOA"
              },
              {
                "address": "0xcC1A2bd1a459be0C7fAd3B7F9Fa9a6CBBFE9BFa5",
                "type": "EOA"
              }
            ]
          }
        ]
      }
    },
    {
      "type": "layer3",
      "isUnderReview": true,
      "id": "teva",
      "createdAt": "1717416738",
      "hostChain": "zksync2",
      "display": {
        "name": "Teva Chain",
        "slug": "teva",
        "category": "ZK Rollup",
        "description": "Teva Chain is a L3 gaming hyperchain on ZKsync, powered by zkStack with custom DA.",
        "purposes": ["Gaming"],
        "provider": "ZK Stack",
        "links": {
          "websites": ["https://tevaera.com/tevachain"],
          "apps": [""],
          "documentation": [""],
          "explorers": [""],
          "repositories": [""],
          "socialMedia": [
            "https://twitter.com/tevaera",
            "https://discord.com/invite/tevaera",
            "https://tevaera.medium.com/"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [],
        "transactionApi": null
      },
      "stage": { "stage": "UnderReview" },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": null
    },
    {
      "type": "layer3",
      "id": "xai",
      "createdAt": "1701958025",
      "contracts": {
        "addresses": [
          {
            "name": "L1GatewayRouter",
            "address": "0x22CCA5Dc96a4Ac1EC32c9c7C5ad4D66254a24C35",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
              "implementations": ["0xd106EC93D2c1adaA65C4B17ffc7bB166Ce30DDAe"]
            },
            "chain": "arbitrum",
            "description": "Router managing token <--> gateway mapping.",
            "upgradableBy": ["ProxyAdmin (through UpgradeExecutor)"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "SentryReferee",
            "address": "0xfD41041180571C5D371BEA3D9550E55653671198",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723"],
              "implementations": ["0x609152cb742916E0F7FBC4391Be750C458b049fe"]
            },
            "chain": "arbitrum",
            "description": "The referree contract allows to create new challenges (state root reports) from the permissioned challenger, collects assertions from sentry nodes, and distributes esXAI rewards for operating a sentry node.         The referee contract is also a whitelisted address in the esXAI token contract, which allows it to initiate arbitrary esXAI token transfers. Additional staking through this contract is disabled. Stakers can continue to get staking rewards here or withdraw their assets.",
            "upgradableBy": ["StakingProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "PoolFactory",
            "address": "0xF9E08660223E2dbb1c0b28c82942aB6B5E38b8E5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723"],
              "implementations": ["0x21EEC6626f15d02A8896ebB7EDD68ff3CB61e89E"]
            },
            "chain": "arbitrum",
            "description": "The PoolFactory allows creating and managing staking pools for V2 staking. Users can stake esXAI (and / or Sentry Keys) in pools. This contract's address is whitelisted in the esXAI token contract, which allows it to initiate arbitrary esXAI token transfers. V2 staking through this contract is currently enabled.",
            "upgradableBy": ["StakingProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "NodeLicenseRegistry",
            "address": "0xbc14d8563b248B79689ECbc43bBa53290e0b6b66",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723"],
              "implementations": ["0xfD6Bb931D2Ee134E70568ca36584c043cB278734"]
            },
            "chain": "arbitrum",
            "description": "This is the contract where Xai Sentry Keys to run a node are minted.",
            "upgradableBy": ["StakingProxyAdmin"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "RollupProxy",
            "address": "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F"],
              "implementations": [
                "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x995a9d3ca121D48d21087eDE20bc8acb2398c8B1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
              "implementations": ["0x7a299aD29499736994Aa3a9aFa3f476445FAEB2c"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x1E400568AD4840dbE50FB32f306B842e9ddeF726",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
              "implementations": ["0x302275067251F5FcdB9359Bda735fD8f7A4A54c0"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
              "implementations": ["0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x3a3f62034a42a35eA1686B199bB73006aa525eE4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
              "implementations": ["0x5cA988F213EfbCB86ED7e2AACB0C15c91e648f8d"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xb20107bfB36D3B5AcA534aCAfbd8857b10b402a8",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x526a6E634aD36bB0007c4422586c135F1F9B525a",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0xe8709022B9C9D7347856c75910fe07e10C904446",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0xc555b2F1D559Fbb854569b33640990D178F94747",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x800dA62bE6626127F71B34E795286C34C04D6712",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs ensure state correctness",
          "description": "After some period of time, the published state root is assumed to be correct. For a certain time period, one of the whitelisted actors can submit a fraud proof that shows that the state was incorrect. The challenge protocol can be subject to delay attacks.         After the state root is published, there is also a trusted entity, called Challenger, that signs it and submits the signature to a Referee smart contract. The signatures submitted to the referee are used then verified by sentry nodes. The role of sentry nodes is to verify (assert) the submitted state root after it has been submitted. There is no integrated way to flag an invalid state root, sentry nodes will have to raise the alarm by external means, making them just observation nodes.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "How is fraud proven - Arbitrum documentation FAQ",
              "href": "https://developer.offchainlabs.com/intro/#q-and-how-exactly-is-fraud-proven-sounds-complicated"
            },
            {
              "text": "Arbitrum Glossary: Challenge Period",
              "href": "https://developer.arbitrum.io/intro/glossary#challenge-period"
            },
            {
              "text": "RollupUser.sol - Etherscan source code, onlyValidator modifier",
              "href": "https://etherscan.io/address/0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A#code"
            },
            {
              "text": "Referee.sol - Etherscan source code, submitChallenge function",
              "href": "https://arbiscan.io/address/0x254954e3f6bd7443444036bea2d8fe88fdf496c1#code#F53#L337"
            },
            {
              "text": "Referee.sol - Etherscan source code, submitAssertionToChallenge function",
              "href": "https://arbiscan.io/address/0x254954e3f6bd7443444036bea2d8fe88fdf496c1#code#F53#L428"
            },
            {
              "text": "Solutions to Delay Attacks on Rollups",
              "href": "https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 5 out of 7.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x7a299aD29499736994Aa3a9aFa3f476445FAEB2c#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x7F68dba68E72a250004812fe04F1123Fca89aBa9",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x25EA41f0bDa921a0eBf48291961B1F10b59BC6b8",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "RollupOwner",
          "accounts": [
            {
              "address": "0x4972A8EF186Ee42A14Cdd3c47f52ec06a6dc495E",
              "type": "MultiSig"
            }
          ],
          "description": "Multisig that can execute upgrades via the UpgradeExecutor."
        },
        {
          "name": "Xai Deployer (StakingProxyAdmin owner)",
          "accounts": [
            {
              "address": "0x7C94E07bbf73518B0E25D1Be200a5b58F46F9dC7",
              "type": "EOA"
            }
          ],
          "description": "The Xai Deployer EOA can upgrade all staking v2 related contracts (NodeLicenseRegistry, PoolFactory, SentryReferee, StakingPool) instantly and potentially steal all funds."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Gaming"],
        "name": "Xai",
        "slug": "xai",
        "description": "Xai is an Ethereum Layer-3 that leverages Arbitrum AnyTrust to enable open trade in the next generation of video games.",
        "links": {
          "websites": ["https://xai.games/"],
          "apps": [],
          "documentation": ["https://xai-foundation.gitbook.io/xai-network/"],
          "explorers": ["https://explorer.xai-chain.net/"],
          "repositories": ["https://github.com/OffchainLabs/nitro"],
          "socialMedia": [
            "https://twitter.com/xai_games",
            "https://t.me/XaiSentryNodes",
            "https://discord.gg/xaigames"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "5/7 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 5/7 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 5/7 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.7142857142857143
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 25d 10h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 2199264
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 5/7 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.7142857142857143
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["XAI"],
        "escrows": [
          {
            "address": "0xb591cE747CF19cF30e11d656EB94134F523A9e77",
            "newVersion": true,
            "sinceTimestamp": "1704476020",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xb591cE747CF19cF30e11d656EB94134F523A9e77",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
                "implementations": [
                  "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f"
                ]
              },
              "chain": "arbitrum",
              "description": "Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
            "newVersion": true,
            "sinceTimestamp": "1704309371",
            "tokens": ["XAI"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x041F85dD87c46B941dc9b15c6628B19ee5358485"],
                "implementations": [
                  "0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"
                ]
              },
              "chain": "arbitrum",
              "description": "Contract managing Inboxes and Outboxes. It escrows XAI sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://xai-chain.net/rpc",
          "defaultCallsPerMinute": 1500
        }
      }
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "orb3",
      "createdAt": "1710863171",
      "display": {
        "name": "ORB3",
        "slug": "orb3",
        "category": "Optimium",
        "description": "ORB3 is a GameFi-focused Ethereum L3 leveraging Arbitrum AnyTrust.",
        "purposes": ["Gaming", "NFT", "Universal", "Social"],
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://orb3.tech/"],
          "apps": [
            "https://hub.orb3.tech/bridge?chain=eth",
            "https://bridge.orb3.tech/"
          ],
          "documentation": ["https://docs.orb3.tech/"],
          "explorers": ["https://orb3scan.tech/"],
          "repositories": ["https://github.com/orb3-protocol"],
          "socialMedia": [
            "https://twitter.com/Orb3Tech",
            "https://discord.gg/PmWGn2UmdJ",
            "https://t.me/orb3portal",
            "https://mirror.xyz/0xCC98fAeE2309c7424cFE5995741b96BE61c9253f"
          ]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "popapex",
      "createdAt": "1710836229",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x65AD139061B3f6DDb16170a07b925337ddf42407",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x3d0b021E1d2A8747411E3724d5165716B35448f3"],
              "implementations": [
                "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x074fFD20C6D8865752C997f4980Cf70F2a3Fbac6",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC6f49cff395c4d160C61112522700dcB007c41d"],
              "implementations": ["0xB23214f241bdEb275f7dCBfbb1EA79349101d4B0"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xa58F38102579dAE7C584850780dDA55744f67DF1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC6f49cff395c4d160C61112522700dcB007c41d"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xC3874bE54E3f25BBC6B4fB582654fd9294f485a1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC6f49cff395c4d160C61112522700dcB007c41d"],
              "implementations": ["0x8f6406781cC955398C45a48DcEfeEBDb2c8e2CaA"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x0cD85675897B7020d7121e63AB250d3F47ff3Ff2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC6f49cff395c4d160C61112522700dcB007c41d"],
              "implementations": ["0x13BE515E44Eefaf3eBEFAD684F1FBB574Ac0A494"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x3d0b021E1d2A8747411E3724d5165716B35448f3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC6f49cff395c4d160C61112522700dcB007c41d"],
              "implementations": ["0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0xaF57dD96a0c0E8757329D55C56De6eC50Aac73Ea",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xCC6f49cff395c4d160C61112522700dcB007c41d"],
              "implementations": ["0x09824fe72BFF474d16D9c2774432E381BBD60662"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0xDf94F0474F205D086dbc2e66D69a856FCf520622",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x1135265fE014D3FA32B3507E325642B92aFFeAEb",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1000d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x139aC582825DD6A9b9D6A6a64f1bE149C84e0d03",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xD09d81aaA88E0e0EfCF91B0C96779E6B164A1A00",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "ConduitMultisig2",
          "description": "This is a Gnosis Safe with 2 / 7 threshold.  Has the executor role of the UpgradeExecutor and indirectly owns the ProxyAdmin (can upgrade the whole system).",
          "accounts": [
            {
              "address": "0x79C2abE3eBA9dc119318FdAaA48118e1CDB53F56",
              "type": "MultiSig"
            }
          ],
          "chain": "arbitrum",
          "references": null,
          "participants": [
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 5d 14h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Conduit", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Gaming"],
        "name": "Proof of Play Apex",
        "shortName": "PoP Apex",
        "slug": "popapex",
        "description": "Proof of Play Apex is a gaming-focused L3 settling on Arbitrum using the Orbit Stack and AnyTrust DA.",
        "links": {
          "websites": ["https://proofofplay.com/"],
          "apps": [
            "https://bridge.arbitrum.io/?destinationChain=pop-apex&sourceChain=arbitrum-one",
            "https://piratenation.game/"
          ],
          "documentation": [],
          "explorers": ["https://explorer.apex.proofofplay.com"],
          "repositories": ["https://github.com/proofofplay"],
          "socialMedia": [
            "https://twitter.com/ProofOfPlay/",
            "https://discord.com/invite/piratenation",
            "https://piratenation.medium.com/"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400000
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1001d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86486400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 24d 16h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 2133288
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400000
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1000d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400000
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 11d 23h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1033656
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x074fFD20C6D8865752C997f4980Cf70F2a3Fbac6",
            "newVersion": true,
            "sinceTimestamp": "1708543048",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x074fFD20C6D8865752C997f4980Cf70F2a3Fbac6",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xCC6f49cff395c4d160C61112522700dcB007c41d"],
                "implementations": [
                  "0xB23214f241bdEb275f7dCBfbb1EA79349101d4B0"
                ]
              },
              "chain": "arbitrum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.apex.proofofplay.com",
          "defaultCallsPerMinute": 5000
        }
      }
    },
    {
      "type": "layer3",
      "id": "popboss",
      "createdAt": "1710836229",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x330F8fEB25f3427cABA32446728C36ae67f2135b",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x246bAB4F36095ABc74052Cc122c318298a9ef876"],
              "implementations": [
                "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x53D82686BC9827fEc03bcEe661B37b855A18EcA9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x490C4c92Ea9FF02EE8277222C66afD80Bfb1b7c1"],
              "implementations": ["0xB23214f241bdEb275f7dCBfbb1EA79349101d4B0"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x6eE94AD8057Fd7Ba4d47bb6278a261c8a9FD4E3f",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x490C4c92Ea9FF02EE8277222C66afD80Bfb1b7c1"],
              "implementations": ["0x18ed2d5bF7c5943bFd20a2995b9879E30c9E8dDa"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xEe30EfcaF812d10e1EFE25E9458f76a39DAD3239",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x490C4c92Ea9FF02EE8277222C66afD80Bfb1b7c1"],
              "implementations": ["0x8f6406781cC955398C45a48DcEfeEBDb2c8e2CaA"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xa4270256B160C3Ebec2d6914a906c7EC38D8d072",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x490C4c92Ea9FF02EE8277222C66afD80Bfb1b7c1"],
              "implementations": ["0x13BE515E44Eefaf3eBEFAD684F1FBB574Ac0A494"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x246bAB4F36095ABc74052Cc122c318298a9ef876",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x490C4c92Ea9FF02EE8277222C66afD80Bfb1b7c1"],
              "implementations": ["0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0xf3224F90c0A6138209a9EbaFd1971AD1E04eEb0D",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x490C4c92Ea9FF02EE8277222C66afD80Bfb1b7c1"],
              "implementations": ["0x5cA988F213EfbCB86ED7e2AACB0C15c91e648f8d"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xb20107bfB36D3B5AcA534aCAfbd8857b10b402a8",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x526a6E634aD36bB0007c4422586c135F1F9B525a",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0xe8709022B9C9D7347856c75910fe07e10C904446",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0xc555b2F1D559Fbb854569b33640990D178F94747",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x800dA62bE6626127F71B34E795286C34C04D6712",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x18ed2d5bF7c5943bFd20a2995b9879E30c9E8dDa#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x75EFAE926BcB72433C70fbfA76588F16338397De",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xd77c50bcc246B9E067A54Ead0B63300A71882c29",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "ConduitMultisig2",
          "description": "This is a Gnosis Safe with 2 / 7 threshold.  Has the executor role of the UpgradeExecutor and indirectly owns the ProxyAdmin (can upgrade the whole system).",
          "accounts": [
            {
              "address": "0x79C2abE3eBA9dc119318FdAaA48118e1CDB53F56",
              "type": "MultiSig"
            }
          ],
          "chain": "arbitrum",
          "references": null,
          "participants": [
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 5d 14h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Conduit", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Gaming"],
        "name": "Proof of Play Boss",
        "shortName": "PoP Boss",
        "slug": "popboss",
        "description": "Proof of Play Boss is a gaming-focused L3 settling on Arbitrum using the Orbit Stack and AnyTrust DA. It is the second L3 built by Proof of Play.",
        "links": {
          "websites": ["https://proofofplay.com/"],
          "apps": [
            "https://bridge.arbitrum.io/?destinationChain=pop-boss&sourceChain=arbitrum-one",
            "https://piratenation.game/"
          ],
          "documentation": [],
          "explorers": ["https://explorer.boss.proofofplay.com"],
          "repositories": ["https://github.com/proofofplay"],
          "socialMedia": [
            "https://x.com/ProofOfPlay/",
            "https://discord.com/invite/piratenation",
            "https://piratenation.medium.com/"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 24d 16h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 2133288
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 11d 23h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1033656
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x53D82686BC9827fEc03bcEe661B37b855A18EcA9",
            "newVersion": true,
            "sinceTimestamp": "1721252581",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x53D82686BC9827fEc03bcEe661B37b855A18EcA9",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x490C4c92Ea9FF02EE8277222C66afD80Bfb1b7c1"],
                "implementations": [
                  "0xB23214f241bdEb275f7dCBfbb1EA79349101d4B0"
                ]
              },
              "chain": "arbitrum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.boss.proofofplay.com",
          "defaultCallsPerMinute": 3000
        }
      }
    },
    {
      "type": "layer3",
      "isUnderReview": true,
      "id": "pmon",
      "createdAt": "1722587021",
      "hostChain": "arbitrum",
      "display": {
        "category": "Optimium",
        "provider": "Arbitrum",
        "name": "PMON Chain",
        "slug": "pmon",
        "description": "Polychain Monsters built an Orbit stack Optimium, housing the Onchain Monsters game.",
        "purposes": ["Gaming", "NFT"],
        "links": {
          "websites": ["https://protocolmonsterlabs.com/"],
          "apps": [
            "https://battle.polychainmonsters.com/",
            "https://bridge.arbitrum.io/?destinationChain=pmon-chain&sourceChain=arbitrum-one"
          ],
          "documentation": ["https://battle-docs.polychainmonsters.com/"],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://x.com/protocolmon",
            "https://discord.gg/protocolmon"
          ]
        }
      },
      "config": {
        "associatedTokens": ["PMON"],
        "escrows": [
          {
            "chain": "arbitrum",
            "address": "0x10B25719f4c0fA1BFF22431438E6b6315059548A",
            "sinceTimestamp": "1707462976",
            "tokens": "*"
          }
        ],
        "transactionApi": null
      },
      "stage": { "stage": "NotApplicable" },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": ["Arbitrum", "Celestia", "Orbit", "EVM", "AltLayer"]
    },
    {
      "type": "layer3",
      "id": "sanko",
      "createdAt": "1716893370",
      "contracts": {
        "addresses": [
          {
            "name": "OrbitProxyOFT1_2",
            "address": "0xa9Aa07F082D9c15D0B6D7e9e5B68b1f898399C29",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "OFT Adapter contract using the LayerZero v1 AMB for messaging. This contract can mint tokens on Sanko and steal tokens in the main Bridge escrow. Its security depends on LayerZero v1 security."
          },
          {
            "name": "RollupProxy",
            "address": "0x9A59EdF7080fdA05396373a85DdBf2cEBDB81Cd4",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x82d980E3f30E7c6EbD523AEdff2c0FaD3751b276"],
              "implementations": [
                "0xc326D023758d7D212d529D1E58D7f271CAe49fcf",
                "0xD92D49e8A2230E2C7a73c3ff4Df1AED09dA32a07"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x2f285781B8d58678a3483de52D618198E4d27532",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd18b1C6376633000c85541F7c15c591Ffe5f9556"],
              "implementations": ["0xC5Db571093C4600559e239497d147476F7543b15"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x24B68936C13A414cd91437aE7AA730321B9ff159",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd18b1C6376633000c85541F7c15c591Ffe5f9556"],
              "implementations": ["0x083c2b4D0C745224E8E484Dfd41eDC9b19f21Feb"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x718E2a83775343d5c0B1eE0676703cBAF30CaFCD",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd18b1C6376633000c85541F7c15c591Ffe5f9556"],
              "implementations": ["0x2675b9DEb473ECaC13ddd71dF8A0Ef13FeF6a75D"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x575d32f7ff0C72921645e302cb14d2757E300786",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd18b1C6376633000c85541F7c15c591Ffe5f9556"],
              "implementations": ["0xCa2F31F3C6553c2FD9897f7AA464406a431959A9"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x82d980E3f30E7c6EbD523AEdff2c0FaD3751b276",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd18b1C6376633000c85541F7c15c591Ffe5f9556"],
              "implementations": ["0x20C6be2A0429A82a7bF113905a29d36CF6753B10"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x1f269F38196484ef81e58C0144AaD2c5F6394bB4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xd18b1C6376633000c85541F7c15c591Ffe5f9556"],
              "implementations": ["0x63AB51383384a09734b8B8F6646647213bdD54aC"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xc78778b1D7416FB8211e864dBA3e277DF39f2c71",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0xF0981852f26053B6506582f819b54cF2DD6b8cC3",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0xdeC2bEA51D608C1Fb2cCBC4F654eE0ffF848A73d",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x6322893cf9Eb2A7cF5A2C34bd7cC77064e8fB9BE",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x19c077b3269D988f87DBe3E0FAE2937a3aA37De4",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "sanko",
        "chainId": 1996,
        "explorerUrl": "https://explorer.sanko.xyz/",
        "explorerApi": {
          "url": "https://explorer.sanko.xyz/api",
          "type": "blockscout"
        },
        "multicallContracts": [
          {
            "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
            "batchSize": 150,
            "sinceBlock": 38,
            "version": "3"
          }
        ],
        "minTimestampForTvl": "1712970000",
        "coingeckoPlatform": "sanko"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x083c2b4D0C745224E8E484Dfd41eDC9b19f21Feb#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x2f4dDaD3aB0AC4225fd8023EE07d04e2A758017a",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x795aA8E945b571c57b12E7b5B77De10A88a1FADe",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "Sanko Multisig",
          "description": "This is a Gnosis Safe with 4 / 6 threshold.  Rollup Owner: Can execute upgrades for the entire rollup system via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0x420B4d16119127E4b96E55CB8a9D0c2828a161BB",
              "type": "MultiSig"
            }
          ],
          "chain": "arbitrum",
          "references": null,
          "participants": [
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0x4919167EA334BE84B1604Cbc82A26A7746D5943e",
              "type": "EOA"
            },
            {
              "address": "0xC75725f4644D54865d11B78d3Ca6b7779FA61581",
              "type": "EOA"
            },
            {
              "address": "0x201598e7F51dD57FF41a1743aBd5892EaFED97a0",
              "type": "EOA"
            },
            {
              "address": "0x45931634c4496e9cdc3d0cCA700A387d581b6009",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "SankoOftMultisig",
          "description": "This is a Gnosis Safe with 2 / 4 threshold.  Can change security parameters of the DMT token (Sanko gas token) and its OFT (LayerZero) adapters. This includes the permission to mint unlimited tokens or steal tokens in the main bridge.",
          "accounts": [
            {
              "address": "0x2227E9C08ae00750e0a5eD8da09Fa321A9DD7185",
              "type": "MultiSig"
            }
          ],
          "chain": "arbitrum",
          "references": null,
          "participants": [
            {
              "address": "0x45931634c4496e9cdc3d0cCA700A387d581b6009",
              "type": "EOA"
            },
            {
              "address": "0x201598e7F51dD57FF41a1743aBd5892EaFED97a0",
              "type": "EOA"
            },
            {
              "address": "0x03eb90D1E10EEd08b0B3Ca1b3eb85FcFED3d94f4",
              "type": "EOA"
            },
            {
              "address": "0x82Ef0CBb725852D7CC30ADeA95415e23B8f433E3",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Caldera", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Gaming", "Social"],
        "name": "Sanko",
        "slug": "sanko",
        "description": "Sanko is an NFT and gaming-focused Orbit stack L3 on Arbitrum with AnyTrust DA and DMT as its native token, created by Sanko GameCorp.",
        "links": {
          "websites": ["https://sanko.xyz/"],
          "apps": ["https://sanko.xyz/bridge", "https://swap.sanko.xyz"],
          "documentation": ["https://sanko-1.gitbook.io/sanko-mainnet-docs/"],
          "explorers": [
            "https://sanko-mainnet.calderaexplorer.xyz/",
            "https://tools.sanko.xyz/",
            "https://explorer.sanko.xyz/"
          ],
          "repositories": [],
          "socialMedia": [
            "https://x.com/SankoGameCorp",
            "https://discord.gg/Cnz62Vfa2C",
            "https://t.me/sankogamecorp"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 25d 10h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 2199264
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["DMT"],
        "escrows": [
          {
            "address": "0xb4951c0C41CFceB0D195A95FE66280457A80a990",
            "newVersion": true,
            "sinceTimestamp": "1712958611",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xb4951c0C41CFceB0D195A95FE66280457A80a990",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xd18b1C6376633000c85541F7c15c591Ffe5f9556"],
                "implementations": [
                  "0xF5CE2B2a046f5C5440506F76d512375fdB301BCa"
                ]
              },
              "chain": "arbitrum",
              "description": "Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x2f285781B8d58678a3483de52D618198E4d27532",
            "newVersion": true,
            "sinceTimestamp": "1712958598",
            "tokens": ["DMT"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x2f285781B8d58678a3483de52D618198E4d27532",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xd18b1C6376633000c85541F7c15c591Ffe5f9556"],
                "implementations": [
                  "0xC5Db571093C4600559e239497d147476F7543b15"
                ]
              },
              "chain": "arbitrum",
              "description": "Contract managing Inboxes and Outboxes. It escrows DMT sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://mainnet.sanko.xyz",
          "defaultCallsPerMinute": 1500
        }
      }
    },
    {
      "type": "layer3",
      "id": "stack",
      "createdAt": "1710853988",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0xA39D53FCa52Efe9a034D1EC61E30151621F9b945#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "Data is stored on Celestia",
          "description": "Transactions roots are posted onchain and the full data is posted on Celestia.  Since the Blobstream bridge is not used, availability of the data is not verified against Celestia validators, meaning that the Sequencer can single-handedly publish unavailable roots.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the sequencer posts an unavailable transaction root.",
              "isCritical": true
            },
            {
              "category": "Funds can be lost if",
              "text": "the data is not available on the external provider.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "Introducing Blobstream: streaming modular DA to Ethereum",
              "href": "https://blog.celestia.org/introducing-blobstream/"
            },
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x39f15b577F4F9eD6b819169Ac9fa0bE6eD857258"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x1D9e8EcF1b3D0e773c2dE9f9B864d38322e5adb9#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0xA39D53FCa52Efe9a034D1EC61E30151621F9b945#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0xA39D53FCa52Efe9a034D1EC61E30151621F9b945#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x1D9e8EcF1b3D0e773c2dE9f9B864d38322e5adb9#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x1D9e8EcF1b3D0e773c2dE9f9B864d38322e5adb9#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x1D9e8EcF1b3D0e773c2dE9f9B864d38322e5adb9#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0xA39D53FCa52Efe9a034D1EC61E30151621F9b945#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0x7dCe2FEE5e30EFf298cD3d9B92649f00EBDfc104",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0x7dCe2FEE5e30EFf298cD3d9B92649f00EBDfc104",
              "type": "MultiSig"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0x28750b59d304e6ce7d3866eF9a0DbFBCfaE56A6E",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0xeC4Db0b5a1d70167034Da00e3D7Bc5B2CA05Fc77",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "StackMultisig",
          "description": "* This is a Gnosis Safe with 3 / 5 threshold. \n* Can act on behalf of ProxyAdmin.\n* Is a Challenger.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n* Can upgrade implementation of SystemConfig, OptimismPortal, L2OutputOracle (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x7dCe2FEE5e30EFf298cD3d9B92649f00EBDfc104",
              "type": "MultiSig"
            }
          ],
          "chain": "base",
          "references": null,
          "participants": [
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x28750b59d304e6ce7d3866eF9a0DbFBCfaE56A6E",
              "type": "EOA"
            }
          ],
          "chain": "base",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xeC4Db0b5a1d70167034Da00e3D7Bc5B2CA05Fc77",
              "type": "EOA"
            }
          ],
          "chain": "base",
          "description": "Is a Sequencer."
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "ProxyAdmin",
            "address": "0x25aBB510386A658c622280f488844BD3b485DC32",
            "upgradeability": null,
            "chain": "base",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of SystemConfig, OptimismPortal, L2OutputOracle.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "AddressManager",
            "address": "0x31f09c4a4151EeBB1c0Ac10003bF3b06f4Aa5668",
            "upgradeability": null,
            "chain": "base",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SystemConfig",
            "address": "0x52c901666Cfc8AeE9b46A3b7C101688351529B37",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x25aBB510386A658c622280f488844BD3b485DC32"],
              "implementations": ["0x34E6305Fe21a0Ed945177dcD36D7E6084F9f1BcC"]
            },
            "chain": "base",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["StackMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x727a91e8251A262A4ad5F2D5811c6cD862961759",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0xb079375dDB17FaBae0F3Ed6B9950f6cD626cE2a3"],
              "immutable": false
            },
            "chain": "base",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "OptimismPortal",
            "address": "0x752BE2A1c6DBe40884D7851CDC58c9cA54DCBD3E",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x25aBB510386A658c622280f488844BD3b485DC32"],
              "implementations": ["0x1D9e8EcF1b3D0e773c2dE9f9B864d38322e5adb9"]
            },
            "chain": "base",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["StackMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xbA256039AEdaD407692D8Deb366308BE6Bb2515C",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x25aBB510386A658c622280f488844BD3b485DC32"],
              "implementations": ["0xc69e1cbd4D68Fa9588F04030C7c03e1BC38D1Cb1"]
            },
            "chain": "base",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["StackMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "L2OutputOracle",
            "address": "0xCC61c26901E719B73273C1484e337cBAB84369EF",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x25aBB510386A658c622280f488844BD3b485DC32"],
              "implementations": ["0xA39D53FCa52Efe9a034D1EC61E30151621F9b945"]
            },
            "chain": "base",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["StackMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Celestia", "Base", "Conduit", "OPStack", "EVM"],
      "discoveryDrivenData": true,
      "hostChain": "base",
      "display": {
        "architectureImage": "opstack",
        "purposes": ["Universal", "Social"],
        "name": "Stack",
        "slug": "stack",
        "description": "Stack Chain is an Optimium settling on Base. It uses OP stack technology with Celestia for data availability.             Stack Chain is a blockchain for bringing points onchain, allowing brands to create and own their loyalty programs.",
        "links": {
          "websites": ["https://stack.so/"],
          "apps": ["https://bridge.stack.so"],
          "documentation": ["https://docs.stack.so"],
          "explorers": ["https://explorer.stack.so"],
          "repositories": ["https://github.com/stack-so/protocol-interfaces"],
          "socialMedia": [
            "https://twitter.com/stackdotso",
            "https://t.me/+RVFamOmYBo42NzFh",
            "https://stack.mirror.xyz/"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimium",
        "warning": "Fraud proof system is currently under development. Users need to trust the block proposer to submit correct L1 state roots."
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "dataAvailability": {
          "value": "External",
          "description": "Proof construction and state derivation fully rely on data that is posted on Celestia. Sequencer tx roots are not checked against the Blobstream bridge data roots onchain, but L2 nodes can verify data availability by running a Celestia light client.",
          "sentiment": "bad",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "Celestia",
          "sentiment": "warning",
          "description": "The data is posted to Celestia."
        },
        "bridge": {
          "value": "None",
          "sentiment": "bad",
          "description": "There is no bridge that can attest if the data has been made available."
        },
        "mode": "Transaction data (compressed)"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x752BE2A1c6DBe40884D7851CDC58c9cA54DCBD3E",
            "newVersion": true,
            "sinceTimestamp": "1709680185",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x752BE2A1c6DBe40884D7851CDC58c9cA54DCBD3E",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x25aBB510386A658c622280f488844BD3b485DC32"],
                "implementations": [
                  "0x1D9e8EcF1b3D0e773c2dE9f9B864d38322e5adb9"
                ]
              },
              "chain": "base",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "base",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xbA256039AEdaD407692D8Deb366308BE6Bb2515C",
            "newVersion": true,
            "sinceTimestamp": "1709680203",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xbA256039AEdaD407692D8Deb366308BE6Bb2515C",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x25aBB510386A658c622280f488844BD3b485DC32"],
                "implementations": [
                  "0xc69e1cbd4D68Fa9588F04030C7c03e1BC38D1Cb1"
                ]
              },
              "chain": "base",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "base",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.stack.so",
          "defaultCallsPerMinute": 1500
        }
      },
      "stateDerivation": null
    },
    {
      "type": "layer3",
      "id": "syndicateframe",
      "createdAt": "1711471599",
      "isUnderReview": false,
      "technology": {
        "stateCorrectness": {
          "name": "Fraud proofs are not enabled",
          "description": "OP Stack projects can use the OP fault proof system, already being deployed on some. This project though is not using fault proofs yet and is relying on the honesty of the permissioned Proposer and Challengers to ensure state correctness. The smart contract system permits invalid state roots.",
          "risks": [
            {
              "category": "Funds can be stolen if",
              "text": "an invalid state root is submitted to the system.",
              "isCritical": true
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, deleteL2Outputs function",
              "href": "https://etherscan.io/address/0x6042DE5a64709d8d4bBb227891AD886ECff49c6d#code"
            }
          ]
        },
        "dataAvailability": {
          "name": "All data required for proofs is published on chain",
          "description": "All the data that is used to construct the system state is published on chain in the form of cheap blobs or calldata. This ensures that it will be available for enough time.",
          "risks": [],
          "references": [
            {
              "text": "Derivation: Batch submission - OP Mainnet specs",
              "href": "https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-submission"
            },
            {
              "text": "BatchInbox - Etherscan address",
              "href": "https://etherscan.io/address/0x97395dd253E2d096A0CaA62a574895c3C2F2b2e0"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x44Ce95273E69246fe258b02a68E3a6FfCA66fdf2#code"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized operator",
          "description": "The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "L2OutputOracle.sol - Etherscan source code, CHALLENGER address",
              "href": "https://etherscan.io/address/0x6042DE5a64709d8d4bBb227891AD886ECff49c6d#code"
            },
            {
              "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER address",
              "href": "https://etherscan.io/address/0x6042DE5a64709d8d4bBb227891AD886ECff49c6d#code"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.",
          "risks": [],
          "references": [
            {
              "text": "Sequencing Window - OP Mainnet Specs",
              "href": "https://github.com/ethereum-optimism/optimism/blob/51eeb76efeb32b3df3e978f311188aa29f5e3e94/specs/glossary.md#sequencing-window"
            },
            {
              "text": "OptimismPortal.sol - Etherscan source code, depositTransaction function",
              "href": "https://etherscan.io/address/0x44Ce95273E69246fe258b02a68E3a6FfCA66fdf2#code"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [
              {
                "category": "Funds can be frozen if",
                "text": "the centralized validator goes down. Users cannot produce blocks themselves and exiting the system requires new block production.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "OptimismPortal.sol - Etherscan source code, proveWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x44Ce95273E69246fe258b02a68E3a6FfCA66fdf2#code"
              },
              {
                "text": "OptimismPortal.sol - Etherscan source code, finalizeWithdrawalTransaction function",
                "href": "https://etherscan.io/address/0x44Ce95273E69246fe258b02a68E3a6FfCA66fdf2#code"
              },
              {
                "text": "L2OutputOracle.sol - Etherscan source code, PROPOSER check",
                "href": "https://etherscan.io/address/0x6042DE5a64709d8d4bBb227891AD886ECff49c6d#code"
              }
            ]
          },
          {
            "name": "Forced exit",
            "description": "If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all withdrawals, including forced withdrawals from L1 and regular withdrawals initiated on L2. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.",
            "risks": [],
            "references": [
              {
                "text": "Forced withdrawal from an OP Stack blockchain",
                "href": "https://stack.optimism.io/docs/security/forced-withdrawal/"
              }
            ]
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.",
            "risks": [],
            "references": [
              {
                "text": "Introducing EVM Equivalence",
                "href": "https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Challenger",
          "description": "Challenger is an actor allowed to delete state roots proposed by a Proposer.",
          "accounts": [
            {
              "address": "0xdC545dDC657A1E2EDA8F6cBBE382927E3C9aA6E4",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Guardian",
          "description": "Guardian is an actor allowed to pause deposits and withdrawals.",
          "accounts": [
            {
              "address": "0xdC545dDC657A1E2EDA8F6cBBE382927E3C9aA6E4",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Proposer",
          "description": "Proposer is an actor allowed to post new state roots of current layer to the host chain.",
          "accounts": [
            {
              "address": "0xADE1F8C181934052fD1958F06B63Ef0D875803C5",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "Sequencer",
          "description": "Sequencer is an actor allowed to commit transactions from current layer to the host chain.",
          "accounts": [
            {
              "address": "0x63d02F40A14c54283D5Dc3451d3Ed4DC134833e5",
              "type": "EOA"
            }
          ],
          "fromRole": true
        },
        {
          "name": "SyndicateFrameMultisig",
          "description": "* This is a Gnosis Safe with 3 / 4 threshold. \n* Can act on behalf of ProxyAdmin.\n* Can change configuration of AddressManager (acting via ProxyAdmin) - set and change address mappings.\n* Can upgrade implementation of L2OutputOracle, OptimismPortal, SystemConfig (acting via ProxyAdmin).\n* Can upgrade implementation of L1StandardBridge (acting via ProxyAdmin) - upgrading bridge implementation allows to access all funds and change every system component.\n",
          "accounts": [
            {
              "address": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
              "type": "MultiSig"
            }
          ],
          "chain": "base",
          "references": null,
          "participants": [
            {
              "address": "0xD61640d06dC7A61C46d9515680b4DDd2AC51E9A9",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            },
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x4919167EA334BE84B1604Cbc82A26A7746D5943e",
              "type": "EOA"
            }
          ]
        },
        {
          "name": "EOA 1",
          "accounts": [
            {
              "address": "0x63d02F40A14c54283D5Dc3451d3Ed4DC134833e5",
              "type": "EOA"
            }
          ],
          "chain": "base",
          "description": "Is a Sequencer."
        },
        {
          "name": "EOA 2",
          "accounts": [
            {
              "address": "0xADE1F8C181934052fD1958F06B63Ef0D875803C5",
              "type": "EOA"
            }
          ],
          "chain": "base",
          "description": "Is a Proposer."
        },
        {
          "name": "EOA 3",
          "accounts": [
            {
              "address": "0xdC545dDC657A1E2EDA8F6cBBE382927E3C9aA6E4",
              "type": "EOA"
            }
          ],
          "chain": "base",
          "description": "* Is a Challenger.\n* Can change configuration of SystemConfig - it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.\n* Is a Guardian.\n"
        }
      ],
      "nativePermissions": null,
      "contracts": {
        "addresses": [
          {
            "name": "L1CrossDomainMessenger",
            "address": "0x0ED44be59Ea62a9960CB97f8aC54088304D05791",
            "upgradeability": {
              "proxyType": "resolved delegate proxy",
              "admins": [],
              "implementations": ["0x06DDDA853506cECa671a06136f955f7f042FD667"],
              "immutable": false
            },
            "chain": "base",
            "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function."
          },
          {
            "name": "L2OutputOracle",
            "address": "0x520D972B4A7C1CE4d5e01bCd4349a93a8AeaEAC5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xF5BD775557F3b8817C34Fc784971A0AF1a36DD8E"],
              "implementations": ["0x6042DE5a64709d8d4bBb227891AD886ECff49c6d"]
            },
            "chain": "base",
            "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
            "upgradableBy": ["SyndicateFrameMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "OptimismPortal",
            "address": "0x52fA397D799f1CE416a2089B964Aa293c347994F",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xF5BD775557F3b8817C34Fc784971A0AF1a36DD8E"],
              "implementations": ["0x44Ce95273E69246fe258b02a68E3a6FfCA66fdf2"]
            },
            "chain": "base",
            "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
            "upgradableBy": ["SyndicateFrameMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "AddressManager",
            "address": "0x9Bf9cd5aD745076b5bFb7Cc2d3b871532973C2c0",
            "upgradeability": null,
            "chain": "base",
            "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts."
          },
          {
            "name": "SystemConfig",
            "address": "0xc2dA6Afd69F0ce69313F01c73f77E6471f06b4E4",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xF5BD775557F3b8817C34Fc784971A0AF1a36DD8E"],
              "implementations": ["0x5581A42BAF9bd77e1c56aFB2c74dEF20dfe26f9A"]
            },
            "chain": "base",
            "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
            "upgradableBy": ["SyndicateFrameMultisig"],
            "upgradeDelay": "No delay"
          },
          {
            "name": "ProxyAdmin",
            "address": "0xF5BD775557F3b8817C34Fc784971A0AF1a36DD8E",
            "upgradeability": null,
            "chain": "base",
            "description": "* Can be used to configure AddressManager  - set and change address mappings.\n* Can be used to upgrade implementation of L2OutputOracle, OptimismPortal, SystemConfig.\n* Can be used to upgrade implementation of L1StandardBridge  - upgrading bridge implementation allows to access all funds and change every system component.\n"
          },
          {
            "name": "L1StandardBridge",
            "address": "0xF7Cb313CB6D146dAbB8c5E31798BDCeFc67B831b",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0xF5BD775557F3b8817C34Fc784971A0AF1a36DD8E"],
              "implementations": ["0xFF505c0Eb62C37901F53cCBf2973AAe75D26d0AE"]
            },
            "chain": "base",
            "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
            "upgradableBy": ["SyndicateFrameMultisig"],
            "upgradeDelay": "No delay"
          }
        ],
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ],
        "nativeAddresses": null
      },
      "milestones": [],
      "knowledgeNuggets": [
        {
          "title": "How Optimism compresses data",
          "url": "https://twitter.com/bkiepuszewski/status/1508740414492323840?s=20&t=vMgR4jW1ssap-A-MBsO4Jw",
          "thumbnail": "l2beat-03.jpg"
        },
        {
          "title": "Superchain Explainer",
          "url": "https://docs.optimism.io/stack/explainer",
          "thumbnail": "optimism-03.jpg"
        },
        {
          "title": "Modular Rollup Theory",
          "url": "https://www.youtube.com/watch?v=jnVjhp41pcc",
          "thumbnail": "modular-rollup.jpg"
        }
      ],
      "badges": ["Base", "Caldera", "OPStack", "EthereumBlobs", "EVM"],
      "discoveryDrivenData": true,
      "hostChain": "base",
      "display": {
        "architectureImage": "opstack",
        "purposes": ["Universal", "Social"],
        "name": "Syndicate Frame Chain",
        "shortName": "Frame Chain",
        "slug": "syndicateframe",
        "description": "Syndicate Frame Chain is an OP Stack L3 on Base for Farcaster Frame developers.",
        "links": {
          "websites": ["https://syndicate.io/blog/syndicate-frame-chain"],
          "apps": [
            "https://bridge-frame.syndicate.io/",
            "https://frame.syndicate.io/"
          ],
          "documentation": [
            "https://docs.syndicate.io/get-started/introduction"
          ],
          "explorers": ["https://explorer-frame.syndicate.io/"],
          "repositories": [
            "https://github.com/WillPapper/syndicate-farcaster-frame-starter"
          ],
          "socialMedia": [
            "https://warpcast.com/syndicate",
            "https://x.com/syndicateio"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "provider": "OP Stack",
        "category": "Optimistic Rollup",
        "warning": "Fraud proof system is currently under development. Users need to trust the block proposer to submit correct L1 state roots."
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "secondLine": "7d challenge period"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "None",
          "description": "Currently the system permits invalid state roots. More details in project overview.",
          "sentiment": "bad",
          "definingMetric": "-Infinity"
        },
        "dataAvailability": {
          "value": "Onchain",
          "description": "All of the data needed for proof construction is published on Ethereum L1.",
          "sentiment": "good",
          "definingMetric": "Infinity",
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -604800,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.",
          "sentiment": "good",
          "definingMetric": 43200,
          "sources": [{ "contract": "OptimismPortal", "references": [] }]
        },
        "proposerFailure": {
          "value": "Cannot withdraw",
          "description": "Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.",
          "sentiment": "bad",
          "definingMetric": "-Infinity",
          "sources": [{ "contract": "L2OutputOracle", "references": [] }]
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        },
        "validatedBy": {
          "value": "Ethereum",
          "description": "Smart contracts on Ethereum validate all bridge transfers.",
          "sentiment": "good"
        }
      },
      "stage": {
        "stage": "Stage 0",
        "missing": {
          "nextStage": "Stage 1",
          "requirements": [
            "The proof system is still under development.",
            "Users' withdrawals can be censored by the permissioned operators.",
            "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
          ]
        },
        "summary": [
          {
            "stage": "Stage 0",
            "requirements": [
              {
                "satisfied": true,
                "description": "The project calls itself a rollup."
              },
              {
                "satisfied": true,
                "description": "State roots are posted to Ethereum L1."
              },
              {
                "satisfied": true,
                "description": "Inputs for the state transition function are posted to Ethereum L1."
              },
              {
                "satisfied": "UnderReview",
                "description": "A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code."
              }
            ]
          },
          {
            "stage": "Stage 1",
            "requirements": [
              {
                "satisfied": false,
                "description": "The proof system is still under development."
              },
              {
                "satisfied": false,
                "description": "Users' withdrawals can be censored by the permissioned operators."
              },
              {
                "satisfied": false,
                "description": "Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."
              }
            ]
          },
          {
            "stage": "Stage 2",
            "requirements": [
              {
                "satisfied": false,
                "description": "Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."
              }
            ]
          }
        ],
        "message": {
          "type": "underReview",
          "text": "The requirement for available node software is under review"
        }
      },
      "dataAvailability": {
        "layer": {
          "value": "Ethereum (blobs or calldata)",
          "sentiment": "good",
          "description": "The data is posted to Ethereum as calldata or blobs."
        },
        "bridge": {
          "value": "Enshrined",
          "sentiment": "good",
          "description": "The validating bridge has access to all the data, as it is posted on chain."
        },
        "mode": "Transaction data (compressed)"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x52fA397D799f1CE416a2089B964Aa293c347994F",
            "newVersion": true,
            "sinceTimestamp": "1707369307",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x52fA397D799f1CE416a2089B964Aa293c347994F",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xF5BD775557F3b8817C34Fc784971A0AF1a36DD8E"],
                "implementations": [
                  "0x44Ce95273E69246fe258b02a68E3a6FfCA66fdf2"
                ]
              },
              "chain": "base",
              "description": "Main entry point for users depositing ETH.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "base",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xF7Cb313CB6D146dAbB8c5E31798BDCeFc67B831b",
            "newVersion": true,
            "sinceTimestamp": "1707369327",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xF7Cb313CB6D146dAbB8c5E31798BDCeFc67B831b",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0xF5BD775557F3b8817C34Fc784971A0AF1a36DD8E"],
                "implementations": [
                  "0xFF505c0Eb62C37901F53cCBf2973AAe75D26d0AE"
                ]
              },
              "chain": "base",
              "description": "Main entry point for users depositing ERC20 token that do not require custom gateway.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "base",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc-frame.syndicate.io",
          "defaultCallsPerMinute": 1500
        }
      },
      "stateDerivation": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "meliora",
      "createdAt": "1720191862",
      "display": {
        "name": "Meliora",
        "slug": "meliora",
        "description": "Meliora is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It is focused on the creation of an ecosystem of fixed-income/credit-based applications.",
        "purposes": ["Universal"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://meliorachain.io/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://twitter.com/meliorafnd"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "molten",
      "createdAt": "1716471996",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x0f28D76Ec5c62b502625351726b4A3E3F54FF5F0",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x92ff91308F5f1036435f23c2F4F136Bb7475425d"],
              "implementations": [
                "0xc326D023758d7D212d529D1E58D7f271CAe49fcf",
                "0xD92D49e8A2230E2C7a73c3ff4Df1AED09dA32a07"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0xE1d32C985825562edAa906fAC39295370Db72195",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8Ab2f49A085490c1592325eE32B6e6a4DA35D238"],
              "implementations": ["0xC5Db571093C4600559e239497d147476F7543b15"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x0fFe9ACC296ddd4De5F616Aa482C99fA4b41A3E2",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8Ab2f49A085490c1592325eE32B6e6a4DA35D238"],
              "implementations": ["0x1d182075d07744D71E37f77f1654165f6DAFad08"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x235000876bd58336C802B3546Fc0250f285fCc79",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8Ab2f49A085490c1592325eE32B6e6a4DA35D238"],
              "implementations": ["0x2675b9DEb473ECaC13ddd71dF8A0Ef13FeF6a75D"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xb255de22d39a26D4CbcAFd6Cf660ccaCa047e95B",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8Ab2f49A085490c1592325eE32B6e6a4DA35D238"],
              "implementations": ["0xCa2F31F3C6553c2FD9897f7AA464406a431959A9"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x92ff91308F5f1036435f23c2F4F136Bb7475425d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8Ab2f49A085490c1592325eE32B6e6a4DA35D238"],
              "implementations": ["0x20C6be2A0429A82a7bF113905a29d36CF6753B10"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x7BB97862CA342B5fbe2AE2cF2E954F6327f587b1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x8Ab2f49A085490c1592325eE32B6e6a4DA35D238"],
              "implementations": ["0x935239e066F4F449D87D600e6d7c1a4F24c50f97"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xD16048EC58016FAbaC4d4E4C1203e49c0d9090E4",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x0aE035b3aAFFd8419d043920635Fe9CAdf179615",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0xF07A4a947E1ca7B9e46D99Dbe625C30f5b60C706",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x8D90460169D34d34a441F765A246a3C7f54C77C1",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0xd49141eB2c63D210b70542D6CE8453b049aab03A",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x1d182075d07744D71E37f77f1654165f6DAFad08#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x451f05C41BC5CC10d7D63ed88bA0A522FE183074",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x152FFeF04881BD1390D2A52009f42d56EaC7AA03",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "Caldera Multisig",
          "description": "This is a Gnosis Safe with 3 / 5 threshold.  Rollup Owner: Can execute upgrades for the entire rollup system via the UpgradeExecutor.",
          "accounts": [
            {
              "address": "0x6FD149B3d41fd860B9Da1A6fE54e902eF41F68BF",
              "type": "MultiSig"
            }
          ],
          "chain": "arbitrum",
          "references": null,
          "participants": [
            {
              "address": "0xD61640d06dC7A61C46d9515680b4DDd2AC51E9A9",
              "type": "EOA"
            },
            {
              "address": "0xbf853295743511e8DC5F03809d209C33fC136d24",
              "type": "EOA"
            },
            {
              "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
              "type": "EOA"
            },
            {
              "address": "0x4919167EA334BE84B1604Cbc82A26A7746D5943e",
              "type": "EOA"
            },
            {
              "address": "0x356000Cec4fC967f8FC372381D983426760A0391",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Caldera", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "name": "Molten Network",
        "shortName": "Molten",
        "slug": "molten",
        "description": "Molten is an Orbit stack L3 on Arbitrum with AnyTrust DA, created by the UniDex team.",
        "links": {
          "websites": ["https://moltennetwork.com/"],
          "apps": [
            "https://molten.calderabridge.xyz/",
            "https://leverage.unidex.exchange/"
          ],
          "documentation": ["https://docs.unidex.exchange/appchain/markdown"],
          "explorers": ["https://molten.calderaexplorer.xyz"],
          "repositories": [],
          "socialMedia": [
            "https://x.com/moltenl3",
            "https://discord.gg/moltennetwork",
            "https://mirror.xyz/unidexexchange.eth",
            "https://t.me/unidexfinance"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 25d 10h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 2199264
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 6d 8h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "6d 8h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1099632
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["MOLTEN"],
        "escrows": [
          {
            "address": "0x5a6f8ea5e1028C80CB98Fd8916afBBC4E6b23D80",
            "newVersion": true,
            "sinceTimestamp": "1712019098",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x5a6f8ea5e1028C80CB98Fd8916afBBC4E6b23D80",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x8Ab2f49A085490c1592325eE32B6e6a4DA35D238"],
                "implementations": [
                  "0x652F65f950b71d7aD04AffB1725F43786ed5f6Cc"
                ]
              },
              "chain": "arbitrum",
              "description": "Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.",
              "upgradableBy": null,
              "upgradeDelay": null
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0xE1d32C985825562edAa906fAC39295370Db72195",
            "newVersion": true,
            "sinceTimestamp": "1712019082",
            "tokens": ["MOLTEN"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xE1d32C985825562edAa906fAC39295370Db72195",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x8Ab2f49A085490c1592325eE32B6e6a4DA35D238"],
                "implementations": [
                  "0xC5Db571093C4600559e239497d147476F7543b15"
                ]
              },
              "chain": "arbitrum",
              "description": "Contract managing Inboxes and Outboxes. It escrows MOLTEN sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://molten.calderachain.xyz/http",
          "defaultCallsPerMinute": 1500
        }
      }
    },
    {
      "type": "layer3",
      "isUnderReview": true,
      "id": "muster",
      "createdAt": "1718609683",
      "hostChain": "arbitrum",
      "display": {
        "name": "Muster",
        "slug": "muster",
        "category": "Optimium",
        "description": "Muster Network is an Arbitrum Orbit gaming chain.",
        "purposes": ["Gaming"],
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://cometh.io/"],
          "apps": [
            "https://bridge.arbitrum.io/?destinationChain=muster&sourceChain=arbitrum-one"
          ],
          "documentation": ["https://docs.cometh.io/marketplace"],
          "explorers": [],
          "repositories": ["https://github.com/cometh-hq"],
          "socialMedia": ["https://x.com/Cometh", "https://blog.cometh.io/"]
        },
        "activityDataSource": "Blockchain RPC"
      },
      "config": {
        "associatedTokens": null,
        "escrows": [],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://muster.alt.technology",
          "defaultCallsPerMinute": 1500
        }
      },
      "stage": { "stage": "NotApplicable" },
      "riskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "dataAvailability": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "exitWindow": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "sequencerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "proposerFailure": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "destinationToken": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        },
        "validatedBy": {
          "value": "Under Review",
          "description": "This risk is currently under review.",
          "sentiment": "UnderReview"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": [],
        "isUnderReview": true
      },
      "contracts": { "isUnderReview": true, "addresses": [], "risks": [] },
      "chainConfig": null,
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "mvchain",
      "createdAt": "1720191862",
      "display": {
        "name": "MV Chain",
        "slug": "mvchain",
        "description": "MV Chain is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It is focused on creating a better gaming- and metaverse experience.",
        "purposes": ["Gaming"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://genso.game/en/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/genso_meta"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "mxc",
      "createdAt": "1710847645",
      "display": {
        "name": "MXC Moonchain zkEVM",
        "shortName": "MXC",
        "slug": "mxc",
        "provider": "Taiko",
        "description": "The MXC Moonchain zkEVM is an IoT-centric L3 on Arbitrum forked from the Taiko codebase. The review of this chain is delayed, see https://github.com/l2beat/l2beat/issues/4560 for more information.",
        "purposes": ["Universal", "IoT"],
        "category": "ZK Rollup",
        "links": {
          "websites": ["https://mxc.org/"],
          "apps": [
            "https://erc20.moonchain.com/",
            "https://bridge.mxc.com/",
            "https://mxc.org/axs-app"
          ],
          "documentation": ["https://doc.mxc.com"],
          "explorers": ["https://explorer.moonchain.com"],
          "repositories": ["https://github.com/MXCzkEVM"],
          "socialMedia": [
            "https://x.com/mxcfoundation",
            "https://discord.com/invite/mxcfoundation",
            "https://t.me/mxcfoundation",
            "https://linkedin.com/company/mxc-foundation/",
            "https://facebook.com/MXCfoundation/",
            "https://youtube.com/c/MXCFoundation"
          ]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "unite",
      "createdAt": "1722863398",
      "display": {
        "name": "Unite",
        "slug": "unite",
        "description": "Unite Blockchain is a revolutionary Layer 3 (L3) EVM-compatible blockchain, designed to transform the landscape of mobile web3 gaming. It is the first L3 blockchain solution for Mass-Market Mobile Games.",
        "purposes": ["Gaming"],
        "category": "Optimistic Rollup",
        "provider": "OP Stack",
        "links": {
          "documentation": ["https://unite-1.gitbook.io/unite-docs"],
          "repositories": [],
          "socialMedia": ["https://x.com/uniteio"],
          "websites": ["https://unite.io/"],
          "apps": [],
          "explorers": []
        }
      },
      "hostChain": "base",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "l3x",
      "createdAt": "1718370384",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0xb75A0a5812303cBB198d4f0BcA7CA38f17b8783e",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x4D0D8724ff2303A1679689a9Cc8e2A62f821e0E3"],
              "implementations": [
                "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0x59E088d827CB7983Cd0CC64312E472D7cc8a4F44",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x29994207C5AeDc83F27c5dc16E468f328832d42d"],
              "implementations": ["0xB23214f241bdEb275f7dCBfbb1EA79349101d4B0"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xB9450b512Fd3454e9C1a2593C5DF9E71344b5653",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x29994207C5AeDc83F27c5dc16E468f328832d42d"],
              "implementations": ["0x18ed2d5bF7c5943bFd20a2995b9879E30c9E8dDa"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x80de5c4ccDfb7b6a250A9588C2d80F62a2B7d13F",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x29994207C5AeDc83F27c5dc16E468f328832d42d"],
              "implementations": ["0x8f6406781cC955398C45a48DcEfeEBDb2c8e2CaA"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0x1526DAacDAf3EE81E5ae087E0DA8677E8c677CE5",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x29994207C5AeDc83F27c5dc16E468f328832d42d"],
              "implementations": ["0x13BE515E44Eefaf3eBEFAD684F1FBB574Ac0A494"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x4D0D8724ff2303A1679689a9Cc8e2A62f821e0E3",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x29994207C5AeDc83F27c5dc16E468f328832d42d"],
              "implementations": ["0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x211C9893653Aea2088E34765e7039617E95fD8fD",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x29994207C5AeDc83F27c5dc16E468f328832d42d"],
              "implementations": ["0x5cA988F213EfbCB86ED7e2AACB0C15c91e648f8d"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xb20107bfB36D3B5AcA534aCAfbd8857b10b402a8",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x526a6E634aD36bB0007c4422586c135F1F9B525a",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0xe8709022B9C9D7347856c75910fe07e10C904446",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0xc555b2F1D559Fbb854569b33640990D178F94747",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x800dA62bE6626127F71B34E795286C34C04D6712",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": {
        "name": "l3x",
        "chainId": 12324,
        "explorerUrl": "https://explorer.l3x.com/",
        "explorerApi": {
          "url": "https://explorer.l3x.com/api",
          "type": "blockscout"
        },
        "multicallContracts": [],
        "minTimestampForTvl": "1714618907",
        "coingeckoPlatform": "l3x"
      },
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x18ed2d5bF7c5943bFd20a2995b9879E30c9E8dDa#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xd987004738Ae33732ecf68613b1b7aFd1df7C11c",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xfc48f0786b3fA7353F63Acc40973857554A51cA2",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "RollupOwnerEOA",
          "accounts": [
            {
              "address": "0x5e31608B400F45846043E93747D72A1a02c5a2f5",
              "type": "EOA"
            }
          ],
          "description": "This address has the Executor role and can upgrade the rollup contracts (via ProxyAdmin) without delay, potentially stealing all funds."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 1d, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal"],
        "redWarning": "Critical contracts can be upgraded by an EOA which could result in the loss of all funds.",
        "name": "L3X",
        "slug": "l3x",
        "description": "L3X is an Orbit stack Appchain on Arbitrum focusing on DeFi (leveraged trading and liquid restaking).",
        "links": {
          "websites": ["https://l3x.com/"],
          "apps": [
            "https://bridge.arbitrum.io/?destinationChain=l3x-network&sourceChain=arbitrum-one"
          ],
          "documentation": ["https://docs.l3x.com/"],
          "explorers": ["https://explorer.l3x.com/"],
          "repositories": [],
          "socialMedia": [
            "https://t.me/l3x_protocol",
            "https://x.com/l3x_protocol"
          ]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 1d challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "1d challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 20d 2h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1735848
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 1d challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "1d challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 7d 8h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 636216
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0x4fF3E70f30f0394Ad62428751Fe3858740595908",
            "newVersion": true,
            "sinceTimestamp": "1714620855",
            "tokens": "*",
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x4fF3E70f30f0394Ad62428751Fe3858740595908",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x29994207C5AeDc83F27c5dc16E468f328832d42d"],
                "implementations": [
                  "0x1d720642e63cB0f50be637e16E0f78B2D1b93f16"
                ]
              },
              "chain": "arbitrum",
              "description": "Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, \"wrapped\" token will be minted.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          },
          {
            "address": "0x0809F0Ee8e72b2e2069e0f618cBbCB2399D452c7",
            "sinceTimestamp": "1713781465",
            "includeInTotal": false,
            "source": "external",
            "tokens": "*",
            "chain": "arbitrum"
          },
          {
            "address": "0x59E088d827CB7983Cd0CC64312E472D7cc8a4F44",
            "newVersion": true,
            "sinceTimestamp": "1714618907",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0x59E088d827CB7983Cd0CC64312E472D7cc8a4F44",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x29994207C5AeDc83F27c5dc16E468f328832d42d"],
                "implementations": [
                  "0xB23214f241bdEb275f7dCBfbb1EA79349101d4B0"
                ]
              },
              "chain": "arbitrum",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "arbitrum",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc-mainnet.l3x.com",
          "defaultCallsPerMinute": 1500
        }
      }
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "lumiterra",
      "createdAt": "1728665516",
      "display": {
        "name": "Lumiterra",
        "slug": "lumiterra",
        "category": "Optimium",
        "description": "Lumiterra is a multiplayer open-world survival crafting game built on L3 Arbitrum Orbit chain.",
        "purposes": ["Gaming"],
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://lumiterra.net/"],
          "apps": ["https://bridge.layerlumi.com/?l2ChainId=94168"],
          "documentation": [
            "https://docs.lumiterra.net/docs/overview/mainnet-beta/beta-test-arbiturm"
          ],
          "explorers": [],
          "repositories": [],
          "socialMedia": [
            "https://x.com/LumiterraGame",
            "https://discord.com/invite/q3P5hjqsuE"
          ]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "oursong",
      "createdAt": "1720191862",
      "display": {
        "name": "Oursong",
        "slug": "oursong",
        "description": "Oursong is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It aims to transform the music industry with an automated copyright management system designed for the AI era, streamlining registration, licensing, and royalty distribution for creators.",
        "purposes": ["Music"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://oursong.com/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/oursong"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "playblock",
      "createdAt": "1720191862",
      "contracts": {
        "addresses": [
          {
            "name": "ProxyAdmin",
            "address": "0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91",
            "upgradeability": null,
            "chain": "nova",
            "description": "This contract can upgrade the implementations of the rollup proxies."
          },
          {
            "name": "RollupProxy",
            "address": "0x04ea347cC6A258A7F65D67aFb60B1d487062A1d0",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0x0611b78A42903a537BE7a2f9a8783BE39AC63cD9"],
              "implementations": [
                "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
              ]
            },
            "chain": "nova",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0xD4FE46D2533E7d03382ac6cACF0547F336e59DC0",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "nova",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0xe347C1223381b9Dcd6c0F61cf81c90175A7Bae77",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"]
            },
            "chain": "nova",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0xFF55fB76F5671dD9eB6c62EffF8D693Bb161a3ad",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "nova",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xA597e0212971e65f53f288Ff1fFd26A6C8201f83",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x302275067251F5FcdB9359Bda735fD8f7A4A54c0"]
            },
            "chain": "nova",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0x0611b78A42903a537BE7a2f9a8783BE39AC63cD9",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]
            },
            "chain": "nova",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x383eFE8D410285c5CbE1B4F296022640759aA834",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
              "implementations": ["0x09824fe72BFF474d16D9c2774432E381BBD60662"]
            },
            "chain": "nova",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
            "upgradeability": null,
            "chain": "nova",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0xDf94F0474F205D086dbc2e66D69a856FCf520622",
            "upgradeability": null,
            "chain": "nova",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
            "upgradeability": null,
            "chain": "nova",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
            "upgradeability": null,
            "chain": "nova",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x1135265fE014D3FA32B3507E325642B92aFFeAEb",
            "upgradeability": null,
            "chain": "nova",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 2.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://nova.arbiscan.io/address/0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0xe603d3FcB75b0Af72F0e616d002091109d7ECc5b",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "nova"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0x76a197539eF9670c75F36997b8f1DeA593A1b827",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "nova"
        },
        {
          "name": "RollupOwnerEOA",
          "accounts": [
            {
              "address": "0x10Fe3cb853F7ef551E1598d91436e95d41Aea45a",
              "type": "EOA"
            }
          ],
          "description": "This address has the Executor role and can upgrade the rollup contracts (via ProxyAdmin) without delay, potentially stealing all funds."
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 30m, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Nova", "Gelato", "Orbit", "EVM"],
      "hostChain": "nova",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Gaming"],
        "redWarning": "Critical contracts can be upgraded by an EOA which could result in the loss of all funds.",
        "name": "PlayBlock",
        "slug": "playblock",
        "description": "PlayBlock is an Orbit stack Layer 3 on Arbitrum Nova. It is built by the team behind Playnance, and is focused on gasless gaming and gambling.",
        "links": {
          "websites": ["https://playnance.com/"],
          "apps": [],
          "documentation": [],
          "explorers": ["https://explorer.playblock.io/"],
          "repositories": ["https://github.com/playnance-games/PlayBlock"],
          "socialMedia": ["https://twitter.com/Playnancetech"]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/2 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/2 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 30m challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "30m challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 19d 2h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1651248
        },
        "validatedBy": {
          "value": "Nova",
          "description": "Smart contracts on nova validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 30m challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "30m challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/2 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 0.5
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 6d 9h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 551616
        },
        "validatedBy": {
          "value": "Nova",
          "description": "Smart contracts on nova validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": null,
        "escrows": [
          {
            "address": "0xD4FE46D2533E7d03382ac6cACF0547F336e59DC0",
            "newVersion": true,
            "sinceTimestamp": "1709904018",
            "tokens": ["ETH"],
            "excludedTokens": null,
            "premintedTokens": null,
            "contract": {
              "name": null,
              "address": "0xD4FE46D2533E7d03382ac6cACF0547F336e59DC0",
              "upgradeability": {
                "proxyType": "EIP1967 proxy",
                "admins": ["0x27C7Bfd2cC11429e9b80c443b42FDBe4754F6c91"],
                "implementations": [
                  "0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"
                ]
              },
              "chain": "nova",
              "description": "Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.",
              "upgradableBy": ["ProxyAdmin"],
              "upgradeDelay": "No delay"
            },
            "isUpcoming": null,
            "chain": "nova",
            "includeInTotal": false,
            "source": null,
            "bridgedUsing": null,
            "isHistorical": null,
            "untilTimestamp": null,
            "sharedEscrow": null
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://playnance.drpc.org/",
          "defaultCallsPerMinute": 1500
        }
      }
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "songprotocol",
      "createdAt": "1720191862",
      "display": {
        "name": "Song Protocol",
        "slug": "song-protocol",
        "description": "Song Protocol is an upcoming Layer 3 on Arbitrum, built on the Orbit stack. It is designed to democratize music collaboration and enable innovation for apps utilizing music, all while removing the hassle and expense of copyright issues.",
        "purposes": ["Music"],
        "category": "Optimistic Rollup",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://songprotocol.org/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/songprotocol"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "superposition",
      "createdAt": "1720082709",
      "display": {
        "name": "Superposition",
        "slug": "superposition",
        "description": "Superposition is an upcoming Layer 3 powered by Arbitrum Orbit. It is the ultimate yield centric blockchain that pays users and developers to use it. Superposition offers novel incentive mechanisms such as Utility Mining and Super Assets and an native on-chain order book built using Stylus that provides shared liquidity for the ecosystem.",
        "purposes": ["Universal"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://superposition.so/"],
          "apps": [],
          "documentation": [],
          "explorers": [],
          "repositories": [],
          "socialMedia": ["https://x.com/Superpositionso"]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "isUpcoming": true,
      "type": "layer3",
      "id": "syndr",
      "createdAt": "1720082709",
      "display": {
        "name": "Syndr",
        "slug": "syndr",
        "description": "Syndr is an upcoming Layer 3 - an institutional-grade, high-performance Options and Futures exchange powered by Arbitrum Orbit.",
        "purposes": ["Universal"],
        "category": "Optimium",
        "provider": "Arbitrum",
        "links": {
          "websites": ["https://syndr.com/"],
          "apps": [],
          "documentation": ["https://docs.syndr.com"],
          "explorers": [],
          "repositories": ["https://github.com/0xSyndr"],
          "socialMedia": [
            "https://x.com/SyndrHQ",
            "https://medium.com/syndr",
            "https://t.me/syndr_official"
          ]
        }
      },
      "hostChain": "arbitrum",
      "config": { "escrows": [] },
      "riskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "dataAvailability": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "exitWindow": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "sequencerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "proposerFailure": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "destinationToken": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        },
        "validatedBy": {
          "value": "",
          "description": "No information available.",
          "sentiment": "neutral"
        }
      },
      "technology": {
        "stateCorrectness": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "dataAvailability": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "operator": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "forceTransactions": {
          "name": "Empty",
          "description": "No information available.",
          "references": [],
          "risks": []
        },
        "exitMechanisms": []
      },
      "contracts": { "addresses": [], "risks": [] },
      "badges": null
    },
    {
      "type": "layer3",
      "id": "winr",
      "createdAt": "1720191862",
      "contracts": {
        "addresses": [
          {
            "name": "RollupProxy",
            "address": "0x2633ea91d15BeE85105C9b27E068f406F2F36a4a",
            "upgradeability": {
              "proxyType": "Arbitrum proxy",
              "admins": ["0xc5d17f6e0025a23c0AAFf7832Cc531B3034602DA"],
              "implementations": [
                "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
                "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
              ]
            },
            "chain": "arbitrum",
            "description": "Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
          },
          {
            "name": "Bridge",
            "address": "0xF3f01622Ac969156760c32190995F9dC5b3eb7FA",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x802c7B6585d20cb69524EF23fCbF919F671F808a"],
              "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"]
            },
            "chain": "arbitrum",
            "description": "Contract managing Inboxes and Outboxes. It escrows the native token used for gas on the chain."
          },
          {
            "name": "SequencerInbox",
            "address": "0x8AeDdE55Cb361e73a0B0c0cF2A5bB35E97a20456",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x802c7B6585d20cb69524EF23fCbF919F671F808a"],
              "implementations": ["0x7a299aD29499736994Aa3a9aFa3f476445FAEB2c"]
            },
            "chain": "arbitrum",
            "description": "Main entry point for the Sequencer submitting transaction batches."
          },
          {
            "name": "Inbox",
            "address": "0x4FeBaEF286Ca477402dafCEeB17C64de481aFB42",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x802c7B6585d20cb69524EF23fCbF919F671F808a"],
              "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"]
            },
            "chain": "arbitrum",
            "description": "Entry point for users depositing ETH and sending L1 -> L2 messages."
          },
          {
            "name": "Outbox",
            "address": "0xBA99217992620b76aae0D574c70bD313B30D3D1d",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x802c7B6585d20cb69524EF23fCbF919F671F808a"],
              "implementations": ["0x302275067251F5FcdB9359Bda735fD8f7A4A54c0"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows L2->L1 calls, i.e. messages initiated on L2 which eventually resolve in execution on L1."
          },
          {
            "name": "UpgradeExecutor",
            "address": "0xc5d17f6e0025a23c0AAFf7832Cc531B3034602DA",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x802c7B6585d20cb69524EF23fCbF919F671F808a"],
              "implementations": ["0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"]
            },
            "chain": "arbitrum",
            "description": "Contract allowed to upgrade the system."
          },
          {
            "name": "ChallengeManager",
            "address": "0x0E40E41E6095A4f0607144a52d31C2F11a3FF1a1",
            "upgradeability": {
              "proxyType": "EIP1967 proxy",
              "admins": ["0x802c7B6585d20cb69524EF23fCbF919F671F808a"],
              "implementations": ["0x5cA988F213EfbCB86ED7e2AACB0C15c91e648f8d"]
            },
            "chain": "arbitrum",
            "description": "Contract that allows challenging invalid state roots. Can be called through the RollupProxy."
          },
          {
            "name": "OneStepProofEntry",
            "address": "0xb20107bfB36D3B5AcA534aCAfbd8857b10b402a8",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMemory",
            "address": "0x526a6E634aD36bB0007c4422586c135F1F9B525a",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverMath",
            "address": "0xe8709022B9C9D7347856c75910fe07e10C904446",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProverHostIo",
            "address": "0xc555b2F1D559Fbb854569b33640990D178F94747",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          },
          {
            "name": "OneStepProver0",
            "address": "0x800dA62bE6626127F71B34E795286C34C04D6712",
            "upgradeability": null,
            "chain": "arbitrum",
            "description": "Contract used to perform the last step of a fraud proof."
          }
        ],
        "nativeAddresses": null,
        "risks": [
          {
            "category": "Funds can be stolen if",
            "text": "a contract receives a malicious code upgrade. There is no delay on code upgrades.",
            "isCritical": true
          }
        ]
      },
      "chainConfig": null,
      "technology": {
        "stateCorrectness": null,
        "dataAvailability": {
          "name": "Data is not stored on chain",
          "description": "Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 1 out of 1.",
          "risks": [
            {
              "category": "Funds can be lost if",
              "text": "the external data becomes unavailable.",
              "isCritical": true
            },
            {
              "category": "Users can be censored if",
              "text": "the committee restricts their access to the external data."
            }
          ],
          "references": [
            {
              "text": "Inside AnyTrust - Arbitrum documentation",
              "href": "https://developer.offchainlabs.com/inside-anytrust"
            }
          ]
        },
        "operator": {
          "name": "The system has a centralized sequencer",
          "description": "While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.",
          "risks": [
            {
              "category": "MEV can be extracted if",
              "text": "the operator exploits their centralized position and frontruns user transactions."
            }
          ],
          "references": [
            {
              "text": "Sequencer - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"
            }
          ]
        },
        "forceTransactions": {
          "name": "Users can force any transaction",
          "description": "Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.",
          "risks": [],
          "references": [
            {
              "text": "SequencerInbox.sol - Etherscan source code, forceInclusion function",
              "href": "https://arbiscan.io/address/0x7a299aD29499736994Aa3a9aFa3f476445FAEB2c#code"
            },
            {
              "text": "Sequencer Isn’t Doing Its Job - Arbitrum documentation",
              "href": "https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"
            }
          ]
        },
        "exitMechanisms": [
          {
            "name": "Regular exit",
            "description": "The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.",
            "risks": [],
            "references": [
              {
                "text": "Transaction lifecycle - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/tx-lifecycle"
              },
              {
                "text": "L2 to L1 Messages - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"
              },
              {
                "text": "Mainnet for everyone - Arbitrum Blog",
                "href": "https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"
              }
            ]
          },
          {
            "name": "Tradeable Bridge Exit",
            "description": "When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.",
            "risks": [],
            "references": [
              {
                "text": "Tradeable Bridge Exits - Arbitrum documentation",
                "href": "https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"
              }
            ]
          },
          {
            "name": "Autonomous exit",
            "description": "Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.",
            "risks": [],
            "references": []
          }
        ],
        "otherConsiderations": [
          {
            "name": "EVM compatible smart contracts are supported",
            "description": "Arbitrum One uses Nitro technology that allows running fraud proofs by executing EVM code on top of WASM.",
            "risks": [
              {
                "category": "Funds can be lost if",
                "text": "there are mistakes in the highly complex Nitro and WASM one-step prover implementation."
              }
            ],
            "references": [
              {
                "text": "Inside Arbitrum Nitro",
                "href": "https://developer.offchainlabs.com/inside-arbitrum-nitro/"
              }
            ]
          }
        ]
      },
      "permissions": [
        {
          "name": "Sequencers",
          "accounts": [
            {
              "address": "0x1A48A9e82dDb9cd157a67493Cc5E246D0cDd8307",
              "type": "EOA"
            }
          ],
          "description": "Central actors allowed to submit transaction batches to L1.",
          "chain": "arbitrum"
        },
        {
          "name": "Validators/Proposers",
          "accounts": [
            {
              "address": "0xA7bDF7f042C8DED17C0573657da4d920Df9a7d1e",
              "type": "EOA"
            }
          ],
          "description": "They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.",
          "chain": "arbitrum"
        },
        {
          "name": "ConduitMultisig2",
          "description": "This is a Gnosis Safe with 2 / 7 threshold.  Can upgrade any system contract and potentially steal all funds.",
          "accounts": [
            {
              "address": "0x79C2abE3eBA9dc119318FdAaA48118e1CDB53F56",
              "type": "MultiSig"
            }
          ],
          "chain": "arbitrum",
          "references": null,
          "participants": [
            {
              "address": "0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
              "type": "EOA"
            },
            {
              "address": "0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
              "type": "EOA"
            },
            {
              "address": "0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
              "type": "EOA"
            },
            {
              "address": "0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
              "type": "EOA"
            },
            {
              "address": "0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
              "type": "EOA"
            },
            {
              "address": "0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
              "type": "EOA"
            },
            {
              "address": "0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
              "type": "EOA"
            }
          ]
        }
      ],
      "nativePermissions": null,
      "stateDerivation": null,
      "stateValidation": {
        "description": "Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.",
        "categories": [
          {
            "title": "State root proposals",
            "description": "Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 0.1 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.",
            "risks": [
              {
                "category": "Funds can be stolen if",
                "text": "none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.",
                "isCritical": true
              }
            ],
            "references": [
              {
                "text": "How is fraud proven - Arbitrum documentation FAQ",
                "href": "https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"
              }
            ]
          },
          {
            "title": "Challenges",
            "description": "A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 5d 14h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.",
            "references": [
              {
                "text": "Fraud Proof Wars: Arbitrum Classic",
                "href": "https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"
              }
            ]
          }
        ]
      },
      "upgradesAndGovernance": null,
      "milestones": [],
      "knowledgeNuggets": [],
      "badges": ["DAC", "Arbitrum", "Conduit", "Orbit", "EVM"],
      "hostChain": "arbitrum",
      "display": {
        "stateValidationImage": "orbit",
        "purposes": ["Universal", "Gaming"],
        "name": "WINR",
        "slug": "winr",
        "description": "WINR is a Layer 3 on Arbitrum, based on the Orbit stack. It is focused on building a decentralized iGaming infrastructure.",
        "links": {
          "websites": ["https://winr.games/"],
          "apps": ["https://just.bet/"],
          "documentation": ["https://docs.winr.games/"],
          "explorers": ["https://explorer.winr.games/"],
          "repositories": [],
          "socialMedia": ["https://x.com/WINRProtocol"]
        },
        "activityDataSource": "Blockchain RPC",
        "warning": "Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.",
        "provider": "Arbitrum",
        "category": "Optimium"
      },
      "stage": { "stage": "NotApplicable" },
      "dataAvailability": {
        "layer": {
          "value": "DAC",
          "sentiment": "warning",
          "description": "The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."
        },
        "bridge": {
          "value": "1/1 DAC Members",
          "sentiment": "bad",
          "description": "There is a threshold of 1/1 members that must sign and attest that the data is correct and available."
        },
        "mode": "Transaction data (compressed)"
      },
      "stackedRiskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 2d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 172800
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 24d 16h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 2133288
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "riskView": {
        "stateValidation": {
          "value": "Fraud proofs (INT)",
          "description": "No actor outside of the single Proposer can submit fraud proofs. Interactive proofs (INT) require multiple transactions over time to resolve. The challenge protocol can be subject to delay attacks. There is a 5d 14h challenge period.",
          "sentiment": "bad",
          "definingMetric": 1,
          "secondLine": "5d 14h challenge period"
        },
        "dataAvailability": {
          "value": "External (DAC)",
          "description": "Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 1/1 that is tasked with protecting and supplying the data.",
          "sentiment": "bad",
          "definingMetric": 1
        },
        "exitWindow": {
          "value": "None",
          "description": "There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.",
          "secondLine": null,
          "sentiment": "bad",
          "definingMetric": -86400
        },
        "sequencerFailure": {
          "value": "Self sequence",
          "description": "In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.",
          "sentiment": "good",
          "definingMetric": 86400
        },
        "proposerFailure": {
          "value": "Self propose",
          "description": "Anyone can become a Proposer after 11d 23h of inactivity from the currently whitelisted Proposers.",
          "sentiment": "good",
          "definingMetric": 1033656
        },
        "validatedBy": {
          "value": "Arbitrum",
          "description": "Smart contracts on arbitrum validate all bridge transfers. Additionally, the security of the system depends on the security of the base layer.",
          "sentiment": "warning"
        },
        "destinationToken": {
          "value": "Native & Canonical",
          "description": "ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.",
          "sentiment": "good"
        }
      },
      "config": {
        "associatedTokens": ["WINR"],
        "escrows": [
          {
            "chain": "arbitrum",
            "address": "0xF3f01622Ac969156760c32190995F9dC5b3eb7FA",
            "sinceTimestamp": "1715799374",
            "tokens": "*"
          },
          {
            "address": "0x8E83aED64a0Ad5d7d3A57B6172F14FcA5bfADE56",
            "sinceTimestamp": "1722608545",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC.e"],
            "chain": "arbitrum",
            "includeInTotal": false
          },
          {
            "address": "0x6aDFbA9e45b5c1685007Fe48A784e971e412f839",
            "sinceTimestamp": "1722608646",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDC"],
            "chain": "arbitrum",
            "includeInTotal": false
          },
          {
            "address": "0x8b961A67f49bc6334CBA09dbd70a2F14Fc8226a1",
            "sinceTimestamp": "1722608661",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["WETH"],
            "chain": "arbitrum",
            "includeInTotal": false
          },
          {
            "address": "0x88FA3A8624065f3Bf2eDe507b6Fd554C58e5b785",
            "sinceTimestamp": "1722608675",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["wBTC"],
            "chain": "arbitrum",
            "includeInTotal": false
          },
          {
            "address": "0x3222f0F281F1630C50f86fFaA29A29A06559eca8",
            "sinceTimestamp": "1722608690",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["USDT"],
            "chain": "arbitrum",
            "includeInTotal": false
          },
          {
            "address": "0x0aE2F220cE9698b1c9853f7288aC882150291dca",
            "sinceTimestamp": "1722608704",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["ETH"],
            "chain": "arbitrum",
            "includeInTotal": false
          },
          {
            "address": "0x023d27390aEd70aA39823A1e1e06a0b075400214",
            "sinceTimestamp": "1724262320",
            "source": "external",
            "bridgedUsing": {
              "bridges": [{ "name": "Socket bridge", "slug": "socket" }]
            },
            "tokens": ["ARB"],
            "chain": "arbitrum",
            "includeInTotal": false
          }
        ],
        "transactionApi": {
          "type": "rpc",
          "startBlock": 1,
          "defaultUrl": "https://rpc.winr.games",
          "defaultCallsPerMinute": 1500
        }
      }
    }
  ],
  "meta": {
    "values": {
      "0.createdAt": [["custom", "UnixTime"]],
      "0.badges": ["undefined"],
      "1.createdAt": [["custom", "UnixTime"]],
      "1.badges": ["undefined"],
      "2.createdAt": [["custom", "UnixTime"]],
      "2.badges": ["undefined"],
      "3.createdAt": [["custom", "UnixTime"]],
      "3.contracts.addresses.7.upgradeability": ["undefined"],
      "3.contracts.addresses.8.upgradeability": ["undefined"],
      "3.contracts.addresses.9.upgradeability": ["undefined"],
      "3.contracts.addresses.10.upgradeability": ["undefined"],
      "3.contracts.addresses.11.upgradeability": ["undefined"],
      "3.contracts.nativeAddresses": ["undefined"],
      "3.chainConfig": ["undefined"],
      "3.technology.stateCorrectness": ["undefined"],
      "3.permissions.2.references": ["undefined"],
      "3.nativePermissions": ["undefined"],
      "3.stateDerivation": ["undefined"],
      "3.upgradesAndGovernance": ["undefined"],
      "3.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "3.riskView.exitWindow.secondLine": ["undefined"],
      "3.config.associatedTokens": ["undefined"],
      "4.createdAt": [["custom", "UnixTime"]],
      "4.badges": ["undefined"],
      "5.createdAt": [["custom", "UnixTime"]],
      "5.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "5.config.escrows.0.excludedTokens": ["undefined"],
      "5.config.escrows.0.premintedTokens": ["undefined"],
      "5.config.escrows.0.contract.name": ["undefined"],
      "5.config.escrows.0.contract.upgradeability": ["undefined"],
      "5.config.escrows.0.contract.upgradableBy": ["undefined"],
      "5.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "5.config.escrows.0.isUpcoming": ["undefined"],
      "5.config.escrows.0.includeInTotal": ["undefined"],
      "5.config.escrows.0.source": ["undefined"],
      "5.config.escrows.0.bridgedUsing": ["undefined"],
      "5.config.escrows.0.isHistorical": ["undefined"],
      "5.config.escrows.0.untilTimestamp": ["undefined"],
      "5.config.escrows.0.sharedEscrow": ["undefined"],
      "5.riskView.stateValidation.definingMetric": ["number"],
      "5.riskView.dataAvailability.definingMetric": ["number"],
      "5.riskView.exitWindow.secondLine": ["undefined"],
      "5.riskView.proposerFailure.definingMetric": ["number"],
      "5.stackedRiskView.stateValidation.definingMetric": ["number"],
      "5.stackedRiskView.dataAvailability.definingMetric": ["number"],
      "5.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "5.stackedRiskView.proposerFailure.definingMetric": ["number"],
      "5.contracts.addresses.0.upgradeability": ["undefined"],
      "5.contracts.addresses.1.upgradeability": ["undefined"],
      "5.contracts.addresses.2.upgradeability": ["undefined"],
      "5.contracts.addresses.3.upgradeability": ["undefined"],
      "5.contracts.addresses.4.upgradeability": ["undefined"],
      "6.createdAt": [["custom", "UnixTime"]],
      "6.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "6.config.transactionApi": ["undefined"],
      "6.chainConfig": ["undefined"],
      "7.createdAt": [["custom", "UnixTime"]],
      "7.config.associatedTokens": ["undefined"],
      "7.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "7.chainConfig": ["undefined"],
      "8.createdAt": [["custom", "UnixTime"]],
      "8.contracts.addresses.0.upgradeability": ["undefined"],
      "8.contracts.addresses.8.upgradeability": ["undefined"],
      "8.contracts.addresses.9.upgradeability": ["undefined"],
      "8.contracts.addresses.10.upgradeability": ["undefined"],
      "8.contracts.addresses.11.upgradeability": ["undefined"],
      "8.contracts.addresses.12.upgradeability": ["undefined"],
      "8.contracts.nativeAddresses": ["undefined"],
      "8.chainConfig": ["undefined"],
      "8.technology.stateCorrectness": ["undefined"],
      "8.permissions.2.references": ["undefined"],
      "8.nativePermissions": ["undefined"],
      "8.stateDerivation": ["undefined"],
      "8.upgradesAndGovernance": ["undefined"],
      "8.stackedRiskView.stateValidation.definingMetric": ["number"],
      "8.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "8.stackedRiskView.proposerFailure.definingMetric": ["number"],
      "8.riskView.exitWindow.secondLine": ["undefined"],
      "8.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "8.config.escrows.0.excludedTokens": ["undefined"],
      "8.config.escrows.0.premintedTokens": ["undefined"],
      "8.config.escrows.0.contract.name": ["undefined"],
      "8.config.escrows.0.isUpcoming": ["undefined"],
      "8.config.escrows.0.source": ["undefined"],
      "8.config.escrows.0.bridgedUsing": ["undefined"],
      "8.config.escrows.0.isHistorical": ["undefined"],
      "8.config.escrows.0.untilTimestamp": ["undefined"],
      "8.config.escrows.0.sharedEscrow": ["undefined"],
      "9.createdAt": [["custom", "UnixTime"]],
      "9.badges": ["undefined"],
      "10.createdAt": [["custom", "UnixTime"]],
      "10.contracts.addresses.8.upgradeability": ["undefined"],
      "10.contracts.addresses.9.upgradeability": ["undefined"],
      "10.contracts.addresses.10.upgradeability": ["undefined"],
      "10.contracts.addresses.11.upgradeability": ["undefined"],
      "10.contracts.addresses.12.upgradeability": ["undefined"],
      "10.contracts.nativeAddresses": ["undefined"],
      "10.chainConfig": ["undefined"],
      "10.technology.stateCorrectness": ["undefined"],
      "10.nativePermissions": ["undefined"],
      "10.stateDerivation": ["undefined"],
      "10.upgradesAndGovernance": ["undefined"],
      "10.stackedRiskView.dataAvailability.definingMetric": ["number"],
      "10.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "10.riskView.dataAvailability.definingMetric": ["number"],
      "10.riskView.exitWindow.secondLine": ["undefined"],
      "10.config.associatedTokens": ["undefined"],
      "10.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "10.config.escrows.0.excludedTokens": ["undefined"],
      "10.config.escrows.0.premintedTokens": ["undefined"],
      "10.config.escrows.0.contract.name": ["undefined"],
      "10.config.escrows.0.isUpcoming": ["undefined"],
      "10.config.escrows.0.source": ["undefined"],
      "10.config.escrows.0.bridgedUsing": ["undefined"],
      "10.config.escrows.0.isHistorical": ["undefined"],
      "10.config.escrows.0.untilTimestamp": ["undefined"],
      "10.config.escrows.0.sharedEscrow": ["undefined"],
      "10.config.transactionApi": ["undefined"],
      "11.createdAt": [["custom", "UnixTime"]],
      "11.config.associatedTokens": ["undefined"],
      "11.config.transactionApi": ["undefined"],
      "11.chainConfig": ["undefined"],
      "11.badges": ["undefined"],
      "12.createdAt": [["custom", "UnixTime"]],
      "12.config.associatedTokens": ["undefined"],
      "12.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "12.chainConfig": ["undefined"],
      "13.createdAt": [["custom", "UnixTime"]],
      "13.badges": ["undefined"],
      "14.createdAt": [["custom", "UnixTime"]],
      "14.badges": ["undefined"],
      "15.createdAt": [["custom", "UnixTime"]],
      "15.badges": ["undefined"],
      "16.createdAt": [["custom", "UnixTime"]],
      "16.permissions.4.references": ["undefined"],
      "16.permissions.5.references": ["undefined"],
      "16.nativePermissions": ["undefined"],
      "16.contracts.addresses.3.upgradeability": ["undefined"],
      "16.contracts.addresses.7.upgradeability": ["undefined"],
      "16.contracts.nativeAddresses": ["undefined"],
      "16.stackedRiskView.stateValidation.definingMetric": ["number"],
      "16.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "16.stackedRiskView.proposerFailure.definingMetric": ["number"],
      "16.riskView.stateValidation.definingMetric": ["number"],
      "16.riskView.exitWindow.secondLine": ["undefined"],
      "16.riskView.proposerFailure.definingMetric": ["number"],
      "16.config.associatedTokens": ["undefined"],
      "16.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "16.config.escrows.0.excludedTokens": ["undefined"],
      "16.config.escrows.0.premintedTokens": ["undefined"],
      "16.config.escrows.0.contract.name": ["undefined"],
      "16.config.escrows.0.isUpcoming": ["undefined"],
      "16.config.escrows.0.source": ["undefined"],
      "16.config.escrows.0.bridgedUsing": ["undefined"],
      "16.config.escrows.0.isHistorical": ["undefined"],
      "16.config.escrows.0.untilTimestamp": ["undefined"],
      "16.config.escrows.0.sharedEscrow": ["undefined"],
      "16.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "16.config.escrows.1.excludedTokens": ["undefined"],
      "16.config.escrows.1.premintedTokens": ["undefined"],
      "16.config.escrows.1.contract.name": ["undefined"],
      "16.config.escrows.1.isUpcoming": ["undefined"],
      "16.config.escrows.1.source": ["undefined"],
      "16.config.escrows.1.bridgedUsing": ["undefined"],
      "16.config.escrows.1.isHistorical": ["undefined"],
      "16.config.escrows.1.untilTimestamp": ["undefined"],
      "16.config.escrows.1.sharedEscrow": ["undefined"],
      "16.stateDerivation": ["undefined"],
      "17.createdAt": [["custom", "UnixTime"]],
      "17.config.associatedTokens": ["undefined"],
      "17.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.7.sinceTimestamp": [["custom", "UnixTime"]],
      "17.config.escrows.8.sinceTimestamp": [["custom", "UnixTime"]],
      "17.chainConfig": ["undefined"],
      "17.badges": ["undefined"],
      "18.createdAt": [["custom", "UnixTime"]],
      "18.contracts.addresses.8.upgradeability": ["undefined"],
      "18.contracts.addresses.9.upgradeability": ["undefined"],
      "18.contracts.addresses.10.upgradeability": ["undefined"],
      "18.contracts.addresses.11.upgradeability": ["undefined"],
      "18.contracts.addresses.12.upgradeability": ["undefined"],
      "18.contracts.nativeAddresses": ["undefined"],
      "18.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "18.technology.stateCorrectness": ["undefined"],
      "18.permissions.2.references": ["undefined"],
      "18.nativePermissions": ["undefined"],
      "18.stateDerivation": ["undefined"],
      "18.upgradesAndGovernance": ["undefined"],
      "18.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "18.riskView.exitWindow.secondLine": ["undefined"],
      "18.config.associatedTokens": ["undefined"],
      "18.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "18.config.escrows.0.excludedTokens": ["undefined"],
      "18.config.escrows.0.premintedTokens": ["undefined"],
      "18.config.escrows.0.contract.name": ["undefined"],
      "18.config.escrows.0.contract.upgradableBy": ["undefined"],
      "18.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "18.config.escrows.0.isUpcoming": ["undefined"],
      "18.config.escrows.0.source": ["undefined"],
      "18.config.escrows.0.bridgedUsing": ["undefined"],
      "18.config.escrows.0.isHistorical": ["undefined"],
      "18.config.escrows.0.untilTimestamp": ["undefined"],
      "18.config.escrows.0.sharedEscrow": ["undefined"],
      "18.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "18.config.escrows.1.excludedTokens": ["undefined"],
      "18.config.escrows.1.premintedTokens": ["undefined"],
      "18.config.escrows.1.contract.name": ["undefined"],
      "18.config.escrows.1.contract.upgradableBy": ["undefined"],
      "18.config.escrows.1.contract.upgradeDelay": ["undefined"],
      "18.config.escrows.1.isUpcoming": ["undefined"],
      "18.config.escrows.1.source": ["undefined"],
      "18.config.escrows.1.bridgedUsing": ["undefined"],
      "18.config.escrows.1.isHistorical": ["undefined"],
      "18.config.escrows.1.untilTimestamp": ["undefined"],
      "18.config.escrows.1.sharedEscrow": ["undefined"],
      "18.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "18.config.escrows.2.excludedTokens": ["undefined"],
      "18.config.escrows.2.premintedTokens": ["undefined"],
      "18.config.escrows.2.contract.name": ["undefined"],
      "18.config.escrows.2.isUpcoming": ["undefined"],
      "18.config.escrows.2.source": ["undefined"],
      "18.config.escrows.2.bridgedUsing": ["undefined"],
      "18.config.escrows.2.isHistorical": ["undefined"],
      "18.config.escrows.2.untilTimestamp": ["undefined"],
      "18.config.escrows.2.sharedEscrow": ["undefined"],
      "19.createdAt": [["custom", "UnixTime"]],
      "19.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "19.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.7.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.8.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.9.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.10.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.11.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.12.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.13.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.14.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.15.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.16.sinceTimestamp": [["custom", "UnixTime"]],
      "19.config.escrows.17.sinceTimestamp": [["custom", "UnixTime"]],
      "19.riskView.stateValidation.definingMetric": ["number"],
      "19.riskView.exitWindow.secondLine": ["undefined"],
      "19.riskView.proposerFailure.definingMetric": ["number"],
      "19.stackedRiskView.stateValidation.definingMetric": ["number"],
      "19.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "19.stackedRiskView.proposerFailure.definingMetric": ["number"],
      "19.contracts.addresses.3.upgradeability": ["undefined"],
      "19.contracts.addresses.4.upgradeability": ["undefined"],
      "19.contracts.addresses.5.upgradeability": ["undefined"],
      "19.permissions.0.references": ["undefined"],
      "19.nativePermissions.optimism.1.references": ["undefined"],
      "19.nativePermissions.arbitrum.1.references": ["undefined"],
      "19.nativePermissions.base.1.references": ["undefined"],
      "19.nativePermissions.mantle.1.references": ["undefined"],
      "19.nativePermissions.scroll.1.references": ["undefined"],
      "19.nativePermissions.blast.1.references": ["undefined"],
      "19.nativePermissions.zksync2.1.references": ["undefined"],
      "19.nativePermissions.ethereum.1.references": ["undefined"],
      "20.createdAt": [["custom", "UnixTime"]],
      "20.config.associatedTokens": ["undefined"],
      "20.config.transactionApi": ["undefined"],
      "20.chainConfig": ["undefined"],
      "20.badges": ["undefined"],
      "21.createdAt": [["custom", "UnixTime"]],
      "21.contracts.addresses.11.upgradeability": ["undefined"],
      "21.contracts.addresses.12.upgradeability": ["undefined"],
      "21.contracts.addresses.13.upgradeability": ["undefined"],
      "21.contracts.addresses.14.upgradeability": ["undefined"],
      "21.contracts.addresses.15.upgradeability": ["undefined"],
      "21.contracts.nativeAddresses": ["undefined"],
      "21.chainConfig": ["undefined"],
      "21.nativePermissions": ["undefined"],
      "21.stateDerivation": ["undefined"],
      "21.upgradesAndGovernance": ["undefined"],
      "21.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "21.riskView.exitWindow.secondLine": ["undefined"],
      "21.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "21.config.escrows.0.excludedTokens": ["undefined"],
      "21.config.escrows.0.premintedTokens": ["undefined"],
      "21.config.escrows.0.contract.name": ["undefined"],
      "21.config.escrows.0.contract.upgradableBy": ["undefined"],
      "21.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "21.config.escrows.0.isUpcoming": ["undefined"],
      "21.config.escrows.0.source": ["undefined"],
      "21.config.escrows.0.bridgedUsing": ["undefined"],
      "21.config.escrows.0.isHistorical": ["undefined"],
      "21.config.escrows.0.untilTimestamp": ["undefined"],
      "21.config.escrows.0.sharedEscrow": ["undefined"],
      "21.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "21.config.escrows.1.excludedTokens": ["undefined"],
      "21.config.escrows.1.premintedTokens": ["undefined"],
      "21.config.escrows.1.contract.name": ["undefined"],
      "21.config.escrows.1.isUpcoming": ["undefined"],
      "21.config.escrows.1.source": ["undefined"],
      "21.config.escrows.1.bridgedUsing": ["undefined"],
      "21.config.escrows.1.isHistorical": ["undefined"],
      "21.config.escrows.1.untilTimestamp": ["undefined"],
      "21.config.escrows.1.sharedEscrow": ["undefined"],
      "22.createdAt": [["custom", "UnixTime"]],
      "22.badges": ["undefined"],
      "23.createdAt": [["custom", "UnixTime"]],
      "23.contracts.addresses.7.upgradeability": ["undefined"],
      "23.contracts.addresses.8.upgradeability": ["undefined"],
      "23.contracts.addresses.9.upgradeability": ["undefined"],
      "23.contracts.addresses.10.upgradeability": ["undefined"],
      "23.contracts.addresses.11.upgradeability": ["undefined"],
      "23.contracts.nativeAddresses": ["undefined"],
      "23.chainConfig": ["undefined"],
      "23.technology.stateCorrectness": ["undefined"],
      "23.permissions.2.references": ["undefined"],
      "23.nativePermissions": ["undefined"],
      "23.stateDerivation": ["undefined"],
      "23.upgradesAndGovernance": ["undefined"],
      "23.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "23.riskView.exitWindow.secondLine": ["undefined"],
      "23.config.associatedTokens": ["undefined"],
      "23.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "23.config.escrows.0.excludedTokens": ["undefined"],
      "23.config.escrows.0.premintedTokens": ["undefined"],
      "23.config.escrows.0.contract.name": ["undefined"],
      "23.config.escrows.0.isUpcoming": ["undefined"],
      "23.config.escrows.0.source": ["undefined"],
      "23.config.escrows.0.bridgedUsing": ["undefined"],
      "23.config.escrows.0.isHistorical": ["undefined"],
      "23.config.escrows.0.untilTimestamp": ["undefined"],
      "23.config.escrows.0.sharedEscrow": ["undefined"],
      "24.createdAt": [["custom", "UnixTime"]],
      "24.contracts.addresses.7.upgradeability": ["undefined"],
      "24.contracts.addresses.8.upgradeability": ["undefined"],
      "24.contracts.addresses.9.upgradeability": ["undefined"],
      "24.contracts.addresses.10.upgradeability": ["undefined"],
      "24.contracts.addresses.11.upgradeability": ["undefined"],
      "24.contracts.nativeAddresses": ["undefined"],
      "24.chainConfig": ["undefined"],
      "24.technology.stateCorrectness": ["undefined"],
      "24.permissions.2.references": ["undefined"],
      "24.nativePermissions": ["undefined"],
      "24.stateDerivation": ["undefined"],
      "24.upgradesAndGovernance": ["undefined"],
      "24.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "24.riskView.exitWindow.secondLine": ["undefined"],
      "24.config.associatedTokens": ["undefined"],
      "24.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "24.config.escrows.0.excludedTokens": ["undefined"],
      "24.config.escrows.0.premintedTokens": ["undefined"],
      "24.config.escrows.0.contract.name": ["undefined"],
      "24.config.escrows.0.isUpcoming": ["undefined"],
      "24.config.escrows.0.source": ["undefined"],
      "24.config.escrows.0.bridgedUsing": ["undefined"],
      "24.config.escrows.0.isHistorical": ["undefined"],
      "24.config.escrows.0.untilTimestamp": ["undefined"],
      "24.config.escrows.0.sharedEscrow": ["undefined"],
      "25.createdAt": [["custom", "UnixTime"]],
      "25.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "25.config.transactionApi": ["undefined"],
      "25.chainConfig": ["undefined"],
      "26.createdAt": [["custom", "UnixTime"]],
      "26.contracts.addresses.0.upgradeability": ["undefined"],
      "26.contracts.addresses.8.upgradeability": ["undefined"],
      "26.contracts.addresses.9.upgradeability": ["undefined"],
      "26.contracts.addresses.10.upgradeability": ["undefined"],
      "26.contracts.addresses.11.upgradeability": ["undefined"],
      "26.contracts.addresses.12.upgradeability": ["undefined"],
      "26.contracts.nativeAddresses": ["undefined"],
      "26.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "26.technology.stateCorrectness": ["undefined"],
      "26.permissions.2.references": ["undefined"],
      "26.permissions.3.references": ["undefined"],
      "26.nativePermissions": ["undefined"],
      "26.stateDerivation": ["undefined"],
      "26.upgradesAndGovernance": ["undefined"],
      "26.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "26.riskView.exitWindow.secondLine": ["undefined"],
      "26.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "26.config.escrows.0.excludedTokens": ["undefined"],
      "26.config.escrows.0.premintedTokens": ["undefined"],
      "26.config.escrows.0.contract.name": ["undefined"],
      "26.config.escrows.0.contract.upgradableBy": ["undefined"],
      "26.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "26.config.escrows.0.isUpcoming": ["undefined"],
      "26.config.escrows.0.source": ["undefined"],
      "26.config.escrows.0.bridgedUsing": ["undefined"],
      "26.config.escrows.0.isHistorical": ["undefined"],
      "26.config.escrows.0.untilTimestamp": ["undefined"],
      "26.config.escrows.0.sharedEscrow": ["undefined"],
      "26.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "26.config.escrows.1.excludedTokens": ["undefined"],
      "26.config.escrows.1.premintedTokens": ["undefined"],
      "26.config.escrows.1.contract.name": ["undefined"],
      "26.config.escrows.1.isUpcoming": ["undefined"],
      "26.config.escrows.1.source": ["undefined"],
      "26.config.escrows.1.bridgedUsing": ["undefined"],
      "26.config.escrows.1.isHistorical": ["undefined"],
      "26.config.escrows.1.untilTimestamp": ["undefined"],
      "26.config.escrows.1.sharedEscrow": ["undefined"],
      "27.createdAt": [["custom", "UnixTime"]],
      "27.permissions.4.references": ["undefined"],
      "27.nativePermissions": ["undefined"],
      "27.contracts.addresses.0.upgradeability": ["undefined"],
      "27.contracts.addresses.1.upgradeability": ["undefined"],
      "27.contracts.nativeAddresses": ["undefined"],
      "27.stackedRiskView.stateValidation.definingMetric": ["number"],
      "27.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "27.stackedRiskView.proposerFailure.definingMetric": ["number"],
      "27.riskView.stateValidation.definingMetric": ["number"],
      "27.riskView.exitWindow.secondLine": ["undefined"],
      "27.riskView.proposerFailure.definingMetric": ["number"],
      "27.config.associatedTokens": ["undefined"],
      "27.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "27.config.escrows.0.excludedTokens": ["undefined"],
      "27.config.escrows.0.premintedTokens": ["undefined"],
      "27.config.escrows.0.contract.name": ["undefined"],
      "27.config.escrows.0.isUpcoming": ["undefined"],
      "27.config.escrows.0.source": ["undefined"],
      "27.config.escrows.0.bridgedUsing": ["undefined"],
      "27.config.escrows.0.isHistorical": ["undefined"],
      "27.config.escrows.0.untilTimestamp": ["undefined"],
      "27.config.escrows.0.sharedEscrow": ["undefined"],
      "27.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "27.config.escrows.1.excludedTokens": ["undefined"],
      "27.config.escrows.1.premintedTokens": ["undefined"],
      "27.config.escrows.1.contract.name": ["undefined"],
      "27.config.escrows.1.isUpcoming": ["undefined"],
      "27.config.escrows.1.source": ["undefined"],
      "27.config.escrows.1.bridgedUsing": ["undefined"],
      "27.config.escrows.1.isHistorical": ["undefined"],
      "27.config.escrows.1.untilTimestamp": ["undefined"],
      "27.config.escrows.1.sharedEscrow": ["undefined"],
      "27.stateDerivation": ["undefined"],
      "28.createdAt": [["custom", "UnixTime"]],
      "28.permissions.4.references": ["undefined"],
      "28.nativePermissions": ["undefined"],
      "28.contracts.addresses.3.upgradeability": ["undefined"],
      "28.contracts.addresses.5.upgradeability": ["undefined"],
      "28.contracts.nativeAddresses": ["undefined"],
      "28.stackedRiskView.stateValidation.definingMetric": ["number"],
      "28.stackedRiskView.dataAvailability.definingMetric": ["number"],
      "28.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "28.stackedRiskView.proposerFailure.definingMetric": ["number"],
      "28.riskView.stateValidation.definingMetric": ["number"],
      "28.riskView.dataAvailability.definingMetric": ["number"],
      "28.riskView.exitWindow.secondLine": ["undefined"],
      "28.riskView.proposerFailure.definingMetric": ["number"],
      "28.config.associatedTokens": ["undefined"],
      "28.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "28.config.escrows.0.excludedTokens": ["undefined"],
      "28.config.escrows.0.premintedTokens": ["undefined"],
      "28.config.escrows.0.contract.name": ["undefined"],
      "28.config.escrows.0.isUpcoming": ["undefined"],
      "28.config.escrows.0.source": ["undefined"],
      "28.config.escrows.0.bridgedUsing": ["undefined"],
      "28.config.escrows.0.isHistorical": ["undefined"],
      "28.config.escrows.0.untilTimestamp": ["undefined"],
      "28.config.escrows.0.sharedEscrow": ["undefined"],
      "28.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "28.config.escrows.1.excludedTokens": ["undefined"],
      "28.config.escrows.1.premintedTokens": ["undefined"],
      "28.config.escrows.1.contract.name": ["undefined"],
      "28.config.escrows.1.isUpcoming": ["undefined"],
      "28.config.escrows.1.source": ["undefined"],
      "28.config.escrows.1.bridgedUsing": ["undefined"],
      "28.config.escrows.1.isHistorical": ["undefined"],
      "28.config.escrows.1.untilTimestamp": ["undefined"],
      "28.config.escrows.1.sharedEscrow": ["undefined"],
      "28.stateDerivation": ["undefined"],
      "29.createdAt": [["custom", "UnixTime"]],
      "29.badges": ["undefined"],
      "30.createdAt": [["custom", "UnixTime"]],
      "30.contracts.addresses.7.upgradeability": ["undefined"],
      "30.contracts.addresses.8.upgradeability": ["undefined"],
      "30.contracts.addresses.9.upgradeability": ["undefined"],
      "30.contracts.addresses.10.upgradeability": ["undefined"],
      "30.contracts.addresses.11.upgradeability": ["undefined"],
      "30.contracts.nativeAddresses": ["undefined"],
      "30.chainConfig": ["undefined"],
      "30.technology.stateCorrectness": ["undefined"],
      "30.permissions.2.references": ["undefined"],
      "30.nativePermissions": ["undefined"],
      "30.stateDerivation": ["undefined"],
      "30.upgradesAndGovernance": ["undefined"],
      "30.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "30.riskView.exitWindow.secondLine": ["undefined"],
      "30.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "30.config.escrows.0.excludedTokens": ["undefined"],
      "30.config.escrows.0.premintedTokens": ["undefined"],
      "30.config.escrows.0.contract.name": ["undefined"],
      "30.config.escrows.0.contract.upgradableBy": ["undefined"],
      "30.config.escrows.0.contract.upgradeDelay": ["undefined"],
      "30.config.escrows.0.isUpcoming": ["undefined"],
      "30.config.escrows.0.source": ["undefined"],
      "30.config.escrows.0.bridgedUsing": ["undefined"],
      "30.config.escrows.0.isHistorical": ["undefined"],
      "30.config.escrows.0.untilTimestamp": ["undefined"],
      "30.config.escrows.0.sharedEscrow": ["undefined"],
      "30.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "30.config.escrows.1.excludedTokens": ["undefined"],
      "30.config.escrows.1.premintedTokens": ["undefined"],
      "30.config.escrows.1.contract.name": ["undefined"],
      "30.config.escrows.1.isUpcoming": ["undefined"],
      "30.config.escrows.1.source": ["undefined"],
      "30.config.escrows.1.bridgedUsing": ["undefined"],
      "30.config.escrows.1.isHistorical": ["undefined"],
      "30.config.escrows.1.untilTimestamp": ["undefined"],
      "30.config.escrows.1.sharedEscrow": ["undefined"],
      "31.createdAt": [["custom", "UnixTime"]],
      "31.config.associatedTokens": ["undefined"],
      "31.chainConfig": ["undefined"],
      "31.badges": ["undefined"],
      "32.createdAt": [["custom", "UnixTime"]],
      "32.badges": ["undefined"],
      "33.createdAt": [["custom", "UnixTime"]],
      "33.badges": ["undefined"],
      "34.createdAt": [["custom", "UnixTime"]],
      "34.badges": ["undefined"],
      "35.createdAt": [["custom", "UnixTime"]],
      "35.contracts.addresses.7.upgradeability": ["undefined"],
      "35.contracts.addresses.8.upgradeability": ["undefined"],
      "35.contracts.addresses.9.upgradeability": ["undefined"],
      "35.contracts.addresses.10.upgradeability": ["undefined"],
      "35.contracts.addresses.11.upgradeability": ["undefined"],
      "35.contracts.nativeAddresses": ["undefined"],
      "35.chainConfig.minTimestampForTvl": [["custom", "UnixTime"]],
      "35.technology.stateCorrectness": ["undefined"],
      "35.nativePermissions": ["undefined"],
      "35.stateDerivation": ["undefined"],
      "35.upgradesAndGovernance": ["undefined"],
      "35.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "35.riskView.exitWindow.secondLine": ["undefined"],
      "35.config.associatedTokens": ["undefined"],
      "35.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "35.config.escrows.0.excludedTokens": ["undefined"],
      "35.config.escrows.0.premintedTokens": ["undefined"],
      "35.config.escrows.0.contract.name": ["undefined"],
      "35.config.escrows.0.isUpcoming": ["undefined"],
      "35.config.escrows.0.source": ["undefined"],
      "35.config.escrows.0.bridgedUsing": ["undefined"],
      "35.config.escrows.0.isHistorical": ["undefined"],
      "35.config.escrows.0.untilTimestamp": ["undefined"],
      "35.config.escrows.0.sharedEscrow": ["undefined"],
      "35.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "35.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "35.config.escrows.2.excludedTokens": ["undefined"],
      "35.config.escrows.2.premintedTokens": ["undefined"],
      "35.config.escrows.2.contract.name": ["undefined"],
      "35.config.escrows.2.isUpcoming": ["undefined"],
      "35.config.escrows.2.source": ["undefined"],
      "35.config.escrows.2.bridgedUsing": ["undefined"],
      "35.config.escrows.2.isHistorical": ["undefined"],
      "35.config.escrows.2.untilTimestamp": ["undefined"],
      "35.config.escrows.2.sharedEscrow": ["undefined"],
      "36.createdAt": [["custom", "UnixTime"]],
      "36.badges": ["undefined"],
      "37.createdAt": [["custom", "UnixTime"]],
      "37.badges": ["undefined"],
      "38.createdAt": [["custom", "UnixTime"]],
      "38.contracts.addresses.0.upgradeability": ["undefined"],
      "38.contracts.addresses.8.upgradeability": ["undefined"],
      "38.contracts.addresses.9.upgradeability": ["undefined"],
      "38.contracts.addresses.10.upgradeability": ["undefined"],
      "38.contracts.addresses.11.upgradeability": ["undefined"],
      "38.contracts.addresses.12.upgradeability": ["undefined"],
      "38.contracts.nativeAddresses": ["undefined"],
      "38.chainConfig": ["undefined"],
      "38.technology.stateCorrectness": ["undefined"],
      "38.nativePermissions": ["undefined"],
      "38.stateDerivation": ["undefined"],
      "38.upgradesAndGovernance": ["undefined"],
      "38.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "38.riskView.exitWindow.secondLine": ["undefined"],
      "38.config.associatedTokens": ["undefined"],
      "38.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "38.config.escrows.0.excludedTokens": ["undefined"],
      "38.config.escrows.0.premintedTokens": ["undefined"],
      "38.config.escrows.0.contract.name": ["undefined"],
      "38.config.escrows.0.isUpcoming": ["undefined"],
      "38.config.escrows.0.source": ["undefined"],
      "38.config.escrows.0.bridgedUsing": ["undefined"],
      "38.config.escrows.0.isHistorical": ["undefined"],
      "38.config.escrows.0.untilTimestamp": ["undefined"],
      "38.config.escrows.0.sharedEscrow": ["undefined"],
      "39.createdAt": [["custom", "UnixTime"]],
      "39.badges": ["undefined"],
      "40.createdAt": [["custom", "UnixTime"]],
      "40.badges": ["undefined"],
      "41.createdAt": [["custom", "UnixTime"]],
      "41.badges": ["undefined"],
      "42.createdAt": [["custom", "UnixTime"]],
      "42.contracts.addresses.7.upgradeability": ["undefined"],
      "42.contracts.addresses.8.upgradeability": ["undefined"],
      "42.contracts.addresses.9.upgradeability": ["undefined"],
      "42.contracts.addresses.10.upgradeability": ["undefined"],
      "42.contracts.addresses.11.upgradeability": ["undefined"],
      "42.contracts.nativeAddresses": ["undefined"],
      "42.chainConfig": ["undefined"],
      "42.technology.stateCorrectness": ["undefined"],
      "42.permissions.2.references": ["undefined"],
      "42.nativePermissions": ["undefined"],
      "42.stateDerivation": ["undefined"],
      "42.upgradesAndGovernance": ["undefined"],
      "42.stackedRiskView.exitWindow.secondLine": ["undefined"],
      "42.riskView.exitWindow.secondLine": ["undefined"],
      "42.config.escrows.0.sinceTimestamp": [["custom", "UnixTime"]],
      "42.config.escrows.1.sinceTimestamp": [["custom", "UnixTime"]],
      "42.config.escrows.2.sinceTimestamp": [["custom", "UnixTime"]],
      "42.config.escrows.3.sinceTimestamp": [["custom", "UnixTime"]],
      "42.config.escrows.4.sinceTimestamp": [["custom", "UnixTime"]],
      "42.config.escrows.5.sinceTimestamp": [["custom", "UnixTime"]],
      "42.config.escrows.6.sinceTimestamp": [["custom", "UnixTime"]],
      "42.config.escrows.7.sinceTimestamp": [["custom", "UnixTime"]]
    },
    "referentialEqualities": {
      "0.riskView": [
        "0.stackedRiskView",
        "1.riskView",
        "1.stackedRiskView",
        "2.riskView",
        "2.stackedRiskView",
        "4.riskView",
        "4.stackedRiskView",
        "9.riskView",
        "9.stackedRiskView",
        "13.riskView",
        "13.stackedRiskView",
        "14.riskView",
        "14.stackedRiskView",
        "15.riskView",
        "15.stackedRiskView",
        "22.riskView",
        "22.stackedRiskView",
        "29.riskView",
        "29.stackedRiskView",
        "32.riskView",
        "32.stackedRiskView",
        "33.riskView",
        "33.stackedRiskView",
        "34.riskView",
        "34.stackedRiskView",
        "36.riskView",
        "36.stackedRiskView",
        "37.riskView",
        "37.stackedRiskView",
        "39.riskView",
        "39.stackedRiskView",
        "40.riskView",
        "40.stackedRiskView",
        "41.riskView",
        "41.stackedRiskView"
      ],
      "0.riskView.stateValidation": [
        "0.riskView.dataAvailability",
        "0.riskView.exitWindow",
        "0.riskView.sequencerFailure",
        "0.riskView.proposerFailure",
        "0.riskView.destinationToken",
        "0.riskView.validatedBy"
      ],
      "0.technology": [
        "1.technology",
        "2.technology",
        "4.technology",
        "9.technology",
        "13.technology",
        "14.technology",
        "15.technology",
        "22.technology",
        "29.technology",
        "32.technology",
        "33.technology",
        "34.technology",
        "36.technology",
        "37.technology",
        "39.technology",
        "40.technology",
        "41.technology"
      ],
      "0.technology.stateCorrectness": [
        "0.technology.dataAvailability",
        "0.technology.operator",
        "0.technology.forceTransactions",
        "6.technology.stateCorrectness",
        "6.technology.dataAvailability",
        "6.technology.operator",
        "6.technology.forceTransactions"
      ],
      "0.technology.exitMechanisms": ["6.technology.exitMechanisms"],
      "0.contracts": [
        "1.contracts",
        "2.contracts",
        "4.contracts",
        "9.contracts",
        "13.contracts",
        "14.contracts",
        "15.contracts",
        "22.contracts",
        "29.contracts",
        "32.contracts",
        "33.contracts",
        "34.contracts",
        "36.contracts",
        "37.contracts",
        "39.contracts",
        "40.contracts",
        "41.contracts"
      ],
      "3.contracts.risks.0": [
        "8.contracts.risks.0",
        "10.contracts.risks.0",
        "16.contracts.risks.0",
        "18.contracts.risks.0",
        "19.contracts.risks.0",
        "21.contracts.risks.0",
        "23.contracts.risks.0",
        "24.contracts.risks.0",
        "26.contracts.risks.0",
        "27.contracts.risks.0",
        "28.contracts.risks.0",
        "30.contracts.risks.0",
        "35.contracts.risks.0",
        "38.contracts.risks.0",
        "42.contracts.risks.0"
      ],
      "3.technology.dataAvailability.risks.0": [
        "8.technology.dataAvailability.risks.0",
        "18.technology.dataAvailability.risks.0",
        "19.technology.dataAvailability.risks.0",
        "21.technology.dataAvailability.risks.0",
        "23.technology.dataAvailability.risks.0",
        "24.technology.dataAvailability.risks.0",
        "26.technology.dataAvailability.risks.0",
        "30.technology.dataAvailability.risks.0",
        "35.technology.dataAvailability.risks.0",
        "38.technology.dataAvailability.risks.0",
        "42.technology.dataAvailability.risks.0"
      ],
      "3.technology.operator.risks": [
        "8.technology.operator.risks",
        "10.technology.operator.risks",
        "18.technology.operator.risks",
        "21.technology.operator.risks",
        "23.technology.operator.risks",
        "24.technology.operator.risks",
        "26.technology.operator.risks",
        "30.technology.operator.risks",
        "35.technology.operator.risks",
        "38.technology.operator.risks",
        "42.technology.operator.risks"
      ],
      "3.technology.operator.risks.0": [
        "5.technology.operator.risks.0",
        "19.technology.operator.risks.0"
      ],
      "3.technology.forceTransactions.risks": [
        "5.technology.forceTransactions.risks",
        "8.technology.forceTransactions.risks",
        "10.technology.forceTransactions.risks",
        "16.technology.forceTransactions.risks",
        "18.technology.forceTransactions.risks",
        "21.technology.forceTransactions.risks",
        "23.technology.forceTransactions.risks",
        "24.technology.forceTransactions.risks",
        "26.technology.forceTransactions.risks",
        "27.technology.forceTransactions.risks",
        "28.technology.forceTransactions.risks",
        "30.technology.forceTransactions.risks",
        "35.technology.forceTransactions.risks",
        "38.technology.forceTransactions.risks",
        "42.technology.forceTransactions.risks"
      ],
      "3.technology.exitMechanisms.2": [
        "8.technology.exitMechanisms.2",
        "10.technology.exitMechanisms.2",
        "18.technology.exitMechanisms.2",
        "21.technology.exitMechanisms.2",
        "23.technology.exitMechanisms.2",
        "24.technology.exitMechanisms.2",
        "26.technology.exitMechanisms.2",
        "30.technology.exitMechanisms.2",
        "35.technology.exitMechanisms.2",
        "38.technology.exitMechanisms.2",
        "42.technology.exitMechanisms.2"
      ],
      "3.technology.otherConsiderations": [
        "8.technology.otherConsiderations",
        "10.technology.otherConsiderations",
        "18.technology.otherConsiderations",
        "21.technology.otherConsiderations",
        "23.technology.otherConsiderations",
        "24.technology.otherConsiderations",
        "26.technology.otherConsiderations",
        "30.technology.otherConsiderations",
        "35.technology.otherConsiderations",
        "38.technology.otherConsiderations",
        "42.technology.otherConsiderations"
      ],
      "3.stackedRiskView.stateValidation": ["3.riskView.stateValidation"],
      "3.stackedRiskView.dataAvailability": ["3.riskView.dataAvailability"],
      "3.stackedRiskView.exitWindow": ["3.riskView.exitWindow"],
      "3.stackedRiskView.validatedBy": ["3.riskView.validatedBy"],
      "3.stackedRiskView.destinationToken": ["3.riskView.destinationToken"],
      "3.config.transactionApi.assessCount": [
        "7.config.transactionApi.assessCount",
        "8.config.transactionApi.assessCount",
        "12.config.transactionApi.assessCount",
        "16.config.transactionApi.assessCount",
        "17.config.transactionApi.assessCount",
        "18.config.transactionApi.assessCount",
        "21.config.transactionApi.assessCount",
        "23.config.transactionApi.assessCount",
        "24.config.transactionApi.assessCount",
        "26.config.transactionApi.assessCount",
        "27.config.transactionApi.assessCount",
        "28.config.transactionApi.assessCount",
        "30.config.transactionApi.assessCount",
        "35.config.transactionApi.assessCount",
        "38.config.transactionApi.assessCount",
        "42.config.transactionApi.assessCount"
      ],
      "5.technology.operator.risks": [
        "16.technology.operator.risks",
        "27.technology.operator.risks",
        "28.technology.operator.risks"
      ],
      "5.technology.exitMechanisms.0.risks.0": [
        "16.technology.exitMechanisms.0.risks.0",
        "27.technology.exitMechanisms.0.risks.0",
        "28.technology.exitMechanisms.0.risks.0"
      ],
      "5.riskView.proposerFailure": [
        "5.stackedRiskView.proposerFailure",
        "19.riskView.proposerFailure",
        "19.stackedRiskView.proposerFailure"
      ],
      "5.riskView.destinationToken": ["5.stackedRiskView.destinationToken"],
      "5.riskView.validatedBy": [
        "5.stackedRiskView.validatedBy",
        "16.stackedRiskView.validatedBy",
        "16.riskView.validatedBy",
        "19.stackedRiskView.validatedBy",
        "27.stackedRiskView.validatedBy",
        "27.riskView.validatedBy",
        "28.stackedRiskView.validatedBy",
        "28.riskView.validatedBy"
      ],
      "5.stackedRiskView.stateValidation": [
        "16.riskView.stateValidation",
        "27.riskView.stateValidation",
        "28.riskView.stateValidation"
      ],
      "5.stackedRiskView.dataAvailability": ["10.riskView.dataAvailability"],
      "6.riskView": [
        "6.stackedRiskView",
        "7.riskView",
        "7.stackedRiskView",
        "11.riskView",
        "11.stackedRiskView",
        "12.riskView",
        "12.stackedRiskView",
        "17.riskView",
        "17.stackedRiskView",
        "20.riskView",
        "20.stackedRiskView",
        "25.riskView",
        "25.stackedRiskView",
        "31.riskView",
        "31.stackedRiskView"
      ],
      "6.riskView.stateValidation": [
        "6.riskView.dataAvailability",
        "6.riskView.exitWindow",
        "6.riskView.sequencerFailure",
        "6.riskView.proposerFailure",
        "6.riskView.destinationToken",
        "6.riskView.validatedBy"
      ],
      "6.technology": [
        "7.technology",
        "11.technology",
        "12.technology",
        "17.technology",
        "20.technology",
        "25.technology",
        "31.technology"
      ],
      "6.contracts": [
        "7.contracts",
        "11.contracts",
        "12.contracts",
        "17.contracts",
        "20.contracts",
        "25.contracts",
        "31.contracts"
      ],
      "8.stackedRiskView.stateValidation": [
        "16.stackedRiskView.stateValidation",
        "27.stackedRiskView.stateValidation",
        "28.stackedRiskView.stateValidation"
      ],
      "8.stackedRiskView.dataAvailability": ["8.riskView.dataAvailability"],
      "8.stackedRiskView.exitWindow": ["8.riskView.exitWindow"],
      "8.stackedRiskView.proposerFailure": [
        "16.stackedRiskView.proposerFailure",
        "27.stackedRiskView.proposerFailure",
        "28.stackedRiskView.proposerFailure"
      ],
      "8.stackedRiskView.validatedBy": ["8.riskView.validatedBy"],
      "8.stackedRiskView.destinationToken": ["8.riskView.destinationToken"],
      "10.technology.dataAvailability.risks": [
        "28.technology.dataAvailability.risks"
      ],
      "10.stackedRiskView.stateValidation": ["10.riskView.stateValidation"],
      "10.stackedRiskView.exitWindow": ["10.riskView.exitWindow"],
      "10.stackedRiskView.validatedBy": ["10.riskView.validatedBy"],
      "10.stackedRiskView.destinationToken": ["10.riskView.destinationToken"],
      "16.technology.dataAvailability.risks": [
        "27.technology.dataAvailability.risks"
      ],
      "16.technology.dataAvailability.references.0": [
        "27.technology.dataAvailability.references.0"
      ],
      "16.stackedRiskView.dataAvailability": ["16.riskView.dataAvailability"],
      "16.stackedRiskView.exitWindow": [
        "27.stackedRiskView.exitWindow",
        "28.stackedRiskView.exitWindow"
      ],
      "16.stackedRiskView.destinationToken": ["16.riskView.destinationToken"],
      "16.config.escrows.0.contract.upgradableBy": [
        "16.config.escrows.1.contract.upgradableBy"
      ],
      "18.stackedRiskView.stateValidation": ["18.riskView.stateValidation"],
      "18.stackedRiskView.dataAvailability": ["18.riskView.dataAvailability"],
      "18.stackedRiskView.exitWindow": ["18.riskView.exitWindow"],
      "18.stackedRiskView.validatedBy": ["18.riskView.validatedBy"],
      "18.stackedRiskView.destinationToken": ["18.riskView.destinationToken"],
      "19.contracts.addresses.0.upgradableBy": [
        "19.contracts.addresses.1.upgradableBy",
        "19.contracts.addresses.2.upgradableBy",
        "19.contracts.addresses.4.upgradableBy"
      ],
      "19.contracts.nativeAddresses.ethereum.0.upgradableBy": [
        "19.contracts.nativeAddresses.ethereum.1.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.2.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.3.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.4.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.5.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.6.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.7.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.8.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.9.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.10.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.11.upgradableBy",
        "19.contracts.nativeAddresses.ethereum.12.upgradableBy"
      ],
      "19.contracts.nativeAddresses.optimism.0.upgradableBy": [
        "19.contracts.nativeAddresses.optimism.1.upgradableBy",
        "19.contracts.nativeAddresses.optimism.2.upgradableBy"
      ],
      "19.contracts.nativeAddresses.arbitrum.0.upgradableBy": [
        "19.contracts.nativeAddresses.arbitrum.1.upgradableBy",
        "19.contracts.nativeAddresses.arbitrum.2.upgradableBy"
      ],
      "19.contracts.nativeAddresses.base.0.upgradableBy": [
        "19.contracts.nativeAddresses.base.1.upgradableBy",
        "19.contracts.nativeAddresses.base.2.upgradableBy"
      ],
      "19.contracts.nativeAddresses.mantapacific.0.upgradableBy": [
        "19.contracts.nativeAddresses.mantapacific.1.upgradableBy",
        "19.contracts.nativeAddresses.mantapacific.2.upgradableBy"
      ],
      "19.contracts.nativeAddresses.mantle.0.upgradableBy": [
        "19.contracts.nativeAddresses.mantle.1.upgradableBy",
        "19.contracts.nativeAddresses.mantle.2.upgradableBy"
      ],
      "19.contracts.nativeAddresses.scroll.0.upgradableBy": [
        "19.contracts.nativeAddresses.scroll.1.upgradableBy",
        "19.contracts.nativeAddresses.scroll.2.upgradableBy"
      ],
      "19.contracts.nativeAddresses.blast.0.upgradableBy": [
        "19.contracts.nativeAddresses.blast.1.upgradableBy",
        "19.contracts.nativeAddresses.blast.2.upgradableBy"
      ],
      "19.contracts.nativeAddresses.zksync2.0.upgradableBy": [
        "19.contracts.nativeAddresses.zksync2.1.upgradableBy"
      ],
      "21.contracts.addresses.1.upgradableBy": [
        "21.contracts.addresses.2.upgradableBy",
        "21.contracts.addresses.3.upgradableBy"
      ],
      "21.stackedRiskView.stateValidation": ["21.riskView.stateValidation"],
      "21.stackedRiskView.dataAvailability": ["21.riskView.dataAvailability"],
      "21.stackedRiskView.exitWindow": ["21.riskView.exitWindow"],
      "21.stackedRiskView.validatedBy": ["21.riskView.validatedBy"],
      "21.stackedRiskView.destinationToken": ["21.riskView.destinationToken"],
      "23.stackedRiskView.stateValidation": ["23.riskView.stateValidation"],
      "23.stackedRiskView.dataAvailability": ["23.riskView.dataAvailability"],
      "23.stackedRiskView.exitWindow": ["23.riskView.exitWindow"],
      "23.stackedRiskView.validatedBy": ["23.riskView.validatedBy"],
      "23.stackedRiskView.destinationToken": ["23.riskView.destinationToken"],
      "24.stackedRiskView.stateValidation": ["24.riskView.stateValidation"],
      "24.stackedRiskView.dataAvailability": ["24.riskView.dataAvailability"],
      "24.stackedRiskView.exitWindow": ["24.riskView.exitWindow"],
      "24.stackedRiskView.validatedBy": ["24.riskView.validatedBy"],
      "24.stackedRiskView.destinationToken": ["24.riskView.destinationToken"],
      "26.stackedRiskView.stateValidation": ["26.riskView.stateValidation"],
      "26.stackedRiskView.dataAvailability": ["26.riskView.dataAvailability"],
      "26.stackedRiskView.exitWindow": ["26.riskView.exitWindow"],
      "26.stackedRiskView.validatedBy": ["26.riskView.validatedBy"],
      "26.stackedRiskView.destinationToken": ["26.riskView.destinationToken"],
      "27.stackedRiskView.dataAvailability": ["27.riskView.dataAvailability"],
      "27.stackedRiskView.destinationToken": ["27.riskView.destinationToken"],
      "27.config.escrows.0.contract.upgradableBy": [
        "27.config.escrows.1.contract.upgradableBy"
      ],
      "28.stackedRiskView.destinationToken": ["28.riskView.destinationToken"],
      "28.config.escrows.0.contract.upgradableBy": [
        "28.config.escrows.1.contract.upgradableBy"
      ],
      "30.stackedRiskView.stateValidation": ["30.riskView.stateValidation"],
      "30.stackedRiskView.dataAvailability": ["30.riskView.dataAvailability"],
      "30.stackedRiskView.exitWindow": ["30.riskView.exitWindow"],
      "30.stackedRiskView.validatedBy": ["30.riskView.validatedBy"],
      "30.stackedRiskView.destinationToken": ["30.riskView.destinationToken"],
      "35.stackedRiskView.stateValidation": ["35.riskView.stateValidation"],
      "35.stackedRiskView.dataAvailability": ["35.riskView.dataAvailability"],
      "35.stackedRiskView.exitWindow": ["35.riskView.exitWindow"],
      "35.stackedRiskView.validatedBy": ["35.riskView.validatedBy"],
      "35.stackedRiskView.destinationToken": ["35.riskView.destinationToken"],
      "38.stackedRiskView.stateValidation": ["38.riskView.stateValidation"],
      "38.stackedRiskView.dataAvailability": ["38.riskView.dataAvailability"],
      "38.stackedRiskView.exitWindow": ["38.riskView.exitWindow"],
      "38.stackedRiskView.validatedBy": ["38.riskView.validatedBy"],
      "38.stackedRiskView.destinationToken": ["38.riskView.destinationToken"],
      "42.stackedRiskView.stateValidation": ["42.riskView.stateValidation"],
      "42.stackedRiskView.dataAvailability": ["42.riskView.dataAvailability"],
      "42.stackedRiskView.exitWindow": ["42.riskView.exitWindow"],
      "42.stackedRiskView.validatedBy": ["42.riskView.validatedBy"],
      "42.stackedRiskView.destinationToken": ["42.riskView.destinationToken"]
    }
  }
}
